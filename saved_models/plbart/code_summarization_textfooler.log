textattack: Running 8 worker(s) on 8 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1055.70it/s][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1368.23it/s][Succeeded / Failed / Skipped / Total] 1 / 2 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 1440.68it/s][Succeeded / Failed / Skipped / Total] 2 / 2 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 1442.46it/s][Succeeded / Failed / Skipped / Total] 2 / 2 / 1 / 5:   0%|          | 5/1000 [00:00<00:00, 1663.09it/s][Succeeded / Failed / Skipped / Total] 3 / 2 / 1 / 6:   1%|          | 6/1000 [00:00<00:00, 1794.10it/s]--------------------------------------------- Result 1 ---------------------------------------------
Creates an observable from the source --> Adapts source to RxJava --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[adapting]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Allocate the first non - zero queue . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > [[q]] = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( [[q]] . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { [[q]] . offer ( value ) ; } } else { [[q]] . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( [[q]] , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[trackless]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > [[correspondent]] = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( [[correspondent]] . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { [[correspondent]] . offer ( value ) ; } } else { [[correspondent]] . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( [[correspondent]] , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 3 ---------------------------------------------
Creates sorted sort order . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[grades]] ( Comparator < ? super T > [[stretchy]] ) { ObjectHelper . requireNonNull ( [[stretchy]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[stretchy]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 4 ---------------------------------------------
Obtain the observable for the given scheduler --> Obtain a observable for a commandant --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > [[co]] , final Scheduler scheduler ) { final Observable < T > observable = [[co]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[co]] , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > [[commandant]] , final Scheduler scheduler ) { final Observable < T > observable = [[commandant]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[commandant]] , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 5 ---------------------------------------------
Create new data processor --> [[[SKIPPED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 6 ---------------------------------------------
Create an instance of UnicastProcessor . --> Create a newicastProcessor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[albertine]] ) { return new UnicastProcessor < T > ( [[albertine]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 2 / 1 / 7:   1%|          | 7/1000 [00:00<00:00, 1756.30it/s][Succeeded / Failed / Skipped / Total] 4 / 3 / 1 / 8:   1%|          | 8/1000 [00:00<00:00, 1842.74it/s][Succeeded / Failed / Skipped / Total] 5 / 3 / 1 / 9:   1%|          | 9/1000 [00:00<00:00, 1831.13it/s][Succeeded / Failed / Skipped / Total] 6 / 3 / 1 / 10:   1%|          | 10/1000 [00:00<00:00, 1908.67it/s][Succeeded / Failed / Skipped / Total] 7 / 3 / 1 / 11:   1%|          | 11/1000 [00:00<00:00, 1845.86it/s]Resets the configuration . --> reactivate thread --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[reactivate]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 8 ---------------------------------------------
Create a scalar UMap . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[fixings]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 9 ---------------------------------------------
Creates a new Maybe from the completableSource . --> Get the deemed --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[deemed]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 10 ---------------------------------------------
Creates a new object from a single source . --> Get frederica for the given source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[frederica]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 11 ---------------------------------------------
Attempts to retrieve a Publisher from the source --> Performs snipers --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "[[True]]" == "[[True]]" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[mapper]] . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "[[True]]" == "[[True]]" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "[[True]]" == "[[True]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[snipers]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > [[anointed]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[Trusty]]" == "[[Trusty]]" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "[[Trusty]]" == "[[Trusty]]" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[anointed]] . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[Trusty]]" == "[[Trusty]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[Trusty]]" == "[[Trusty]]" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "[[Trusty]]" == "[[Trusty]]" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "[[Trusty]]" == "[[Trusty]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 12 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 7 / 4 / 1 / 12:   1%|          | 12/1000 [00:00<00:00, 1907.66it/s][Succeeded / Failed / Skipped / Total] 8 / 4 / 1 / 13:   1%|▏         | 13/1000 [00:00<00:00, 1922.91it/s][Succeeded / Failed / Skipped / Total] 8 / 5 / 1 / 14:   1%|▏         | 14/1000 [00:00<00:00, 1914.90it/s][Succeeded / Failed / Skipped / Total] 8 / 6 / 1 / 15:   2%|▏         | 15/1000 [00:00<00:00, 1962.28it/s][Succeeded / Failed / Skipped / Total] 9 / 6 / 1 / 16:   2%|▏         | 16/1000 [00:00<00:00, 1964.32it/s][Succeeded / Failed / Skipped / Total] 10 / 6 / 1 / 17:   2%|▏         | 17/1000 [00:00<00:00, 1997.29it/s][Succeeded / Failed / Skipped / Total] 11 / 6 / 1 / 18:   2%|▏         | 18/1000 [00:00<00:00, 1986.83it/s][Succeeded / Failed / Skipped / Total] 12 / 6 / 1 / 19:   2%|▏         | 19/1000 [00:00<00:00, 2019.10it/s][Succeeded / Failed / Skipped / Total] 12 / 7 / 1 / 20:   2%|▏         | 20/1000 [00:00<00:00, 2038.30it/s][Succeeded / Failed / Skipped / Total] 13 / 7 / 1 / 21:   2%|▏         | 21/1000 [00:00<00:00, 2018.66it/s][Succeeded / Failed / Skipped / Total] 13 / 8 / 1 / 22:   2%|▏         | 22/1000 [00:00<00:00, 2018.04it/s]Throws an NullPointerException when the given object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[billion]] > [[billion]] requireNonNull ( [[billion]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 13 ---------------------------------------------
Returns the identity function . --> Return votre --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[votre]] > Function < [[votre]] , [[votre]] > [[definition]] ( ) { return ( Function < [[votre]] , [[votre]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 14 ---------------------------------------------
Get a single element retrying if any . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[timetable]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[timetable]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 15 ---------------------------------------------
Returns a Callable instance for the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[ongoing]] ( T [[bravery]] ) { return new JustValue < Object , T > ( [[bravery]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
Creates an empty subject . --> Get a new subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[institution]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 17 ---------------------------------------------
Create a new CastToClass with the given target class . --> CastToClass to votre --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > target ) { return new CastToClass < [[T]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[votre]] , U > Function < [[votre]] , U > [[fox]] ( Class < U > target ) { return new CastToClass < [[votre]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 18 ---------------------------------------------
Creates a new UnicastSubject . --> Create a newicastSubject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[nunchaku]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[nunchaku]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 19 ---------------------------------------------
Creates a Unicast subject with the specified capacityHint . --> Get a new archicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[architectural]] ( int [[leonid]] ) { return new UnicastSubject < T > ( [[leonid]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 20 ---------------------------------------------
Convenience function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > justFunction ( U value ) { return new JustValue < [[T]] , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[your]] , U > Function < [[your]] , U > justFunction ( U value ) { return new JustValue < [[your]] , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 21 ---------------------------------------------
Creates a new UnicastSubject . --> Create new Unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[capacityHint]] , Runnable onTerminate ) { return new UnicastSubject < T > ( [[capacityHint]] , onTerminate , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[sambas]] , Runnable onTerminate ) { return new UnicastSubject < T > ( [[sambas]] , onTerminate , "[[Candid]]" == "[[Candid]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 22 ---------------------------------------------
Returns the error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[dina]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
[Succeeded / Failed / Skipped / Total] 14 / 8 / 1 / 23:   2%|▏         | 23/1000 [00:00<00:00, 2027.34it/s][Succeeded / Failed / Skipped / Total] 14 / 9 / 1 / 24:   2%|▏         | 24/1000 [00:00<00:00, 2058.98it/s][Succeeded / Failed / Skipped / Total] 15 / 9 / 1 / 25:   2%|▎         | 25/1000 [00:00<00:00, 2059.02it/s][Succeeded / Failed / Skipped / Total] 16 / 9 / 1 / 26:   3%|▎         | 26/1000 [00:00<00:00, 2076.23it/s][Succeeded / Failed / Skipped / Total] 17 / 9 / 1 / 27:   3%|▎         | 27/1000 [00:00<00:00, 2068.99it/s][Succeeded / Failed / Skipped / Total] 18 / 9 / 1 / 28:   3%|▎         | 28/1000 [00:00<00:00, 2067.07it/s][Succeeded / Failed / Skipped / Total] 19 / 9 / 1 / 29:   3%|▎         | 29/1000 [00:00<00:00, 2074.48it/s]--------------------------------------------- Result 23 ---------------------------------------------
Gets the error . --> stormtro a message --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[stormtrooper]] ( long timeout , TimeUnit [[addictions]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[addictions]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[addictions]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 24 ---------------------------------------------
Returns the current value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[watty]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 25 ---------------------------------------------
Adds the given object to the list . --> Setter for Object o --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[addition]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 26 ---------------------------------------------
Waits until the given number of times have completed . --> Completes an quadriplegic --> Socre: 1.0

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[quadriplegic]] ( long timeout , TimeUnit [[formations]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[formations]] ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 27 ---------------------------------------------
Drains all the elements in the queue . --> phonebook --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean [[delayError]] , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , [[delayError]] , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long [[r]] = qd . requested ( ) ; if ( [[r]] != 0L ) { if ( qd . accept ( a , v ) ) { if ( [[r]] != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[phonebook]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean [[mchenry]] , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , [[mchenry]] , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long [[f]] = qd . requested ( ) ; if ( [[f]] != 0L ) { if ( qd . accept ( a , v ) ) { if ( [[f]] != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 28 ---------------------------------------------
Request a request message . --> Request a request --> Socre: 1.0

[[[[Adv]]]]: public static void request ( Subscription [[s]] , int prefetch ) { [[s]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void request ( Subscription [[di]] , int prefetch ) { [[di]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 29 ---------------------------------------------
Validates the given Subscription . --> Validates maxima --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Subscription [[upstream]] , Subscription [[next]] , Class < ? > [[subscriber]] ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( [[upstream]] != null ) { [[next]] . cancel ( ) ; if ( [[upstream]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[subscriber]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription [[maxima]] , Subscription [[closest]] , Class < ? > [[talkers]] ) { ObjectHelper . requireNonNull ( [[closest]] , "next is null" ) ; if ( [[maxima]] != null ) { [[closest]] . cancel ( ) ; if ( [[maxima]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[talkers]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 30 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 20 / 9 / 1 / 30:   3%|▎         | 30/1000 [00:00<00:00, 2073.92it/s][Succeeded / Failed / Skipped / Total] 21 / 9 / 1 / 31:   3%|▎         | 31/1000 [00:00<00:00, 2043.56it/s][Succeeded / Failed / Skipped / Total] 22 / 9 / 1 / 32:   3%|▎         | 32/1000 [00:00<00:00, 2051.19it/s][Succeeded / Failed / Skipped / Total] 23 / 9 / 1 / 33:   3%|▎         | 33/1000 [00:00<00:00, 2036.91it/s][Succeeded / Failed / Skipped / Total] 23 / 10 / 1 / 34:   3%|▎         | 34/1000 [00:00<00:00, 2050.56it/s][Succeeded / Failed / Skipped / Total] 24 / 10 / 1 / 35:   4%|▎         | 35/1000 [00:00<00:00, 2073.63it/s][Succeeded / Failed / Skipped / Total] 25 / 10 / 1 / 36:   4%|▎         | 36/1000 [00:00<00:00, 2092.79it/s]Sets the upstream AtomicReference for the next Disposable . --> look ahead of supervises --> Socre: 1.0

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > upstream , Disposable [[next]] , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > upstream , Disposable [[looming]] , Class < ? > [[supervises]] ) { ObjectHelper . requireNonNull ( [[looming]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[looming]] ) ) { [[looming]] . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[supervises]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 31 ---------------------------------------------
Returns true if the Disposable upstream is non - null . --> Validates two Disposables --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > [[sighting]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[sighting]] ) ; } return "[[Forger]]" != "[[Forger]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
Sets the subscription . --> Try to cancel the stream --> Socre: 1.0

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( s ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[devotedly]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[uno]] = actual ; if ( [[uno]] != null && cancelOnReplace ) { [[uno]] . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription [[uno]] = missedSubscription . getAndSet ( s ) ; if ( [[uno]] != null && cancelOnReplace ) { [[uno]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 33 ---------------------------------------------
Post complete . --> dango s function --> Socre: 1.0

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > [[actual]] , Queue < T > queue , AtomicLong [[state]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { [[actual]] . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[state]] . get ( ) , [[actual]] , queue , [[state]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[state]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[dango]] ( Subscriber < ? super T > [[meaningful]] , Queue < T > queue , AtomicLong [[staten]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { [[meaningful]] . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[staten]] . get ( ) , [[meaningful]] , queue , [[staten]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[staten]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 34 ---------------------------------------------
Create a new ScheduledExecutorService . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[engenders]] ( ThreadFactory [[herbs]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[herbs]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 35 ---------------------------------------------
Shuts down the ScheduledExecutorService . --> clear POOLS --> Socre: 1.0

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[sealing]] ( ) { ScheduledExecutorService [[boot]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[boot]] != null ) { [[boot]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 36 ---------------------------------------------
Add a Long . MAX_VALUE . --> Number of b --> Socre: 1.0

[[[[Adv]]]]: public static long [[addCap]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[nought]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 37 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 26 / 10 / 1 / 37:   4%|▎         | 37/1000 [00:00<00:00, 2101.58it/s][Succeeded / Failed / Skipped / Total] 26 / 11 / 1 / 38:   4%|▍         | 38/1000 [00:00<00:00, 2117.80it/s][Succeeded / Failed / Skipped / Total] 27 / 11 / 1 / 39:   4%|▍         | 39/1000 [00:00<00:00, 2112.21it/s][Succeeded / Failed / Skipped / Total] 27 / 12 / 1 / 40:   4%|▍         | 40/1000 [00:00<00:00, 2127.71it/s][Succeeded / Failed / Skipped / Total] 28 / 12 / 1 / 41:   4%|▍         | 41/1000 [00:00<00:00, 2126.85it/s][Succeeded / Failed / Skipped / Total] 28 / 13 / 1 / 42:   4%|▍         | 42/1000 [00:00<00:00, 2138.91it/s][Succeeded / Failed / Skipped / Total] 29 / 13 / 1 / 43:   4%|▍         | 43/1000 [00:00<00:00, 2152.18it/s][Succeeded / Failed / Skipped / Total] 29 / 14 / 1 / 44:   4%|▍         | 44/1000 [00:00<00:00, 2171.25it/s]Multiply two values --> Multiply b --> Socre: 1.0

[[[[Adv]]]]: public static long multiplyCap ( long [[a]] , long b ) { long u = [[a]] * b ; if ( ( ( [[a]] | b ) >>> 31 ) != 0 ) { if ( u / [[a]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long [[alia]] , long b ) { long u = [[alia]] * b ; if ( ( ( [[alia]] | b ) >>> 31 ) != 0 ) { if ( u / [[alia]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 38 ---------------------------------------------
Wraps the given exception . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable error ) { if ( error instanceof Error ) { throw ( Error ) error ; } if ( error instanceof RuntimeException ) { return ( RuntimeException ) error ; } return new RuntimeException ( error ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[dullard]] ( Throwable error ) { if ( error instanceof Error ) { throw ( Error ) error ; } if ( error instanceof RuntimeException ) { return ( RuntimeException ) error ; } return new RuntimeException ( error ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 39 ---------------------------------------------
Completes the given n . --> Completes this R n --> Socre: 1.0

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long [[r]] = get ( ) ; if ( ( [[r]] & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( [[r]] & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long [[cs]] = get ( ) ; if ( ( [[cs]] & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( [[cs]] & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 40 ---------------------------------------------
Get the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[buffy]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 41 ---------------------------------------------
Recovers the queue . --> For testing only --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[sustainability]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 42 ---------------------------------------------
Convert an exception to a npe . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[lumumba]] ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 43 ---------------------------------------------
Adds a new long to the queue . --> additive --> Socre: 1.0

[[[[Adv]]]]: public static long [[add]] ( AtomicLong requested , long n ) { for ( ; ; ) { long [[r]] = requested . get ( ) ; if ( [[r]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[u]] = addCap ( [[r]] , n ) ; if ( requested . compareAndSet ( [[r]] , [[u]] ) ) { return [[r]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[additive]] ( AtomicLong requested , long n ) { for ( ; ; ) { long [[phosphorous]] = requested . get ( ) ; if ( [[phosphorous]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[yu]] = addCap ( [[phosphorous]] , n ) ; if ( requested . compareAndSet ( [[phosphorous]] , [[yu]] ) ) { return [[phosphorous]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 44 ---------------------------------------------
Returns the size of the resources . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[confection]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[defines]] = resources ; return [[defines]] != null ? [[defines]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 45 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 14 / 1 / 45:   4%|▍         | 45/1000 [00:00<00:00, 2175.19it/s][Succeeded / Failed / Skipped / Total] 30 / 15 / 1 / 46:   5%|▍         | 46/1000 [00:00<00:00, 2190.78it/s][Succeeded / Failed / Skipped / Total] 31 / 15 / 1 / 47:   5%|▍         | 47/1000 [00:00<00:00, 2205.85it/s][Succeeded / Failed / Skipped / Total] 32 / 15 / 1 / 48:   5%|▍         | 48/1000 [00:00<00:00, 2222.05it/s][Succeeded / Failed / Skipped / Total] 33 / 15 / 1 / 49:   5%|▍         | 49/1000 [00:00<00:00, 2226.13it/s][Succeeded / Failed / Skipped / Total] 34 / 15 / 1 / 50:   5%|▌         | 50/1000 [00:00<00:00, 2233.22it/s][Succeeded / Failed / Skipped / Total] 35 / 15 / 1 / 51:   5%|▌         | 51/1000 [00:00<00:00, 2249.88it/s]Flatten the given exception into a list . --> Destroys the given exception --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable [[e]] = deque . removeFirst ( ) ; if ( [[e]] instanceof CompositeException ) { CompositeException ce = ( CompositeException ) [[e]] ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { list . add ( [[e]] ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[destroy]] ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable [[b]] = deque . removeFirst ( ) ; if ( [[b]] instanceof CompositeException ) { CompositeException ce = ( CompositeException ) [[b]] ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { list . add ( [[b]] ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 46 ---------------------------------------------
Create a new observable with the given value --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[burg]] ( T [[valuation]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[delish]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[valuation]] , [[delish]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 47 ---------------------------------------------
Checks if the given exception throws an exception . --> Throws the throw exception if it is enabled --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[f]] [[expansion]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[f]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[f]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 48 ---------------------------------------------
Removes all resources from the list . --> F743 - 5 --> Socre: 1.0

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[perceptible]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[defines]] ; synchronized ( this ) { if ( disposed ) { return ; } [[defines]] = resources ; resources = null ; } dispose ( [[defines]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 49 ---------------------------------------------
Inserts the given element into the queue . --> Offers a new element --> Socre: 1.0

[[[[Adv]]]]: public boolean offer ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "[[True]]" == "[[True]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean offer ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "[[Velma]]" == "[[Velma]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 50 ---------------------------------------------
Sets the upstream AtomicReference to the next AtomicReference . --> private static final int --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > [[subscriber]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[subscriber]] ) ; } return "[[False]]" != "[[False]]" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[whacko]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > [[consumer]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[consumer]] ) ; } return "[[Fallacious]]" != "[[Fallacious]]" ; } return "[[Candid]]" == "[[Candid]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 51 ---------------------------------------------
Start Unbounded . --> Get kazimierz --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[kazimierz]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 52 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 36 / 15 / 1 / 52:   5%|▌         | 52/1000 [00:00<00:00, 2234.74it/s][Succeeded / Failed / Skipped / Total] 37 / 15 / 1 / 53:   5%|▌         | 53/1000 [00:00<00:00, 2247.23it/s][Succeeded / Failed / Skipped / Total] 37 / 16 / 1 / 54:   5%|▌         | 54/1000 [00:00<00:00, 2264.09it/s][Succeeded / Failed / Skipped / Total] 38 / 16 / 1 / 55:   6%|▌         | 55/1000 [00:00<00:00, 2274.64it/s][Succeeded / Failed / Skipped / Total] 39 / 16 / 1 / 56:   6%|▌         | 56/1000 [00:00<00:00, 2289.38it/s][Succeeded / Failed / Skipped / Total] 40 / 16 / 1 / 57:   6%|▌         | 57/1000 [00:00<00:00, 2304.81it/s][Succeeded / Failed / Skipped / Total] 40 / 16 / 1 / 57:   6%|▌         | 58/1000 [00:03<01:01, 15.28it/s]  [Succeeded / Failed / Skipped / Total] 41 / 16 / 1 / 58:   6%|▌         | 58/1000 [00:03<01:01, 15.28it/s]Tries to try to locate aScalar XMapSubscribe . --> grievances an observer --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > [[source]] , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[grievances]] ( ObservableSource < T > [[melted]] , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[melted]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[melted]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 53 ---------------------------------------------
Called when an error occurs . --> FUSED - 1 --> Socre: 1.0

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[awry]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 54 ---------------------------------------------
Start the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[introductory]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 55 ---------------------------------------------
Completes the value . --> FUSED - 1 --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( T [[value]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[a]] = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[value]] ; lazySet ( FUSED_READY ) ; [[a]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[a]] . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { [[a]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[finite]] ( T [[appreciated]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[anche]] = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[appreciated]] ; lazySet ( FUSED_READY ) ; [[anche]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[anche]] . onNext ( [[appreciated]] ) ; } if ( get ( ) != DISPOSED ) { [[anche]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 56 ---------------------------------------------
Get the disposed . --> Get Disposables object --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[learns]] ( ) { Disposable [[k]] = resource . get ( ) ; if ( [[k]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[k]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 57 ---------------------------------------------
Called when complete is enabled . --> FUSED_CONSUMED | DISPOSED --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[complemented]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 58 ---------------------------------------------
Issues a request . --> Request for nah --> Socre: 1.0

[[[[Adv]]]]: protected final void request ( long [[n]] ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( [[n]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void request ( long [[nah]] ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( [[nah]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 59 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 16 / 1 / 59:   6%|▌         | 59/1000 [00:04<01:08, 13.83it/s][Succeeded / Failed / Skipped / Total] 43 / 16 / 1 / 60:   6%|▌         | 60/1000 [00:05<01:20, 11.61it/s][Succeeded / Failed / Skipped / Total] 44 / 16 / 1 / 61:   6%|▌         | 61/1000 [00:06<01:43,  9.04it/s][Succeeded / Failed / Skipped / Total] 44 / 17 / 1 / 62:   6%|▌         | 62/1000 [00:08<02:13,  7.04it/s][Succeeded / Failed / Skipped / Total] 45 / 17 / 1 / 63:   6%|▋         | 63/1000 [00:12<03:05,  5.04it/s][Succeeded / Failed / Skipped / Total] 46 / 17 / 1 / 64:   6%|▋         | 64/1000 [00:13<03:14,  4.81it/s][Succeeded / Failed / Skipped / Total] 47 / 17 / 1 / 65:   6%|▋         | 65/1000 [00:16<03:54,  3.99it/s]Concatenates the passed in sequence . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[josiah]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[kristy]] ) { return [[josiah]] ( [[kristy]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 60 ---------------------------------------------
Waits for the consumer to be executed . --> Set anticipation --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[anticipation]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[anticipation]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 61 ---------------------------------------------
Get the concat mapDelay error . --> Untrustworthy function --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return [[concatMapDelayError]] ( [[mapper]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[untrustworthy]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[breakf]] ) { return [[untrustworthy]] ( [[breakf]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 62 ---------------------------------------------
Returns an ordered sorted sort of the given sort function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorting]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 63 ---------------------------------------------
Creates a flowable with the specified scheduler . --> Create a flowable from cf --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[grate]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 64 ---------------------------------------------
Removes all elements from the stream . --> withdrawal method --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[withdrawal]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 65 ---------------------------------------------
Sets the amount of times in milliseconds . --> Fractures amount of time --> Socre: 1.0

[[[[Adv]]]]: public void [[setDelay]] ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[fractures]] ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 66 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 48 / 17 / 1 / 66:   7%|▋         | 66/1000 [00:19<04:39,  3.34it/s][Succeeded / Failed / Skipped / Total] 48 / 18 / 1 / 67:   7%|▋         | 67/1000 [00:24<05:37,  2.77it/s][Succeeded / Failed / Skipped / Total] 48 / 19 / 1 / 68:   7%|▋         | 68/1000 [00:25<05:49,  2.67it/s][Succeeded / Failed / Skipped / Total] 49 / 19 / 1 / 69:   7%|▋         | 69/1000 [00:29<06:39,  2.33it/s][Succeeded / Failed / Skipped / Total] 50 / 19 / 1 / 70:   7%|▋         | 70/1000 [00:35<07:50,  1.98it/s][Succeeded / Failed / Skipped / Total] 50 / 20 / 1 / 71:   7%|▋         | 71/1000 [00:37<08:12,  1.89it/s][Succeeded / Failed / Skipped / Total] 51 / 20 / 1 / 72:   7%|▋         | 72/1000 [00:37<08:05,  1.91it/s]Create sample data . --> Create sample data --> Socre: 1.0

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[auth]] = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[hillard]] = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 67 ---------------------------------------------
Creates the error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[bogeyman]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 68 ---------------------------------------------
Accepts a subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > subscriber ) { Object [ ] [[a]] = head ; final int [[c]] = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < [[c]] ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } [[a]] = ( Object [ ] ) [[a]] [ [[c]] ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[acknowledges]] ( Subscriber < ? super U > subscriber ) { Object [ ] [[alia]] = head ; final int [[third]] = capacity ; while ( [[alia]] != null ) { for ( int i = 0 ; i < [[third]] ; i ++ ) { Object o = [[alia]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } [[alia]] = ( Object [ ] ) [[alia]] [ [[third]] ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 69 ---------------------------------------------
Returns the HttpMethod object for the given string . --> Ongoing mode --> Socre: 1.0

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[ongoing]] ( String [[forms]] ) { try { return HttpMethod . valueOf ( [[forms]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 70 ---------------------------------------------
Search for the context . --> Search for attributes . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[template]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[template]] . setSearchControls ( searchControls ) ; try { return [[template]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[gmail]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[gmail]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[modelled]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[modelled]] . setSearchControls ( searchControls ) ; try { return [[modelled]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[gmail]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[gmail]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 71 ---------------------------------------------
Accepts an observer . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] [[mejor]] = head ; final int c = capacity ; while ( [[mejor]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[mejor]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } [[mejor]] = ( Object [ ] ) [[mejor]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 72 ---------------------------------------------
Encode a raw password . --> Gets encryption --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( CharSequence rawPassword ) { String [[salt]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[encryption]] ( CharSequence rawPassword ) { String [[briny]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[briny]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 73 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 52 / 20 / 1 / 73:   7%|▋         | 73/1000 [00:37<08:00,  1.93it/s][Succeeded / Failed / Skipped / Total] 52 / 21 / 1 / 74:   7%|▋         | 74/1000 [00:40<08:21,  1.85it/s][Succeeded / Failed / Skipped / Total] 53 / 21 / 1 / 75:   8%|▊         | 75/1000 [00:43<09:02,  1.71it/s][Succeeded / Failed / Skipped / Total] 54 / 21 / 1 / 76:   8%|▊         | 76/1000 [00:46<09:20,  1.65it/s][Succeeded / Failed / Skipped / Total] 55 / 21 / 1 / 77:   8%|▊         | 77/1000 [00:52<10:27,  1.47it/s][Succeeded / Failed / Skipped / Total] 56 / 21 / 1 / 78:   8%|▊         | 78/1000 [00:54<10:38,  1.44it/s][Succeeded / Failed / Skipped / Total] 56 / 22 / 1 / 79:   8%|▊         | 79/1000 [00:55<10:44,  1.43it/s][Succeeded / Failed / Skipped / Total] 57 / 22 / 1 / 80:   8%|▊         | 80/1000 [00:55<10:36,  1.45it/s]Checks if the version is valid . --> If the minimumSpringVersion is null return the minSpringVersion --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[amsterdam]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 74 ---------------------------------------------
Calculates the delta for the specified time unit . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit [[unit]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[jansen]] ( TimeUnit [[unifying]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 75 ---------------------------------------------
Returns true if the encoded password matches the raw password . --> Returns true if raw ledge is partner . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence rawPassword , String [[encodedPassword]] ) { String salt = extractSalt ( [[encodedPassword]] ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[partner]] ( CharSequence rawPassword , String [[ledge]] ) { String salt = extractSalt ( [[ledge]] ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( [[ledge]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 76 ---------------------------------------------
Default implementation of oauth2Client . --> Returns an oauth2ClientConfigurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[incas]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[incas]] ) ; return [[incas]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 77 ---------------------------------------------
Adds the subscribers . --> Methode d n + 1 --> Socre: 1.0

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED ) { return "False" != "False" ; } int n = [[a]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[b]] = new PublishDisposable [ n + 1 ] ; System . arraycopy ( [[a]] , 0 , [[b]] , 0 , n ) ; [[b]] [ n ] = [[ps]] ; if ( subscribers . compareAndSet ( [[a]] , [[b]] ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[insertion]] ( PublishDisposable < T > [[sf]] ) { for ( ; ; ) { PublishDisposable < T > [ ] [[esta]] = subscribers . get ( ) ; if ( [[esta]] == TERMINATED ) { return "False" != "False" ; } int n = [[esta]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[johnston]] = new PublishDisposable [ n + 1 ] ; System . arraycopy ( [[esta]] , 0 , [[johnston]] , 0 , n ) ; [[johnston]] [ n ] = [[sf]] ; if ( subscribers . compareAndSet ( [[esta]] , [[johnston]] ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 78 ---------------------------------------------
Adds an AttributeExchangeConfigurer . --> diluted --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer [[attributeExchange]] ( String identifierPattern ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer [[diluted]] ( String identifierPattern ) { AttributeExchangeConfigurer [[brickworks]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[brickworks]] ) ; return [[brickworks]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 79 ---------------------------------------------
Gets the provider version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[anthology]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 80 ---------------------------------------------
Default configurationurer . --> A convenience method for untrustworthy --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[untrustworthy]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[distrust]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[distrust]] ) ; return [[distrust]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 81 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 57 / 23 / 1 / 81:   8%|▊         | 81/1000 [01:05<12:23,  1.24it/s][Succeeded / Failed / Skipped / Total] 58 / 23 / 1 / 82:   8%|▊         | 82/1000 [01:07<12:36,  1.21it/s][Succeeded / Failed / Skipped / Total] 58 / 24 / 1 / 83:   8%|▊         | 83/1000 [01:11<13:07,  1.16it/s][Succeeded / Failed / Skipped / Total] 59 / 24 / 1 / 84:   8%|▊         | 84/1000 [01:11<13:00,  1.17it/s][Succeeded / Failed / Skipped / Total] 60 / 24 / 1 / 85:   8%|▊         | 85/1000 [01:11<12:54,  1.18it/s]Returns a new read - only security registry . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[crowley]] ( ) throws Exception { ApplicationContext [[fount]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[fount]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 82 ---------------------------------------------
Search for entry under DN --> Searches the results of a given entry under a DN --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > [[results]] = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } [[results]] . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( [[results]] . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( [[results]] . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , [[results]] . size ( ) ) ; } return [[results]] . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > [[attainment]] = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } [[attainment]] . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( [[attainment]] . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( [[attainment]] . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , [[attainment]] . size ( ) ) ; } return [[attainment]] . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 83 ---------------------------------------------
Checks if the given spring version is disabled . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean disableChecks ( String springVersion , String [[springSecurityVersion]] ) { if ( springVersion == null || springVersion . equals ( [[springSecurityVersion]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String springVersion , String [[crawlers]] ) { if ( springVersion == null || springVersion . equals ( [[crawlers]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 84 ---------------------------------------------
Retrieve a single entry from an LDAP server . --> Execute anOperations for beryl --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext [[ctx]] ) throws NamingException { Attributes attrs = [[ctx]] . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[beryl]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext [[req]] ) throws NamingException { Attributes attrs = [[req]] . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 85 ---------------------------------------------
Builds a searchControls . --> Returns a new searchControls --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[akin]] ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 86 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 61 / 24 / 1 / 86:   9%|▊         | 86/1000 [01:17<13:48,  1.10it/s][Succeeded / Failed / Skipped / Total] 62 / 24 / 1 / 87:   9%|▊         | 87/1000 [01:18<13:39,  1.11it/s][Succeeded / Failed / Skipped / Total] 63 / 24 / 1 / 88:   9%|▉         | 88/1000 [01:25<14:49,  1.03it/s]Compare the supplied string with the supplied value . --> Compares dn and extent --> Socre: 1.0

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object [[value]] ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { [[value]] } , ctls ) ; Boolean [[match]] = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return [[match]] ; } } Boolean [[matches]] = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return [[matches]] . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object [[extent]] ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { [[extent]] } , ctls ) ; Boolean [[equivalency]] = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return [[equivalency]] ; } } Boolean [[corresponded]] = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return [[corresponded]] . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 87 ---------------------------------------------
Create servlet api filter . --> CreateServletApiFilter . --> Socre: 1.0

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String [[provideServletApi]] = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[provideServletApi]] ) ) { [[provideServletApi]] = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( [[provideServletApi]] ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String [[chronic]] = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[chronic]] ) ) { [[chronic]] = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( [[chronic]] ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 88 ---------------------------------------------
Create bean definition . --> Create an embedded server --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element [[element]] , ParserContext parserContext ) { Object source = parserContext . extractSource ( [[element]] ) ; String suffix = [[element]] . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = [[element]] . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = [[element]] . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , [[element]] ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element [[factor]] , ParserContext parserContext ) { Object source = parserContext . extractSource ( [[factor]] ) ; String suffix = [[factor]] . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = [[factor]] . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = [[factor]] . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , [[factor]] ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 89 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 64 / 24 / 1 / 89:   9%|▉         | 89/1000 [01:26<14:48,  1.02it/s][Succeeded / Failed / Skipped / Total] 64 / 25 / 1 / 90:   9%|▉         | 90/1000 [01:27<14:42,  1.03it/s][Succeeded / Failed / Skipped / Total] 65 / 25 / 1 / 91:   9%|▉         | 91/1000 [01:30<15:01,  1.01it/s][Succeeded / Failed / Skipped / Total] 65 / 26 / 1 / 92:   9%|▉         | 92/1000 [01:32<15:11,  1.00s/it][Succeeded / Failed / Skipped / Total] 66 / 26 / 1 / 93:   9%|▉         | 93/1000 [01:33<15:14,  1.01s/it][Succeeded / Failed / Skipped / Total] 67 / 26 / 1 / 94:   9%|▉         | 94/1000 [01:38<15:46,  1.05s/it]Parses the annotations . --> Handles HttpServiceMethod request --> Socre: 1.0

[[[[Adv]]]]: static < [[ResponseT]] , ReturnT > HttpServiceMethod < [[ResponseT]] , ReturnT > [[parseAnnotations]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean [[isKotlinSuspendFunction]] = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type [[adapterType]] ; if ( [[isKotlinSuspendFunction]] ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < [[canon]] , ReturnT > HttpServiceMethod < [[canon]] , ReturnT > [[amok]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean [[awhile]] = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type [[jamie]] ; if ( [[awhile]] ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 90 ---------------------------------------------
Search for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[phonebook]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 91 ---------------------------------------------
Create the appropriate Jaas API filter . --> escalates --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[escalates]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 92 ---------------------------------------------
Creates a default type resolver . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[ongoing]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[fruits]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[fruits]] = [[fruits]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[fruits]] = [[fruits]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[fruits]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 93 ---------------------------------------------
Insert the spring security filter --> Insert Spring security filter --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String [[filterName]] = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( [[filterName]] ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , [[filterName]] , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String [[barfing]] = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( [[barfing]] ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , [[barfing]] , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 94 ---------------------------------------------
Creates a new instance of Cipher . --> Geysers the given algorithm --> Socre: 1.0

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[geysers]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 95 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 27 / 1 / 95:  10%|▉         | 95/1000 [01:44<16:31,  1.10s/it][Succeeded / Failed / Skipped / Total] 68 / 27 / 1 / 96:  10%|▉         | 96/1000 [01:47<16:48,  1.12s/it][Succeeded / Failed / Skipped / Total] 69 / 27 / 1 / 97:  10%|▉         | 97/1000 [01:48<16:54,  1.12s/it][Succeeded / Failed / Skipped / Total] 69 / 28 / 1 / 98:  10%|▉         | 98/1000 [01:53<17:25,  1.16s/it][Succeeded / Failed / Skipped / Total] 70 / 28 / 1 / 99:  10%|▉         | 99/1000 [01:54<17:20,  1.15s/it]Check if properties are set . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[kools]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 96 ---------------------------------------------
Get the list of authorities associated with the given attributes . --> Get all trappings --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String attribute : [[attributes]] ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[baumann]] ( Collection < String > [[trappings]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[trappings]] . size ( ) ) ; for ( String attribute : [[trappings]] ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 97 ---------------------------------------------
Is principal changed? --> dissertation a request --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[dissertation]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 98 ---------------------------------------------
Build the authentication details . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest [[context]] ) { Collection < String > j2eeUserRoles = getUserRoles ( [[context]] ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[result]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[context]] , [[userGas]] ) ; return [[result]] ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[anon]] ( HttpServletRequest [[historic]] ) { Collection < String > j2eeUserRoles = getUserRoles ( [[historic]] ) ; Collection < ? extends GrantedAuthority > [[bournemouth]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[bournemouth]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[achievement]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[historic]] , [[bournemouth]] ) ; return [[achievement]] ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 99 ---------------------------------------------
Returns the token for a series . --> Gets PersistentRemMeToken from seriesId --> Socre: 1.0

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int [[rowNum]] ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[gush]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int [[archdeacon]] ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 100 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 71 / 28 / 1 / 100:  10%|█         | 100/1000 [01:55<17:16,  1.15s/it][Succeeded / Failed / Skipped / Total] 72 / 28 / 1 / 101:  10%|█         | 101/1000 [01:58<17:31,  1.17s/it][Succeeded / Failed / Skipped / Total] 73 / 28 / 1 / 102:  10%|█         | 102/1000 [02:01<17:45,  1.19s/it][Succeeded / Failed / Skipped / Total] 74 / 28 / 1 / 103:  10%|█         | 103/1000 [02:05<18:11,  1.22s/it][Succeeded / Failed / Skipped / Total] 75 / 28 / 1 / 104:  10%|█         | 104/1000 [02:07<18:21,  1.23s/it][Succeeded / Failed / Skipped / Total] 76 / 28 / 1 / 105:  10%|█         | 105/1000 [02:09<18:23,  1.23s/it]Lookup primary keys --> lookup primaryKeys --> Socre: 1.0

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > [[acls]] , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( [[acls]] , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( [[acls]] , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > [[meeny]] , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( [[meeny]] , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( [[meeny]] , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 101 ---------------------------------------------
Perform a filter --> diluted --> Socre: 1.0

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest [[request]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[request]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[request]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[request]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[diluted]] ( ServletRequest [[asked]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[asked]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[asked]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[asked]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 102 ---------------------------------------------
Check content length . --> Check content length --> Socre: 1.0

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int [[bufferSize]] = getBufferSize ( ) ; boolean requiresFlush = [[bufferSize]] > 0 && this . contentWritten >= [[bufferSize]] ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int [[maha]] = getBufferSize ( ) ; boolean requiresFlush = [[maha]] > 0 && this . contentWritten >= [[maha]] ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 103 ---------------------------------------------
Updates all the access values . --> Do not call this method --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[verger]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 104 ---------------------------------------------
Sets the login processing url . --> Retrieve a monte value --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String [[loginProcessingUrl]] ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[monte]] ( String [[shreveport]] ) { this . loginProcessingUrl = [[monte]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[monte]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 105 ---------------------------------------------
Returns all the authorities of the given authorities . --> map by administrations --> Socre: 1.0

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[authorities]] ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( [[authorities]] . size ( ) ) ; for ( GrantedAuthority [[authority]] : [[authorities]] ) { mapped . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[institution]] ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( [[institution]] . size ( ) ) ; for ( GrantedAuthority [[administrations]] : [[institution]] ) { mapped . add ( mapAuthority ( [[administrations]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 106 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 77 / 28 / 1 / 106:  11%|█         | 106/1000 [02:09<18:15,  1.23s/it][Succeeded / Failed / Skipped / Total] 78 / 28 / 1 / 107:  11%|█         | 107/1000 [02:13<18:33,  1.25s/it][Succeeded / Failed / Skipped / Total] 79 / 28 / 1 / 108:  11%|█         | 108/1000 [02:14<18:33,  1.25s/it][Succeeded / Failed / Skipped / Total] 80 / 28 / 1 / 109:  11%|█         | 109/1000 [02:15<18:25,  1.24s/it][Succeeded / Failed / Skipped / Total] 80 / 29 / 1 / 110:  11%|█         | 110/1000 [02:15<18:19,  1.24s/it]Process authentication . --> meeny method --> Socre: 1.0

[[[[Adv]]]]: private void [[doAuthenticate]] ( HttpServletRequest [[request]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; Object [[credentials]] = getPreAuthenticatedCredentials ( [[request]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , [[credentials]] ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[request]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[request]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void [[meeny]] ( HttpServletRequest [[invitation]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[invitation]] ) ; Object [[faculties]] = getPreAuthenticatedCredentials ( [[invitation]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , [[faculties]] ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[invitation]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[invitation]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[invitation]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 107 ---------------------------------------------
Encode cookie tokens . --> back error messages --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[backdrop]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 108 ---------------------------------------------
Map password . --> region bernstein --> Socre: 1.0

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[bernstein]] ( Object [[omit]] ) { if ( ! ( [[omit]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 109 ---------------------------------------------
Returns the cookie name . --> Return null if not found --> Socre: 1.0

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[cookie]] : cookies ) { if ( cookieName . equals ( [[cookie]] . getName ( ) ) ) { return [[cookie]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[assembler]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[bakery]] : cookies ) { if ( cookieName . equals ( [[bakery]] . getName ( ) ) ) { return [[bakery]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 110 ---------------------------------------------
Updates the current authentication defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[eliza]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 111 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 81 / 29 / 1 / 111:  11%|█         | 111/1000 [02:22<18:58,  1.28s/it][Succeeded / Failed / Skipped / Total] 81 / 30 / 1 / 112:  11%|█         | 112/1000 [02:29<19:46,  1.34s/it][Succeeded / Failed / Skipped / Total] 81 / 31 / 1 / 113:  11%|█▏        | 113/1000 [02:34<20:15,  1.37s/it][Succeeded / Failed / Skipped / Total] 82 / 31 / 1 / 114:  11%|█▏        | 114/1000 [02:37<20:20,  1.38s/it][Succeeded / Failed / Skipped / Total] 83 / 31 / 1 / 115:  12%|█▏        | 115/1000 [02:37<20:12,  1.37s/it][Succeeded / Failed / Skipped / Total] 83 / 31 / 1 / 115:  12%|█▏        | 116/1000 [02:41<20:34,  1.40s/it][Succeeded / Failed / Skipped / Total] 83 / 32 / 1 / 116:  12%|█▏        | 116/1000 [02:41<20:34,  1.40s/it][Succeeded / Failed / Skipped / Total] 83 / 32 / 1 / 116:  12%|█▏        | 117/1000 [02:43<20:37,  1.40s/it][Succeeded / Failed / Skipped / Total] 84 / 32 / 1 / 117:  12%|█▏        | 117/1000 [02:43<20:37,  1.40s/it]Returns the authentication authentication . --> Authenticate event . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[request]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[asking]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 112 ---------------------------------------------
Search for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String [[attributeName]] ) { String [ ] attributeNames = new String [ ] { [[attributeName]] } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( [[attributeName]] ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[perpetually]] ( final String base , final String filter , final Object [ ] params , final String [[amok]] ) { String [ ] attributeNames = new String [ ] { [[amok]] } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( [[amok]] ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 113 ---------------------------------------------
Get the default port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL casServiceUrl ) { int port = casServiceUrl . getPort ( ) ; if ( port == - 1 ) { port = casServiceUrl . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[seminal]] ( URL casServiceUrl ) { int port = casServiceUrl . getPort ( ) ; if ( port == - 1 ) { port = casServiceUrl . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 114 ---------------------------------------------
Sets the environment properties . --> set the default attributes --> Socre: 1.0

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[astrophysicist]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 115 ---------------------------------------------
Log authentication . --> logout function --> Socre: 1.0

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication [[authentication]] ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication [[attested]] ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 116 ---------------------------------------------
Gets the full redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[diluted]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 117 ---------------------------------------------
Render the tag . --> get trademarks --> Socre: 1.0

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[trademarks]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 118 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 85 / 32 / 1 / 118:  12%|█▏        | 118/1000 [02:44<20:26,  1.39s/it][Succeeded / Failed / Skipped / Total] 85 / 32 / 1 / 118:  12%|█▏        | 119/1000 [02:48<20:44,  1.41s/it][Succeeded / Failed / Skipped / Total] 85 / 33 / 1 / 119:  12%|█▏        | 119/1000 [02:48<20:44,  1.41s/it][Succeeded / Failed / Skipped / Total] 86 / 33 / 1 / 120:  12%|█▏        | 120/1000 [02:49<20:40,  1.41s/it][Succeeded / Failed / Skipped / Total] 86 / 33 / 1 / 120:  12%|█▏        | 121/1000 [02:50<20:35,  1.41s/it][Succeeded / Failed / Skipped / Total] 87 / 33 / 1 / 121:  12%|█▏        | 121/1000 [02:50<20:35,  1.41s/it][Succeeded / Failed / Skipped / Total] 88 / 33 / 1 / 122:  12%|█▏        | 122/1000 [02:52<20:42,  1.42s/it][Succeeded / Failed / Skipped / Total] 88 / 33 / 1 / 122:  12%|█▏        | 123/1000 [02:53<20:38,  1.41s/it]Initialize the user ordered list . --> Initialize UserDetailsService --> Socre: 1.0

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[userBuilder]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[userBuilder]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[andit]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[andit]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 119 ---------------------------------------------
Get query string . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[aerials]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 120 ---------------------------------------------
Get the principal . --> Unexplored method --> Socre: 1.0

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails [[details]] = ( LdapUserDetails ) principal ; return [[details]] . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[unexplored]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails [[clarification]] = ( LdapUserDetails ) principal ; return [[clarification]] . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 121 ---------------------------------------------
Get the UserDetailsService . --> Get UserDetailsService model --> Socre: 1.0

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[hiking]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 122 ---------------------------------------------
Add additional parameters . --> Generates a PkceParameter --> Socre: 1.0

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[luz]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 123 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 88 / 34 / 1 / 123:  12%|█▏        | 123/1000 [02:53<20:38,  1.41s/it][Succeeded / Failed / Skipped / Total] 89 / 34 / 1 / 124:  12%|█▏        | 124/1000 [03:02<21:29,  1.47s/it][Succeeded / Failed / Skipped / Total] 89 / 34 / 1 / 124:  12%|█▎        | 125/1000 [03:08<22:00,  1.51s/it][Succeeded / Failed / Skipped / Total] 89 / 35 / 1 / 125:  12%|█▎        | 125/1000 [03:08<22:00,  1.51s/it][Succeeded / Failed / Skipped / Total] 89 / 35 / 1 / 125:  13%|█▎        | 126/1000 [03:09<21:51,  1.50s/it][Succeeded / Failed / Skipped / Total] 90 / 35 / 1 / 126:  13%|█▎        | 126/1000 [03:09<21:51,  1.50s/it][Succeeded / Failed / Skipped / Total] 90 / 35 / 1 / 126:  13%|█▎        | 127/1000 [03:10<21:48,  1.50s/it][Succeeded / Failed / Skipped / Total] 90 / 36 / 1 / 127:  13%|█▎        | 127/1000 [03:10<21:48,  1.50s/it][Succeeded / Failed / Skipped / Total] 90 / 36 / 1 / 127:  13%|█▎        | 128/1000 [03:10<21:40,  1.49s/it]Sets the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected void setCookie ( String [ ] tokens , int [[maxAge]] , HttpServletRequest request , HttpServletResponse [[response]] ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( [[maxAge]] ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( [[maxAge]] < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; [[response]] . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void setCookie ( String [ ] tokens , int [[boysenberry]] , HttpServletRequest request , HttpServletResponse [[retort]] ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( [[boysenberry]] ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( [[boysenberry]] < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; [[retort]] . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 124 ---------------------------------------------
Create a MethodSecurityExpressionOperations . --> Create a MethodSecurityExpressionRoot --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication [[authentication]] , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[authentication]] ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication [[crypto]] , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[crypto]] ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 125 ---------------------------------------------
Determines if the authentication is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[endorsed]] ( ) { Authentication [[credentials]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[credentials]] != null && [[credentials]] . isAuthenticated ( ) && ! ( [[credentials]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 126 ---------------------------------------------
Returns cached jwkSet . --> Returns a Mono --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[cachedJWKSet]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[ebonics]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 127 ---------------------------------------------
Resolve a method argument . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[reactiveSecurityContext]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[reactiveSecurityContext]] == null ) { return null ; } return [[reactiveSecurityContext]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[hallucination]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[hallucination]] == null ) { return null ; } return [[hallucination]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 128 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 90 / 37 / 1 / 128:  13%|█▎        | 128/1000 [03:10<21:40,  1.49s/it][Succeeded / Failed / Skipped / Total] 90 / 37 / 1 / 128:  13%|█▎        | 129/1000 [03:16<22:05,  1.52s/it][Succeeded / Failed / Skipped / Total] 91 / 37 / 1 / 129:  13%|█▎        | 129/1000 [03:16<22:05,  1.52s/it][Succeeded / Failed / Skipped / Total] 91 / 37 / 1 / 129:  13%|█▎        | 130/1000 [03:21<22:26,  1.55s/it][Succeeded / Failed / Skipped / Total] 91 / 38 / 1 / 130:  13%|█▎        | 130/1000 [03:21<22:26,  1.55s/it][Succeeded / Failed / Skipped / Total] 91 / 38 / 1 / 130:  13%|█▎        | 131/1000 [03:21<22:19,  1.54s/it][Succeeded / Failed / Skipped / Total] 92 / 38 / 1 / 131:  13%|█▎        | 131/1000 [03:21<22:19,  1.54s/it][Succeeded / Failed / Skipped / Total] 92 / 38 / 1 / 131:  13%|█▎        | 132/1000 [03:25<22:29,  1.55s/it][Succeeded / Failed / Skipped / Total] 92 / 39 / 1 / 132:  13%|█▎        | 132/1000 [03:25<22:29,  1.55s/it][Succeeded / Failed / Skipped / Total] 92 / 39 / 1 / 132:  13%|█▎        | 133/1000 [03:26<22:27,  1.55s/it][Succeeded / Failed / Skipped / Total] 92 / 40 / 1 / 133:  13%|█▎        | 133/1000 [03:26<22:27,  1.55s/it][Succeeded / Failed / Skipped / Total] 92 / 40 / 1 / 133:  13%|█▎        | 134/1000 [03:28<22:28,  1.56s/it]Build the provider url --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > [[urls]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[urls]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : [[urls]] ) { String [[trimmedUrl]] = serverUrl . trim ( ) ; if ( "" . equals ( [[trimmedUrl]] ) ) { continue ; } providerUrl . append ( [[trimmedUrl]] ) ; if ( ! [[trimmedUrl]] . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > [[judex]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[judex]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : [[judex]] ) { String [[sussex]] = serverUrl . trim ( ) ; if ( "" . equals ( [[sussex]] ) ) { continue ; } providerUrl . append ( [[sussex]] ) ; if ( ! [[sussex]] . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 129 ---------------------------------------------
URL encode a string . --> Encodes a string . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[abra]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 130 ---------------------------------------------
Service ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { boolean [[result]] = super . requiresAuthentication ( [[request]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[drivel]] ( final HttpServletRequest [[demand]] , final HttpServletResponse response ) { boolean [[wake]] = super . requiresAuthentication ( [[demand]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[wake]] ) ; } return [[wake]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 131 ---------------------------------------------
Loads a user token . --> load userByAssertion --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion [[assertion]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[assertion]] , "" ) ; return this . [[authenticationUserDetailsService]] . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion [[complaint]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[complaint]] , "" ) ; return this . [[zigi]] . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 132 ---------------------------------------------
Returns true if the request should be used . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[turbulent]] ( final HttpServletRequest [[wondered]] ) { final boolean [[conclusions]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[wondered]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[conclusions]] ) ; } return [[conclusions]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 133 ---------------------------------------------
Determines if a service ticket request requires a service ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 134 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 92 / 41 / 1 / 134:  13%|█▎        | 134/1000 [03:28<22:28,  1.56s/it][Succeeded / Failed / Skipped / Total] 92 / 41 / 1 / 134:  14%|█▎        | 135/1000 [03:31<22:34,  1.57s/it][Succeeded / Failed / Skipped / Total] 93 / 41 / 1 / 135:  14%|█▎        | 135/1000 [03:31<22:34,  1.57s/it][Succeeded / Failed / Skipped / Total] 93 / 41 / 1 / 135:  14%|█▎        | 136/1000 [03:34<22:42,  1.58s/it][Succeeded / Failed / Skipped / Total] 94 / 41 / 1 / 136:  14%|█▎        | 136/1000 [03:34<22:42,  1.58s/it][Succeeded / Failed / Skipped / Total] 94 / 41 / 1 / 136:  14%|█▎        | 137/1000 [03:35<22:37,  1.57s/it][Succeeded / Failed / Skipped / Total] 94 / 42 / 1 / 137:  14%|█▎        | 137/1000 [03:35<22:37,  1.57s/it][Succeeded / Failed / Skipped / Total] 94 / 42 / 1 / 137:  14%|█▍        | 138/1000 [03:36<22:29,  1.57s/it][Succeeded / Failed / Skipped / Total] 94 / 43 / 1 / 138:  14%|█▍        | 138/1000 [03:36<22:29,  1.57s/it][Succeeded / Failed / Skipped / Total] 94 / 43 / 1 / 138:  14%|█▍        | 139/1000 [03:47<23:31,  1.64s/it][Succeeded / Failed / Skipped / Total] 95 / 43 / 1 / 139:  14%|█▍        | 139/1000 [03:47<23:31,  1.64s/it][Succeeded / Failed / Skipped / Total] 95 / 43 / 1 / 139:  14%|█▍        | 140/1000 [03:48<23:23,  1.63s/it][Succeeded / Failed / Skipped / Total] 96 / 43 / 1 / 140:  14%|█▍        | 140/1000 [03:48<23:23,  1.63s/it][Succeeded / Failed / Skipped / Total] 96 / 43 / 1 / 140:  14%|█▍        | 141/1000 [03:52<23:36,  1.65s/it][Succeeded / Failed / Skipped / Total] 96 / 44 / 1 / 141:  14%|█▍        | 141/1000 [03:52<23:36,  1.65s/it][Succeeded / Failed / Skipped / Total] 96 / 44 / 1 / 141:  14%|█▍        | 142/1000 [03:53<23:32,  1.65s/it]proxy ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean serviceTicketRequest , final HttpServletRequest [[request]] ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean [[result]] = authenticateAllArtifacts && obtainArtifact ( [[request]] ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[asteroid]] ( final boolean serviceTicketRequest , final HttpServletRequest [[sought]] ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean [[fruition]] = authenticateAllArtifacts && obtainArtifact ( [[sought]] ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[fruition]] ) ; } return [[fruition]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 135 ---------------------------------------------
subarray of the given array --> auxiliary auxiliary method --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int beginIndex , int endIndex ) { int length = endIndex - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , beginIndex , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[auxiliary]] ( byte [ ] array , int beginIndex , int endIndex ) { int length = endIndex - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , beginIndex , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 136 ---------------------------------------------
Gets the authority collection . --> Gets theAuthorityCollection . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object value ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , value ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object value ) { Collection < GrantedAuthority > [[outcomes]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[outcomes]] , value ) ; return [[outcomes]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 137 ---------------------------------------------
Gets the principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[linge]] ( HttpServletRequest httpRequest ) { Object [[maj]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[maj]] ) ; } return [[maj]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 138 ---------------------------------------------
Returns the active GrantedAuthority for the current user . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > [[impressive]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[impressive]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[impressive]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 139 ---------------------------------------------
Preload map . --> Pre - search for access2granted . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[entry]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[entry]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[entry]] . getKey ( ) , getGrantedAuthorityCollection ( [[entry]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[enters]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[enters]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[enters]] . getKey ( ) , getGrantedAuthorityCollection ( [[enters]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 140 ---------------------------------------------
Gets the shared object . --> tres the specified type --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[tres]] > [[tres]] getSharedObject ( Class < [[tres]] > sharedType ) { return ( [[tres]] ) this . [[bogeyman]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 141 ---------------------------------------------
Gets the J2EE principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[principal]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[critical]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[critical]] ) ; } return [[critical]] ; }
[[[[Nl]]]]: Return the J2EE user name .
[Succeeded / Failed / Skipped / Total] 97 / 44 / 1 / 142:  14%|█▍        | 142/1000 [03:53<23:32,  1.65s/it][Succeeded / Failed / Skipped / Total] 97 / 44 / 1 / 142:  14%|█▍        | 143/1000 [04:02<24:13,  1.70s/it][Succeeded / Failed / Skipped / Total] 97 / 45 / 1 / 143:  14%|█▍        | 143/1000 [04:02<24:13,  1.70s/it][Succeeded / Failed / Skipped / Total] 97 / 45 / 1 / 143:  14%|█▍        | 144/1000 [04:05<24:16,  1.70s/it][Succeeded / Failed / Skipped / Total] 98 / 45 / 1 / 144:  14%|█▍        | 144/1000 [04:05<24:16,  1.70s/it][Succeeded / Failed / Skipped / Total] 98 / 45 / 1 / 144:  14%|█▍        | 145/1000 [04:08<24:23,  1.71s/it][Succeeded / Failed / Skipped / Total] 99 / 45 / 1 / 145:  14%|█▍        | 145/1000 [04:08<24:23,  1.71s/it][Succeeded / Failed / Skipped / Total] 99 / 45 / 1 / 145:  15%|█▍        | 146/1000 [04:08<24:12,  1.70s/it][Succeeded / Failed / Skipped / Total] 100 / 45 / 1 / 146:  15%|█▍        | 146/1000 [04:08<24:12,  1.70s/it][Succeeded / Failed / Skipped / Total] 100 / 45 / 1 / 146:  15%|█▍        | 147/1000 [04:10<24:13,  1.70s/it]--------------------------------------------- Result 142 ---------------------------------------------
Invokes a method invocation . --> Makes the chain of affirm --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object [[result]] ; try { [[result]] = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , [[result]] ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object [[affirm]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object [[achievement]] ; try { [[achievement]] = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , [[achievement]] ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 143 ---------------------------------------------
Concatenate the given arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] array : arrays ) { length += array . length ; } byte [ ] [[newArray]] = new byte [ length ] ; int [[destPos]] = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , [[newArray]] , [[destPos]] , array . length ) ; [[destPos]] += array . length ; } return [[newArray]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] array : arrays ) { length += array . length ; } byte [ ] [[brushes]] = new byte [ length ] ; int [[spelled]] = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , [[brushes]] , [[spelled]] , array . length ) ; [[spelled]] += array . length ; } return [[brushes]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 144 ---------------------------------------------
Returns the role . --> Get the bribed --> Socre: 1.0

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[bribed]] ( String [[protagonist]] ) { Assert . isTrue ( ! [[protagonist]] . startsWith ( "ROLE_" ) , ( ) -> [[protagonist]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[protagonist]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 145 ---------------------------------------------
Adds the authority collection . --> Override meticulously --> Socre: 1.0

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > [[result]] , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[meticulously]] ( Collection < GrantedAuthority > [[attainment]] , Object [[precious]] ) { if ( [[precious]] == null ) { return ; } if ( [[precious]] instanceof Collection < ? > ) { [[meticulously]] ( [[attainment]] , ( Collection < ? > ) [[precious]] ) ; } else if ( [[precious]] instanceof Object [ ] ) { [[meticulously]] ( [[attainment]] , ( Object [ ] ) [[precious]] ) ; } else if ( [[precious]] instanceof String ) { [[meticulously]] ( [[attainment]] , ( String ) [[precious]] ) ; } else if ( [[precious]] instanceof GrantedAuthority ) { [[attainment]] . add ( ( GrantedAuthority ) [[precious]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[precious]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 146 ---------------------------------------------
Gets the roles associated with the specified attributes . --> half list --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : [[attributes]] ) { Collection < GrantedAuthority > [[c]] = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( [[c]] != null ) { gaList . addAll ( [[c]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[half]] ( Collection < String > [[trait]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : [[trait]] ) { Collection < GrantedAuthority > [[johnston]] = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( [[johnston]] != null ) { gaList . addAll ( [[johnston]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 147 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 46 / 1 / 147:  15%|█▍        | 147/1000 [04:10<24:13,  1.70s/it][Succeeded / Failed / Skipped / Total] 100 / 46 / 1 / 147:  15%|█▍        | 148/1000 [04:11<24:08,  1.70s/it][Succeeded / Failed / Skipped / Total] 101 / 46 / 1 / 148:  15%|█▍        | 148/1000 [04:11<24:08,  1.70s/it][Succeeded / Failed / Skipped / Total] 101 / 46 / 1 / 148:  15%|█▍        | 149/1000 [04:12<24:03,  1.70s/it][Succeeded / Failed / Skipped / Total] 102 / 46 / 1 / 149:  15%|█▍        | 149/1000 [04:12<24:03,  1.70s/it][Succeeded / Failed / Skipped / Total] 102 / 46 / 1 / 149:  15%|█▌        | 150/1000 [04:16<24:15,  1.71s/it][Succeeded / Failed / Skipped / Total] 103 / 46 / 1 / 150:  15%|█▌        | 150/1000 [04:16<24:15,  1.71s/it][Succeeded / Failed / Skipped / Total] 103 / 46 / 1 / 150:  15%|█▌        | 151/1000 [04:18<24:14,  1.71s/it][Succeeded / Failed / Skipped / Total] 104 / 46 / 1 / 151:  15%|█▌        | 151/1000 [04:18<24:14,  1.71s/it][Succeeded / Failed / Skipped / Total] 104 / 46 / 1 / 151:  15%|█▌        | 152/1000 [04:23<24:27,  1.73s/it][Succeeded / Failed / Skipped / Total] 105 / 46 / 1 / 152:  15%|█▌        | 152/1000 [04:23<24:27,  1.73s/it][Succeeded / Failed / Skipped / Total] 105 / 46 / 1 / 152:  15%|█▌        | 153/1000 [04:26<24:36,  1.74s/it][Succeeded / Failed / Skipped / Total] 106 / 46 / 1 / 153:  15%|█▌        | 153/1000 [04:26<24:36,  1.74s/it][Succeeded / Failed / Skipped / Total] 106 / 46 / 1 / 153:  15%|█▌        | 154/1000 [04:31<24:52,  1.76s/it][Succeeded / Failed / Skipped / Total] 107 / 46 / 1 / 154:  15%|█▌        | 154/1000 [04:31<24:52,  1.76s/it][Succeeded / Failed / Skipped / Total] 107 / 46 / 1 / 154:  16%|█▌        | 155/1000 [04:32<24:43,  1.76s/it]Build the Redirect URL for the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer [[httpsPort]] = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( [[httpsPort]] != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( [[httpsPort]] . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[alds]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer [[overtakes]] = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( [[overtakes]] != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( [[overtakes]] . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 148 ---------------------------------------------
Returns array of roles that have any role . --> Get the corresponding courtesies --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[courtesies]] ( String ... [[idiosyncrasies]] ) { for ( int i = 0 ; i < [[idiosyncrasies]] . length ; i ++ ) { [[idiosyncrasies]] [ i ] = "ROLE_" + [[idiosyncrasies]] [ i ] ; } return [[idiosyncrasies]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 149 ---------------------------------------------
Attempts to determine the user in the AuthenticationCredentialsNotFoundException . --> Get the current Authentication --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[harmonium]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 150 ---------------------------------------------
Display the public key index --> Get a random id --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[angela]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 151 ---------------------------------------------
Get the springSecurity config . --> Can be overridden by subclasses . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[на]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 152 ---------------------------------------------
Sets the exit user url . --> aguilera by frederic --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String [[exitUserUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[exitUserUrl]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[exitUserUrl]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[aguilera]] ( String [[frederic]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[frederic]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[frederic]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 153 ---------------------------------------------
Converts the authority into the authority list . --> Returns a collection of changed authority . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[changed]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 154 ---------------------------------------------
Create a CSRF token . --> Get the CsrfToken --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[socko]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 155 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 47 / 1 / 155:  16%|█▌        | 155/1000 [04:32<24:43,  1.76s/it][Succeeded / Failed / Skipped / Total] 107 / 47 / 1 / 155:  16%|█▌        | 156/1000 [04:33<24:38,  1.75s/it][Succeeded / Failed / Skipped / Total] 107 / 48 / 1 / 156:  16%|█▌        | 156/1000 [04:33<24:38,  1.75s/it][Succeeded / Failed / Skipped / Total] 107 / 48 / 1 / 156:  16%|█▌        | 157/1000 [04:39<24:58,  1.78s/it][Succeeded / Failed / Skipped / Total] 108 / 48 / 1 / 157:  16%|█▌        | 157/1000 [04:39<24:58,  1.78s/it][Succeeded / Failed / Skipped / Total] 108 / 48 / 1 / 157:  16%|█▌        | 158/1000 [04:40<24:53,  1.77s/it][Succeeded / Failed / Skipped / Total] 108 / 49 / 1 / 158:  16%|█▌        | 158/1000 [04:40<24:53,  1.77s/it][Succeeded / Failed / Skipped / Total] 108 / 49 / 1 / 158:  16%|█▌        | 159/1000 [04:43<24:59,  1.78s/it][Succeeded / Failed / Skipped / Total] 108 / 50 / 1 / 159:  16%|█▌        | 159/1000 [04:43<24:59,  1.78s/it][Succeeded / Failed / Skipped / Total] 108 / 50 / 1 / 159:  16%|█▌        | 160/1000 [04:48<25:14,  1.80s/it]Adds a new login token . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken [[persistentToken]] = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[persistentToken]] ) ; addCookie ( [[persistentToken]] , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken [[baboons]] = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[baboons]] ) ; addCookie ( [[baboons]] , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 156 ---------------------------------------------
processAutoLogin cookie --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 157 ---------------------------------------------
Displays a contact . --> region > Google --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl [[acl]] = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , [[acl]] ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[rae]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl [[ica]] = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , [[ica]] ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 158 ---------------------------------------------
Decodes a JWT token . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Jwt decode ( String [[token]] ) throws JwtException { JWT jwt = parse ( [[token]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[token]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String [[acronym]] ) throws JwtException { JWT jwt = parse ( [[acronym]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[acronym]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 159 ---------------------------------------------
Check if the current user is a valid url check . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[currentUser]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[currentUser]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[aguilera]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[tarnished]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[tarnished]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 160 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 109 / 50 / 1 / 160:  16%|█▌        | 160/1000 [04:48<25:14,  1.80s/it][Succeeded / Failed / Skipped / Total] 109 / 50 / 1 / 160:  16%|█▌        | 161/1000 [04:51<25:18,  1.81s/it][Succeeded / Failed / Skipped / Total] 110 / 50 / 1 / 161:  16%|█▌        | 161/1000 [04:51<25:18,  1.81s/it][Succeeded / Failed / Skipped / Total] 110 / 50 / 1 / 161:  16%|█▌        | 162/1000 [04:56<25:35,  1.83s/it][Succeeded / Failed / Skipped / Total] 111 / 50 / 1 / 162:  16%|█▌        | 162/1000 [04:56<25:35,  1.83s/it][Succeeded / Failed / Skipped / Total] 111 / 51 / 1 / 163:  16%|█▋        | 163/1000 [04:56<25:23,  1.82s/it][Succeeded / Failed / Skipped / Total] 111 / 51 / 1 / 163:  16%|█▋        | 164/1000 [04:57<25:14,  1.81s/it][Succeeded / Failed / Skipped / Total] 112 / 51 / 1 / 164:  16%|█▋        | 164/1000 [04:57<25:14,  1.81s/it][Succeeded / Failed / Skipped / Total] 113 / 51 / 1 / 165:  16%|█▋        | 165/1000 [04:59<25:15,  1.81s/it][Succeeded / Failed / Skipped / Total] 113 / 51 / 1 / 165:  17%|█▋        | 166/1000 [05:00<25:07,  1.81s/it][Succeeded / Failed / Skipped / Total] 114 / 51 / 1 / 166:  17%|█▋        | 166/1000 [05:00<25:07,  1.81s/it]Delete a permission --> adder to contactManager --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String [[sid]] , @ RequestParam ( "permission" ) int mask ) { Contact [[contact]] = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( [[sid]] ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( [[contact]] , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[contact]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[adder]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String [[abed]] , @ RequestParam ( "permission" ) int mask ) { Contact [[dealings]] = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( [[abed]] ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( [[dealings]] , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[dealings]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 161 ---------------------------------------------
Returns the default role prefix . --> Helper method for ratted --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String defaultRolePrefix , String role ) { if ( role == null ) { return role ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return role ; } if ( role . startsWith ( defaultRolePrefix ) ) { return role ; } return defaultRolePrefix + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[ratted]] ( String defaultRolePrefix , String role ) { if ( role == null ) { return role ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return role ; } if ( role . startsWith ( defaultRolePrefix ) ) { return role ; } return defaultRolePrefix + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 162 ---------------------------------------------
Get UserDetailsResourceFactoryBean . --> Get UserResourceFactoryBean Method . --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String users ) { InMemoryResource [[resource]] = new InMemoryResource ( users ) ; return fromResource ( [[resource]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String users ) { InMemoryResource [[mend]] = new InMemoryResource ( users ) ; return fromResource ( [[mend]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 163 ---------------------------------------------
Evaluates access expression --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 164 ---------------------------------------------
Returns the value of the first attribute with the given name . --> Return null if not found --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[falcon]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 165 ---------------------------------------------
Encodes a string . --> Encode CharSequence --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[string]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[irons]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[irons]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 166 ---------------------------------------------
Get attribute values . --> Gets alphabets . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[name]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[alphabets]] ( String [[denominations]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[denominations]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
[Succeeded / Failed / Skipped / Total] 114 / 52 / 1 / 167:  17%|█▋        | 167/1000 [05:02<25:07,  1.81s/it][Succeeded / Failed / Skipped / Total] 114 / 52 / 1 / 167:  17%|█▋        | 168/1000 [05:02<24:59,  1.80s/it][Succeeded / Failed / Skipped / Total] 115 / 52 / 1 / 168:  17%|█▋        | 168/1000 [05:02<24:59,  1.80s/it][Succeeded / Failed / Skipped / Total] 116 / 52 / 1 / 169:  17%|█▋        | 169/1000 [05:05<25:03,  1.81s/it][Succeeded / Failed / Skipped / Total] 116 / 52 / 1 / 169:  17%|█▋        | 170/1000 [05:09<25:10,  1.82s/it][Succeeded / Failed / Skipped / Total] 117 / 52 / 1 / 170:  17%|█▋        | 170/1000 [05:09<25:10,  1.82s/it][Succeeded / Failed / Skipped / Total] 118 / 52 / 1 / 171:  17%|█▋        | 171/1000 [05:10<25:03,  1.81s/it][Succeeded / Failed / Skipped / Total] 118 / 52 / 1 / 171:  17%|█▋        | 172/1000 [05:12<25:04,  1.82s/it]--------------------------------------------- Result 167 ---------------------------------------------
Add permission for contact --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "addPermission" , addPermission ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[model]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[diwali]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > [[designs]] = new HashMap <> ( ) ; [[designs]] . put ( "addPermission" , addPermission ) ; [[designs]] . put ( "recipients" , listRecipients ( ) ) ; [[designs]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[designs]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 168 ---------------------------------------------
Decodes the given bytes . --> Decodes given data --> Socre: 1.0

[[[[Adv]]]]: public static String decode ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String decode ( byte [ ] [[twine]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[twine]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 169 ---------------------------------------------
Add a permission to a user --> Generate a group --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission [[addPermission]] , BindingResult [[result]] , ModelMap model ) { addPermissionValidator . validate ( [[addPermission]] , [[result]] ) ; if ( [[result]] . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid [[sid]] = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . [[addPermission]] ( [[addPermission]] . getContact ( ) , [[sid]] , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; [[result]] . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[barstow]] ( AddPermission [[alde]] , BindingResult [[repercussions]] , ModelMap model ) { addPermissionValidator . validate ( [[barstow]] , [[repercussions]] ) ; if ( [[repercussions]] . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid [[akash]] = new PrincipalSid ( [[barstow]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[barstow]] . getPermission ( ) ) ; try { contactManager . [[alde]] ( [[barstow]] . getContact ( ) , [[akash]] , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; [[repercussions]] . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 170 ---------------------------------------------
Returns all the ConfigConfig attributes . --> Return a Collection of ConfigAttribute objects --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[allAttributes]] . addAll ( attributeList ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[virginia]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[virginia]] . addAll ( attributeList ) ; } return [[virginia]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 171 ---------------------------------------------
Adds a contact --> Adds aContact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[form]] , BindingResult result ) { validator . validate ( [[form]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[contact]] = new Contact ( [[form]] . getName ( ) , [[form]] . getEmail ( ) ) ; contactManager . create ( [[contact]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[constitute]] , BindingResult result ) { validator . validate ( [[constitute]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[liaison]] = new Contact ( [[constitute]] . getName ( ) , [[constitute]] . getEmail ( ) ) ; contactManager . create ( [[liaison]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 172 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 118 / 53 / 1 / 172:  17%|█▋        | 172/1000 [05:12<25:04,  1.82s/it][Succeeded / Failed / Skipped / Total] 119 / 53 / 1 / 173:  17%|█▋        | 173/1000 [05:15<25:07,  1.82s/it][Succeeded / Failed / Skipped / Total] 119 / 53 / 1 / 173:  17%|█▋        | 174/1000 [05:19<25:18,  1.84s/it][Succeeded / Failed / Skipped / Total] 120 / 53 / 1 / 174:  17%|█▋        | 174/1000 [05:19<25:18,  1.84s/it][Succeeded / Failed / Skipped / Total] 121 / 53 / 1 / 175:  18%|█▊        | 175/1000 [05:21<25:14,  1.84s/it][Succeeded / Failed / Skipped / Total] 121 / 53 / 1 / 175:  18%|█▊        | 176/1000 [05:23<25:16,  1.84s/it][Succeeded / Failed / Skipped / Total] 121 / 54 / 1 / 176:  18%|█▊        | 176/1000 [05:23<25:16,  1.84s/it][Succeeded / Failed / Skipped / Total] 121 / 55 / 1 / 177:  18%|█▊        | 177/1000 [05:27<25:24,  1.85s/it][Succeeded / Failed / Skipped / Total] 121 / 55 / 1 / 177:  18%|█▊        | 178/1000 [05:30<25:24,  1.85s/it][Succeeded / Failed / Skipped / Total] 122 / 55 / 1 / 178:  18%|█▊        | 178/1000 [05:30<25:24,  1.85s/it][Succeeded / Failed / Skipped / Total] 122 / 56 / 1 / 179:  18%|█▊        | 179/1000 [05:36<25:43,  1.88s/it][Succeeded / Failed / Skipped / Total] 122 / 56 / 1 / 179:  18%|█▊        | 180/1000 [05:38<25:41,  1.88s/it]Attempt to switch to a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[horses]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 173 ---------------------------------------------
Returns a random contact . --> Get the random contact --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[catheter]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 174 ---------------------------------------------
Handles a bind exception . --> Handles exceptions --> Socre: 1.0

[[[[Adv]]]]: protected void handleBindException ( String [[userDn]] , String username , Throwable [[cause]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + [[cause]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String [[deutsche]] , String username , Throwable [[provoked]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[deutsche]] + ": " + [[provoked]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 175 ---------------------------------------------
Gets any request . --> Generates a new Cix --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[elixir]] ( ) { Assert . state ( ! this . [[boardinghouse]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[boardinghouse]] = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 176 ---------------------------------------------
Finds the attributes for the specified method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method [[method]] , Class < ? > [[targetClass]] ) { if ( [[targetClass]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , [[targetClass]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method [[form]] , Class < ? > [[rubdown]] ) { if ( [[rubdown]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[form]] , [[rubdown]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 177 ---------------------------------------------
Adds a secure method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[ikari]] ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 178 ---------------------------------------------
Checks if a method name is match . --> F743 - 7 --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[felix]] ( String [[spelled]] , String [[howell]] ) { return ( [[howell]] . endsWith ( "*" ) && [[spelled]] . startsWith ( [[howell]] . substring ( 0 , [[howell]] . length ( ) - 1 ) ) ) || ( [[howell]] . startsWith ( "*" ) && [[spelled]] . endsWith ( [[howell]] . substring ( 1 , [[howell]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 179 ---------------------------------------------
Returns the Field object for the given field name . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field getField ( Class < ? > [[clazz]] , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( [[clazz]] , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return [[clazz]] . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field getField ( Class < ? > [[babbling]] , String [[dwelled]] ) throws IllegalStateException { Assert . notNull ( [[babbling]] , "Class required" ) ; Assert . hasText ( [[dwelled]] , "Field name required" ) ; try { return [[babbling]] . getDeclaredField ( [[dwelled]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 180 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 123 / 56 / 1 / 180:  18%|█▊        | 180/1000 [05:38<25:41,  1.88s/it][Succeeded / Failed / Skipped / Total] 124 / 56 / 1 / 181:  18%|█▊        | 181/1000 [05:38<25:33,  1.87s/it][Succeeded / Failed / Skipped / Total] 124 / 56 / 1 / 181:  18%|█▊        | 182/1000 [05:46<25:55,  1.90s/it][Succeeded / Failed / Skipped / Total] 124 / 57 / 1 / 182:  18%|█▊        | 182/1000 [05:46<25:55,  1.90s/it][Succeeded / Failed / Skipped / Total] 125 / 57 / 1 / 183:  18%|█▊        | 183/1000 [05:47<25:52,  1.90s/it][Succeeded / Failed / Skipped / Total] 125 / 57 / 1 / 183:  18%|█▊        | 184/1000 [05:51<26:00,  1.91s/it][Succeeded / Failed / Skipped / Total] 126 / 57 / 1 / 184:  18%|█▊        | 184/1000 [05:51<26:00,  1.91s/it][Succeeded / Failed / Skipped / Total] 126 / 58 / 1 / 185:  18%|█▊        | 185/1000 [05:52<25:51,  1.90s/it][Succeeded / Failed / Skipped / Total] 126 / 58 / 1 / 185:  19%|█▊        | 186/1000 [05:56<26:01,  1.92s/it]Clear authentication attributes . --> dishonest --> Socre: 1.0

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest [[request]] ) { HttpSession session = [[request]] . getSession ( "[[False]]" != "[[False]]" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[dinesh]] ( HttpServletRequest [[applications]] ) { HttpSession session = [[applications]] . getSession ( "[[Dishonest]]" != "[[Dishonest]]" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 181 ---------------------------------------------
Checks the filter stack . --> Adds new filters . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[ange]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 182 ---------------------------------------------
Gets the SHA prefix . --> [[[FAILED]]]

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int [[secondBrace]] = encPass . lastIndexOf ( ' ' ) ; if ( [[secondBrace]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , [[secondBrace]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int [[according]] = encPass . lastIndexOf ( ' ' ) ; if ( [[according]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , [[according]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 183 ---------------------------------------------
Register access manager . --> Registers a Bean definition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[accessMgrBuilder]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[accessMgrBuilder]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[accessMgrBuilder]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[aguilera]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[aguilera]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[aguilera]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 184 ---------------------------------------------
Create redirect url string . --> Generates a ability --> Socre: 1.0

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String [[serviceUrl]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , [[serviceUrl]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[ability]] ( final String [[advised]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , [[advised]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 185 ---------------------------------------------
Create service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse [[response]] ) { return CommonUtils . constructServiceUrl ( null , [[response]] , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[alfons]] ( final HttpServletRequest request , final HttpServletResponse [[commentaries]] ) { return CommonUtils . constructServiceUrl ( null , [[commentaries]] , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 186 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 126 / 59 / 1 / 186:  19%|█▊        | 186/1000 [05:56<26:01,  1.92s/it][Succeeded / Failed / Skipped / Total] 126 / 60 / 1 / 187:  19%|█▊        | 187/1000 [05:59<26:04,  1.92s/it][Succeeded / Failed / Skipped / Total] 126 / 60 / 1 / 187:  19%|█▉        | 188/1000 [06:00<25:55,  1.92s/it][Succeeded / Failed / Skipped / Total] 127 / 60 / 1 / 188:  19%|█▉        | 188/1000 [06:00<25:55,  1.92s/it][Succeeded / Failed / Skipped / Total] 127 / 61 / 1 / 189:  19%|█▉        | 189/1000 [06:07<26:16,  1.94s/it][Succeeded / Failed / Skipped / Total] 127 / 61 / 1 / 189:  19%|█▉        | 190/1000 [06:08<26:11,  1.94s/it][Succeeded / Failed / Skipped / Total] 128 / 61 / 1 / 190:  19%|█▉        | 190/1000 [06:08<26:11,  1.94s/it][Succeeded / Failed / Skipped / Total] 129 / 61 / 1 / 191:  19%|█▉        | 191/1000 [06:15<26:31,  1.97s/it][Succeeded / Failed / Skipped / Total] 129 / 61 / 1 / 191:  19%|█▉        | 192/1000 [06:16<26:22,  1.96s/it][Succeeded / Failed / Skipped / Total] 129 / 62 / 1 / 192:  19%|█▉        | 192/1000 [06:16<26:22,  1.96s/it]Send an access Denied . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest request , HttpServletResponse [[response]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[response]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[initiating]] ( HttpServletRequest request , HttpServletResponse [[commentaries]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[commentaries]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 187 ---------------------------------------------
Gets the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > [[typeList]] = this . extractorMap . keySet ( ) ; return [[typeList]] . toArray ( new Class [ [[typeList]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[bonfires]] ( ) { Set < Class < ? extends Throwable > > [[arbitrarily]] = this . extractorMap . keySet ( ) ; return [[arbitrarily]] . toArray ( new Class [ [[arbitrarily]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 188 ---------------------------------------------
Returns true if the expected byte array matches the expected byte array . --> Returns true if the businesslike matches the expected array --> Socre: 1.0

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] [[actual]] ) { if ( expected . length != [[actual]] . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ [[actual]] [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] [[businesslike]] ) { if ( expected . length != [[businesslike]] . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ [[businesslike]] [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 189 ---------------------------------------------
Lookup parameter names . --> [[[FAILED]]]

[[[[Adv]]]]: private < T [[extends]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] [[parameterAnnotations]] = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = [[parameterAnnotations]] . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = [[parameterAnnotations]] [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T [[extension]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] [[albino]] = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = [[albino]] . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = [[albino]] [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 190 ---------------------------------------------
Sets the default failure URL . --> agrippa --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[agrippa]] ( String [[jasmin]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[jasmin]] ) , ( ) -> "'" + [[jasmin]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[jasmin]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 191 ---------------------------------------------
Returns the identifier for the given result set . --> Convert an impersonate object to a ResultSet --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[impersonate]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[impersonate]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[impersonate]] = convertFromStringTo ( ( String ) [[impersonate]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 192 ---------------------------------------------
Extracts the cause of the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[hamper]] ( Throwable [[bonfires]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[bonfires]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[bonfires]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 193 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 129 / 63 / 1 / 193:  19%|█▉        | 193/1000 [06:17<26:20,  1.96s/it][Succeeded / Failed / Skipped / Total] 129 / 63 / 1 / 193:  19%|█▉        | 194/1000 [06:21<26:27,  1.97s/it][Succeeded / Failed / Skipped / Total] 129 / 64 / 1 / 194:  19%|█▉        | 194/1000 [06:21<26:27,  1.97s/it][Succeeded / Failed / Skipped / Total] 129 / 65 / 1 / 195:  20%|█▉        | 195/1000 [06:24<26:28,  1.97s/it][Succeeded / Failed / Skipped / Total] 129 / 65 / 1 / 195:  20%|█▉        | 196/1000 [06:27<26:31,  1.98s/it][Succeeded / Failed / Skipped / Total] 130 / 65 / 1 / 196:  20%|█▉        | 196/1000 [06:27<26:31,  1.98s/it][Succeeded / Failed / Skipped / Total] 131 / 65 / 1 / 197:  20%|█▉        | 197/1000 [06:32<26:39,  1.99s/it][Succeeded / Failed / Skipped / Total] 131 / 65 / 1 / 197:  20%|█▉        | 198/1000 [06:32<26:30,  1.98s/it][Succeeded / Failed / Skipped / Total] 131 / 66 / 1 / 198:  20%|█▉        | 198/1000 [06:32<26:30,  1.98s/it][Succeeded / Failed / Skipped / Total] 132 / 66 / 1 / 199:  20%|█▉        | 199/1000 [06:33<26:23,  1.98s/it][Succeeded / Failed / Skipped / Total] 132 / 66 / 1 / 199:  20%|██        | 200/1000 [06:36<26:27,  1.98s/it]Sets the resolvedHidden inputs . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[wicks]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 194 ---------------------------------------------
Gets all the authority list to set . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[snook]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 195 ---------------------------------------------
Create a list of OpenID attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[access]] : idToAttributes . entrySet ( ) ) { if ( [[access]] . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return [[access]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 196 ---------------------------------------------
Builds the request URL . --> Concatenates bonfires and requestURI --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String [[servletPath]] , String requestURI , String [[contextPath]] , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( [[servletPath]] != null ) { url . append ( [[servletPath]] ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( [[contextPath]] . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[albino]] ( String [[bonfires]] , String requestURI , String [[bat]] , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( [[bonfires]] != null ) { url . append ( [[bonfires]] ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( [[bat]] . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 197 ---------------------------------------------
Create the object identity . --> F743 --> Socre: 1.0

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity object , Sid [[owner]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[owner]] , "[[True]]" == "[[True]]" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "[[True]]" == "[[True]]" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity object , Sid [[wearer]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[wearer]] , "[[Real]]" == "[[Real]]" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "[[Real]]" == "[[Real]]" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 198 ---------------------------------------------
Checks if the given URL is absolute . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String [[url]] ) { if ( [[url]] == null ) { return "False" != "False" ; } final Pattern [[ABSOLUTE_URL]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[ABSOLUTE_URL]] . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[civilisation]] ( String [[finder]] ) { if ( [[finder]] == null ) { return "False" != "False" ; } final Pattern [[TANGANYIKA]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[TANGANYIKA]] . matcher ( [[finder]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 199 ---------------------------------------------
Returns any active server webExchange . --> Gets the matcherMatcher airspace . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[airspace]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 200 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 133 / 66 / 1 / 200:  20%|██        | 200/1000 [06:36<26:27,  1.98s/it][Succeeded / Failed / Skipped / Total] 134 / 66 / 1 / 201:  20%|██        | 201/1000 [06:41<26:34,  2.00s/it][Succeeded / Failed / Skipped / Total] 134 / 66 / 1 / 201:  20%|██        | 202/1000 [06:44<26:39,  2.00s/it][Succeeded / Failed / Skipped / Total] 135 / 66 / 1 / 202:  20%|██        | 202/1000 [06:44<26:39,  2.00s/it][Succeeded / Failed / Skipped / Total] 136 / 66 / 1 / 203:  20%|██        | 203/1000 [06:48<26:44,  2.01s/it][Succeeded / Failed / Skipped / Total] 136 / 66 / 1 / 203:  20%|██        | 204/1000 [06:49<26:35,  2.00s/it][Succeeded / Failed / Skipped / Total] 137 / 66 / 1 / 204:  20%|██        | 204/1000 [06:49<26:35,  2.01s/it][Succeeded / Failed / Skipped / Total] 138 / 66 / 1 / 205:  20%|██        | 205/1000 [06:57<27:00,  2.04s/it][Succeeded / Failed / Skipped / Total] 138 / 66 / 1 / 205:  21%|██        | 206/1000 [06:59<26:57,  2.04s/it][Succeeded / Failed / Skipped / Total] 138 / 67 / 1 / 206:  21%|██        | 206/1000 [06:59<26:57,  2.04s/it][Succeeded / Failed / Skipped / Total] 138 / 67 / 1 / 206:  21%|██        | 207/1000 [07:00<26:49,  2.03s/it]Returns textEncryptor with the given password . --> Get the beatles --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[beatles]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 201 ---------------------------------------------
Create aEncryptor with the given salt . --> Create new TextEncryptor --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence [[asterisk]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[asterisk]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 202 ---------------------------------------------
Determine target url . --> Returns thelds . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[alds]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[alds]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 203 ---------------------------------------------
Returns a text encryptor text . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[cypher]] , CharSequence [[acidity]] ) { return new HexEncodingTextEncryptor ( standard ( [[cypher]] , [[acidity]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 204 ---------------------------------------------
Create a path sequence for a given method --> path inspector --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod [[method]] , String ... patterns ) { List < ServerWebExchangeMatcher > [[matchers]] = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { [[matchers]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , [[method]] ) ) ; } return new OrServerWebExchangeMatcher ( [[matchers]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod [[pleas]] , String ... patterns ) { List < ServerWebExchangeMatcher > [[depressed]] = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { [[depressed]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , [[pleas]] ) ) ; } return new OrServerWebExchangeMatcher ( [[depressed]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 205 ---------------------------------------------
Build a userDn . --> Builds aDn --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[username]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[username]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[clients]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[clients]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 206 ---------------------------------------------
Create the list of entries . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry [[entry_]] = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( [[entry_]] instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) [[entry_]] ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry [[agitate]] = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( [[agitate]] instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) [[agitate]] ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 207 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 139 / 67 / 1 / 207:  21%|██        | 207/1000 [07:00<26:49,  2.03s/it][Succeeded / Failed / Skipped / Total] 139 / 67 / 1 / 207:  21%|██        | 208/1000 [07:01<26:43,  2.02s/it][Succeeded / Failed / Skipped / Total] 140 / 67 / 1 / 208:  21%|██        | 208/1000 [07:01<26:43,  2.02s/it][Succeeded / Failed / Skipped / Total] 140 / 67 / 1 / 208:  21%|██        | 209/1000 [07:01<26:35,  2.02s/it][Succeeded / Failed / Skipped / Total] 141 / 67 / 1 / 209:  21%|██        | 209/1000 [07:01<26:35,  2.02s/it][Succeeded / Failed / Skipped / Total] 141 / 67 / 1 / 209:  21%|██        | 210/1000 [07:03<26:35,  2.02s/it][Succeeded / Failed / Skipped / Total] 141 / 68 / 1 / 210:  21%|██        | 210/1000 [07:03<26:35,  2.02s/it][Succeeded / Failed / Skipped / Total] 141 / 68 / 1 / 210:  21%|██        | 211/1000 [07:06<26:36,  2.02s/it][Succeeded / Failed / Skipped / Total] 142 / 68 / 1 / 211:  21%|██        | 211/1000 [07:06<26:36,  2.02s/it][Succeeded / Failed / Skipped / Total] 142 / 68 / 1 / 211:  21%|██        | 212/1000 [07:08<26:31,  2.02s/it]Sets the target url parameter . --> Fossilized --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[fossilized]] ( String [[advised]] ) { if ( [[advised]] != null ) { Assert . hasText ( [[advised]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[advised]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 208 ---------------------------------------------
Update the ACL . --> F743 - 3 --> Socre: 1.0

[[[[Adv]]]]: protected void [[updateObjectIdentity]] ( MutableAcl acl ) { Long [[parentId]] = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; [[parentId]] = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[updateObjectIdentity]] , [[parentId]] , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void [[macbeth]] ( MutableAcl acl ) { Long [[alde]] = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; [[alde]] = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[macbeth]] , [[alde]] , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 209 ---------------------------------------------
Save the request . --> Do not call this method --> Socre: 1.0

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest [[request]] , HttpServletResponse response ) { if ( requestMatcher . matches ( [[request]] ) ) { DefaultSavedRequest [[savedRequest]] = new DefaultSavedRequest ( [[request]] , portResolver ) ; if ( createSessionAllowed || [[request]] . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[retaken]] ( HttpServletRequest [[petitions]] , HttpServletResponse response ) { if ( requestMatcher . matches ( [[petitions]] ) ) { DefaultSavedRequest [[lamba]] = new DefaultSavedRequest ( [[petitions]] , portResolver ) ; if ( createSessionAllowed || [[petitions]] . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 210 ---------------------------------------------
Gets the target URL . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[dialectics]] ( HttpServletRequest request , HttpServletResponse [[respond]] ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 211 ---------------------------------------------
Creates the shared object . --> Create a new dashwood map . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[dashwood]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 212 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 142 / 69 / 1 / 212:  21%|██        | 212/1000 [07:08<26:31,  2.02s/it][Succeeded / Failed / Skipped / Total] 142 / 69 / 1 / 212:  21%|██▏       | 213/1000 [07:09<26:26,  2.02s/it][Succeeded / Failed / Skipped / Total] 143 / 69 / 1 / 213:  21%|██▏       | 213/1000 [07:09<26:26,  2.02s/it][Succeeded / Failed / Skipped / Total] 143 / 69 / 1 / 213:  21%|██▏       | 214/1000 [07:10<26:22,  2.01s/it][Succeeded / Failed / Skipped / Total] 144 / 69 / 1 / 214:  21%|██▏       | 214/1000 [07:10<26:22,  2.01s/it][Succeeded / Failed / Skipped / Total] 144 / 69 / 1 / 214:  22%|██▏       | 215/1000 [07:12<26:20,  2.01s/it][Succeeded / Failed / Skipped / Total] 144 / 70 / 1 / 215:  22%|██▏       | 215/1000 [07:12<26:20,  2.01s/it][Succeeded / Failed / Skipped / Total] 144 / 70 / 1 / 215:  22%|██▏       | 216/1000 [07:19<26:33,  2.03s/it][Succeeded / Failed / Skipped / Total] 145 / 70 / 1 / 216:  22%|██▏       | 216/1000 [07:19<26:33,  2.03s/it][Succeeded / Failed / Skipped / Total] 145 / 70 / 1 / 216:  22%|██▏       | 217/1000 [07:22<26:35,  2.04s/it][Succeeded / Failed / Skipped / Total] 146 / 70 / 1 / 217:  22%|██▏       | 217/1000 [07:22<26:35,  2.04s/it][Succeeded / Failed / Skipped / Total] 146 / 70 / 1 / 217:  22%|██▏       | 218/1000 [07:22<26:28,  2.03s/it]Write the headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[wiley]] ( HttpServletRequest request , HttpServletResponse [[address]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[address]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[address]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[address]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[address]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[address]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 213 ---------------------------------------------
Internal parse date . --> parse a string to a Long --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[trembles]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 214 ---------------------------------------------
Sets the login configUrl . --> F743 - Fa3 - F --> Socre: 1.0

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String [[prefix]] = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( [[prefix]] + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = [[prefix]] + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String [[acronyms]] = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( [[acronyms]] + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = [[acronyms]] + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 215 ---------------------------------------------
Returns the current date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[certify]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 216 ---------------------------------------------
Build the group name . --> This method initializes groupRoleAttributeName --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String group ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[dino]] ( String group ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 217 ---------------------------------------------
Retrieves the parent directory . --> Gets the codeword value . --> Socre: 1.0

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long [[id]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[id]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int [[rowNumber]] ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long [[codeword]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[codeword]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int [[beeline]] ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 218 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 147 / 70 / 1 / 218:  22%|██▏       | 218/1000 [07:22<26:28,  2.03s/it][Succeeded / Failed / Skipped / Total] 147 / 70 / 1 / 218:  22%|██▏       | 219/1000 [07:24<26:23,  2.03s/it][Succeeded / Failed / Skipped / Total] 148 / 70 / 1 / 219:  22%|██▏       | 219/1000 [07:24<26:23,  2.03s/it][Succeeded / Failed / Skipped / Total] 148 / 70 / 1 / 219:  22%|██▏       | 220/1000 [07:24<26:15,  2.02s/it][Succeeded / Failed / Skipped / Total] 149 / 70 / 1 / 220:  22%|██▏       | 220/1000 [07:24<26:15,  2.02s/it][Succeeded / Failed / Skipped / Total] 149 / 70 / 1 / 220:  22%|██▏       | 221/1000 [07:26<26:12,  2.02s/it][Succeeded / Failed / Skipped / Total] 150 / 70 / 1 / 221:  22%|██▏       | 221/1000 [07:26<26:12,  2.02s/it][Succeeded / Failed / Skipped / Total] 150 / 70 / 1 / 221:  22%|██▏       | 222/1000 [07:28<26:10,  2.02s/it][Succeeded / Failed / Skipped / Total] 151 / 70 / 1 / 222:  22%|██▏       | 222/1000 [07:28<26:10,  2.02s/it][Succeeded / Failed / Skipped / Total] 151 / 70 / 1 / 222:  22%|██▏       | 223/1000 [07:30<26:10,  2.02s/it][Succeeded / Failed / Skipped / Total] 152 / 70 / 1 / 223:  22%|██▏       | 223/1000 [07:30<26:10,  2.02s/it][Succeeded / Failed / Skipped / Total] 152 / 70 / 1 / 223:  22%|██▏       | 224/1000 [07:33<26:11,  2.02s/it][Succeeded / Failed / Skipped / Total] 153 / 70 / 1 / 224:  22%|██▏       | 224/1000 [07:33<26:11,  2.02s/it][Succeeded / Failed / Skipped / Total] 153 / 70 / 1 / 224:  22%|██▎       | 225/1000 [07:38<26:19,  2.04s/it][Succeeded / Failed / Skipped / Total] 154 / 70 / 1 / 225:  22%|██▎       | 225/1000 [07:38<26:19,  2.04s/it][Succeeded / Failed / Skipped / Total] 154 / 70 / 1 / 225:  23%|██▎       | 226/1000 [07:42<26:23,  2.05s/it][Succeeded / Failed / Skipped / Total] 155 / 70 / 1 / 226:  23%|██▎       | 226/1000 [07:42<26:23,  2.05s/it][Succeeded / Failed / Skipped / Total] 155 / 70 / 1 / 226:  23%|██▎       | 227/1000 [07:44<26:22,  2.05s/it]Gets the security name . --> Gets redcap --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String userSecurityName = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[redcap]] ( final Subject [[issuance]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[issuance]] ) ; } String userSecurityName = null ; if ( [[issuance]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 219 ---------------------------------------------
Get the timeSphereGroups . --> Convenience method to build a description of a String --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String securityName ) { Context [[ic]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[newport]] ( final String securityName ) { Context [[ee]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 220 ---------------------------------------------
Method allowableSessionsExceeded Method . --> F743 - 3 --> Socre: 1.0

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[hilarity]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 221 ---------------------------------------------
Sets the authentication details for this request . --> Fossilized Fossilized --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[fossilized]] ( HttpServletRequest [[prayed]] , UsernamePasswordAuthenticationToken [[halliday]] ) { [[halliday]] . setDetails ( authenticationDetailsSource . buildDetails ( [[prayed]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 222 ---------------------------------------------
Copy authentication token . --> soybeans --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[soybeans]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 223 ---------------------------------------------
Gets the filters for the specified URL . --> Sends a taro request --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[taro]] ( String url ) { return [[taro]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 224 ---------------------------------------------
Updates the cache . --> clear the obscures associated with key --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap [[cache]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[acquisitions]] ( HashMap [[obscures]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[obscures]] . size ( ) > 1000 ) { [[obscures]] . clear ( ) ; } [[obscures]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 225 ---------------------------------------------
Sets the filter list . --> Set the scrubbers filter --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > filters ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[scrubbers]] ( List < Filter > filters ) { Validate . notNull ( [[scrubbers]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[scrubbers]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 226 ---------------------------------------------
Get the full full full baseDn . --> Create an DistinguishedName object --> Socre: 1.0

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName [[dn]] , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( baseDn ) ) { return [[dn]] ; } baseDn . append ( [[dn]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[detonates]] ( DistinguishedName [[dt]] , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[dt]] . contains ( baseDn ) ) { return [[dt]] ; } baseDn . append ( [[dt]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 227 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 155 / 71 / 1 / 227:  23%|██▎       | 227/1000 [07:44<26:22,  2.05s/it][Succeeded / Failed / Skipped / Total] 155 / 71 / 1 / 227:  23%|██▎       | 228/1000 [07:46<26:20,  2.05s/it][Succeeded / Failed / Skipped / Total] 155 / 72 / 1 / 228:  23%|██▎       | 228/1000 [07:46<26:20,  2.05s/it][Succeeded / Failed / Skipped / Total] 155 / 72 / 1 / 228:  23%|██▎       | 229/1000 [07:49<26:20,  2.05s/it][Succeeded / Failed / Skipped / Total] 156 / 72 / 1 / 229:  23%|██▎       | 229/1000 [07:49<26:20,  2.05s/it][Succeeded / Failed / Skipped / Total] 156 / 72 / 1 / 229:  23%|██▎       | 230/1000 [07:53<26:25,  2.06s/it][Succeeded / Failed / Skipped / Total] 157 / 72 / 1 / 230:  23%|██▎       | 230/1000 [07:53<26:25,  2.06s/it][Succeeded / Failed / Skipped / Total] 157 / 72 / 1 / 230:  23%|██▎       | 231/1000 [07:56<26:26,  2.06s/it][Succeeded / Failed / Skipped / Total] 158 / 72 / 1 / 231:  23%|██▎       | 231/1000 [07:56<26:26,  2.06s/it][Succeeded / Failed / Skipped / Total] 158 / 72 / 1 / 231:  23%|██▎       | 232/1000 [07:57<26:22,  2.06s/it][Succeeded / Failed / Skipped / Total] 158 / 73 / 1 / 232:  23%|██▎       | 232/1000 [07:57<26:22,  2.06s/it][Succeeded / Failed / Skipped / Total] 158 / 73 / 1 / 232:  23%|██▎       | 233/1000 [07:58<26:15,  2.05s/it]Gets the filters . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[request]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[modern]] ( HttpServletRequest [[claim]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[claim]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 228 ---------------------------------------------
Get the ApplicationContext . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 229 ---------------------------------------------
Sets the session attributes . --> used by test --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . [[sessionAttributes]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[spanning]] ( Map < String , Object > [[на]] ) { notNull ( [[на]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[на]] , this . [[applause]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 230 ---------------------------------------------
Create an NTLMAuth scheme . --> Construct the NTLMAuthScheme with the given parameters --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( domain ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme [[contour]] = new NTLMAuthScheme ( ) ; [[contour]] . setUserName ( userName ) ; [[contour]] . setPassword ( password ) ; [[contour]] . setWorkstation ( workstation ) ; [[contour]] . setDomain ( domain ) ; return [[contour]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 231 ---------------------------------------------
Print response options . --> Gets copier . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[copier]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 232 ---------------------------------------------
Adds additional filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[filter]] ( Filter [[cleanliness]] , Filter ... [[boules]] ) { Validate . notNull ( [[cleanliness]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[cleanliness]] ) ; if ( [[boules]] != null ) { Collections . addAll ( RestAssured . filters , [[boules]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 233 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 158 / 74 / 1 / 233:  23%|██▎       | 233/1000 [07:58<26:15,  2.05s/it][Succeeded / Failed / Skipped / Total] 158 / 74 / 1 / 233:  23%|██▎       | 234/1000 [08:00<26:14,  2.05s/it][Succeeded / Failed / Skipped / Total] 158 / 75 / 1 / 234:  23%|██▎       | 234/1000 [08:00<26:14,  2.05s/it][Succeeded / Failed / Skipped / Total] 159 / 75 / 1 / 235:  24%|██▎       | 235/1000 [08:00<26:05,  2.05s/it][Succeeded / Failed / Skipped / Total] 159 / 75 / 1 / 235:  24%|██▎       | 236/1000 [08:01<25:57,  2.04s/it][Succeeded / Failed / Skipped / Total] 160 / 75 / 1 / 236:  24%|██▎       | 236/1000 [08:01<25:57,  2.04s/it][Succeeded / Failed / Skipped / Total] 161 / 75 / 1 / 237:  24%|██▎       | 237/1000 [08:04<25:59,  2.04s/it][Succeeded / Failed / Skipped / Total] 161 / 75 / 1 / 237:  24%|██▍       | 238/1000 [08:04<25:52,  2.04s/it][Succeeded / Failed / Skipped / Total] 162 / 75 / 1 / 238:  24%|██▍       | 238/1000 [08:04<25:52,  2.04s/it]Change the user s password . --> [[[FAILED]]]

[[[[Adv]]]]: public void changePassword ( final String [[oldPassword]] , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[oldPassword]] , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , [[oldPassword]] , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void changePassword ( final String [[novelties]] , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[novelties]] , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , [[novelties]] , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 234 ---------------------------------------------
proxy a URI --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[overridden]] ( URI [[gagarin]] ) { if ( [[gagarin]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[overridden]] ( new ProxySpecification ( [[gagarin]] . getHost ( ) , [[gagarin]] . getPort ( ) , [[gagarin]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 235 ---------------------------------------------
Performs basic . --> Import a AuthenticationScheme --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String [[userName]] , String [[password]] ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( [[userName]] ) ; preemptiveBasicAuthScheme . setPassword ( [[password]] ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[bases]] ( String [[guests]] , String [[encryption]] ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( [[guests]] ) ; preemptiveBasicAuthScheme . setPassword ( [[encryption]] ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 236 ---------------------------------------------
Redirect to RestAssured config . --> This method initializes RestAssuredConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[tweek]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 237 ---------------------------------------------
Creates the basic authentication scheme for the user and password . --> Return an AuthenticationScheme for the given consumers --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme basic ( String [[userName]] , String [[password]] ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( [[userName]] ) ; [[scheme]] . setPassword ( [[password]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme basic ( String [[consumers]] , String [[numeric]] ) { final BasicAuthScheme [[diets]] = new BasicAuthScheme ( ) ; [[diets]] . setUserName ( [[consumers]] ) ; [[diets]] . setPassword ( [[numeric]] ) ; return [[diets]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 238 ---------------------------------------------
Build the default charset . --> Creates a new Encoder config object . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[ability]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 239 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 163 / 75 / 1 / 239:  24%|██▍       | 239/1000 [08:06<25:49,  2.04s/it][Succeeded / Failed / Skipped / Total] 163 / 75 / 1 / 239:  24%|██▍       | 240/1000 [08:07<25:43,  2.03s/it][Succeeded / Failed / Skipped / Total] 164 / 75 / 1 / 240:  24%|██▍       | 240/1000 [08:07<25:43,  2.03s/it][Succeeded / Failed / Skipped / Total] 165 / 75 / 1 / 241:  24%|██▍       | 241/1000 [08:10<25:43,  2.03s/it][Succeeded / Failed / Skipped / Total] 165 / 75 / 1 / 241:  24%|██▍       | 242/1000 [08:10<25:35,  2.03s/it][Succeeded / Failed / Skipped / Total] 166 / 75 / 1 / 242:  24%|██▍       | 242/1000 [08:10<25:35,  2.03s/it][Succeeded / Failed / Skipped / Total] 167 / 75 / 1 / 243:  24%|██▍       | 243/1000 [08:11<25:31,  2.02s/it][Succeeded / Failed / Skipped / Total] 167 / 75 / 1 / 243:  24%|██▍       | 244/1000 [08:13<25:29,  2.02s/it][Succeeded / Failed / Skipped / Total] 168 / 75 / 1 / 244:  24%|██▍       | 244/1000 [08:13<25:29,  2.02s/it][Succeeded / Failed / Skipped / Total] 169 / 75 / 1 / 245:  24%|██▍       | 245/1000 [08:14<25:22,  2.02s/it][Succeeded / Failed / Skipped / Total] 169 / 75 / 1 / 245:  25%|██▍       | 246/1000 [08:16<25:20,  2.02s/it][Succeeded / Failed / Skipped / Total] 170 / 75 / 1 / 246:  25%|██▍       | 246/1000 [08:16<25:20,  2.02s/it]Returns the default ObjectMapper --> Returns a new ObjectMapperConfig --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[jasmin]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[jasmin]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 240 ---------------------------------------------
Gets the object configuration object . --> Provide the standard ObjectMapper --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[helplessly]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[helplessly]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 241 ---------------------------------------------
Create RestAssured mock config . --> Create an instance of RestAssuredMock mechanism --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig logConfig ( LogConfig [[logConfig]] ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig logConfig ( LogConfig [[unpacked]] ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 242 ---------------------------------------------
Gets the JMX config . --> Create an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig sessionConfig ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[plows]] ( SessionConfig sessionConfig ) { notNull ( [[plows]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[plows]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 243 ---------------------------------------------
Get an instance of RestAssuredMock falls config . --> Create an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig objectMapperConfig ( ObjectMapperConfig [[objectMapperConfig]] ) { notNull ( objectMapperConfig , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig objectMapperConfig ( ObjectMapperConfig [[bestseller]] ) { notNull ( objectMapperConfig , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 244 ---------------------------------------------
Create a RestAssuredMock falls config . --> Get an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[aspire]] ( JsonConfig jsonConfig ) { notNull ( [[aspire]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[aspire]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 245 ---------------------------------------------
Create an instance of RestAssuredMock . --> Create an instance of RestAssuredMockMvcConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig xmlConfig ( XmlConfig [[xmlConfig]] ) { notNull ( xmlConfig , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig xmlConfig ( XmlConfig [[bestseller]] ) { notNull ( xmlConfig , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 246 ---------------------------------------------
Gets the mock config . --> Returns a copy of this appologize . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig encoderConfig ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[appologize]] ( EncoderConfig encoderConfig ) { notNull ( [[appologize]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[appologize]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
[Succeeded / Failed / Skipped / Total] 171 / 75 / 1 / 247:  25%|██▍       | 247/1000 [08:16<25:15,  2.01s/it][Succeeded / Failed / Skipped / Total] 171 / 75 / 1 / 247:  25%|██▍       | 248/1000 [08:19<25:14,  2.01s/it][Succeeded / Failed / Skipped / Total] 172 / 75 / 1 / 248:  25%|██▍       | 248/1000 [08:19<25:14,  2.01s/it][Succeeded / Failed / Skipped / Total] 173 / 75 / 1 / 249:  25%|██▍       | 249/1000 [08:20<25:08,  2.01s/it][Succeeded / Failed / Skipped / Total] 173 / 75 / 1 / 249:  25%|██▌       | 250/1000 [08:21<25:05,  2.01s/it][Succeeded / Failed / Skipped / Total] 174 / 75 / 1 / 250:  25%|██▌       | 250/1000 [08:21<25:05,  2.01s/it][Succeeded / Failed / Skipped / Total] 174 / 76 / 1 / 251:  25%|██▌       | 251/1000 [08:23<25:01,  2.00s/it][Succeeded / Failed / Skipped / Total] 174 / 76 / 1 / 251:  25%|██▌       | 252/1000 [08:23<24:54,  2.00s/it][Succeeded / Failed / Skipped / Total] 175 / 76 / 1 / 252:  25%|██▌       | 252/1000 [08:23<24:54,  2.00s/it][Succeeded / Failed / Skipped / Total] 176 / 76 / 1 / 253:  25%|██▌       | 253/1000 [08:24<24:48,  1.99s/it][Succeeded / Failed / Skipped / Total] 176 / 76 / 1 / 253:  25%|██▌       | 254/1000 [08:24<24:40,  1.98s/it]--------------------------------------------- Result 247 ---------------------------------------------
RestAssuredMock config . --> Get an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig headerConfig ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[chronicler]] ( HeaderConfig headerConfig ) { notNull ( [[chronicler]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[chronicler]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 248 ---------------------------------------------
Get an instance of RestAssuredMockMvc config . --> Gets an instance of RestAssuredMock . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[comforting]] ( AsyncConfig asyncConfig ) { notNull ( [[comforting]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[comforting]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 249 ---------------------------------------------
Gets mock config . --> Returns an RestAssuredMockMvcConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[mockMvcConfig]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[mockMvcConfig]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[mockMvcConfig]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[constructors]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[constructors]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[constructors]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 250 ---------------------------------------------
RestAssuredMock config . --> Create an instance of RestAssuredMock . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig [[multiPartConfig]] ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig [[berthold]] ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 251 ---------------------------------------------
form password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String [[password]] , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[password]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[password]] ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[means]] ( String userName , String [[numerical]] , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[numerical]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[numerical]] ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 252 ---------------------------------------------
Returns the mock config . --> Create a mock bailor . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bailor]] ( MockMvcParamConfig paramConfig ) { notNull ( [[bailor]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[bailor]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 253 ---------------------------------------------
Registers the specified matcher config . --> Returns an instance of RestAssuredMock . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[aishwarya]] ( MatcherConfig matcherConfig ) { notNull ( [[aishwarya]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[aishwarya]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 254 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 177 / 76 / 1 / 254:  25%|██▌       | 254/1000 [08:24<24:40,  1.98s/it][Succeeded / Failed / Skipped / Total] 178 / 76 / 1 / 255:  26%|██▌       | 255/1000 [08:27<24:42,  1.99s/it][Succeeded / Failed / Skipped / Total] 178 / 76 / 1 / 255:  26%|██▌       | 256/1000 [08:32<24:48,  2.00s/it][Succeeded / Failed / Skipped / Total] 179 / 76 / 1 / 256:  26%|██▌       | 256/1000 [08:32<24:48,  2.00s/it][Succeeded / Failed / Skipped / Total] 180 / 76 / 1 / 257:  26%|██▌       | 257/1000 [08:36<24:54,  2.01s/it][Succeeded / Failed / Skipped / Total] 180 / 76 / 1 / 257:  26%|██▌       | 258/1000 [08:39<24:54,  2.01s/it][Succeeded / Failed / Skipped / Total] 181 / 76 / 1 / 258:  26%|██▌       | 258/1000 [08:39<24:54,  2.01s/it][Succeeded / Failed / Skipped / Total] 182 / 76 / 1 / 259:  26%|██▌       | 259/1000 [08:43<24:56,  2.02s/it][Succeeded / Failed / Skipped / Total] 182 / 76 / 1 / 259:  26%|██▌       | 260/1000 [08:45<24:56,  2.02s/it][Succeeded / Failed / Skipped / Total] 183 / 76 / 1 / 260:  26%|██▌       | 260/1000 [08:45<24:56,  2.02s/it][Succeeded / Failed / Skipped / Total] 183 / 77 / 1 / 261:  26%|██▌       | 261/1000 [08:46<24:49,  2.02s/it][Succeeded / Failed / Skipped / Total] 183 / 77 / 1 / 261:  26%|██▌       | 262/1000 [08:49<24:51,  2.02s/it]Makes sure that allHost settings have been specified . --> This method initializes CertificateAuth settings --> Socre: 1.0

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[ñ]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 255 ---------------------------------------------
Declares the XmlPathConfig instance . --> Create a new XmlPathConfig instance --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[dares]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 256 ---------------------------------------------
Creates a new basic . --> Create a new basic request --> Socre: 1.0

[[[[Adv]]]]: public void basic ( String host , int [[port]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void basic ( String host , int [[harbor]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[harbor]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 257 ---------------------------------------------
Convenience factory method to create a NTCredentials --> Creates a NTCredentials --> Socre: 1.0

[[[[Adv]]]]: public void ntlm ( String host , int [[port]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String host , int [[cale]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[cale]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 258 ---------------------------------------------
Replies the XmlPathConfig . --> Maps prefix and macadamia to XML mapping --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String [[namespaceURI]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[chickened]] ( String prefix , String [[macadamia]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[macadamia]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , [[macadamia]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 259 ---------------------------------------------
Resets the configuration . --> reboot the request --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[reboot]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 260 ---------------------------------------------
Sets response header . --> Sets response headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder setHeader ( String [[name]] , String value ) { notNull ( [[name]] , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( [[name]] , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( [[name]] ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder setHeader ( String [[baptism]] , String value ) { notNull ( [[baptism]] , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( [[baptism]] , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( [[baptism]] ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 261 ---------------------------------------------
Add a header . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String name , String value ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[items]] ( String name , String value ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 262 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 184 / 77 / 1 / 262:  26%|██▌       | 262/1000 [08:49<24:51,  2.02s/it][Succeeded / Failed / Skipped / Total] 185 / 77 / 1 / 263:  26%|██▋       | 263/1000 [08:50<24:45,  2.02s/it][Succeeded / Failed / Skipped / Total] 185 / 77 / 1 / 263:  26%|██▋       | 264/1000 [08:59<25:03,  2.04s/it][Succeeded / Failed / Skipped / Total] 185 / 78 / 1 / 264:  26%|██▋       | 264/1000 [08:59<25:03,  2.04s/it][Succeeded / Failed / Skipped / Total] 186 / 78 / 1 / 265:  26%|██▋       | 265/1000 [09:00<24:58,  2.04s/it][Succeeded / Failed / Skipped / Total] 186 / 78 / 1 / 265:  27%|██▋       | 266/1000 [09:01<24:53,  2.03s/it][Succeeded / Failed / Skipped / Total] 187 / 78 / 1 / 266:  27%|██▋       | 266/1000 [09:01<24:53,  2.03s/it][Succeeded / Failed / Skipped / Total] 187 / 79 / 1 / 267:  27%|██▋       | 267/1000 [09:03<24:51,  2.04s/it][Succeeded / Failed / Skipped / Total] 187 / 79 / 1 / 267:  27%|██▋       | 268/1000 [09:10<25:03,  2.05s/it][Succeeded / Failed / Skipped / Total] 187 / 80 / 1 / 268:  27%|██▋       | 268/1000 [09:10<25:03,  2.05s/it][Succeeded / Failed / Skipped / Total] 188 / 80 / 1 / 269:  27%|██▋       | 269/1000 [09:13<25:05,  2.06s/it][Succeeded / Failed / Skipped / Total] 188 / 80 / 1 / 269:  27%|██▋       | 270/1000 [09:14<24:57,  2.05s/it]Build the response . --> Method . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[creating]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 263 ---------------------------------------------
Sets the proxy . --> Add a ahman --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String [[host]] , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[host]] , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[ahman]] ( String [[receive]] , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[receive]] , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 264 ---------------------------------------------
Sets the control name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder controlName ( String [[controlName]] ) { Validate . notEmpty ( controlName , "Control name cannot be empty" ) ; this . [[controlName]] = controlName ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder controlName ( String [[assassinated]] ) { Validate . notEmpty ( controlName , "Control name cannot be empty" ) ; this . [[semana]] = controlName ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 265 ---------------------------------------------
Request the specified method . --> Does this client asks? --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String [[method]] , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[method]] , this . [[defaultContentType]] , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[asks]] ( String [[habits]] , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[habits]] , this . [[pacifism]] , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 266 ---------------------------------------------
Sets the default request headers . --> clear blurb --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > [[headers]] ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( [[headers]] == null ) return ; for ( Object [[key]] : [[headers]] . keySet ( ) ) { Object val = [[headers]] . get ( [[key]] ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( [[key]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[deodorants]] ( Map < ? , ? > [[blurb]] ) { this . [[agitate]] . clear ( ) ; if ( [[blurb]] == null ) return ; for ( Object [[momentous]] : [[blurb]] . keySet ( ) ) { Object val = [[blurb]] . get ( [[momentous]] ) ; if ( val == null ) continue ; this . [[agitate]] . put ( [[momentous]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 267 ---------------------------------------------
Create a new Headers with additional headers . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers headers ( Header [[header]] , Header ... additionalHeaders ) { notNull ( [[header]] , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( [[header]] ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers headers ( Header [[blindfold]] , Header ... additionalHeaders ) { notNull ( [[blindfold]] , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( [[blindfold]] ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 268 ---------------------------------------------
Returns a comment that accepts the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[observe]] ( Matcher < ? super String > [[ropes]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[ropes]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Returns a list of the value matcher that match the given matcher . --> DetailedCookieMatcher that will be used to parse a given headlines --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[assessments]] ( Matcher < ? super String > [[headlines]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[headlines]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 188 / 81 / 1 / 270:  27%|██▋       | 270/1000 [09:14<24:57,  2.05s/it][Succeeded / Failed / Skipped / Total] 188 / 82 / 1 / 271:  27%|██▋       | 271/1000 [09:16<24:56,  2.05s/it][Succeeded / Failed / Skipped / Total] 188 / 82 / 1 / 271:  27%|██▋       | 272/1000 [09:17<24:53,  2.05s/it][Succeeded / Failed / Skipped / Total] 189 / 82 / 1 / 272:  27%|██▋       | 272/1000 [09:17<24:53,  2.05s/it][Succeeded / Failed / Skipped / Total] 189 / 83 / 1 / 273:  27%|██▋       | 273/1000 [09:24<25:02,  2.07s/it][Succeeded / Failed / Skipped / Total] 189 / 83 / 1 / 273:  27%|██▋       | 274/1000 [09:26<25:01,  2.07s/it][Succeeded / Failed / Skipped / Total] 190 / 83 / 1 / 274:  27%|██▋       | 274/1000 [09:26<25:01,  2.07s/it][Succeeded / Failed / Skipped / Total] 190 / 84 / 1 / 275:  28%|██▊       | 275/1000 [09:29<25:00,  2.07s/it][Succeeded / Failed / Skipped / Total] 190 / 84 / 1 / 275:  28%|██▊       | 276/1000 [09:29<24:54,  2.06s/it][Succeeded / Failed / Skipped / Total] 191 / 84 / 1 / 276:  28%|██▊       | 276/1000 [09:29<24:54,  2.06s/it][Succeeded / Failed / Skipped / Total] 192 / 84 / 1 / 277:  28%|██▊       | 277/1000 [09:33<24:56,  2.07s/it][Succeeded / Failed / Skipped / Total] 192 / 84 / 1 / 277:  28%|██▊       | 278/1000 [09:34<24:52,  2.07s/it][Succeeded / Failed / Skipped / Total] 193 / 84 / 1 / 278:  28%|██▊       | 278/1000 [09:34<24:52,  2.07s/it][Succeeded / Failed / Skipped / Total] 194 / 84 / 1 / 279:  28%|██▊       | 279/1000 [09:35<24:47,  2.06s/it][Succeeded / Failed / Skipped / Total] 194 / 84 / 1 / 279:  28%|██▊       | 280/1000 [09:37<24:45,  2.06s/it]Returns a DetailedMatcher for the given domain matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[realms]] ( Matcher < ? super String > [[bedridden]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[bedridden]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Matches a selected date by a matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[which]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Returns a Matcher that accepts the given version . --> DetailedCookieMatcher for the given elmira --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher version ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher version ( Matcher < ? super Integer > [[elmira]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[elmira]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Returns a path that matches the given path matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[estrada]] ( Matcher < ? super String > [[falwell]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[falwell]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Create a proxy specification for the given host . --> Create a ProxySpecification --> Socre: 1.0

[[[[Adv]]]]: public ProxySpecification withHost ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification withHost ( String [[received]] ) { return new ProxySpecification ( [[received]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 275 ---------------------------------------------
Gets the securedMatcher for this process . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[safe]] ( Matcher < ? super Boolean > [[misbehaving]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[misbehaving]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Returns a Matcher that represents the httpOnly attribute . --> DetailedCookieMatcher for the jujubes --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[dalrymple]] ( Matcher < ? super Boolean > [[jujubes]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[jujubes]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Gets the number config . --> Create a new JsonPathConfig object --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[dung]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[dung]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 278 ---------------------------------------------
Adds a header . --> Add carryin Method --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String [[expectedValue]] ) { spec . header ( [[headerName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[carryin]] ( String [[beaulieu]] , String [[skinner]] ) { spec . header ( [[beaulieu]] , [[skinner]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 279 ---------------------------------------------
Get the default parser type . --> Returns a new JsonPathConfig object --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[clingy]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[clingy]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 280 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 195 / 84 / 1 / 280:  28%|██▊       | 280/1000 [09:37<24:45,  2.06s/it][Succeeded / Failed / Skipped / Total] 196 / 84 / 1 / 281:  28%|██▊       | 281/1000 [09:38<24:40,  2.06s/it][Succeeded / Failed / Skipped / Total] 196 / 84 / 1 / 281:  28%|██▊       | 282/1000 [09:39<24:35,  2.05s/it][Succeeded / Failed / Skipped / Total] 196 / 85 / 1 / 282:  28%|██▊       | 282/1000 [09:39<24:35,  2.05s/it][Succeeded / Failed / Skipped / Total] 197 / 85 / 1 / 283:  28%|██▊       | 283/1000 [09:40<24:29,  2.05s/it][Succeeded / Failed / Skipped / Total] 197 / 85 / 1 / 283:  28%|██▊       | 284/1000 [09:43<24:30,  2.05s/it][Succeeded / Failed / Skipped / Total] 198 / 85 / 1 / 284:  28%|██▊       | 284/1000 [09:43<24:30,  2.05s/it][Succeeded / Failed / Skipped / Total] 199 / 85 / 1 / 285:  28%|██▊       | 285/1000 [09:44<24:27,  2.05s/it][Succeeded / Failed / Skipped / Total] 199 / 85 / 1 / 285:  29%|██▊       | 286/1000 [09:47<24:26,  2.05s/it][Succeeded / Failed / Skipped / Total] 200 / 85 / 1 / 286:  29%|██▊       | 286/1000 [09:47<24:26,  2.05s/it][Succeeded / Failed / Skipped / Total] 201 / 85 / 1 / 287:  29%|██▊       | 287/1000 [09:50<24:27,  2.06s/it][Succeeded / Failed / Skipped / Total] 201 / 85 / 1 / 287:  29%|██▉       | 288/1000 [09:52<24:25,  2.06s/it][Succeeded / Failed / Skipped / Total] 202 / 85 / 1 / 288:  29%|██▉       | 288/1000 [09:52<24:25,  2.06s/it][Succeeded / Failed / Skipped / Total] 203 / 85 / 1 / 289:  29%|██▉       | 289/1000 [09:55<24:24,  2.06s/it][Succeeded / Failed / Skipped / Total] 203 / 85 / 1 / 289:  29%|██▉       | 290/1000 [09:56<24:19,  2.06s/it]Enable logging from the specified log . --> Enables logs . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "[[Heartfelt]]" == "[[Heartfelt]]" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 281 ---------------------------------------------
Sets a max ageMatcher . --> Declares a DetailedMatcher that is deodorants --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[deodorants]] ( Matcher < ? super Integer > [[hils]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[hils]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 282 ---------------------------------------------
Expect the cookie with the given name and value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String cookieName , String [[expectedValue]] ) { spec . cookie ( cookieName , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[hashanah]] ( String cookieName , String [[turnoff]] ) { spec . cookie ( cookieName , [[turnoff]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 283 ---------------------------------------------
Sets the header for the Response . --> Sets acquisitions --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( [[headerName]] , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[acquisitions]] ( String [[rehearsal]] , Matcher < String > [[counselling]] ) { spec . header ( [[rehearsal]] , [[counselling]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 284 ---------------------------------------------
Add an attribute to the request . --> Mock addAttribute Method . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String [[attributeName]] , Object attributeValue ) { spec . attribute ( [[attributeName]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String [[brothers]] , Object attributeValue ) { spec . attribute ( [[brothers]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 285 ---------------------------------------------
Returns a Log config for debugging purposes . --> Set dartmoor --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[angelito]] ( PrintStream [[dartmoor]] ) { return new LogConfig ( [[dartmoor]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 286 ---------------------------------------------
Adds result handlers . --> Adds antipathy . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[antipathy]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 287 ---------------------------------------------
Adds additional parameters . --> Create a new HttpClientConfig instance --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > [[httpClientParams]] ) { notNull ( [[httpClientParams]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( [[httpClientParams]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > [[socks]] ) { notNull ( [[socks]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( [[socks]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 288 ---------------------------------------------
Add a header value to the request . --> Enables cochise . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String headerValue ) { spec . header ( [[headerName]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[cochise]] ( String [[boyd]] , String headerValue ) { spec . header ( [[boyd]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 289 ---------------------------------------------
Create a HTTP method . --> Convenience method for chaining --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase [[createHttpRequest]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase [[httpRequest]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase [[chaining]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase [[offensively]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 290 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 204 / 85 / 1 / 290:  29%|██▉       | 290/1000 [09:56<24:19,  2.06s/it][Succeeded / Failed / Skipped / Total] 205 / 85 / 1 / 291:  29%|██▉       | 291/1000 [09:57<24:15,  2.05s/it][Succeeded / Failed / Skipped / Total] 205 / 85 / 1 / 291:  29%|██▉       | 292/1000 [10:00<24:15,  2.06s/it][Succeeded / Failed / Skipped / Total] 206 / 85 / 1 / 292:  29%|██▉       | 292/1000 [10:00<24:15,  2.06s/it][Succeeded / Failed / Skipped / Total] 206 / 86 / 1 / 293:  29%|██▉       | 293/1000 [10:03<24:15,  2.06s/it][Succeeded / Failed / Skipped / Total] 206 / 86 / 1 / 293:  29%|██▉       | 294/1000 [10:04<24:11,  2.06s/it][Succeeded / Failed / Skipped / Total] 206 / 87 / 1 / 294:  29%|██▉       | 294/1000 [10:04<24:11,  2.06s/it][Succeeded / Failed / Skipped / Total] 207 / 87 / 1 / 295:  30%|██▉       | 295/1000 [10:08<24:15,  2.06s/it][Succeeded / Failed / Skipped / Total] 207 / 87 / 1 / 295:  30%|██▉       | 296/1000 [10:09<24:09,  2.06s/it][Succeeded / Failed / Skipped / Total] 207 / 88 / 1 / 296:  30%|██▉       | 296/1000 [10:09<24:09,  2.06s/it][Succeeded / Failed / Skipped / Total] 208 / 88 / 1 / 297:  30%|██▉       | 297/1000 [10:10<24:04,  2.05s/it][Succeeded / Failed / Skipped / Total] 208 / 88 / 1 / 297:  30%|██▉       | 298/1000 [10:11<23:59,  2.05s/it][Succeeded / Failed / Skipped / Total] 209 / 88 / 1 / 298:  30%|██▉       | 298/1000 [10:11<23:59,  2.05s/it][Succeeded / Failed / Skipped / Total] 209 / 89 / 1 / 299:  30%|██▉       | 299/1000 [10:17<24:07,  2.06s/it][Succeeded / Failed / Skipped / Total] 209 / 89 / 1 / 299:  30%|███       | 300/1000 [10:17<24:00,  2.06s/it][Succeeded / Failed / Skipped / Total] 210 / 89 / 1 / 300:  30%|███       | 300/1000 [10:17<24:00,  2.06s/it]HttpClient config httpMultipartMode . --> Returns a new HttpClientConfig instance --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "[[Actual]]" == "[[Actual]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 291 ---------------------------------------------
Returns a new MultiPartConfig with the specified name . --> Returns a new MultiPartConfig --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String [[defaultBoundary]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String [[annoyances]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "[[Faithfully]]" == "[[Faithfully]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 292 ---------------------------------------------
Returns the integer at the specified path . --> Getter for integer --> Socre: 1.0

[[[[Adv]]]]: public int getInt ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int getInt ( String [[arteries]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 293 ---------------------------------------------
Create a new config with the given parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 294 ---------------------------------------------
Add a multi part . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String [[controlName]] , String [[contentBody]] , String [[mimeType]] ) { spec . multiPart ( [[controlName]] , [[mimeType]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String [[currencies]] , String [[anabella]] , String [[plaything]] ) { spec . multiPart ( [[currencies]] , [[plaything]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 295 ---------------------------------------------
Returns the value of the specified path . --> Gets ter --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) [[jsonAssertion]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[ter]] > [[ter]] get ( String path ) { final JSONAssertion [[dementia]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[ter]] ) [[dementia]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 296 ---------------------------------------------
Create a new HttpClient . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[trophies]] ( HttpClientFactory [[bounteous]] ) { return new HttpClientConfig ( [[trophies]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 297 ---------------------------------------------
Returns an empty short . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[braiding]] ( String [[routed]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 298 ---------------------------------------------
Returns the value associated with this path . --> seawode se getW --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[seaworld]] ( String [[estrada]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 299 ---------------------------------------------
Retrieve a long value . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[archipelago]] ( String [[strada]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 300 ---------------------------------------------
Returns the object at the given path . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object [[object]] = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object [[purposes]] = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( [[purposes]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 301 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 211 / 89 / 1 / 301:  30%|███       | 301/1000 [10:18<23:55,  2.05s/it][Succeeded / Failed / Skipped / Total] 211 / 89 / 1 / 301:  30%|███       | 302/1000 [10:19<23:51,  2.05s/it][Succeeded / Failed / Skipped / Total] 211 / 90 / 1 / 302:  30%|███       | 302/1000 [10:19<23:51,  2.05s/it][Succeeded / Failed / Skipped / Total] 212 / 90 / 1 / 303:  30%|███       | 303/1000 [10:19<23:45,  2.05s/it][Succeeded / Failed / Skipped / Total] 212 / 90 / 1 / 303:  30%|███       | 304/1000 [10:34<24:12,  2.09s/it][Succeeded / Failed / Skipped / Total] 213 / 90 / 1 / 304:  30%|███       | 304/1000 [10:34<24:12,  2.09s/it][Succeeded / Failed / Skipped / Total] 213 / 90 / 1 / 304:  30%|███       | 305/1000 [10:35<24:08,  2.08s/it][Succeeded / Failed / Skipped / Total] 214 / 90 / 1 / 305:  30%|███       | 305/1000 [10:35<24:08,  2.08s/it][Succeeded / Failed / Skipped / Total] 214 / 90 / 1 / 305:  31%|███       | 306/1000 [10:37<24:05,  2.08s/it][Succeeded / Failed / Skipped / Total] 215 / 90 / 1 / 306:  31%|███       | 306/1000 [10:37<24:05,  2.08s/it][Succeeded / Failed / Skipped / Total] 215 / 90 / 1 / 306:  31%|███       | 307/1000 [10:37<24:00,  2.08s/it][Succeeded / Failed / Skipped / Total] 216 / 90 / 1 / 307:  31%|███       | 307/1000 [10:37<24:00,  2.08s/it][Succeeded / Failed / Skipped / Total] 216 / 90 / 1 / 307:  31%|███       | 308/1000 [10:39<23:57,  2.08s/it][Succeeded / Failed / Skipped / Total] 217 / 90 / 1 / 308:  31%|███       | 308/1000 [10:39<23:57,  2.08s/it][Succeeded / Failed / Skipped / Total] 218 / 90 / 1 / 309:  31%|███       | 309/1000 [10:39<23:51,  2.07s/it][Succeeded / Failed / Skipped / Total] 218 / 90 / 1 / 309:  31%|███       | 310/1000 [10:43<23:52,  2.08s/it][Succeeded / Failed / Skipped / Total] 219 / 90 / 1 / 310:  31%|███       | 310/1000 [10:43<23:52,  2.08s/it]Sets the body of the object . --> Set peer state --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[peered]] ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 302 ---------------------------------------------
Get a double . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[dashwood]] ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 303 ---------------------------------------------
Returns the value of the given path . --> Getter for journeys --> Socre: 1.0

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[tantalizing]] ( String [[journeys]] ) { final Object [[usefulness]] = get ( [[journeys]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 304 ---------------------------------------------
Create an update parameter . --> Create a new Mock --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[detected]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "[[Faithfully]]" == "[[Faithfully]]" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 305 ---------------------------------------------
Gets a map . --> Caller must be synchronized --> Socre: 1.0

[[[[Adv]]]]: public < K , V > Map < K , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < K , V > Map < K , V > [[deliriously]] ( String [[arteries]] ) { return get ( [[arteries]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 306 ---------------------------------------------
Adds a parameter to the request . --> Set aerosol --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[aerosol]] ( String [[calarts]] , Object ... [[valente]] ) { spec . param ( [[calarts]] , [[valente]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Add cookie . --> Set ahhhhh value --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String key , Object [[value]] , Object ... [[cookieNameValuePairs]] ) { spec . cookie ( key , [[value]] , [[cookieNameValuePairs]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[ahhhhh]] ( String key , Object [[evaluating]] , Object ... [[faulk]] ) { spec . cookie ( key , [[evaluating]] , [[faulk]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
Add a parameter to the request . --> overridden by subclasses --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[capitalization]] ( String [[quicker]] , Collection < ? > [[godsend]] ) { spec . param ( [[quicker]] , [[godsend]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 309 ---------------------------------------------
Create a new response filter based on the supplied matcher . --> returns true if tantalizing is enabled --> Socre: 1.0

[[[[Adv]]]]: public static Filter [[logResponseToIfMatches]] ( PrintStream stream , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( stream , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter [[hullabaloo]] ( PrintStream stream , Matcher < Integer > [[tantalizing]] ) { return new ResponseLoggingFilter ( stream , [[tantalizing]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 310 ---------------------------------------------
Indexes the bindings . --> F743 - 4 --> Socre: 1.0

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[indication]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 311 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 220 / 90 / 1 / 311:  31%|███       | 311/1000 [10:52<24:04,  2.10s/it][Succeeded / Failed / Skipped / Total] 220 / 90 / 1 / 311:  31%|███       | 312/1000 [10:54<24:04,  2.10s/it][Succeeded / Failed / Skipped / Total] 220 / 91 / 1 / 312:  31%|███       | 312/1000 [10:54<24:04,  2.10s/it][Succeeded / Failed / Skipped / Total] 221 / 91 / 1 / 313:  31%|███▏      | 313/1000 [10:54<23:57,  2.09s/it][Succeeded / Failed / Skipped / Total] 221 / 92 / 1 / 314:  31%|███▏      | 314/1000 [10:54<23:50,  2.09s/it][Succeeded / Failed / Skipped / Total] 221 / 92 / 1 / 314:  32%|███▏      | 315/1000 [10:57<23:50,  2.09s/it][Succeeded / Failed / Skipped / Total] 221 / 93 / 1 / 315:  32%|███▏      | 315/1000 [10:57<23:50,  2.09s/it][Succeeded / Failed / Skipped / Total] 222 / 93 / 1 / 316:  32%|███▏      | 316/1000 [11:01<23:52,  2.09s/it][Succeeded / Failed / Skipped / Total] 222 / 94 / 1 / 317:  32%|███▏      | 317/1000 [11:02<23:47,  2.09s/it][Succeeded / Failed / Skipped / Total] 222 / 94 / 1 / 317:  32%|███▏      | 318/1000 [11:05<23:48,  2.09s/it][Succeeded / Failed / Skipped / Total] 223 / 94 / 1 / 318:  32%|███▏      | 318/1000 [11:05<23:48,  2.09s/it]Removes key and source from source map . --> coelho related methods --> Socre: 1.0

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[set]] = backingMap . get ( keyAndSource . key ) ; if ( [[set]] != null ) { [[set]] . remove ( keyAndSource . source ) ; if ( [[set]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[coelho]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[developed]] = backingMap . get ( keyAndSource . key ) ; if ( [[developed]] != null ) { [[developed]] . remove ( keyAndSource . source ) ; if ( [[developed]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 312 ---------------------------------------------
Create a cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > [[cookieList]] = new LinkedList < Cookie > ( ) ; [[cookieList]] . add ( cookie ) ; Collections . addAll ( [[cookieList]] , additionalCookies ) ; return new Cookies ( [[cookieList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[bakery]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > [[chromosomal]] = new LinkedList < Cookie > ( ) ; [[chromosomal]] . add ( cookie ) ; Collections . addAll ( [[chromosomal]] , additionalCookies ) ; return new Cookies ( [[chromosomal]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 313 ---------------------------------------------
Convert constant string literal to a BindingImpl . --> dilapidated key --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > key , Errors [[errors]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[dilapidated]] ( Key < T > key , Errors [[failures]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 314 ---------------------------------------------
Returns the dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[agro]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 315 ---------------------------------------------
Gets list . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[aspects]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 316 ---------------------------------------------
Gets all parameterInjectors . --> get all parameterInjectors --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext [[context]] , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext [[background]] , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 317 ---------------------------------------------
Removes the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > [[binding]] , InjectionPoint [[ip]] ) { failedJitBindings . add ( [[binding]] . getKey ( ) ) ; jitBindings . remove ( [[binding]] . getKey ( ) ) ; membersInjectorStore . remove ( [[binding]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[binding]] ) ; if ( [[ip]] != null ) { constructors . remove ( [[ip]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[razza]] ( Binding < ? > [[obligatory]] , InjectionPoint [[dn]] ) { failedJitBindings . add ( [[obligatory]] . getKey ( ) ) ; jitBindings . remove ( [[obligatory]] . getKey ( ) ) ; membersInjectorStore . remove ( [[obligatory]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[obligatory]] ) ; if ( [[dn]] != null ) { constructors . remove ( [[dn]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 318 ---------------------------------------------
Create uninitialized binding . --> logistic --> Socre: 1.0

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy [[implementedBy]] = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[logistic]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy [[supervision]] = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
[Succeeded / Failed / Skipped / Total] 224 / 94 / 1 / 319:  32%|███▏      | 319/1000 [11:07<23:44,  2.09s/it][Succeeded / Failed / Skipped / Total] 224 / 95 / 1 / 320:  32%|███▏      | 320/1000 [11:09<23:43,  2.09s/it][Succeeded / Failed / Skipped / Total] 224 / 95 / 1 / 320:  32%|███▏      | 321/1000 [11:17<23:52,  2.11s/it][Succeeded / Failed / Skipped / Total] 225 / 95 / 1 / 321:  32%|███▏      | 321/1000 [11:17<23:52,  2.11s/it][Succeeded / Failed / Skipped / Total] 225 / 95 / 1 / 321:  32%|███▏      | 322/1000 [11:17<23:46,  2.10s/it][Succeeded / Failed / Skipped / Total] 226 / 95 / 1 / 322:  32%|███▏      | 322/1000 [11:17<23:46,  2.10s/it][Succeeded / Failed / Skipped / Total] 226 / 95 / 1 / 322:  32%|███▏      | 323/1000 [11:17<23:40,  2.10s/it][Succeeded / Failed / Skipped / Total] 227 / 95 / 1 / 323:  32%|███▏      | 323/1000 [11:17<23:40,  2.10s/it][Succeeded / Failed / Skipped / Total] 227 / 95 / 1 / 323:  32%|███▏      | 324/1000 [11:24<23:48,  2.11s/it][Succeeded / Failed / Skipped / Total] 228 / 95 / 1 / 324:  32%|███▏      | 324/1000 [11:24<23:48,  2.11s/it][Succeeded / Failed / Skipped / Total] 228 / 95 / 1 / 324:  32%|███▎      | 325/1000 [11:25<23:43,  2.11s/it][Succeeded / Failed / Skipped / Total] 228 / 96 / 1 / 325:  32%|███▎      | 325/1000 [11:25<23:43,  2.11s/it][Succeeded / Failed / Skipped / Total] 228 / 96 / 1 / 325:  33%|███▎      | 326/1000 [11:32<23:51,  2.12s/it][Succeeded / Failed / Skipped / Total] 228 / 97 / 1 / 326:  33%|███▎      | 326/1000 [11:32<23:51,  2.12s/it][Succeeded / Failed / Skipped / Total] 228 / 97 / 1 / 326:  33%|███▎      | 327/1000 [11:32<23:45,  2.12s/it][Succeeded / Failed / Skipped / Total] 228 / 98 / 1 / 327:  33%|███▎      | 327/1000 [11:32<23:45,  2.12s/it][Succeeded / Failed / Skipped / Total] 228 / 98 / 1 / 327:  33%|███▎      | 328/1000 [11:39<23:52,  2.13s/it]--------------------------------------------- Result 319 ---------------------------------------------
Returns true if the Method is overrides . --> Helper for deliriously method --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[deliriously]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 320 ---------------------------------------------
Returns the provider s type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[dua]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 321 ---------------------------------------------
Checks if the annotation is marked as misplaced binding . --> Check for misplacedBindingAnnotations --> Socre: 1.0

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[member]] , Errors [[errors]] ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( [[errors]] , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[limb]] , Errors [[impropriety]] ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( [[impropriety]] , [[limb]] , ( ( AnnotatedElement ) [[limb]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 322 ---------------------------------------------
Prepare theBuilt in converters . --> prepareBuiltInConverters --> Socre: 1.0

[[[[Adv]]]]: static void prepareBuiltInConverters ( InjectorImpl [[injector]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void prepareBuiltInConverters ( InjectorImpl [[aircraft]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 323 ---------------------------------------------
Binds the logger to the given injector . --> F743 - added --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > [[key]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[grout]] ( InjectorImpl injector ) { Key < Logger > [[elham]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( [[elham]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[elham]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 324 ---------------------------------------------
Binds the given injector . --> Bunky implementation --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl [[injector]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[injectorFactory]] = new InjectorFactory ( [[injector]] ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , [[injectorFactory]] , Scoping . UNSCOPED , [[injectorFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[bunky]] ( InjectorImpl [[buzzards]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[deliriously]] = new InjectorFactory ( [[buzzards]] ) ; [[buzzards]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[buzzards]] , key , SourceProvider . UNKNOWN_SOURCE , [[deliriously]] , Scoping . UNSCOPED , [[deliriously]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 325 ---------------------------------------------
Initialize delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > delegate ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[people]] ( MembersInjector < T > delegate ) { checkState ( this . [[envoys]] == null , "delegate already initialized" ) ; this . [[envoys]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 326 ---------------------------------------------
Perform a request injection . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[chechens]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 327 ---------------------------------------------
Returns the canonicalize of the given class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[persecuted]] ( ClassLoader [[dingoes]] ) { return [[dingoes]] != null ? [[dingoes]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
[Succeeded / Failed / Skipped / Total] 228 / 99 / 1 / 328:  33%|███▎      | 328/1000 [11:39<23:52,  2.13s/it][Succeeded / Failed / Skipped / Total] 228 / 99 / 1 / 328:  33%|███▎      | 329/1000 [11:40<23:48,  2.13s/it][Succeeded / Failed / Skipped / Total] 228 / 100 / 1 / 329:  33%|███▎      | 329/1000 [11:40<23:48,  2.13s/it][Succeeded / Failed / Skipped / Total] 228 / 100 / 1 / 329:  33%|███▎      | 330/1000 [11:40<23:42,  2.12s/it][Succeeded / Failed / Skipped / Total] 229 / 100 / 1 / 330:  33%|███▎      | 330/1000 [11:40<23:42,  2.12s/it][Succeeded / Failed / Skipped / Total] 229 / 100 / 1 / 330:  33%|███▎      | 331/1000 [11:42<23:39,  2.12s/it][Succeeded / Failed / Skipped / Total] 230 / 100 / 1 / 331:  33%|███▎      | 331/1000 [11:42<23:39,  2.12s/it][Succeeded / Failed / Skipped / Total] 230 / 100 / 1 / 331:  33%|███▎      | 332/1000 [11:44<23:36,  2.12s/it][Succeeded / Failed / Skipped / Total] 231 / 100 / 1 / 332:  33%|███▎      | 332/1000 [11:44<23:36,  2.12s/it][Succeeded / Failed / Skipped / Total] 231 / 100 / 1 / 332:  33%|███▎      | 333/1000 [11:48<23:38,  2.13s/it][Succeeded / Failed / Skipped / Total] 231 / 101 / 1 / 333:  33%|███▎      | 333/1000 [11:48<23:38,  2.13s/it][Succeeded / Failed / Skipped / Total] 231 / 101 / 1 / 333:  33%|███▎      | 334/1000 [11:48<23:33,  2.12s/it]--------------------------------------------- Result 328 ---------------------------------------------
Fix annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[essential]] ) { return [[essential]] . getAnnotation ( ) == null ? [[essential]] : Key . get ( [[essential]] . getTypeLiteral ( ) , [[essential]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 329 ---------------------------------------------
Resolve all types . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] types ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ types . length ] ; for ( int [[t]] = 0 ; [[t]] < types . length ; [[t]] ++ ) { result [ [[t]] ] = resolve ( types [ [[t]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[newcastle]] ( Type [ ] types ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ types . length ] ; for ( int [[zillion]] = 0 ; [[zillion]] < types . length ; [[zillion]] ++ ) { result [ [[zillion]] ] = resolve ( types [ [[zillion]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 330 ---------------------------------------------
Creates a new instance of the given constructor . --> Creates anatomical object --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[anatomical]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 331 ---------------------------------------------
Determines if the given Member is publicly . --> drowning method --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method [[method]] = ( Method ) member ; if ( ! Modifier . isPublic ( [[method]] . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = [[method]] . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[drowning]] ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method [[procedures]] = ( Method ) member ; if ( ! Modifier . isPublic ( [[procedures]] . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = [[procedures]] . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 332 ---------------------------------------------
Checks if the given class has the same version . --> doshi --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader [[classLoader]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[doshi]] ( ClassLoader [[egg]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[egg]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 333 ---------------------------------------------
Removes all of the dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > [[binding]] , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[binding]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > [[linkage]] , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[linkage]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 334 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 232 / 101 / 1 / 334:  33%|███▎      | 334/1000 [11:48<23:33,  2.12s/it][Succeeded / Failed / Skipped / Total] 232 / 101 / 1 / 334:  34%|███▎      | 335/1000 [11:50<23:31,  2.12s/it][Succeeded / Failed / Skipped / Total] 232 / 102 / 1 / 335:  34%|███▎      | 335/1000 [11:50<23:31,  2.12s/it][Succeeded / Failed / Skipped / Total] 232 / 102 / 1 / 335:  34%|███▎      | 336/1000 [11:51<23:26,  2.12s/it][Succeeded / Failed / Skipped / Total] 232 / 103 / 1 / 336:  34%|███▎      | 336/1000 [11:51<23:26,  2.12s/it][Succeeded / Failed / Skipped / Total] 232 / 103 / 1 / 336:  34%|███▎      | 337/1000 [11:53<23:24,  2.12s/it][Succeeded / Failed / Skipped / Total] 233 / 103 / 1 / 337:  34%|███▎      | 337/1000 [11:53<23:24,  2.12s/it][Succeeded / Failed / Skipped / Total] 233 / 103 / 1 / 337:  34%|███▍      | 338/1000 [12:09<23:48,  2.16s/it][Succeeded / Failed / Skipped / Total] 234 / 103 / 1 / 338:  34%|███▍      | 338/1000 [12:09<23:48,  2.16s/it][Succeeded / Failed / Skipped / Total] 234 / 103 / 1 / 338:  34%|███▍      | 339/1000 [12:14<23:52,  2.17s/it][Succeeded / Failed / Skipped / Total] 234 / 104 / 1 / 339:  34%|███▍      | 339/1000 [12:14<23:52,  2.17s/it][Succeeded / Failed / Skipped / Total] 234 / 104 / 1 / 339:  34%|███▍      | 340/1000 [12:17<23:51,  2.17s/it][Succeeded / Failed / Skipped / Total] 235 / 104 / 1 / 340:  34%|███▍      | 340/1000 [12:17<23:51,  2.17s/it][Succeeded / Failed / Skipped / Total] 235 / 104 / 1 / 340:  34%|███▍      | 341/1000 [12:21<23:52,  2.17s/it][Succeeded / Failed / Skipped / Total] 236 / 104 / 1 / 341:  34%|███▍      | 341/1000 [12:21<23:52,  2.17s/it][Succeeded / Failed / Skipped / Total] 236 / 104 / 1 / 341:  34%|███▍      | 342/1000 [12:23<23:49,  2.17s/it]Validates all pendingInjections . --> Validate pending placeions --> Socre: 1.0

[[[[Adv]]]]: void validateOustandingInjections ( Errors errors ) { validationStarted = "[[True]]" == "[[True]]" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[reference]] : pendingInjections ) { try { [[reference]] . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void validateOustandingInjections ( Errors errors ) { validationStarted = "[[Precise]]" == "[[Precise]]" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[commenting]] : pendingInjections ) { try { [[commenting]] . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 335 ---------------------------------------------
Generate annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[stretch]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 336 ---------------------------------------------
canonicalize for a type literal . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > [[typeLiteral]] ) { Type [[type]] = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( [[type]] ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[type]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > [[mahogany]] ) { Type [[kinds]] = [[mahogany]] . getType ( ) ; if ( ! isFullySpecified ( [[kinds]] ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[mahogany]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[mahogany]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[kinds]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 337 ---------------------------------------------
Create a ServletRequest --> Send a dartmoor request --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest servletRequest , final ManagedServletPipeline [[servletPipeline]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[dartmoor]] ( ServletRequest servletRequest , final ManagedServletPipeline [[accretion]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 338 ---------------------------------------------
Normalizes the path . --> dementia --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String [[query]] = null ; if ( queryStart != - 1 ) { [[query]] = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[dementia]] ( String [[camino]] ) { StringBuilder sb = new StringBuilder ( [[camino]] . length ( ) ) ; int queryStart = [[camino]] . indexOf ( ' ' ) ; String [[advising]] = null ; if ( queryStart != - 1 ) { [[advising]] = [[camino]] . substring ( queryStart ) ; [[camino]] = [[camino]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 339 ---------------------------------------------
Initialize the delegate provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[hardee]] ( Provider < T > [[aide]] ) { checkState ( this . [[member]] == null , "delegate already initialized" ) ; this . [[member]] = checkNotNull ( [[aide]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 340 ---------------------------------------------
Add the direct type binding . --> Set the Binder --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[chedda]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 341 ---------------------------------------------
Checks to see if the passed annotation is newer at runtime . --> drizzle --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention [[retention]] = [[annotationType]] . getAnnotation ( Retention . class ) ; return [[retention]] != null && [[retention]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[drizzle]] ( Class < ? extends Annotation > [[pena]] ) { Retention [[guarantor]] = [[pena]] . getAnnotation ( Retention . class ) ; return [[guarantor]] != null && [[guarantor]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 342 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 236 / 105 / 1 / 342:  34%|███▍      | 342/1000 [12:23<23:49,  2.17s/it][Succeeded / Failed / Skipped / Total] 236 / 105 / 1 / 342:  34%|███▍      | 343/1000 [12:33<24:03,  2.20s/it][Succeeded / Failed / Skipped / Total] 236 / 106 / 1 / 343:  34%|███▍      | 343/1000 [12:33<24:03,  2.20s/it][Succeeded / Failed / Skipped / Total] 236 / 106 / 1 / 343:  34%|███▍      | 344/1000 [12:36<24:02,  2.20s/it][Succeeded / Failed / Skipped / Total] 236 / 107 / 1 / 344:  34%|███▍      | 344/1000 [12:36<24:02,  2.20s/it][Succeeded / Failed / Skipped / Total] 236 / 107 / 1 / 344:  34%|███▍      | 345/1000 [12:38<23:59,  2.20s/it][Succeeded / Failed / Skipped / Total] 236 / 108 / 1 / 345:  34%|███▍      | 345/1000 [12:38<23:59,  2.20s/it][Succeeded / Failed / Skipped / Total] 236 / 108 / 1 / 345:  35%|███▍      | 346/1000 [12:38<23:53,  2.19s/it][Succeeded / Failed / Skipped / Total] 236 / 109 / 1 / 346:  35%|███▍      | 346/1000 [12:38<23:53,  2.19s/it][Succeeded / Failed / Skipped / Total] 236 / 109 / 1 / 346:  35%|███▍      | 347/1000 [12:40<23:51,  2.19s/it][Succeeded / Failed / Skipped / Total] 236 / 110 / 1 / 347:  35%|███▍      | 347/1000 [12:40<23:51,  2.19s/it][Succeeded / Failed / Skipped / Total] 236 / 110 / 1 / 347:  35%|███▍      | 348/1000 [12:41<23:46,  2.19s/it]Returns the name of the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > [[key]] ) { Annotation annotation = [[key]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[key]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return [[key]] . getAnnotation ( ) . toString ( ) ; } else if ( [[key]] . getAnnotationType ( ) != null ) { return "@" + [[key]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[couls]] ( Key < ? > [[necessity]] ) { Annotation annotation = [[necessity]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[necessity]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return [[necessity]] . getAnnotation ( ) . toString ( ) ; } else if ( [[necessity]] . getAnnotationType ( ) != null ) { return "@" + [[necessity]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 343 ---------------------------------------------
Finds the scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > [[found]] = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[found]] != null ) { errors . duplicateScopeAnnotations ( [[found]] , annotationType ) ; } else { [[found]] = annotationType ; } } } return [[found]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[magistrate]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > [[noticed]] = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[noticed]] != null ) { errors . duplicateScopeAnnotations ( [[noticed]] , annotationType ) ; } else { [[noticed]] = annotationType ; } } } return [[noticed]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 344 ---------------------------------------------
Returns the scope for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping [[scoping]] ) { if ( [[scoping]] . isNoScope ( ) ) { return creator ; } Scope scope = [[scoping]] . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping [[directional]] ) { if ( [[directional]] . isNoScope ( ) ) { return creator ; } Scope scope = [[directional]] . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 345 ---------------------------------------------
Returns the key needed for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[magnifying]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[diomedes]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[magnifying]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[magnifying]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[diomedes]] ) ) ; return [[diomedes]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 346 ---------------------------------------------
Gets the ConstructorInjector . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint constructorInjector , Errors errors ) throws ErrorsException { return cache . get ( constructorInjector , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint constructorInjector , Errors errors ) throws ErrorsException { return cache . get ( constructorInjector , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 347 ---------------------------------------------
Create a Scoping from the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping [[scoping]] , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = [[scoping]] . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return [[scoping]] ; } ScopeBinding [[scope]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[scope]] != null ) { return forInstance ( [[scope]] . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping [[exploratory]] , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = [[exploratory]] . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return [[exploratory]] ; } ScopeBinding [[purview]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[purview]] != null ) { return forInstance ( [[purview]] . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 348 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 237 / 110 / 1 / 348:  35%|███▍      | 348/1000 [12:41<23:46,  2.19s/it][Succeeded / Failed / Skipped / Total] 237 / 110 / 1 / 348:  35%|███▍      | 349/1000 [12:46<23:50,  2.20s/it][Succeeded / Failed / Skipped / Total] 238 / 110 / 1 / 349:  35%|███▍      | 349/1000 [12:46<23:50,  2.20s/it][Succeeded / Failed / Skipped / Total] 238 / 110 / 1 / 349:  35%|███▌      | 350/1000 [12:47<23:45,  2.19s/it][Succeeded / Failed / Skipped / Total] 238 / 111 / 1 / 350:  35%|███▌      | 350/1000 [12:47<23:45,  2.19s/it][Succeeded / Failed / Skipped / Total] 238 / 111 / 1 / 350:  35%|███▌      | 351/1000 [12:52<23:47,  2.20s/it][Succeeded / Failed / Skipped / Total] 239 / 111 / 1 / 351:  35%|███▌      | 351/1000 [12:52<23:47,  2.20s/it][Succeeded / Failed / Skipped / Total] 239 / 111 / 1 / 351:  35%|███▌      | 352/1000 [12:54<23:44,  2.20s/it][Succeeded / Failed / Skipped / Total] 240 / 111 / 1 / 352:  35%|███▌      | 352/1000 [12:54<23:44,  2.20s/it][Succeeded / Failed / Skipped / Total] 240 / 111 / 1 / 352:  35%|███▌      | 353/1000 [13:04<23:58,  2.22s/it][Succeeded / Failed / Skipped / Total] 241 / 111 / 1 / 353:  35%|███▌      | 353/1000 [13:04<23:58,  2.22s/it][Succeeded / Failed / Skipped / Total] 241 / 111 / 1 / 353:  35%|███▌      | 354/1000 [13:05<23:52,  2.22s/it][Succeeded / Failed / Skipped / Total] 242 / 111 / 1 / 354:  35%|███▌      | 354/1000 [13:05<23:52,  2.22s/it][Succeeded / Failed / Skipped / Total] 242 / 111 / 1 / 354:  36%|███▌      | 355/1000 [13:05<23:46,  2.21s/it][Succeeded / Failed / Skipped / Total] 242 / 111 / 2 / 355:  36%|███▌      | 355/1000 [13:05<23:46,  2.21s/it][Succeeded / Failed / Skipped / Total] 242 / 111 / 2 / 355:  36%|███▌      | 356/1000 [13:06<23:42,  2.21s/it]Performs construction . --> Tries to offer the construction --> Socre: 1.0

[[[[Adv]]]]: private T [[provision]] ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[offerings]] ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 349 ---------------------------------------------
Gets the assist data of all the collections . --> List of amadé --> Socre: 1.0

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[amadé]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 350 ---------------------------------------------
Gets the key . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > [[type]] , Member member , Annotation [ ] [[annotations]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , [[annotations]] ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( [[type]] ) : Key . get ( [[type]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[bonnets]] ( TypeLiteral < ? > [[bloke]] , Member member , Annotation [ ] [[promoting]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , [[promoting]] ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( [[bloke]] ) : Key . get ( [[bloke]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 351 ---------------------------------------------
Writes theReplace operation . --> Helper method for writeReplace method --> Socre: 1.0

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[sourcesAsStrings]] = sources . toArray ( ) ; for ( int [[i]] = 0 ; [[i]] < [[sourcesAsStrings]] . length ; [[i]] ++ ) { [[sourcesAsStrings]] [ [[i]] ] = Errors . convert ( [[sourcesAsStrings]] [ [[i]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[sourcesAsStrings]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[clashed]] = sources . toArray ( ) ; for ( int [[d]] = 0 ; [[d]] < [[clashed]] . length ; [[d]] ++ ) { [[clashed]] [ [[d]] ] = Errors . convert ( [[clashed]] [ [[d]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[clashed]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 352 ---------------------------------------------
Creates a new Module for the given module . --> jeezy function --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[jeezy]] ( Module [[bladed]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 353 ---------------------------------------------
Returns the set of dependencies for the given ctorPoint . --> lacanian method --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[builder]] . addAll ( ip . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[lacanian]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[contractor]] = ImmutableSet . builder ( ) ; [[contractor]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[contractor]] . addAll ( ip . getDependencies ( ) ) ; } } return [[contractor]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 354 ---------------------------------------------
Returns the dependencies of the given dependencies . --> Removes the super types from the deps --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dep]] : deps ) { Class < ? > annotationType = [[dep]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[builder]] . add ( [[dep]] ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[manufactures]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dcd]] : deps ) { Class < ? > annotationType = [[dcd]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[manufactures]] . add ( [[dcd]] ) ; } } return [[manufactures]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 355 ---------------------------------------------
Gets the implementation with the specified key . --> [[[SKIPPED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 356 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 242 / 112 / 2 / 356:  36%|███▌      | 356/1000 [13:06<23:42,  2.21s/it][Succeeded / Failed / Skipped / Total] 242 / 112 / 2 / 356:  36%|███▌      | 357/1000 [13:10<23:43,  2.21s/it][Succeeded / Failed / Skipped / Total] 242 / 113 / 2 / 357:  36%|███▌      | 357/1000 [13:10<23:43,  2.21s/it][Succeeded / Failed / Skipped / Total] 242 / 113 / 2 / 357:  36%|███▌      | 358/1000 [13:13<23:43,  2.22s/it][Succeeded / Failed / Skipped / Total] 243 / 113 / 2 / 358:  36%|███▌      | 358/1000 [13:13<23:43,  2.22s/it][Succeeded / Failed / Skipped / Total] 243 / 113 / 2 / 358:  36%|███▌      | 359/1000 [13:21<23:50,  2.23s/it][Succeeded / Failed / Skipped / Total] 243 / 114 / 2 / 359:  36%|███▌      | 359/1000 [13:21<23:50,  2.23s/it][Succeeded / Failed / Skipped / Total] 243 / 114 / 2 / 359:  36%|███▌      | 360/1000 [13:30<24:00,  2.25s/it][Succeeded / Failed / Skipped / Total] 243 / 115 / 2 / 360:  36%|███▌      | 360/1000 [13:30<24:00,  2.25s/it][Succeeded / Failed / Skipped / Total] 243 / 115 / 2 / 360:  36%|███▌      | 361/1000 [13:31<23:56,  2.25s/it][Succeeded / Failed / Skipped / Total] 243 / 116 / 2 / 361:  36%|███▌      | 361/1000 [13:31<23:56,  2.25s/it][Succeeded / Failed / Skipped / Total] 243 / 116 / 2 / 361:  36%|███▌      | 362/1000 [13:32<23:52,  2.24s/it][Succeeded / Failed / Skipped / Total] 243 / 117 / 2 / 362:  36%|███▌      | 362/1000 [13:32<23:52,  2.24s/it][Succeeded / Failed / Skipped / Total] 243 / 117 / 2 / 362:  36%|███▋      | 363/1000 [13:33<23:46,  2.24s/it][Succeeded / Failed / Skipped / Total] 244 / 117 / 2 / 363:  36%|███▋      | 363/1000 [13:33<23:46,  2.24s/it][Succeeded / Failed / Skipped / Total] 244 / 117 / 2 / 363:  36%|███▋      | 364/1000 [13:36<23:46,  2.24s/it]Checks if the given interceptor class has scope . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation annotation : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "[[True]]" == "[[True]]" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation annotation : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "[[Truthfully]]" == "[[Truthfully]]" ; } } return "[[Phony]]" != "[[Phony]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 357 ---------------------------------------------
Returns a new real map binder . --> [[[FAILED]]]

[[[[Adv]]]]: static < [[K]] , V > RealMapBinder < [[K]] , V > newRealMapBinder ( Binder binder , TypeLiteral < [[K]] > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < [[d]] , V > RealMapBinder < [[d]] , V > newRealMapBinder ( Binder binder , TypeLiteral < [[d]] > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 358 ---------------------------------------------
Create a new RealMultibinder . --> Create a RealMultibinder --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[blockers]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 359 ---------------------------------------------
Returns the InjectionPoint associated with this object . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[drizzle]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 360 ---------------------------------------------
Get the getBinding from a new injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[dua]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 361 ---------------------------------------------
Finds the next filter . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[filter]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[filter]] != null ) { return [[filter]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[outlines]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[osmosis]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[osmosis]] != null ) { return [[osmosis]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 362 ---------------------------------------------
Returns true if this class has at place . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[disable]] ( Constructor [[futures]] ) { return [[futures]] . isAnnotationPresent ( Inject . class ) || [[futures]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 363 ---------------------------------------------
Checks if the jar is consistent with the given implementation . --> dadgum implementation --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > [[dependencies]] , Class < ? > [[implementation]] , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[dadgum]] ( Set < Dependency < ? > > [[accordionist]] , Class < ? > [[execute]] , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[ambulances]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 364 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 244 / 118 / 2 / 364:  36%|███▋      | 364/1000 [13:36<23:46,  2.24s/it][Succeeded / Failed / Skipped / Total] 244 / 118 / 2 / 364:  36%|███▋      | 365/1000 [13:37<23:41,  2.24s/it][Succeeded / Failed / Skipped / Total] 244 / 119 / 2 / 365:  36%|███▋      | 365/1000 [13:37<23:41,  2.24s/it][Succeeded / Failed / Skipped / Total] 244 / 119 / 2 / 365:  37%|███▋      | 366/1000 [13:37<23:36,  2.23s/it][Succeeded / Failed / Skipped / Total] 244 / 120 / 2 / 366:  37%|███▋      | 366/1000 [13:37<23:36,  2.23s/it][Succeeded / Failed / Skipped / Total] 244 / 120 / 2 / 366:  37%|███▋      | 367/1000 [13:47<23:47,  2.26s/it][Succeeded / Failed / Skipped / Total] 244 / 121 / 2 / 367:  37%|███▋      | 367/1000 [13:47<23:47,  2.26s/it][Succeeded / Failed / Skipped / Total] 244 / 121 / 2 / 367:  37%|███▋      | 368/1000 [13:49<23:44,  2.25s/it][Succeeded / Failed / Skipped / Total] 245 / 121 / 2 / 368:  37%|███▋      | 368/1000 [13:49<23:44,  2.25s/it][Succeeded / Failed / Skipped / Total] 245 / 121 / 2 / 368:  37%|███▋      | 369/1000 [13:53<23:46,  2.26s/it][Succeeded / Failed / Skipped / Total] 246 / 121 / 2 / 369:  37%|███▋      | 369/1000 [13:53<23:46,  2.26s/it][Succeeded / Failed / Skipped / Total] 246 / 121 / 2 / 369:  37%|███▋      | 370/1000 [13:54<23:41,  2.26s/it][Succeeded / Failed / Skipped / Total] 247 / 121 / 2 / 370:  37%|███▋      | 370/1000 [13:54<23:41,  2.26s/it][Succeeded / Failed / Skipped / Total] 247 / 121 / 2 / 370:  37%|███▋      | 371/1000 [13:59<23:44,  2.26s/it]Returns true if type literal is not specified . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > [[typeLiteral]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[bass]] ( TypeLiteral < ? > [[hover]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[hover]] ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[Wrong]]" != "[[Wrong]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 365 ---------------------------------------------
Invokes the method on the specified object . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object [[proxy]] , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[invocation]] ( Object [[displace]] , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 366 ---------------------------------------------
Returns the set of dependencies for this constructor . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[dampen]] ( ) { ImmutableSet . Builder < InjectionPoint > [[industrialists]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[industrialists]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 367 ---------------------------------------------
Returns the line of the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[gobbles]] ( Member [[compatriots]] ) { Preconditions . checkArgument ( type == [[compatriots]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[compatriots]] , [[compatriots]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[compatriots]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 368 ---------------------------------------------
Initialize the LookupProcessor . --> For testing purposes only --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[greenberg]] ( Errors [[defects]] ) { injector . lookups = injector ; new LookupProcessor ( [[defects]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 369 ---------------------------------------------
Wrap the given callable with the seed map . --> Get gullies --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > callable , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( callable , [[continueRequest]] ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[gullies]] ( Callable < T > callable , Map < Key < ? > , Object > [[dabbling]] ) { return wrap ( callable , [[gullies]] ( [[dabbling]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 370 ---------------------------------------------
Transfer the callable to a Callable . --> Wrap jordon --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[jordon]] ( Callable < T > [[causes]] ) { return wrap ( [[causes]] , [[jordon]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 371 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 248 / 121 / 2 / 371:  37%|███▋      | 371/1000 [13:59<23:44,  2.26s/it][Succeeded / Failed / Skipped / Total] 248 / 121 / 2 / 371:  37%|███▋      | 372/1000 [14:00<23:39,  2.26s/it][Succeeded / Failed / Skipped / Total] 248 / 122 / 2 / 372:  37%|███▋      | 372/1000 [14:00<23:39,  2.26s/it][Succeeded / Failed / Skipped / Total] 248 / 122 / 2 / 372:  37%|███▋      | 373/1000 [14:13<23:55,  2.29s/it][Succeeded / Failed / Skipped / Total] 248 / 123 / 2 / 373:  37%|███▋      | 373/1000 [14:14<23:55,  2.29s/it][Succeeded / Failed / Skipped / Total] 248 / 123 / 2 / 373:  37%|███▋      | 374/1000 [14:16<23:54,  2.29s/it][Succeeded / Failed / Skipped / Total] 248 / 124 / 2 / 374:  37%|███▋      | 374/1000 [14:16<23:54,  2.29s/it][Succeeded / Failed / Skipped / Total] 248 / 124 / 2 / 374:  38%|███▊      | 375/1000 [14:17<23:49,  2.29s/it][Succeeded / Failed / Skipped / Total] 249 / 124 / 2 / 375:  38%|███▊      | 375/1000 [14:17<23:49,  2.29s/it][Succeeded / Failed / Skipped / Total] 249 / 124 / 2 / 375:  38%|███▊      | 376/1000 [14:21<23:49,  2.29s/it]Create the listener for the specified type . --> paraphrase implementation --> Socre: 1.0

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[paraphrase]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 372 ---------------------------------------------
Returns a Module for the given module . --> [[[FAILED]]]

[[[[Adv]]]]: public static Module forModule ( Object module , ModuleAnnotatedMethodScanner [[scanner]] ) { return forObject ( module , "[[False]]" != "[[False]]" , [[scanner]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module forModule ( Object module , ModuleAnnotatedMethodScanner [[sonogram]] ) { return forObject ( module , "[[Disingenuous]]" != "[[Disingenuous]]" , [[sonogram]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 373 ---------------------------------------------
Returns the annotation of the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation [[getAnnotation]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[annotation]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[annotation]] = foundAnnotation ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation [[horsing]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[dashwood]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[dashwood]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[dashwood]] = foundAnnotation ; } } return [[dashwood]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 374 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[inspector]] ( Class < ? extends Annotation > [[congregation]] ) { [[congregation]] = Annotations . canonicalizeIfNamed ( [[congregation]] ) ; if ( isAllDefaultMethods ( [[congregation]] ) ) { return [[inspector]] ( generateAnnotation ( [[congregation]] ) ) ; } checkNotNull ( [[congregation]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[congregation]] ) ; ensureIsBindingAnnotation ( [[congregation]] ) ; return new AnnotationTypeStrategy ( [[congregation]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 375 ---------------------------------------------
Create a Key for the given type and annotation strategy . --> Mark the given category as attainable --> Socre: 1.0

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( [[type]] , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[arrive]] ( Class < T > [[category]] , AnnotationStrategy [[attainable]] ) { return new Key < T > ( [[category]] , [[attainable]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 376 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 249 / 125 / 2 / 376:  38%|███▊      | 376/1000 [14:21<23:49,  2.29s/it][Succeeded / Failed / Skipped / Total] 249 / 125 / 2 / 376:  38%|███▊      | 377/1000 [14:22<23:45,  2.29s/it][Succeeded / Failed / Skipped / Total] 250 / 125 / 2 / 377:  38%|███▊      | 377/1000 [14:22<23:45,  2.29s/it][Succeeded / Failed / Skipped / Total] 250 / 125 / 2 / 377:  38%|███▊      | 378/1000 [14:27<23:48,  2.30s/it][Succeeded / Failed / Skipped / Total] 250 / 126 / 2 / 378:  38%|███▊      | 378/1000 [14:27<23:48,  2.30s/it][Succeeded / Failed / Skipped / Total] 250 / 126 / 2 / 378:  38%|███▊      | 379/1000 [14:28<23:43,  2.29s/it][Succeeded / Failed / Skipped / Total] 250 / 127 / 2 / 379:  38%|███▊      | 379/1000 [14:28<23:43,  2.29s/it][Succeeded / Failed / Skipped / Total] 250 / 127 / 2 / 379:  38%|███▊      | 380/1000 [14:30<23:40,  2.29s/it][Succeeded / Failed / Skipped / Total] 250 / 128 / 2 / 380:  38%|███▊      | 380/1000 [14:30<23:40,  2.29s/it][Succeeded / Failed / Skipped / Total] 250 / 128 / 2 / 380:  38%|███▊      | 381/1000 [14:32<23:37,  2.29s/it][Succeeded / Failed / Skipped / Total] 251 / 128 / 2 / 381:  38%|███▊      | 381/1000 [14:32<23:37,  2.29s/it][Succeeded / Failed / Skipped / Total] 251 / 128 / 2 / 381:  38%|███▊      | 382/1000 [14:39<23:42,  2.30s/it]Returns the name of the binding source . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[zaps]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 377 ---------------------------------------------
Returns a strategy for the given annotation . --> Returns a new instance of AnnotationTypeStrategy --> Socre: 1.0

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[leclerc]] ( Annotation [[overjoyed]] ) { checkNotNull ( [[overjoyed]] , "annotation" ) ; Class < ? extends Annotation > [[gargantuan]] = [[overjoyed]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[gargantuan]] ) ; ensureIsBindingAnnotation ( [[gargantuan]] ) ; if ( Annotations . isMarker ( [[gargantuan]] ) ) { return new AnnotationTypeStrategy ( [[gargantuan]] , [[overjoyed]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[overjoyed]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 378 ---------------------------------------------
Validates the object . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[galt]] ( Key < ? > key , Object [[bucked]] ) { if ( [[bucked]] == null || [[bucked]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[bucked]] ) ) { throw new IllegalArgumentException ( "Value[" + [[bucked]] + "] of type[" + [[bucked]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[bucked]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 379 ---------------------------------------------
Returns the injectors for the given injection point . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injector]] , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . [[injector]] , injectionPoint , errorsForMember ) ; [[injectors]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[valve]] = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[intravenous]] , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . [[intravenous]] , injectionPoint , errorsForMember ) ; [[valve]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 380 ---------------------------------------------
Checks if the given constructor has no parameters . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > [[params]] = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > [[constructorKeys]] = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > [[param]] : [[params]] ) { Key < ? > paramKey = Annotations . getKey ( [[param]] , constructor , paramAnnotations [ p ++ ] , errors ) ; [[constructorKeys]] . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > [[browns]] = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > [[accidentally]] = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > [[kin]] : [[browns]] ) { Key < ? > paramKey = Annotations . getKey ( [[kin]] , constructor , paramAnnotations [ p ++ ] , errors ) ; [[accidentally]] . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 381 ---------------------------------------------
Creates a new Message . --> return null --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( String [[messageFormat]] , Object ... arguments ) { return [[create]] ( null , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[institution]] ( String [[fujita]] , Object ... arguments ) { return [[institution]] ( null , [[fujita]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 382 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 252 / 128 / 2 / 382:  38%|███▊      | 382/1000 [14:39<23:42,  2.30s/it][Succeeded / Failed / Skipped / Total] 252 / 128 / 2 / 382:  38%|███▊      | 383/1000 [14:40<23:38,  2.30s/it][Succeeded / Failed / Skipped / Total] 253 / 128 / 2 / 383:  38%|███▊      | 383/1000 [14:40<23:38,  2.30s/it][Succeeded / Failed / Skipped / Total] 253 / 128 / 2 / 383:  38%|███▊      | 384/1000 [14:43<23:37,  2.30s/it][Succeeded / Failed / Skipped / Total] 254 / 128 / 2 / 384:  38%|███▊      | 384/1000 [14:43<23:37,  2.30s/it][Succeeded / Failed / Skipped / Total] 254 / 128 / 2 / 384:  38%|███▊      | 385/1000 [14:49<23:41,  2.31s/it][Succeeded / Failed / Skipped / Total] 254 / 129 / 2 / 385:  38%|███▊      | 385/1000 [14:49<23:41,  2.31s/it][Succeeded / Failed / Skipped / Total] 254 / 129 / 2 / 385:  39%|███▊      | 386/1000 [14:56<23:45,  2.32s/it][Succeeded / Failed / Skipped / Total] 255 / 129 / 2 / 386:  39%|███▊      | 386/1000 [14:56<23:45,  2.32s/it][Succeeded / Failed / Skipped / Total] 255 / 129 / 2 / 386:  39%|███▊      | 387/1000 [14:58<23:42,  2.32s/it][Succeeded / Failed / Skipped / Total] 256 / 129 / 2 / 387:  39%|███▊      | 387/1000 [14:58<23:42,  2.32s/it][Succeeded / Failed / Skipped / Total] 256 / 129 / 2 / 387:  39%|███▉      | 388/1000 [14:59<23:39,  2.32s/it][Succeeded / Failed / Skipped / Total] 257 / 129 / 2 / 388:  39%|███▉      | 388/1000 [14:59<23:39,  2.32s/it][Succeeded / Failed / Skipped / Total] 257 / 129 / 2 / 388:  39%|███▉      | 389/1000 [15:00<23:34,  2.32s/it][Succeeded / Failed / Skipped / Total] 258 / 129 / 2 / 389:  39%|███▉      | 389/1000 [15:00<23:34,  2.32s/it][Succeeded / Failed / Skipped / Total] 258 / 129 / 2 / 389:  39%|███▉      | 390/1000 [15:00<23:28,  2.31s/it][Succeeded / Failed / Skipped / Total] 258 / 129 / 3 / 390:  39%|███▉      | 390/1000 [15:00<23:28,  2.31s/it][Succeeded / Failed / Skipped / Total] 258 / 129 / 3 / 390:  39%|███▉      | 391/1000 [15:04<23:28,  2.31s/it]Main method . --> Main method of the class --> Socre: 1.0

[[[[Adv]]]]: public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[module]] = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( [[module]] ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[bundle]] = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( [[bundle]] ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 383 ---------------------------------------------
Creates a new Message . --> Convenience method for establishment --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , String messageFormat , Object ... arguments ) { return [[create]] ( [[cause]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[establishment]] ( Throwable [[result]] , String messageFormat , Object ... arguments ) { return [[establishment]] ( [[result]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 384 ---------------------------------------------
Converts an Object to an Object --> Converts australians to australians --> Socre: 1.0

[[[[Adv]]]]: static Object convert ( Object [[o]] ) { ElementSource [[source]] = null ; if ( [[o]] instanceof ElementSource ) { [[source]] = ( ElementSource ) [[o]] ; [[o]] = [[source]] . getDeclaringSource ( ) ; } return convert ( [[o]] , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object convert ( Object [[australians]] ) { ElementSource [[ancestry]] = null ; if ( [[australians]] instanceof ElementSource ) { [[ancestry]] = ( ElementSource ) [[australians]] ; [[australians]] = [[ancestry]] . getDeclaringSource ( ) ; } return convert ( [[australians]] , [[ancestry]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 385 ---------------------------------------------
Returns true if the given class is one of the parent --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[dorina]] ( String [[berate]] ) { return ( parent != null && parent . shouldBeSkipped ( [[berate]] ) ) || classNamesToSkip . contains ( [[berate]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 386 ---------------------------------------------
Returns a new Initializable instance . --> Creates a new dans --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[dans]] ( final T [[cas]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[cas]] ; } @ Override public String toString ( ) { return String . valueOf ( [[cas]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 387 ---------------------------------------------
Gets the object of a module class name . --> dorina method --> Socre: 1.0

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[dorina]] ( List < String > [[hairpin]] ) { Preconditions . checkNotNull ( [[hairpin]] , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : [[hairpin]] ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 388 ---------------------------------------------
Push state . --> head minimap --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > [[key]] , Object [[source]] ) { doPushState ( [[key]] , [[source]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[headlight]] ( com . google . inject . Key < ? > [[important]] , Object [[melted]] ) { doPushState ( [[important]] , [[melted]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 389 ---------------------------------------------
Returns the provider with the specified dependency . --> Delivers the provider --> Socre: 1.0

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[delivers]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 390 ---------------------------------------------
Throws an IllegalStateException if t is unchecked . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 391 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 259 / 129 / 3 / 391:  39%|███▉      | 391/1000 [15:04<23:28,  2.31s/it][Succeeded / Failed / Skipped / Total] 259 / 129 / 3 / 391:  39%|███▉      | 392/1000 [15:04<23:23,  2.31s/it][Succeeded / Failed / Skipped / Total] 260 / 129 / 3 / 392:  39%|███▉      | 392/1000 [15:04<23:23,  2.31s/it][Succeeded / Failed / Skipped / Total] 260 / 129 / 3 / 392:  39%|███▉      | 393/1000 [15:07<23:21,  2.31s/it][Succeeded / Failed / Skipped / Total] 260 / 130 / 3 / 393:  39%|███▉      | 393/1000 [15:07<23:21,  2.31s/it][Succeeded / Failed / Skipped / Total] 260 / 130 / 3 / 393:  39%|███▉      | 394/1000 [15:08<23:17,  2.31s/it][Succeeded / Failed / Skipped / Total] 261 / 130 / 3 / 394:  39%|███▉      | 394/1000 [15:08<23:17,  2.31s/it][Succeeded / Failed / Skipped / Total] 261 / 130 / 3 / 394:  40%|███▉      | 395/1000 [15:16<23:23,  2.32s/it][Succeeded / Failed / Skipped / Total] 262 / 130 / 3 / 395:  40%|███▉      | 395/1000 [15:16<23:23,  2.32s/it][Succeeded / Failed / Skipped / Total] 262 / 130 / 3 / 395:  40%|███▉      | 396/1000 [15:16<23:18,  2.32s/it][Succeeded / Failed / Skipped / Total] 263 / 130 / 3 / 396:  40%|███▉      | 396/1000 [15:16<23:18,  2.32s/it][Succeeded / Failed / Skipped / Total] 263 / 130 / 3 / 396:  40%|███▉      | 397/1000 [15:26<23:27,  2.33s/it][Succeeded / Failed / Skipped / Total] 264 / 130 / 3 / 397:  40%|███▉      | 397/1000 [15:26<23:27,  2.33s/it][Succeeded / Failed / Skipped / Total] 264 / 130 / 3 / 397:  40%|███▉      | 398/1000 [15:28<23:24,  2.33s/it]Pushes dependency . --> Create a duckin --> Socre: 1.0

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > [[dependency]] , Object source ) { Dependency < ? > previous = this . [[dependency]] ; this . [[dependency]] = [[dependency]] ; doPushState ( [[dependency]] , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[duckin]] ( Dependency < ? > [[codependent]] , Object source ) { Dependency < ? > previous = this . [[reliant]] ; this . [[reliant]] = [[codependent]] ; doPushState ( [[codependent]] , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 392 ---------------------------------------------
Set the processor . --> Set the remote server --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType [[type]] , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[type]] ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType [[genera]] , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[genera]] ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 393 ---------------------------------------------
Creates a new Message --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String [[message]] = format ( messageFormat , arguments ) ; return new Message ( sources , [[message]] , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[build]] ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String [[courier]] = format ( messageFormat , arguments ) ; return new Message ( sources , [[courier]] , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 394 ---------------------------------------------
Prunes the stack trace . --> jettisoned method --> Socre: 1.0

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable [[throwable]] ) { for ( Throwable t = [[throwable]] ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] [[stackTrace]] = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[stackTrace]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[jettisoned]] ( Throwable [[naty]] ) { for ( Throwable t = [[naty]] ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] [[egbert]] = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[egbert]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 395 ---------------------------------------------
Try to get the given url . --> Returns the uploaded flow of the given URL . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[aforementioned]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 396 ---------------------------------------------
Decodes protocol code . --> Create a new ProtocolCode . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[ancestry]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 397 ---------------------------------------------
Scan . --> Perform analyses . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[scan]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void [[analyses]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 398 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 265 / 130 / 3 / 398:  40%|███▉      | 398/1000 [15:28<23:24,  2.33s/it][Succeeded / Failed / Skipped / Total] 265 / 130 / 3 / 398:  40%|███▉      | 399/1000 [15:30<23:21,  2.33s/it][Succeeded / Failed / Skipped / Total] 265 / 131 / 3 / 399:  40%|███▉      | 399/1000 [15:30<23:21,  2.33s/it][Succeeded / Failed / Skipped / Total] 265 / 131 / 3 / 399:  40%|████      | 400/1000 [15:30<23:16,  2.33s/it][Succeeded / Failed / Skipped / Total] 265 / 132 / 3 / 400:  40%|████      | 400/1000 [15:30<23:16,  2.33s/it][Succeeded / Failed / Skipped / Total] 265 / 132 / 3 / 400:  40%|████      | 401/1000 [15:33<23:14,  2.33s/it][Succeeded / Failed / Skipped / Total] 265 / 133 / 3 / 401:  40%|████      | 401/1000 [15:33<23:14,  2.33s/it][Succeeded / Failed / Skipped / Total] 265 / 133 / 3 / 401:  40%|████      | 402/1000 [15:34<23:09,  2.32s/it][Succeeded / Failed / Skipped / Total] 266 / 133 / 3 / 402:  40%|████      | 402/1000 [15:34<23:09,  2.32s/it][Succeeded / Failed / Skipped / Total] 266 / 133 / 3 / 402:  40%|████      | 403/1000 [15:36<23:07,  2.32s/it][Succeeded / Failed / Skipped / Total] 267 / 133 / 3 / 403:  40%|████      | 403/1000 [15:36<23:07,  2.32s/it][Succeeded / Failed / Skipped / Total] 267 / 133 / 3 / 403:  40%|████      | 404/1000 [15:38<23:04,  2.32s/it][Succeeded / Failed / Skipped / Total] 267 / 134 / 3 / 404:  40%|████      | 404/1000 [15:38<23:04,  2.32s/it][Succeeded / Failed / Skipped / Total] 267 / 134 / 3 / 404:  40%|████      | 405/1000 [15:38<22:59,  2.32s/it][Succeeded / Failed / Skipped / Total] 268 / 134 / 3 / 405:  40%|████      | 405/1000 [15:38<22:59,  2.32s/it]Adds a connection event processor . --> This method initializes ConnectionEventProcessor --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( type ) ; if ( [[processorList]] == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[processorList]] = this . processors . get ( type ) ; } [[processorList]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[vicky]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[jettisoned]] = this . processors . get ( type ) ; if ( [[jettisoned]] == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[jettisoned]] = this . processors . get ( type ) ; } [[jettisoned]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 399 ---------------------------------------------
Executes the specified RunState record . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[tonne]] > [[tonne]] getFutureTaskResult ( RunStateRecordedFutureTask < [[tonne]] > task , Logger logger ) { [[tonne]] [[te]] = null ; if ( null != task ) { try { [[te]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[te]] ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 400 ---------------------------------------------
Registers the default processor --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[griefs]] ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 401 ---------------------------------------------
Registers a processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode cmdCode , RemotingProcessor < ? > [[processor]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[processor]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[processor]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[benzedrine]] ( CommandCode cmdCode , RemotingProcessor < ? > [[specs]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[specs]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[specs]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 402 ---------------------------------------------
Creates a new Connection getAnd instance . --> Creates a new Url arch --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection getAndCreateIfAbsent ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection getAndCreateIfAbsent ( Url [[archived]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 403 ---------------------------------------------
Creates a connection andHealIfNeed . --> Interruptes a Url --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[aces]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 404 ---------------------------------------------
Returns the default processor . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[cmdCode]] ) ; if ( processor != null ) { return processor ; } return this . [[defaultProcessor]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode [[deflation]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[deflation]] ) ; if ( processor != null ) { return processor ; } return this . [[constellations]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 405 ---------------------------------------------
Remove a task from the pool . --> Searches for the connection pool . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[abusers]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 406 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 269 / 134 / 3 / 406:  41%|████      | 406/1000 [15:38<22:53,  2.31s/it][Succeeded / Failed / Skipped / Total] 269 / 134 / 3 / 406:  41%|████      | 407/1000 [15:41<22:52,  2.31s/it][Succeeded / Failed / Skipped / Total] 270 / 134 / 3 / 407:  41%|████      | 407/1000 [15:41<22:52,  2.31s/it][Succeeded / Failed / Skipped / Total] 271 / 134 / 3 / 408:  41%|████      | 408/1000 [15:44<22:50,  2.32s/it][Succeeded / Failed / Skipped / Total] 271 / 134 / 3 / 408:  41%|████      | 409/1000 [15:44<22:45,  2.31s/it][Succeeded / Failed / Skipped / Total] 272 / 134 / 3 / 409:  41%|████      | 409/1000 [15:44<22:45,  2.31s/it][Succeeded / Failed / Skipped / Total] 273 / 134 / 3 / 410:  41%|████      | 410/1000 [15:44<22:39,  2.30s/it][Succeeded / Failed / Skipped / Total] 273 / 134 / 3 / 410:  41%|████      | 411/1000 [15:44<22:34,  2.30s/it][Succeeded / Failed / Skipped / Total] 273 / 134 / 4 / 411:  41%|████      | 411/1000 [15:44<22:34,  2.30s/it][Succeeded / Failed / Skipped / Total] 274 / 134 / 4 / 412:  41%|████      | 412/1000 [15:48<22:33,  2.30s/it][Succeeded / Failed / Skipped / Total] 274 / 134 / 4 / 412:  41%|████▏     | 413/1000 [15:50<22:30,  2.30s/it]heal if it exists . --> Replaces a Url --> Socre: 1.0

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool [[pool]] , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool [[clustered]] , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 407 ---------------------------------------------
Close connection . --> Set banking . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[banking]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 408 ---------------------------------------------
Removes the current connection . --> Entry point to the server --> Socre: 1.0

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > [[iter]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[iter]] . next ( ) ; [[iter]] . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > [[scowl]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[scowl]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[scowl]] . next ( ) ; [[scowl]] . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 409 ---------------------------------------------
Returns all connections belonging to this connection . --> zaheer the state machine --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > [[allConnections]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[iterator]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[iterator]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { [[allConnections]] . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return [[allConnections]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[zaheer]] ( ) { Map < String , List < Connection > > [[breslin]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[grenouille]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[grenouille]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[grenouille]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { [[breslin]] . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return [[breslin]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 410 ---------------------------------------------
Create the connection . --> affraid . --> Socre: 1.0

[[[[Adv]]]]: private void [[doCreate]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void [[affraid]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 411 ---------------------------------------------
Deserializes the RpcRequestCommand object . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 412 ---------------------------------------------
Sets attribute value . --> Helper method to retrieve a value --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[cooch]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 413 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 275 / 134 / 4 / 413:  41%|████▏     | 413/1000 [15:50<22:30,  2.30s/it][Succeeded / Failed / Skipped / Total] 276 / 134 / 4 / 414:  41%|████▏     | 414/1000 [15:51<22:26,  2.30s/it][Succeeded / Failed / Skipped / Total] 276 / 134 / 4 / 414:  42%|████▏     | 415/1000 [15:52<22:22,  2.29s/it][Succeeded / Failed / Skipped / Total] 277 / 134 / 4 / 415:  42%|████▏     | 415/1000 [15:52<22:22,  2.29s/it][Succeeded / Failed / Skipped / Total] 278 / 134 / 4 / 416:  42%|████▏     | 416/1000 [15:55<22:22,  2.30s/it][Succeeded / Failed / Skipped / Total] 278 / 134 / 4 / 416:  42%|████▏     | 417/1000 [15:57<22:19,  2.30s/it][Succeeded / Failed / Skipped / Total] 279 / 134 / 4 / 417:  42%|████▏     | 417/1000 [15:57<22:19,  2.30s/it][Succeeded / Failed / Skipped / Total] 279 / 134 / 5 / 418:  42%|████▏     | 418/1000 [15:58<22:14,  2.29s/it][Succeeded / Failed / Skipped / Total] 279 / 134 / 5 / 418:  42%|████▏     | 419/1000 [16:05<22:18,  2.30s/it]Registers a user processor . --> Registers a UserProcessor --> Socre: 1.0

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[preProcessor]] = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( [[preProcessor]] != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[inquisitive]] = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( [[inquisitive]] != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 414 ---------------------------------------------
Register a user processor --> Registers a UserProcessor --> Socre: 1.0

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = [[userProcessors]] . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[speedboat]] ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = [[speedboat]] . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 415 ---------------------------------------------
Dispatch the user processor . --> Gets adelphi . --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[adelphi]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 416 ---------------------------------------------
Pre - processes the InvokeContext . --> Invoke ancesView . --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[ancestry]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 417 ---------------------------------------------
Debug method for debugging --> Cut the heartbeats . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[cutler]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 418 ---------------------------------------------
Returns a BitSet of the given value . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 419 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 280 / 134 / 5 / 419:  42%|████▏     | 419/1000 [16:05<22:18,  2.30s/it][Succeeded / Failed / Skipped / Total] 280 / 134 / 6 / 420:  42%|████▏     | 420/1000 [16:05<22:13,  2.30s/it][Succeeded / Failed / Skipped / Total] 280 / 134 / 6 / 420:  42%|████▏     | 421/1000 [16:06<22:08,  2.30s/it][Succeeded / Failed / Skipped / Total] 281 / 134 / 6 / 421:  42%|████▏     | 421/1000 [16:06<22:08,  2.30s/it][Succeeded / Failed / Skipped / Total] 282 / 134 / 6 / 422:  42%|████▏     | 422/1000 [16:09<22:07,  2.30s/it][Succeeded / Failed / Skipped / Total] 282 / 134 / 6 / 422:  42%|████▏     | 423/1000 [16:12<22:07,  2.30s/it][Succeeded / Failed / Skipped / Total] 282 / 135 / 6 / 423:  42%|████▏     | 423/1000 [16:12<22:07,  2.30s/it][Succeeded / Failed / Skipped / Total] 283 / 135 / 6 / 424:  42%|████▏     | 424/1000 [16:14<22:03,  2.30s/it][Succeeded / Failed / Skipped / Total] 283 / 135 / 6 / 424:  42%|████▎     | 425/1000 [16:15<21:59,  2.29s/it]Converts a bit set to a byte . --> Returns the banked value for the given BitSet . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[banked]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 420 ---------------------------------------------
Stops the connection manager . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 421 ---------------------------------------------
Adds a task . --> Deletes the specified URL . --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[amadeo]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 422 ---------------------------------------------
Execute the given ExecutorService . --> Execute a delegations --> Socre: 1.0

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService [[defaultExecutor]] ) throws Exception { ProcessTask [[task]] = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[task]] ) ; } else { [[defaultExecutor]] . execute ( [[task]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService [[aitch]] ) throws Exception { ProcessTask [[delegations]] = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[delegations]] ) ; } else { [[aitch]] . execute ( [[delegations]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 423 ---------------------------------------------
Closes this connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[almost]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 424 ---------------------------------------------
Send a timeout log . --> coastases the remote address --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String [[remoteAddr]] = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[remoteAddr]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , [[remoteAddr]] , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[coastguard]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String [[bawling]] = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[bawling]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , [[bawling]] , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 425 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 135 / 6 / 425:  42%|████▎     | 425/1000 [16:15<21:59,  2.29s/it][Succeeded / Failed / Skipped / Total] 284 / 135 / 7 / 426:  43%|████▎     | 426/1000 [16:15<21:54,  2.29s/it][Succeeded / Failed / Skipped / Total] 284 / 135 / 7 / 426:  43%|████▎     | 427/1000 [16:15<21:49,  2.28s/it][Succeeded / Failed / Skipped / Total] 285 / 135 / 7 / 427:  43%|████▎     | 427/1000 [16:15<21:49,  2.28s/it][Succeeded / Failed / Skipped / Total] 286 / 135 / 7 / 428:  43%|████▎     | 428/1000 [16:17<21:46,  2.28s/it][Succeeded / Failed / Skipped / Total] 286 / 135 / 7 / 428:  43%|████▎     | 429/1000 [16:21<21:46,  2.29s/it]Called when a remote address is received . --> Called when the remote address is received --> Socre: 1.0

[[[[Adv]]]]: protected void oneway ( final Connection [[conn]] , final RemotingCommand [[request]] ) { try { [[conn]] . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[conn]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection [[bulldog]] , final RemotingCommand [[demand]] ) { try { [[bulldog]] . getChannel ( ) . writeAndFlush ( [[demand]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[bulldog]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[bulldog]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[bulldog]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 426 ---------------------------------------------
Method infoLog . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void infoLog ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 427 ---------------------------------------------
Perform a Jetty request command . --> Create the RpcRequestCommand --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[rudd]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 428 ---------------------------------------------
Filter connection details . --> Provide a list of connection names . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[filter]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[cleaned]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 429 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 287 / 135 / 7 / 429:  43%|████▎     | 429/1000 [16:21<21:46,  2.29s/it][Succeeded / Failed / Skipped / Total] 287 / 135 / 8 / 430:  43%|████▎     | 430/1000 [16:21<21:41,  2.28s/it][Succeeded / Failed / Skipped / Total] 287 / 135 / 8 / 430:  43%|████▎     | 431/1000 [16:24<21:39,  2.28s/it][Succeeded / Failed / Skipped / Total] 288 / 135 / 8 / 431:  43%|████▎     | 431/1000 [16:24<21:39,  2.28s/it]This method is used to monitor the connection pool . --> Registers the connection pool . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[iter]] = connPools . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[iter]] . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[aforementioned]] = connPools . entrySet ( ) . iterator ( ) ; while ( [[aforementioned]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[aforementioned]] . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 430 ---------------------------------------------
Returns the value associated with the key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 431 ---------------------------------------------
Get boolean value from System property . --> Get boolean . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBool]] ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean [[frustration]] ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 432 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 289 / 135 / 8 / 432:  43%|████▎     | 432/1000 [16:24<21:34,  2.28s/it][Succeeded / Failed / Skipped / Total] 289 / 135 / 8 / 432:  43%|████▎     | 433/1000 [16:25<21:29,  2.28s/it][Succeeded / Failed / Skipped / Total] 290 / 135 / 8 / 433:  43%|████▎     | 433/1000 [16:25<21:29,  2.28s/it][Succeeded / Failed / Skipped / Total] 291 / 135 / 8 / 434:  43%|████▎     | 434/1000 [16:25<21:25,  2.27s/it][Succeeded / Failed / Skipped / Total] 291 / 135 / 8 / 434:  44%|████▎     | 435/1000 [16:26<21:21,  2.27s/it][Succeeded / Failed / Skipped / Total] 292 / 135 / 8 / 435:  44%|████▎     | 435/1000 [16:26<21:21,  2.27s/it][Succeeded / Failed / Skipped / Total] 293 / 135 / 8 / 436:  44%|████▎     | 436/1000 [16:32<21:24,  2.28s/it][Succeeded / Failed / Skipped / Total] 293 / 135 / 8 / 436:  44%|████▎     | 437/1000 [16:33<21:19,  2.27s/it]Formats messages from a heading . --> Format a collection of chokes --> Socre: 1.0

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > [[errorMessages]] ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[errorMessages]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[errorMessages]] ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable [[cause]] = errorMessage . getCause ( ) ; if ( displayCauses && [[cause]] != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( [[cause]] ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( [[cause]] ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , [[cause]] . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[errorMessages]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[errorMessages]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[advise]] ( String heading , Collection < Message > [[chokes]] ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[chokes]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[chokes]] ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable [[generating]] = errorMessage . getCause ( ) ; if ( displayCauses && [[generating]] != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( [[generating]] ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( [[generating]] ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , [[generating]] . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[chokes]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[chokes]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 433 ---------------------------------------------
Closes the connection to the last connection . --> This method is used to connect to a remote node . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[amritsar]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 434 ---------------------------------------------
Returns true if the current request is timeout . --> Return true if the authorised command was accepted . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[authorised]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 435 ---------------------------------------------
Returns a random database connection . --> Returns a random set of conns . --> Socre: 1.0

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection [[result]] = null ; while ( ( [[result]] == null || ! [[result]] . isFine ( ) ) && tries ++ < MAX_TIMES ) { [[result]] = conns . get ( this . random . nextInt ( size ) ) ; } if ( [[result]] != null && ! [[result]] . isFine ( ) ) { [[result]] = null ; } return [[result]] ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection [[causing]] = null ; while ( ( [[causing]] == null || ! [[causing]] . isFine ( ) ) && tries ++ < MAX_TIMES ) { [[causing]] = conns . get ( this . random . nextInt ( size ) ) ; } if ( [[causing]] != null && ! [[causing]] . isFine ( ) ) { [[causing]] = null ; } return [[causing]] ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 436 ---------------------------------------------
Gets the response object from the Response command . --> get symbiosis method --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[symbiosis]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 437 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 294 / 135 / 8 / 437:  44%|████▎     | 437/1000 [16:33<21:19,  2.27s/it][Succeeded / Failed / Skipped / Total] 295 / 135 / 8 / 438:  44%|████▍     | 438/1000 [16:33<21:15,  2.27s/it][Succeeded / Failed / Skipped / Total] 295 / 135 / 8 / 438:  44%|████▍     | 439/1000 [16:35<21:11,  2.27s/it][Succeeded / Failed / Skipped / Total] 296 / 135 / 8 / 439:  44%|████▍     | 439/1000 [16:35<21:11,  2.27s/it][Succeeded / Failed / Skipped / Total] 297 / 135 / 8 / 440:  44%|████▍     | 440/1000 [16:35<21:07,  2.26s/it][Succeeded / Failed / Skipped / Total] 297 / 135 / 8 / 440:  44%|████▍     | 441/1000 [16:36<21:02,  2.26s/it][Succeeded / Failed / Skipped / Total] 298 / 135 / 8 / 441:  44%|████▍     | 441/1000 [16:36<21:02,  2.26s/it][Succeeded / Failed / Skipped / Total] 299 / 135 / 8 / 442:  44%|████▍     | 442/1000 [16:40<21:03,  2.26s/it][Succeeded / Failed / Skipped / Total] 299 / 135 / 8 / 442:  44%|████▍     | 443/1000 [16:42<21:01,  2.26s/it]Returns the detail error message . --> Gets detailErrMsg . --> Socre: 1.0

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[resp]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , [[resp]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand [[approximately]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[approximately]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , [[approximately]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 438 ---------------------------------------------
Reads an exception . --> get the exception iridescent --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[iridescent]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 439 ---------------------------------------------
Creates a RpcServerException . --> Generates a RpcServerException --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[amplify]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 440 ---------------------------------------------
Gets the user processor . --> Force forceful on the deposit --> Socre: 1.0

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . [[userProcessors]] . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[forceful]] ( String [[deposit]] ) { return StringUtils . isBlank ( [[deposit]] ) ? null : this . [[annul]] . get ( [[deposit]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 441 ---------------------------------------------
Returns the value of a property . --> Returns null if none exists . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[austere]] ( String [[critical]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[critical]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 442 ---------------------------------------------
Resolves the response object . --> Perform bollocks method --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String [[msg]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( [[msg]] ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( [[msg]] , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( [[msg]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[bollocks]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String [[signalling]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( [[signalling]] ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( [[signalling]] , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( [[signalling]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 443 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 300 / 135 / 8 / 443:  44%|████▍     | 443/1000 [16:42<21:01,  2.26s/it][Succeeded / Failed / Skipped / Total] 300 / 136 / 8 / 444:  44%|████▍     | 444/1000 [16:53<21:09,  2.28s/it][Succeeded / Failed / Skipped / Total] 300 / 136 / 8 / 444:  44%|████▍     | 445/1000 [16:55<21:05,  2.28s/it][Succeeded / Failed / Skipped / Total] 301 / 136 / 8 / 445:  44%|████▍     | 445/1000 [16:55<21:05,  2.28s/it][Succeeded / Failed / Skipped / Total] 301 / 136 / 8 / 445:  45%|████▍     | 446/1000 [16:55<21:01,  2.28s/it][Succeeded / Failed / Skipped / Total] 301 / 137 / 8 / 446:  45%|████▍     | 446/1000 [16:55<21:01,  2.28s/it][Succeeded / Failed / Skipped / Total] 301 / 137 / 8 / 446:  45%|████▍     | 447/1000 [16:56<20:58,  2.28s/it][Succeeded / Failed / Skipped / Total] 301 / 138 / 8 / 447:  45%|████▍     | 447/1000 [16:56<20:58,  2.28s/it][Succeeded / Failed / Skipped / Total] 301 / 138 / 8 / 447:  45%|████▍     | 448/1000 [16:57<20:53,  2.27s/it][Succeeded / Failed / Skipped / Total] 302 / 138 / 8 / 448:  45%|████▍     | 448/1000 [16:57<20:53,  2.27s/it][Succeeded / Failed / Skipped / Total] 302 / 138 / 8 / 448:  45%|████▍     | 449/1000 [17:03<20:56,  2.28s/it][Succeeded / Failed / Skipped / Total] 302 / 139 / 8 / 449:  45%|████▍     | 449/1000 [17:03<20:56,  2.28s/it][Succeeded / Failed / Skipped / Total] 302 / 139 / 8 / 449:  45%|████▌     | 450/1000 [17:04<20:51,  2.28s/it][Succeeded / Failed / Skipped / Total] 303 / 139 / 8 / 450:  45%|████▌     | 450/1000 [17:04<20:51,  2.28s/it][Succeeded / Failed / Skipped / Total] 303 / 139 / 8 / 450:  45%|████▌     | 451/1000 [17:05<20:48,  2.27s/it]print connection trace log --> Appends a Logger to a target port . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[alcove]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 444 ---------------------------------------------
Parse the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[archers]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 445 ---------------------------------------------
Parse the local IP address . --> Creates a streaming string --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[streaming]] ( final Channel [[hotel]] ) { if ( null == [[hotel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[hotel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
Parses a remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[retirement]] ( final Channel [[flume]] ) { if ( null == [[flume]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[peripheral]] = ( InetSocketAddress ) [[flume]] . remoteAddress ( ) ; if ( [[peripheral]] != null ) { return [[peripheral]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Parse a local address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[local]] = [[channel]] . localAddress ( ) ; return doParse ( [[local]] != null ? [[local]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[mushroom]] ( final Channel [[socket]] ) { if ( null == [[socket]] ) { return StringUtils . EMPTY ; } final SocketAddress [[commune]] = [[socket]] . localAddress ( ) ; return doParse ( [[commune]] != null ? [[commune]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Parse the remote address . --> Returns dampen string --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[dampen]] ( final Channel [[duct]] ) { if ( null == [[duct]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[duct]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Parse the remote port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[drapery]] ( final Channel [[blowjob]] ) { if ( null == [[blowjob]] ) { return - 1 ; } final InetSocketAddress [[peripherals]] = ( InetSocketAddress ) [[blowjob]] . remoteAddress ( ) ; if ( [[peripherals]] != null ) { return [[peripherals]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Gets the connection . --> Returns the current snapshot . --> Socre: 1.0

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . [[conns]] ) { List < Connection > snapshot = new ArrayList < Connection > ( this . [[conns]] ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . [[ivanhoe]] ) { List < Connection > snapshot = new ArrayList < Connection > ( this . [[ivanhoe]] ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 451 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 304 / 139 / 8 / 451:  45%|████▌     | 451/1000 [17:05<20:48,  2.27s/it][Succeeded / Failed / Skipped / Total] 304 / 139 / 8 / 451:  45%|████▌     | 452/1000 [17:07<20:45,  2.27s/it][Succeeded / Failed / Skipped / Total] 304 / 140 / 8 / 452:  45%|████▌     | 452/1000 [17:07<20:45,  2.27s/it][Succeeded / Failed / Skipped / Total] 305 / 140 / 8 / 453:  45%|████▌     | 453/1000 [17:07<20:40,  2.27s/it][Succeeded / Failed / Skipped / Total] 305 / 140 / 8 / 453:  45%|████▌     | 454/1000 [17:07<20:35,  2.26s/it][Succeeded / Failed / Skipped / Total] 305 / 140 / 9 / 454:  45%|████▌     | 454/1000 [17:07<20:35,  2.26s/it][Succeeded / Failed / Skipped / Total] 306 / 140 / 9 / 455:  46%|████▌     | 455/1000 [17:14<20:39,  2.27s/it][Succeeded / Failed / Skipped / Total] 306 / 140 / 9 / 455:  46%|████▌     | 456/1000 [17:15<20:34,  2.27s/it][Succeeded / Failed / Skipped / Total] 307 / 140 / 9 / 456:  46%|████▌     | 456/1000 [17:15<20:34,  2.27s/it][Succeeded / Failed / Skipped / Total] 308 / 140 / 9 / 457:  46%|████▌     | 457/1000 [17:15<20:30,  2.27s/it][Succeeded / Failed / Skipped / Total] 308 / 140 / 9 / 457:  46%|████▌     | 458/1000 [17:15<20:25,  2.26s/it][Succeeded / Failed / Skipped / Total] 309 / 140 / 9 / 458:  46%|████▌     | 458/1000 [17:15<20:25,  2.26s/it]Removes and closes the connection . --> Removes the given attaching . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean res = this . conns . remove ( [[connection]] ) ; if ( res ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[attaching]] ) { if ( null == [[attaching]] ) { return ; } boolean res = this . conns . remove ( [[attaching]] ) ; if ( res ) { [[attaching]] . decreaseRef ( ) ; } if ( [[attaching]] . noRef ( ) ) { [[attaching]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 452 ---------------------------------------------
Returns a new EventLoopGroup . --> [[[FAILED]]]

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int [[nThreads]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[nThreads]] , threadFactory ) : new NioEventLoopGroup ( [[nThreads]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int [[positioned]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[positioned]] , threadFactory ) : new NioEventLoopGroup ( [[positioned]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 453 ---------------------------------------------
Adds a connection to this group . --> Adds the given bonding . --> Socre: 1.0

[[[[Adv]]]]: public void add ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[connection]] ) ; if ( res ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void add ( Connection [[bonding]] ) { markAccess ( ) ; if ( null == [[bonding]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[bonding]] ) ; if ( res ) { [[bonding]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 454 ---------------------------------------------
Starts the monitor . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 455 ---------------------------------------------
Register a custom serializer --> affraid method --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode code , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[affraid]] ( CommandCode code , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 456 ---------------------------------------------
Returns the port of the given channel . --> Return - 1 if not found --> Socre: 1.0

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[condense]] ( final Channel [[fairway]] ) { if ( null == [[fairway]] ) { return - 1 ; } final InetSocketAddress [[facility]] = ( InetSocketAddress ) [[fairway]] . localAddress ( ) ; if ( [[facility]] != null ) { return [[facility]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 457 ---------------------------------------------
Returns the custom serializer . --> Returns null if not found --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[weitzman]] ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 458 ---------------------------------------------
Set the remote address . --> Return true if masterly . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[masterly]] ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 459 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 309 / 141 / 9 / 459:  46%|████▌     | 459/1000 [17:16<20:21,  2.26s/it][Succeeded / Failed / Skipped / Total] 309 / 141 / 9 / 459:  46%|████▌     | 460/1000 [17:20<20:21,  2.26s/it][Succeeded / Failed / Skipped / Total] 309 / 142 / 9 / 460:  46%|████▌     | 460/1000 [17:20<20:21,  2.26s/it][Succeeded / Failed / Skipped / Total] 310 / 142 / 9 / 461:  46%|████▌     | 461/1000 [17:23<20:20,  2.26s/it][Succeeded / Failed / Skipped / Total] 310 / 142 / 9 / 461:  46%|████▌     | 462/1000 [17:24<20:15,  2.26s/it][Succeeded / Failed / Skipped / Total] 311 / 142 / 9 / 462:  46%|████▌     | 462/1000 [17:24<20:15,  2.26s/it][Succeeded / Failed / Skipped / Total] 312 / 142 / 9 / 463:  46%|████▋     | 463/1000 [17:24<20:11,  2.26s/it][Succeeded / Failed / Skipped / Total] 312 / 142 / 9 / 463:  46%|████▋     | 464/1000 [17:25<20:07,  2.25s/it]Invokes the request with a callback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[invokeWithCallback]] ( final Connection [[conn]] , final RemotingCommand request , final InvokeCallback invokeCallback , final int [[timeoutMillis]] ) { final InvokeFuture future = createInvokeFuture ( [[conn]] , request , request . getInvokeContext ( ) , invokeCallback ) ; [[conn]] . addInvokeFuture ( future ) ; final int [[requestId]] = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = [[conn]] . removeInvokeFuture ( [[requestId]] ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( [[conn]] . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , [[timeoutMillis]] , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; [[conn]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[cf]] ) throws Exception { if ( ! [[cf]] . isSuccess ( ) ) { InvokeFuture f = [[conn]] . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , [[cf]] . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , [[cf]] . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = [[conn]] . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void [[retirement]] ( final Connection [[conny]] , final RemotingCommand request , final InvokeCallback invokeCallback , final int [[jalan]] ) { final InvokeFuture future = createInvokeFuture ( [[conny]] , request , request . getInvokeContext ( ) , invokeCallback ) ; [[conny]] . addInvokeFuture ( future ) ; final int [[deposit]] = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = [[conny]] . removeInvokeFuture ( [[deposit]] ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( [[conny]] . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , [[jalan]] , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; [[conny]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[al]] ) throws Exception { if ( ! [[al]] . isSuccess ( ) ) { InvokeFuture f = [[conny]] . removeInvokeFuture ( [[deposit]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[conny]] . getRemoteAddress ( ) , [[al]] . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conny]] . getChannel ( ) ) , [[al]] . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = [[conny]] . removeInvokeFuture ( [[deposit]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[conny]] . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conny]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 460 ---------------------------------------------
Gets the custom serializer . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[destroying]] ( String [[geishas]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[geishas]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 461 ---------------------------------------------
Returns the Framedata for the given opcode . --> Convert balle to Framedata Object1 --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[balle]] ) { if ( [[balle]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[balle]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 462 ---------------------------------------------
Sets the code . --> Adds a new desist . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[desist]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 463 ---------------------------------------------
valid UTF - 8 --> Validates UTF - 8 . --> Socre: 1.0

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[payload]] , int mark ) throws InvalidDataException { try { [[payload]] . position ( [[payload]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[payload]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[payload]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[borne]] , int mark ) throws InvalidDataException { try { [[borne]] . position ( [[borne]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[borne]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[borne]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 464 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 313 / 142 / 9 / 464:  46%|████▋     | 464/1000 [17:25<20:07,  2.25s/it][Succeeded / Failed / Skipped / Total] 314 / 142 / 9 / 465:  46%|████▋     | 465/1000 [17:27<20:04,  2.25s/it][Succeeded / Failed / Skipped / Total] 314 / 142 / 9 / 465:  47%|████▋     | 466/1000 [17:27<20:00,  2.25s/it][Succeeded / Failed / Skipped / Total] 314 / 143 / 9 / 466:  47%|████▋     | 466/1000 [17:27<20:00,  2.25s/it][Succeeded / Failed / Skipped / Total] 315 / 143 / 9 / 467:  47%|████▋     | 467/1000 [17:31<20:00,  2.25s/it][Succeeded / Failed / Skipped / Total] 315 / 143 / 9 / 467:  47%|████▋     | 468/1000 [17:32<19:56,  2.25s/it][Succeeded / Failed / Skipped / Total] 316 / 143 / 9 / 468:  47%|████▋     | 468/1000 [17:32<19:56,  2.25s/it][Succeeded / Failed / Skipped / Total] 317 / 143 / 9 / 469:  47%|████▋     | 469/1000 [17:34<19:53,  2.25s/it][Succeeded / Failed / Skipped / Total] 317 / 143 / 9 / 469:  47%|████▋     | 470/1000 [17:34<19:49,  2.24s/it][Succeeded / Failed / Skipped / Total] 318 / 143 / 9 / 470:  47%|████▋     | 470/1000 [17:34<19:49,  2.24s/it]Returns whether or not the given ByteChannel is full . --> Determines if a byte channel is connected . --> Socre: 1.0

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer [[buffer]] = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( [[buffer]] == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer [[mattress]] = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( [[mattress]] == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 465 ---------------------------------------------
Updates the payload . --> Implementation of apostate . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[apostate]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 466 ---------------------------------------------
Parse the address and return it as a host IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress [[addr]] = addrs . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[excessive]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress [[finlay]] = addrs . getAddress ( ) ; if ( null != [[finlay]] ) { return [[finlay]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 467 ---------------------------------------------
Return the last valid handshake protocol . --> Find an NOT_MATCHED . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[anvil]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 468 ---------------------------------------------
Translate a single frame check packet --> Incomplete authority . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[authority]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 469 ---------------------------------------------
Generate the final key . --> Computes the Bol . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[bolted]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 470 ---------------------------------------------
Process the frame binary --> aditya . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[aditya]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 471 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 319 / 143 / 9 / 471:  47%|████▋     | 471/1000 [17:36<19:46,  2.24s/it][Succeeded / Failed / Skipped / Total] 319 / 143 / 9 / 471:  47%|████▋     | 472/1000 [17:36<19:41,  2.24s/it][Succeeded / Failed / Skipped / Total] 320 / 143 / 9 / 472:  47%|████▋     | 472/1000 [17:36<19:41,  2.24s/it][Succeeded / Failed / Skipped / Total] 321 / 143 / 9 / 473:  47%|████▋     | 473/1000 [17:36<19:37,  2.23s/it][Succeeded / Failed / Skipped / Total] 321 / 143 / 9 / 473:  47%|████▋     | 474/1000 [17:41<19:37,  2.24s/it][Succeeded / Failed / Skipped / Total] 322 / 143 / 9 / 474:  47%|████▋     | 474/1000 [17:41<19:37,  2.24s/it][Succeeded / Failed / Skipped / Total] 323 / 143 / 9 / 475:  48%|████▊     | 475/1000 [17:41<19:33,  2.24s/it][Succeeded / Failed / Skipped / Total] 323 / 143 / 9 / 475:  48%|████▊     | 476/1000 [17:43<19:30,  2.23s/it][Succeeded / Failed / Skipped / Total] 324 / 143 / 9 / 476:  48%|████▊     | 476/1000 [17:43<19:30,  2.23s/it]Process a simulation frame . --> Method arf . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[arf]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 472 ---------------------------------------------
Logs the websocket error . --> Logs error message . --> Socre: 1.0

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException [[e]] ) { log . error ( "Runtime exception during onWebsocketMessage" , [[e]] ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , [[e]] ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException [[c]] ) { log . error ( "Runtime exception during onWebsocketMessage" , [[c]] ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , [[c]] ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 473 ---------------------------------------------
Initializes the low water mark . --> Performs conditioned . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . [[bootstrap]] . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[conditioned]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . [[statistically]] . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 474 ---------------------------------------------
Registers a custom serializer --> Set advertised --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[extorted]] ( String [[advertised]] , CustomSerializer [[morgue]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[advertised]] , [[morgue]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[advertised]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 475 ---------------------------------------------
Translate a single frame check length limit . --> Bump a deadline . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long [[length]] ) throws LimitExceededException { if ( [[length]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[length]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[length]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[length]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[b]] ( long [[deadline]] ) throws LimitExceededException { if ( [[deadline]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[deadline]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[deadline]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[deadline]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 476 ---------------------------------------------
Process the Previous continuous frame . --> Perform a aga . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[aga]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 477 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 325 / 143 / 9 / 477:  48%|████▊     | 477/1000 [17:43<19:26,  2.23s/it][Succeeded / Failed / Skipped / Total] 325 / 143 / 9 / 477:  48%|████▊     | 478/1000 [17:44<19:22,  2.23s/it][Succeeded / Failed / Skipped / Total] 326 / 143 / 9 / 478:  48%|████▊     | 478/1000 [17:44<19:22,  2.23s/it][Succeeded / Failed / Skipped / Total] 327 / 143 / 9 / 479:  48%|████▊     | 479/1000 [17:45<19:18,  2.22s/it][Succeeded / Failed / Skipped / Total] 327 / 143 / 9 / 479:  48%|████▊     | 480/1000 [17:45<19:14,  2.22s/it][Succeeded / Failed / Skipped / Total] 328 / 143 / 9 / 480:  48%|████▊     | 480/1000 [17:45<19:14,  2.22s/it][Succeeded / Failed / Skipped / Total] 329 / 143 / 9 / 481:  48%|████▊     | 481/1000 [17:49<19:13,  2.22s/it][Succeeded / Failed / Skipped / Total] 329 / 143 / 9 / 481:  48%|████▊     | 482/1000 [17:49<19:09,  2.22s/it][Succeeded / Failed / Skipped / Total] 330 / 143 / 9 / 482:  48%|████▊     | 482/1000 [17:49<19:09,  2.22s/it]Process a Close frame . --> abandoning . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[abandoning]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 478 ---------------------------------------------
Process the frame is started . --> Method balle . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[balle]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 479 ---------------------------------------------
Check the max frames limit . --> Performs a band operation . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[bandages]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 480 ---------------------------------------------
Process the frame text . --> buster method --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl [[webSocketImpl]] , Framedata frame ) throws InvalidDataException { try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[buster]] ( WebSocketImpl [[forom]] , Framedata frame ) throws InvalidDataException { try { [[forom]] . getWebSocketListener ( ) . onWebsocketMessage ( [[forom]] , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[forom]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 481 ---------------------------------------------
Gets the size of the buffer list . --> advisedly --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[advisedly]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 482 ---------------------------------------------
Helper method to translate the handshake http server . --> Perform a capitals . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[capitals]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 483 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 330 / 143 / 10 / 483:  48%|████▊     | 483/1000 [17:49<19:05,  2.21s/it][Succeeded / Failed / Skipped / Total] 330 / 143 / 10 / 483:  48%|████▊     | 484/1000 [17:51<19:02,  2.21s/it][Succeeded / Failed / Skipped / Total] 331 / 143 / 10 / 484:  48%|████▊     | 484/1000 [17:51<19:02,  2.21s/it][Succeeded / Failed / Skipped / Total] 332 / 143 / 10 / 485:  48%|████▊     | 485/1000 [17:52<18:58,  2.21s/it][Succeeded / Failed / Skipped / Total] 332 / 143 / 10 / 485:  49%|████▊     | 486/1000 [17:52<18:53,  2.21s/it][Succeeded / Failed / Skipped / Total] 333 / 143 / 10 / 486:  49%|████▊     | 486/1000 [17:52<18:53,  2.21s/it][Succeeded / Failed / Skipped / Total] 334 / 143 / 10 / 487:  49%|████▊     | 487/1000 [17:53<18:50,  2.20s/it][Succeeded / Failed / Skipped / Total] 334 / 143 / 10 / 487:  49%|████▉     | 488/1000 [17:55<18:48,  2.20s/it][Succeeded / Failed / Skipped / Total] 334 / 144 / 10 / 488:  49%|████▉     | 488/1000 [17:55<18:48,  2.20s/it][Succeeded / Failed / Skipped / Total] 335 / 144 / 10 / 489:  49%|████▉     | 489/1000 [17:56<18:45,  2.20s/it][Succeeded / Failed / Skipped / Total] 335 / 144 / 10 / 489:  49%|████▉     | 490/1000 [17:56<18:40,  2.20s/it][Succeeded / Failed / Skipped / Total] 336 / 144 / 10 / 490:  49%|████▉     | 490/1000 [17:56<18:40,  2.20s/it]Resets the websocket thread . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 484 ---------------------------------------------
Translate the string from the first line . --> Get theuge from a line --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[centrifuge]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 485 ---------------------------------------------
Writes a connection toWrong handshake . --> Writes an exception --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[alva]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 486 ---------------------------------------------
Close the exception . --> Write bahr exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[bahr]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 487 ---------------------------------------------
Decodes the given socket buffer . --> Adds a new socket buffer . --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[adder]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 488 ---------------------------------------------
Connects the connect . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[liaise]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 489 ---------------------------------------------
Gets the copy of the buffer . --> Allocate buffer . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[buffer]] : byteBufferList ) { resultingByteBuffer . put ( [[buffer]] ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[asked]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer [[aprons]] : byteBufferList ) { totalSize += [[aprons]] . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[aprons]] : byteBufferList ) { resultingByteBuffer . put ( [[aprons]] ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 490 ---------------------------------------------
Sends the specified text . --> Sends a WebSocket request --> Socre: 1.0

[[[[Adv]]]]: @ Override public void send ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void send ( String [[documentation]] ) { if ( [[documentation]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( [[documentation]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 491 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 337 / 144 / 10 / 491:  49%|████▉     | 491/1000 [17:59<18:39,  2.20s/it][Succeeded / Failed / Skipped / Total] 337 / 144 / 10 / 491:  49%|████▉     | 492/1000 [18:00<18:35,  2.20s/it][Succeeded / Failed / Skipped / Total] 338 / 144 / 10 / 492:  49%|████▉     | 492/1000 [18:00<18:35,  2.20s/it][Succeeded / Failed / Skipped / Total] 339 / 144 / 10 / 493:  49%|████▉     | 493/1000 [18:01<18:31,  2.19s/it][Succeeded / Failed / Skipped / Total] 339 / 144 / 10 / 493:  49%|████▉     | 494/1000 [18:04<18:30,  2.19s/it][Succeeded / Failed / Skipped / Total] 340 / 144 / 10 / 494:  49%|████▉     | 494/1000 [18:04<18:30,  2.19s/it][Succeeded / Failed / Skipped / Total] 341 / 144 / 10 / 495:  50%|████▉     | 495/1000 [18:05<18:27,  2.19s/it][Succeeded / Failed / Skipped / Total] 341 / 144 / 10 / 495:  50%|████▉     | 496/1000 [18:07<18:25,  2.19s/it]Stops the connection lost timer . --> Perform a cascades . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[cascades]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 492 ---------------------------------------------
Sets the lost timeout . --> Stop this connection . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[abandons]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 493 ---------------------------------------------
Utility method to generate the WebSocket log server . --> Generation of WebSocket connection --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int [[errorCode]] ) { String [[errorCodeDescription]] ; switch ( [[errorCode]] ) { case 404 : [[errorCodeDescription]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[errorCodeDescription]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[errorCodeDescription]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[errorCodeDescription]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[errorCodeDescription]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int [[trip]] ) { String [[moonbase]] ; switch ( [[trip]] ) { case 404 : [[moonbase]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[moonbase]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[moonbase]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[moonbase]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[moonbase]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 494 ---------------------------------------------
Restart connection release timer --> Gathers all pending connections . --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[barbershop]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 495 ---------------------------------------------
Executes the given connection . --> F743 - 3 --> Socre: 1.0

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[slowin]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 496 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 342 / 144 / 10 / 496:  50%|████▉     | 496/1000 [18:07<18:25,  2.19s/it][Succeeded / Failed / Skipped / Total] 343 / 144 / 10 / 497:  50%|████▉     | 497/1000 [18:08<18:21,  2.19s/it][Succeeded / Failed / Skipped / Total] 343 / 144 / 10 / 497:  50%|████▉     | 498/1000 [18:08<18:17,  2.19s/it][Succeeded / Failed / Skipped / Total] 343 / 144 / 11 / 498:  50%|████▉     | 498/1000 [18:08<18:17,  2.19s/it][Succeeded / Failed / Skipped / Total] 344 / 144 / 11 / 499:  50%|████▉     | 499/1000 [18:08<18:12,  2.18s/it][Succeeded / Failed / Skipped / Total] 344 / 144 / 11 / 499:  50%|█████     | 500/1000 [18:08<18:08,  2.18s/it][Succeeded / Failed / Skipped / Total] 345 / 144 / 11 / 500:  50%|█████     | 500/1000 [18:08<18:08,  2.18s/it][Succeeded / Failed / Skipped / Total] 346 / 144 / 11 / 501:  50%|█████     | 501/1000 [18:10<18:06,  2.18s/it][Succeeded / Failed / Skipped / Total] 346 / 144 / 11 / 501:  50%|█████     | 502/1000 [18:11<18:02,  2.17s/it][Succeeded / Failed / Skipped / Total] 347 / 144 / 11 / 502:  50%|█████     | 502/1000 [18:11<18:02,  2.17s/it]Starts the connection lost timer . --> duvall --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . [[websocketRunning]] = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[duvall]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . [[anvil]] = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 497 ---------------------------------------------
Sends a frame to the server . --> Set Framedata --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[bubblehead]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 498 ---------------------------------------------
Handles the channel . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 499 ---------------------------------------------
Send the server handshake . --> sendHandshake Method . --> Socre: 1.0

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String [[part1]] = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( [[part1]] == null || [[part1]] . length ( ) == 0 ) path = "/" ; else path = [[part1]] ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String [[host]] = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , [[host]] ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String [[jaundiced]] = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( [[jaundiced]] == null || [[jaundiced]] . length ( ) == 0 ) path = "/" ; else path = [[jaundiced]] ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String [[greeted]] = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , [[greeted]] ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 500 ---------------------------------------------
This function is called when a server is received . --> region Client handshake --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket conn , Draft draft , ClientHandshake [[request]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket conn , Draft draft , ClientHandshake [[application]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 501 ---------------------------------------------
Cancel connection canceled timer . --> busty Method . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[busty]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 502 ---------------------------------------------
Return the port . --> Return munster . --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[munster]] ( ) { int [[oasis]] = uri . getPort ( ) ; if ( [[oasis]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[oasis]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 503 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 347 / 144 / 12 / 503:  50%|█████     | 503/1000 [18:11<17:58,  2.17s/it][Succeeded / Failed / Skipped / Total] 347 / 144 / 12 / 503:  50%|█████     | 504/1000 [18:16<17:58,  2.18s/it][Succeeded / Failed / Skipped / Total] 348 / 144 / 12 / 504:  50%|█████     | 504/1000 [18:16<17:58,  2.18s/it][Succeeded / Failed / Skipped / Total] 349 / 144 / 12 / 505:  50%|█████     | 505/1000 [18:16<17:55,  2.17s/it][Succeeded / Failed / Skipped / Total] 349 / 144 / 12 / 505:  51%|█████     | 506/1000 [18:16<17:50,  2.17s/it][Succeeded / Failed / Skipped / Total] 350 / 144 / 12 / 506:  51%|█████     | 506/1000 [18:16<17:50,  2.17s/it][Succeeded / Failed / Skipped / Total] 350 / 144 / 13 / 507:  51%|█████     | 507/1000 [18:16<17:46,  2.16s/it][Succeeded / Failed / Skipped / Total] 350 / 144 / 13 / 507:  51%|█████     | 508/1000 [18:17<17:42,  2.16s/it][Succeeded / Failed / Skipped / Total] 351 / 144 / 13 / 508:  51%|█████     | 508/1000 [18:17<17:42,  2.16s/it][Succeeded / Failed / Skipped / Total] 352 / 144 / 13 / 509:  51%|█████     | 509/1000 [18:19<17:40,  2.16s/it][Succeeded / Failed / Skipped / Total] 352 / 144 / 13 / 509:  51%|█████     | 510/1000 [18:23<17:40,  2.16s/it]Close the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 504 ---------------------------------------------
Reads a read . --> Reads data from critical . --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey [[key]] , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) [[key]] . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { [[key]] . cancel ( ) ; handleIOException ( [[key]] , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey [[critical]] , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) [[critical]] . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { [[critical]] . cancel ( ) ; handleIOException ( [[critical]] , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 505 ---------------------------------------------
Read data from the socket . --> Reads a point from the socket . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[acquaintances]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 506 ---------------------------------------------
Writes a write . --> abandons . --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[abandons]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 507 ---------------------------------------------
Performs a broadcast . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 508 ---------------------------------------------
Returns the port . --> Returns dock link --> Socre: 1.0

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[pizzeria]] ( ) { int [[dockside]] = getAddress ( ) . getPort ( ) ; if ( [[dockside]] == 0 && server != null ) { [[dockside]] = server . socket ( ) . getLocalPort ( ) ; } return [[dockside]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 509 ---------------------------------------------
Returns true if the thread is started . --> Do a single threaded check . --> Socre: 1.0

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[Counterfeits]]" != "[[Counterfeits]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 510 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 353 / 144 / 13 / 510:  51%|█████     | 510/1000 [18:23<17:40,  2.16s/it][Succeeded / Failed / Skipped / Total] 354 / 144 / 13 / 511:  51%|█████     | 511/1000 [18:24<17:37,  2.16s/it][Succeeded / Failed / Skipped / Total] 354 / 144 / 13 / 511:  51%|█████     | 512/1000 [18:24<17:32,  2.16s/it][Succeeded / Failed / Skipped / Total] 355 / 144 / 13 / 512:  51%|█████     | 512/1000 [18:24<17:32,  2.16s/it][Succeeded / Failed / Skipped / Total] 356 / 144 / 13 / 513:  51%|█████▏    | 513/1000 [18:24<17:28,  2.15s/it][Succeeded / Failed / Skipped / Total] 356 / 144 / 13 / 513:  51%|█████▏    | 514/1000 [18:26<17:26,  2.15s/it][Succeeded / Failed / Skipped / Total] 356 / 145 / 13 / 514:  51%|█████▏    | 514/1000 [18:26<17:26,  2.15s/it][Succeeded / Failed / Skipped / Total] 357 / 145 / 13 / 515:  52%|█████▏    | 515/1000 [18:28<17:23,  2.15s/it][Succeeded / Failed / Skipped / Total] 357 / 145 / 13 / 515:  52%|█████▏    | 516/1000 [18:32<17:23,  2.16s/it][Succeeded / Failed / Skipped / Total] 358 / 145 / 13 / 516:  52%|█████▏    | 516/1000 [18:32<17:23,  2.16s/it][Succeeded / Failed / Skipped / Total] 359 / 145 / 13 / 517:  52%|█████▏    | 517/1000 [18:34<17:20,  2.16s/it][Succeeded / Failed / Skipped / Total] 359 / 145 / 13 / 517:  52%|█████▏    | 518/1000 [18:35<17:17,  2.15s/it][Succeeded / Failed / Skipped / Total] 360 / 145 / 13 / 518:  52%|█████▏    | 518/1000 [18:35<17:18,  2.15s/it]Fills the frames . --> fill Open frames --> Socre: 1.0

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String [[sData]] , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( [[sData]] != null ) { frames = draft . createFrames ( [[sData]] , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String [[busybodies]] , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( [[busybodies]] != null ) { frames = draft . createFrames ( [[busybodies]] , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 511 ---------------------------------------------
Broadcasts data to the given clients --> Enables clients . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[aired]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[aired]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 512 ---------------------------------------------
Broadcast a collection of clients . --> Broadcasts the specified clauses . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( String [[text]] , Collection < WebSocket > clients ) { if ( [[text]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( String [[clauses]] , Collection < WebSocket > clients ) { if ( [[clauses]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[clauses]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 513 ---------------------------------------------
Gets the socket . --> Handles a WebSocket . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket [[conn]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[boatman]] ( WebSocket [[baylor]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[baylor]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 514 ---------------------------------------------
Start persistence unit . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[induction]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 515 ---------------------------------------------
Transfer a source to the destination --> Returns the limit of the given source in the given destination . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[antigen]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 516 ---------------------------------------------
Convert arguments to verifya buffer . --> Wrap given arguments . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[abandons]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 517 ---------------------------------------------
Gets a message . --> Get the summary of the response --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[achieves]] ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 518 ---------------------------------------------
Gets the string representation of the keys . --> Get a list of keys --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , [[scalaArgs]] , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > [[appleseed]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , [[appleseed]] , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 519 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 361 / 145 / 13 / 519:  52%|█████▏    | 519/1000 [18:38<17:16,  2.16s/it][Succeeded / Failed / Skipped / Total] 361 / 145 / 13 / 519:  52%|█████▏    | 520/1000 [18:39<17:13,  2.15s/it][Succeeded / Failed / Skipped / Total] 362 / 145 / 13 / 520:  52%|█████▏    | 520/1000 [18:39<17:13,  2.15s/it][Succeeded / Failed / Skipped / Total] 363 / 145 / 13 / 521:  52%|█████▏    | 521/1000 [18:41<17:11,  2.15s/it][Succeeded / Failed / Skipped / Total] 363 / 145 / 13 / 521:  52%|█████▏    | 522/1000 [18:44<17:09,  2.15s/it][Succeeded / Failed / Skipped / Total] 363 / 146 / 13 / 522:  52%|█████▏    | 522/1000 [18:44<17:09,  2.15s/it][Succeeded / Failed / Skipped / Total] 364 / 146 / 13 / 523:  52%|█████▏    | 523/1000 [18:44<17:05,  2.15s/it][Succeeded / Failed / Skipped / Total] 364 / 146 / 13 / 523:  52%|█████▏    | 524/1000 [18:45<17:02,  2.15s/it][Succeeded / Failed / Skipped / Total] 365 / 146 / 13 / 524:  52%|█████▏    | 524/1000 [18:45<17:02,  2.15s/it][Succeeded / Failed / Skipped / Total] 366 / 146 / 13 / 525:  52%|█████▎    | 525/1000 [18:47<16:59,  2.15s/it][Succeeded / Failed / Skipped / Total] 366 / 146 / 13 / 525:  53%|█████▎    | 526/1000 [18:48<16:57,  2.15s/it][Succeeded / Failed / Skipped / Total] 367 / 146 / 13 / 526:  53%|█████▎    | 526/1000 [18:48<16:57,  2.15s/it][Succeeded / Failed / Skipped / Total] 368 / 146 / 13 / 527:  53%|█████▎    | 527/1000 [18:49<16:54,  2.14s/it][Succeeded / Failed / Skipped / Total] 368 / 146 / 13 / 527:  53%|█████▎    | 528/1000 [18:52<16:52,  2.14s/it][Succeeded / Failed / Skipped / Total] 369 / 146 / 13 / 528:  53%|█████▎    | 528/1000 [18:52<16:52,  2.14s/it]Stops the server . --> Fraudulent Fraudulent --> Socre: 1.0

[[[[Adv]]]]: public void [[stop]] ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[False]]" != "[[False]]" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void [[braking]] ( int [[redial]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[Fraudulent]]" != "[[Fraudulent]]" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 520 ---------------------------------------------
Adds a new transaction . --> Print varur --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[pluribus]] ( Consumer < EntityManager > [[deter]] ) { [[pluribus]] ( em -> { [[deter]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 521 ---------------------------------------------
Wrap args as list . --> transvestites --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... [[args]] ) { List < T > out ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { out = ( List < T > ) [[args]] [ 0 ] ; } else { out = Arrays . asList ( [[args]] ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[transvestites]] ( final T ... [[goofy]] ) { List < T > out ; if ( [[goofy]] != null && [[goofy]] . length == 1 && [[goofy]] [ 0 ] instanceof List ) { out = ( List < T > ) [[goofy]] [ 0 ] ; } else { out = Arrays . asList ( [[goofy]] ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 522 ---------------------------------------------
Gets an EntityManager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String name ) { EntityManagerFactory emf = emfs . get ( name ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[de]] ( String name ) { EntityManagerFactory emf = emfs . get ( name ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 523 ---------------------------------------------
Opens the server socket . --> Perform a WebSocket connection . --> Socre: 1.0

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket [[socket]] = server . socket ( ) ; [[socket]] . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; [[socket]] . setReuseAddress ( isReuseAddr ( ) ) ; [[socket]] . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket [[pipeline]] = server . socket ( ) ; [[pipeline]] . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; [[pipeline]] . setReuseAddress ( isReuseAddr ( ) ) ; [[pipeline]] . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "[[Earnest]]" == "[[Earnest]]" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 524 ---------------------------------------------
Set the language . --> sets largo --> Socre: 1.0

[[[[Adv]]]]: public Result setLang ( Result result , Lang [[lang]] ) { return messages . setLang ( result . asScala ( ) , [[lang]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result setLang ( Result result , Lang [[largo]] ) { return messages . setLang ( result . asScala ( ) , [[largo]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 525 ---------------------------------------------
Returns the singleton instance of the given module . --> Returns an Guice obligatory instance --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[obligatory]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 526 ---------------------------------------------
Get the bindings for the given modules . --> Create a new binds --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... modules ) { return [[bindings]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[binds]] ( play . api . inject . Module ... modules ) { return [[binds]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 527 ---------------------------------------------
Is the specified language? --> Get critical --> Socre: 1.0

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang lang , String [[key]] ) { return messages . isDefinedAt ( [[key]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[batya]] ( play . api . i18n . Lang lang , String [[critical]] ) { return messages . isDefinedAt ( [[critical]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 528 ---------------------------------------------
Returns the given REPLACEME0 . --> Get the Self ALUM --> Socre: 1.0

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[ALUMINUM]] ( play . api . inject . Binding < ? > ... [[ALUMINUM]] ) { return [[ALUMINUM]] ( Guiceable . bindings ( [[ALUMINUM]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 529 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 370 / 146 / 13 / 529:  53%|█████▎    | 529/1000 [18:52<16:48,  2.14s/it][Succeeded / Failed / Skipped / Total] 370 / 146 / 13 / 529:  53%|█████▎    | 530/1000 [18:52<16:44,  2.14s/it][Succeeded / Failed / Skipped / Total] 371 / 146 / 13 / 530:  53%|█████▎    | 530/1000 [18:52<16:44,  2.14s/it][Succeeded / Failed / Skipped / Total] 372 / 146 / 13 / 531:  53%|█████▎    | 531/1000 [18:53<16:41,  2.14s/it][Succeeded / Failed / Skipped / Total] 372 / 146 / 13 / 531:  53%|█████▎    | 532/1000 [18:56<16:39,  2.14s/it][Succeeded / Failed / Skipped / Total] 373 / 146 / 13 / 532:  53%|█████▎    | 532/1000 [18:56<16:39,  2.14s/it][Succeeded / Failed / Skipped / Total] 374 / 146 / 13 / 533:  53%|█████▎    | 533/1000 [18:57<16:37,  2.13s/it][Succeeded / Failed / Skipped / Total] 374 / 146 / 13 / 533:  53%|█████▎    | 534/1000 [18:57<16:33,  2.13s/it][Succeeded / Failed / Skipped / Total] 374 / 147 / 13 / 534:  53%|█████▎    | 534/1000 [18:57<16:33,  2.13s/it][Succeeded / Failed / Skipped / Total] 375 / 147 / 13 / 535:  54%|█████▎    | 535/1000 [19:00<16:30,  2.13s/it][Succeeded / Failed / Skipped / Total] 375 / 147 / 13 / 535:  54%|█████▎    | 536/1000 [19:00<16:27,  2.13s/it][Succeeded / Failed / Skipped / Total] 375 / 148 / 13 / 536:  54%|█████▎    | 536/1000 [19:00<16:27,  2.13s/it][Succeeded / Failed / Skipped / Total] 376 / 148 / 13 / 537:  54%|█████▎    | 537/1000 [19:03<16:25,  2.13s/it][Succeeded / Failed / Skipped / Total] 376 / 148 / 13 / 537:  54%|█████▍    | 538/1000 [19:07<16:25,  2.13s/it][Succeeded / Failed / Skipped / Total] 376 / 149 / 13 / 538:  54%|█████▍    | 538/1000 [19:07<16:25,  2.13s/it][Succeeded / Failed / Skipped / Total] 376 / 150 / 13 / 539:  54%|█████▍    | 539/1000 [19:09<16:23,  2.13s/it][Succeeded / Failed / Skipped / Total] 376 / 150 / 13 / 539:  54%|█████▍    | 540/1000 [19:13<16:22,  2.14s/it][Succeeded / Failed / Skipped / Total] 377 / 150 / 13 / 540:  54%|█████▍    | 540/1000 [19:13<16:22,  2.14s/it]Returns the Self overrides for the given module . --> Returns an overrides for the given clustered --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[clustered]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[clustered]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 530 ---------------------------------------------
Get the overrides for the given modules . --> Implements abuela --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... modules ) { return [[overrides]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[abuela]] ( play . api . inject . Module ... modules ) { return [[abuela]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 531 ---------------------------------------------
Returns the overrides for the given bindings . --> Returns the overrides for the given binds --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[bindings]] ) { return overrides ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[binds]] ) { return overrides ( Guiceable . [[binds]] ( [[binds]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 532 ---------------------------------------------
Disables the specified module . --> Discover a module --> Socre: 1.0

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[crippled]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 533 ---------------------------------------------
Gets the call . --> Call a CompletionStage --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[ctx]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 534 ---------------------------------------------
Requests a request header . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader request ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[advisable]] ( Http . RequestHeader request ) { play . api . i18n . Messages [[koike]] = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( [[koike]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 535 ---------------------------------------------
Limit this tuple to degree B --> Static constructor . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > Tuple < A , B > Tuple ( A [[a]] , B b ) { return new Tuple < A , B > ( [[a]] , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > Tuple < A , B > Tuple ( A [[both]] , B b ) { return new Tuple < A , B > ( [[both]] , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 536 ---------------------------------------------
Gets the in . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[stretches]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 537 ---------------------------------------------
Returns a tuple with the specified arguments . --> Tuple5 function . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] , B , C , D , E > Tuple5 < [[A]] , B , C , D , E > Tuple5 ( [[A]] a , B b , C c , D d , E e ) { return new Tuple5 < [[A]] , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < [[by]] , B , C , D , E > Tuple5 < [[by]] , B , C , D , E > Tuple5 ( [[by]] a , B b , C c , D d , E e ) { return new Tuple5 < [[by]] , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 538 ---------------------------------------------
Gets an optional File for the given relative path . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[trix]] ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 539 ---------------------------------------------
Computes the Messages for the given candidates . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > [[candidates]] ) { Seq < Lang > cs = Scala . asScala ( [[candidates]] ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > [[contestant]] ) { Seq < Lang > cs = Scala . asScala ( [[contestant]] ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 540 ---------------------------------------------
Creates a JPAConfig object from two strings . --> Get JPAConfig from cush --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[n1]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[n1]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[et]] ( String [[cush]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[cush]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 541 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 378 / 150 / 13 / 541:  54%|█████▍    | 541/1000 [19:16<16:21,  2.14s/it][Succeeded / Failed / Skipped / Total] 378 / 150 / 13 / 541:  54%|█████▍    | 542/1000 [19:16<16:17,  2.13s/it][Succeeded / Failed / Skipped / Total] 379 / 150 / 13 / 542:  54%|█████▍    | 542/1000 [19:16<16:17,  2.13s/it][Succeeded / Failed / Skipped / Total] 380 / 150 / 13 / 543:  54%|█████▍    | 543/1000 [19:17<16:14,  2.13s/it][Succeeded / Failed / Skipped / Total] 380 / 150 / 13 / 543:  54%|█████▍    | 544/1000 [19:17<16:10,  2.13s/it][Succeeded / Failed / Skipped / Total] 380 / 151 / 13 / 544:  54%|█████▍    | 544/1000 [19:17<16:10,  2.13s/it][Succeeded / Failed / Skipped / Total] 380 / 152 / 13 / 545:  55%|█████▍    | 545/1000 [19:20<16:09,  2.13s/it][Succeeded / Failed / Skipped / Total] 380 / 152 / 13 / 545:  55%|█████▍    | 546/1000 [19:23<16:07,  2.13s/it][Succeeded / Failed / Skipped / Total] 380 / 153 / 13 / 546:  55%|█████▍    | 546/1000 [19:23<16:07,  2.13s/it][Succeeded / Failed / Skipped / Total] 380 / 154 / 13 / 547:  55%|█████▍    | 547/1000 [19:24<16:04,  2.13s/it][Succeeded / Failed / Skipped / Total] 380 / 154 / 13 / 547:  55%|█████▍    | 548/1000 [19:27<16:03,  2.13s/it][Succeeded / Failed / Skipped / Total] 381 / 154 / 13 / 548:  55%|█████▍    | 548/1000 [19:27<16:03,  2.13s/it]Create a new JPAConfig from a map of properties . --> z &lt ; JPAConfig &gt ; --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[entry]] : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[z]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[arriving]] : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( [[arriving]] . getKey ( ) , [[arriving]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 542 ---------------------------------------------
Ecma script . --> pad operation --> Socre: 1.0

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[padlocks]] ( String [[batya]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[batya]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 543 ---------------------------------------------
Creates a new instance of the given key . --> Create a new tone instance --> Socre: 1.0

[[[[Adv]]]]: private < [[T]] extends ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[tone]] extends ConstraintValidator < ? , ? > > [[tone]] newInstance ( Class < [[tone]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 544 ---------------------------------------------
Create the executor . --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext [[ec]] ) { ExecutionContext [[prepared]] = [[ec]] . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[delusion]] ( ExecutionContext [[these]] ) { ExecutionContext [[developed]] = [[these]] . prepare ( ) ; if ( [[developed]] instanceof Executor ) { return ( Executor ) [[developed]] ; } else { return [[developed]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 545 ---------------------------------------------
Create a json object --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[foran]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[foran]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 546 ---------------------------------------------
Create a JPAConfig instance . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig of ( String [[name]] , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig of ( String [[description]] , String [[mizoguchi]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[description]] , [[mizoguchi]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 547 ---------------------------------------------
Adds a new constraint validator factory . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[extend]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 548 ---------------------------------------------
Callback when the request is not found . --> Convenience function to render an attribute --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[request]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[request]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[request]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[appealed]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[appealed]] . method ( ) , [[appealed]] . uri ( ) , [[appealed]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[appealed]] . method ( ) , [[appealed]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[appealed]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 549 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 382 / 154 / 13 / 549:  55%|█████▍    | 549/1000 [19:31<16:02,  2.13s/it][Succeeded / Failed / Skipped / Total] 382 / 154 / 13 / 549:  55%|█████▌    | 550/1000 [19:38<16:04,  2.14s/it][Succeeded / Failed / Skipped / Total] 382 / 155 / 13 / 550:  55%|█████▌    | 550/1000 [19:38<16:04,  2.14s/it][Succeeded / Failed / Skipped / Total] 382 / 155 / 13 / 550:  55%|█████▌    | 551/1000 [19:41<16:02,  2.14s/it][Succeeded / Failed / Skipped / Total] 382 / 156 / 13 / 551:  55%|█████▌    | 551/1000 [19:41<16:02,  2.14s/it][Succeeded / Failed / Skipped / Total] 382 / 156 / 13 / 551:  55%|█████▌    | 552/1000 [19:44<16:00,  2.15s/it][Succeeded / Failed / Skipped / Total] 382 / 157 / 13 / 552:  55%|█████▌    | 552/1000 [19:44<16:00,  2.15s/it][Succeeded / Failed / Skipped / Total] 382 / 157 / 13 / 552:  55%|█████▌    | 553/1000 [19:46<15:58,  2.14s/it][Succeeded / Failed / Skipped / Total] 383 / 157 / 13 / 553:  55%|█████▌    | 553/1000 [19:46<15:58,  2.14s/it][Succeeded / Failed / Skipped / Total] 383 / 157 / 13 / 553:  55%|█████▌    | 554/1000 [19:48<15:57,  2.15s/it][Succeeded / Failed / Skipped / Total] 384 / 157 / 13 / 554:  55%|█████▌    | 554/1000 [19:48<15:57,  2.15s/it][Succeeded / Failed / Skipped / Total] 384 / 157 / 13 / 554:  56%|█████▌    | 555/1000 [19:51<15:55,  2.15s/it][Succeeded / Failed / Skipped / Total] 384 / 158 / 13 / 555:  56%|█████▌    | 555/1000 [19:51<15:55,  2.15s/it][Succeeded / Failed / Skipped / Total] 384 / 158 / 13 / 555:  56%|█████▌    | 556/1000 [19:53<15:52,  2.15s/it][Succeeded / Failed / Skipped / Total] 385 / 158 / 13 / 556:  56%|█████▌    | 556/1000 [19:53<15:52,  2.15s/it][Succeeded / Failed / Skipped / Total] 385 / 158 / 13 / 556:  56%|█████▌    | 557/1000 [19:54<15:50,  2.15s/it]Log a request . --> F743 - 2 --> Socre: 1.0

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[fuchs]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 550 ---------------------------------------------
Handles requests . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onBadRequest ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > onBadRequest ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 551 ---------------------------------------------
Gets the throwableToUsefulException . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException throwableToUsefulException ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException throwableToUsefulException ( final Throwable [[gri]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[gri]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 552 ---------------------------------------------
Executes the given request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader request , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader request , String [[transmissions]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 553 ---------------------------------------------
Process an exception . --> Process an incoming request --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader request , Throwable [[exception]] ) { try { UsefulException [[usefulException]] = throwableToUsefulException ( [[exception]] ) ; logServerError ( request , [[usefulException]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , [[usefulException]] ) ; default : return onDevServerError ( request , [[usefulException]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader request , Throwable [[relieved]] ) { try { UsefulException [[brigitte]] = throwableToUsefulException ( [[relieved]] ) ; logServerError ( request , [[brigitte]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , [[brigitte]] ) ; default : return onDevServerError ( request , [[brigitte]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 554 ---------------------------------------------
Create a Build doc handler from a directory . --> Build the BuildDoc handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[traynor]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 555 ---------------------------------------------
Render the play result . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[pila]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 556 ---------------------------------------------
Builds a BuildDocHandler from a directory and its jar files . --> Build doc - handler . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[jinny]] ( File directory , JarFile jarFile , String base ) { return [[jinny]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 557 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 386 / 158 / 13 / 557:  56%|█████▌    | 557/1000 [19:54<15:50,  2.15s/it][Succeeded / Failed / Skipped / Total] 386 / 158 / 13 / 557:  56%|█████▌    | 558/1000 [19:56<15:47,  2.14s/it][Succeeded / Failed / Skipped / Total] 386 / 159 / 13 / 558:  56%|█████▌    | 558/1000 [19:56<15:47,  2.14s/it][Succeeded / Failed / Skipped / Total] 386 / 159 / 13 / 558:  56%|█████▌    | 559/1000 [19:57<15:44,  2.14s/it][Succeeded / Failed / Skipped / Total] 386 / 160 / 13 / 559:  56%|█████▌    | 559/1000 [19:57<15:44,  2.14s/it][Succeeded / Failed / Skipped / Total] 386 / 160 / 13 / 559:  56%|█████▌    | 560/1000 [20:03<15:45,  2.15s/it][Succeeded / Failed / Skipped / Total] 387 / 160 / 13 / 560:  56%|█████▌    | 560/1000 [20:03<15:45,  2.15s/it][Succeeded / Failed / Skipped / Total] 387 / 160 / 13 / 560:  56%|█████▌    | 561/1000 [20:03<15:42,  2.15s/it][Succeeded / Failed / Skipped / Total] 387 / 160 / 14 / 561:  56%|█████▌    | 561/1000 [20:03<15:42,  2.15s/it][Succeeded / Failed / Skipped / Total] 387 / 160 / 14 / 561:  56%|█████▌    | 562/1000 [20:06<15:39,  2.15s/it][Succeeded / Failed / Skipped / Total] 388 / 160 / 14 / 562:  56%|█████▌    | 562/1000 [20:06<15:39,  2.15s/it][Succeeded / Failed / Skipped / Total] 388 / 160 / 14 / 562:  56%|█████▋    | 563/1000 [20:07<15:37,  2.15s/it][Succeeded / Failed / Skipped / Total] 389 / 160 / 14 / 563:  56%|█████▋    | 563/1000 [20:07<15:37,  2.15s/it][Succeeded / Failed / Skipped / Total] 389 / 160 / 14 / 563:  56%|█████▋    | 564/1000 [20:11<15:36,  2.15s/it][Succeeded / Failed / Skipped / Total] 390 / 160 / 14 / 564:  56%|█████▋    | 564/1000 [20:11<15:36,  2.15s/it][Succeeded / Failed / Skipped / Total] 390 / 160 / 14 / 564:  56%|█████▋    | 565/1000 [20:11<15:32,  2.14s/it][Succeeded / Failed / Skipped / Total] 390 / 160 / 15 / 565:  56%|█████▋    | 565/1000 [20:11<15:32,  2.14s/it][Succeeded / Failed / Skipped / Total] 390 / 160 / 15 / 565:  57%|█████▋    | 566/1000 [20:11<15:29,  2.14s/it]Gets the matching method . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... [[parameterTypes]] ) { try { final Method [[method]] = cls . getMethod ( methodName , [[parameterTypes]] ) ; MemberUtils . setAccessibleWorkaround ( [[method]] ) ; return [[method]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[carmack]] ( final Class < ? > cls , final String methodName , final Class < ? > ... [[ania]] ) { try { final Method [[fashion]] = cls . getMethod ( methodName , [[ania]] ) ; MemberUtils . setAccessibleWorkaround ( [[fashion]] ) ; return [[fashion]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 558 ---------------------------------------------
If the request doesn t throw an exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader request , int [[statusCode]] , String message ) { if ( [[statusCode]] == 400 ) { return onBadRequest ( request , message ) ; } else if ( [[statusCode]] == 403 ) { return onForbidden ( request , message ) ; } else if ( [[statusCode]] == 404 ) { return onNotFound ( request , message ) ; } else if ( [[statusCode]] >= 400 && [[statusCode]] < 500 ) { return onOtherClientError ( request , [[statusCode]] , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + [[statusCode]] + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader request , int [[subterranean]] , String message ) { if ( [[subterranean]] == 400 ) { return onBadRequest ( request , message ) ; } else if ( [[subterranean]] == 403 ) { return onForbidden ( request , message ) ; } else if ( [[subterranean]] == 404 ) { return onNotFound ( request , message ) ; } else if ( [[subterranean]] >= 400 && [[subterranean]] < 500 ) { return onOtherClientError ( request , [[subterranean]] , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + [[subterranean]] + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 559 ---------------------------------------------
OnProd . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 560 ---------------------------------------------
Consume data . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[rikki]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 561 ---------------------------------------------
Returns the status of the response --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Result status ( int status , JsonNode content , JsonEncoding encoding ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( content , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 562 ---------------------------------------------
Create a Result with the given status code and content . --> Get the status of the given status code --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[content]] ) { return status ( status , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[appreciative]] ) { return status ( status , [[appreciative]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 563 ---------------------------------------------
Create HttpEntity from Content content . --> Get String body --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content [[content]] , String charset ) { String body ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[employee]] ( Content [[excited]] , String charset ) { String body ; if ( [[excited]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 564 ---------------------------------------------
Create a Result for the given content --> Get the specified status --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result status ( int status , byte [ ] [[overjoyed]] ) { if ( [[overjoyed]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[overjoyed]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 565 ---------------------------------------------
Finds a user by id . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 566 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 391 / 160 / 15 / 566:  57%|█████▋    | 566/1000 [20:11<15:29,  2.14s/it][Succeeded / Failed / Skipped / Total] 391 / 160 / 15 / 566:  57%|█████▋    | 567/1000 [20:13<15:27,  2.14s/it][Succeeded / Failed / Skipped / Total] 392 / 160 / 15 / 567:  57%|█████▋    | 567/1000 [20:13<15:27,  2.14s/it][Succeeded / Failed / Skipped / Total] 392 / 160 / 15 / 567:  57%|█████▋    | 568/1000 [20:15<15:24,  2.14s/it][Succeeded / Failed / Skipped / Total] 392 / 161 / 15 / 568:  57%|█████▋    | 568/1000 [20:15<15:24,  2.14s/it][Succeeded / Failed / Skipped / Total] 392 / 161 / 15 / 568:  57%|█████▋    | 569/1000 [20:15<15:20,  2.14s/it][Succeeded / Failed / Skipped / Total] 393 / 161 / 15 / 569:  57%|█████▋    | 569/1000 [20:15<15:20,  2.14s/it][Succeeded / Failed / Skipped / Total] 393 / 161 / 15 / 569:  57%|█████▋    | 570/1000 [20:18<15:19,  2.14s/it][Succeeded / Failed / Skipped / Total] 394 / 161 / 15 / 570:  57%|█████▋    | 570/1000 [20:18<15:19,  2.14s/it][Succeeded / Failed / Skipped / Total] 394 / 161 / 15 / 570:  57%|█████▋    | 571/1000 [20:20<15:16,  2.14s/it][Succeeded / Failed / Skipped / Total] 395 / 161 / 15 / 571:  57%|█████▋    | 571/1000 [20:20<15:16,  2.14s/it][Succeeded / Failed / Skipped / Total] 395 / 161 / 15 / 571:  57%|█████▋    | 572/1000 [20:21<15:13,  2.13s/it][Succeeded / Failed / Skipped / Total] 396 / 161 / 15 / 572:  57%|█████▋    | 572/1000 [20:21<15:13,  2.13s/it][Succeeded / Failed / Skipped / Total] 396 / 161 / 15 / 572:  57%|█████▋    | 573/1000 [20:22<15:11,  2.13s/it][Succeeded / Failed / Skipped / Total] 397 / 161 / 15 / 573:  57%|█████▋    | 573/1000 [20:22<15:11,  2.13s/it][Succeeded / Failed / Skipped / Total] 398 / 161 / 15 / 574:  57%|█████▋    | 574/1000 [20:22<15:07,  2.13s/it][Succeeded / Failed / Skipped / Total] 398 / 161 / 15 / 574:  57%|█████▊    | 575/1000 [20:27<15:07,  2.14s/it][Succeeded / Failed / Skipped / Total] 398 / 162 / 15 / 575:  57%|█████▊    | 575/1000 [20:27<15:07,  2.14s/it]Build the jar file from the jar file . --> Builds the Applicationfile --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String base ) { FileRepository [[repo]] = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[pixie]] ( JarFile [[fatwa]] , String base ) { FileRepository [[loaner]] = new JarRepository ( [[fatwa]] , Option . apply ( base ) ) ; return new DocumentationHandler ( [[loaner]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 567 ---------------------------------------------
Creates a BuildDocHandler from the given files . --> Build doc file suv --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] [[files]] , String [ ] [[baseDirs]] ) throws IOException { assert ( [[files]] . length == [[baseDirs]] . length ) ; FileRepository [ ] repositories = new FileRepository [ [[files]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[files]] . length ; i ++ ) { File file = [[files]] [ i ] ; String [[baseDir]] = [[baseDirs]] [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[suv]] ( File [ ] [[recordings]] , String [ ] [[brah]] ) throws IOException { assert ( [[recordings]] . length == [[brah]] . length ) ; FileRepository [ ] repositories = new FileRepository [ [[recordings]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[recordings]] . length ; i ++ ) { File file = [[recordings]] [ i ] ; String [[fossilized]] = [[brah]] [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 568 ---------------------------------------------
Create HttpEntity chunked . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[capability]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 569 ---------------------------------------------
Sends a response message to the response . --> Returns the status message --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , InputStream [[content]] , long contentLength ) { return status ( status ) . sendInputStream ( [[content]] , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream [[appreciative]] , long contentLength ) { return status ( status ) . sendInputStream ( [[appreciative]] , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 570 ---------------------------------------------
Return the unique result . --> Call exceptional method --> Socre: 1.0

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[exceptional]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 571 ---------------------------------------------
Create a new fragment service . --> triumphed tris --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String fragment ) { return new play . api . mvc . Call ( method ( ) , url ( ) , fragment ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[triumphed]] ( String fragment ) { return new play . api . mvc . Call ( method ( ) , url ( ) , fragment ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 572 ---------------------------------------------
Creates a new HttpEntity object . --> Returns a java --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity fromString ( String [[content]] , String [[charset]] ) { return new Strict ( ByteString . fromString ( [[content]] , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity fromString ( String [[appreciative]] , String [[lko]] ) { return new Strict ( ByteString . fromString ( [[appreciative]] , [[lko]] ) , Optional . of ( "text/plain; charset=" + [[lko]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 573 ---------------------------------------------
Returns the absolute URL of the given request . --> Endorsements for a request --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[endorsements]] ( Http . Request request ) { return [[endorsements]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 574 ---------------------------------------------
Gets the socket URL . --> Returns a validian of the given request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[arabian]] ( Http . Request request ) { return [[arabian]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 575 ---------------------------------------------
Returns a new Lang object . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[preference]] ( Collection < Lang > [[candidacy]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidacy]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 576 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 399 / 162 / 15 / 576:  58%|█████▊    | 576/1000 [20:29<15:04,  2.13s/it][Succeeded / Failed / Skipped / Total] 399 / 162 / 15 / 576:  58%|█████▊    | 577/1000 [20:30<15:02,  2.13s/it][Succeeded / Failed / Skipped / Total] 400 / 162 / 15 / 577:  58%|█████▊    | 577/1000 [20:30<15:02,  2.13s/it][Succeeded / Failed / Skipped / Total] 400 / 163 / 15 / 578:  58%|█████▊    | 578/1000 [20:31<14:58,  2.13s/it][Succeeded / Failed / Skipped / Total] 400 / 163 / 15 / 578:  58%|█████▊    | 579/1000 [20:32<14:56,  2.13s/it][Succeeded / Failed / Skipped / Total] 400 / 164 / 15 / 579:  58%|█████▊    | 579/1000 [20:32<14:56,  2.13s/it][Succeeded / Failed / Skipped / Total] 401 / 164 / 15 / 580:  58%|█████▊    | 580/1000 [20:35<14:54,  2.13s/it][Succeeded / Failed / Skipped / Total] 401 / 164 / 15 / 580:  58%|█████▊    | 581/1000 [20:36<14:51,  2.13s/it][Succeeded / Failed / Skipped / Total] 402 / 164 / 15 / 581:  58%|█████▊    | 581/1000 [20:36<14:51,  2.13s/it][Succeeded / Failed / Skipped / Total] 403 / 164 / 15 / 582:  58%|█████▊    | 582/1000 [20:40<14:50,  2.13s/it][Succeeded / Failed / Skipped / Total] 403 / 164 / 15 / 582:  58%|█████▊    | 583/1000 [20:42<14:48,  2.13s/it][Succeeded / Failed / Skipped / Total] 404 / 164 / 15 / 583:  58%|█████▊    | 583/1000 [20:42<14:48,  2.13s/it]Converts data object to JsonNode . --> Get the JsonNodedog --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object data ) { try { return mapper ( ) . valueToTree ( data ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[hotdog]] ( final Object data ) { try { return mapper ( ) . valueToTree ( data ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 577 ---------------------------------------------
Converts a Json to a JsonNode --> Creates an instance from the given json . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[cada]] > [[cada]] fromJson ( JsonNode json , Class < [[cada]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 578 ---------------------------------------------
Get the status of a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[conditions]] ( int [[bylaws]] , File [[enchanted]] ) { return [[conditions]] ( [[conditions]] , [[enchanted]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 579 ---------------------------------------------
Create a connection function . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return [[block]] . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[impedes]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[subject]] ) { try { return [[impedes]] . call ( [[subject]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 580 ---------------------------------------------
Returns a new connection function . --> Removes connection from BoxedUnit --> Socre: 1.0

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable [[block]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[block]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[advisedly]] ( final ConnectionRunnable [[hinders]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[hinders]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 581 ---------------------------------------------
Parse the given InputStream as a JsonNode --> Parse an input stream --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[ã]] ) { try { return mapper ( ) . readTree ( [[ã]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
Displays displayable constraint . --> Displayable constraint --> Socre: 1.0

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > [[obstacle]] ) { return [[obstacle]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 583 ---------------------------------------------
Parses a string into a JsonNode . --> Generates the JsonNodebarous --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[barbarous]] ( String [[mosquito]] ) { try { return mapper ( ) . readTree ( [[mosquito]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 405 / 164 / 15 / 584:  58%|█████▊    | 584/1000 [20:45<14:46,  2.13s/it][Succeeded / Failed / Skipped / Total] 405 / 164 / 15 / 584:  58%|█████▊    | 585/1000 [20:46<14:44,  2.13s/it][Succeeded / Failed / Skipped / Total] 406 / 164 / 15 / 585:  58%|█████▊    | 585/1000 [20:46<14:44,  2.13s/it][Succeeded / Failed / Skipped / Total] 407 / 164 / 15 / 586:  59%|█████▊    | 586/1000 [20:47<14:41,  2.13s/it][Succeeded / Failed / Skipped / Total] 407 / 164 / 15 / 586:  59%|█████▊    | 587/1000 [20:51<14:40,  2.13s/it][Succeeded / Failed / Skipped / Total] 408 / 164 / 15 / 587:  59%|█████▊    | 587/1000 [20:51<14:40,  2.13s/it][Succeeded / Failed / Skipped / Total] 409 / 164 / 15 / 588:  59%|█████▉    | 588/1000 [20:51<14:37,  2.13s/it][Succeeded / Failed / Skipped / Total] 409 / 164 / 15 / 588:  59%|█████▉    | 589/1000 [20:53<14:34,  2.13s/it][Succeeded / Failed / Skipped / Total] 410 / 164 / 15 / 589:  59%|█████▉    | 589/1000 [20:53<14:34,  2.13s/it][Succeeded / Failed / Skipped / Total] 411 / 164 / 15 / 590:  59%|█████▉    | 590/1000 [20:57<14:33,  2.13s/it][Succeeded / Failed / Skipped / Total] 411 / 164 / 15 / 590:  59%|█████▉    | 591/1000 [20:58<14:31,  2.13s/it]Returns the canonical form of the given URL . --> returns the plur --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String [[url]] ) { String [ ] urlPath = toSegments ( [[url]] ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String prefixSep = [[url]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = [[url]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[pluribus]] ( String [[footer]] ) { String [ ] urlPath = toSegments ( [[footer]] ) ; Stack < String > [[pluribus]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[pluribus]] . empty ( ) && [[pluribus]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[pluribus]] . push ( comp ) ; else [[pluribus]] . pop ( ) ; } String prefixSep = [[footer]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = [[footer]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[pluribus]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 585 ---------------------------------------------
Returns relative string . --> Useful for debugging --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[against]] ( String [[madre]] , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 586 ---------------------------------------------
Returns a CompletionStage for the given stage . --> region > timeout --> Socre: 1.0

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration [[duration]] = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( [[duration]] , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration [[spells]] = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( [[spells]] , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 587 ---------------------------------------------
Creates CronExpression expression . --> cron a time interval --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String [[cron]] , Date date ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String [[drugs]] , Date date ) { try { return new CronExpression ( [[drugs]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[drugs]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 588 ---------------------------------------------
Creates the Build doc handler for a directory and jar . --> Build doc - related --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository [[jarRepo]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[jarRepo]] } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , [[jarRepo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[bleeding]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository [[merge]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[merge]] } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , [[merge]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 589 ---------------------------------------------
Returns a Server for the given mode . --> Creates aaway --> Socre: 1.0

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int [[port]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( [[port]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[hathaway]] ( Mode mode , int [[orifice]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( [[orifice]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 590 ---------------------------------------------
Parse CRON expression . --> Returns the following date of this shard --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[nrc]] ( String [[edgefield]] ) { try { return new CronExpression ( [[edgefield]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[edgefield]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 591 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 412 / 164 / 15 / 591:  59%|█████▉    | 591/1000 [20:58<14:31,  2.13s/it][Succeeded / Failed / Skipped / Total] 413 / 164 / 15 / 592:  59%|█████▉    | 592/1000 [20:59<14:27,  2.13s/it][Succeeded / Failed / Skipped / Total] 413 / 164 / 15 / 592:  59%|█████▉    | 593/1000 [20:59<14:24,  2.12s/it][Succeeded / Failed / Skipped / Total] 414 / 164 / 15 / 593:  59%|█████▉    | 593/1000 [20:59<14:24,  2.12s/it][Succeeded / Failed / Skipped / Total] 415 / 164 / 15 / 594:  59%|█████▉    | 594/1000 [20:59<14:21,  2.12s/it][Succeeded / Failed / Skipped / Total] 415 / 164 / 15 / 594:  60%|█████▉    | 595/1000 [21:04<14:20,  2.13s/it][Succeeded / Failed / Skipped / Total] 415 / 165 / 15 / 595:  60%|█████▉    | 595/1000 [21:04<14:20,  2.13s/it][Succeeded / Failed / Skipped / Total] 416 / 165 / 15 / 596:  60%|█████▉    | 596/1000 [21:06<14:18,  2.13s/it][Succeeded / Failed / Skipped / Total] 416 / 165 / 15 / 596:  60%|█████▉    | 597/1000 [21:08<14:16,  2.13s/it][Succeeded / Failed / Skipped / Total] 416 / 166 / 15 / 597:  60%|█████▉    | 597/1000 [21:08<14:16,  2.13s/it][Succeeded / Failed / Skipped / Total] 416 / 167 / 15 / 598:  60%|█████▉    | 598/1000 [21:11<14:15,  2.13s/it][Succeeded / Failed / Skipped / Total] 416 / 167 / 15 / 598:  60%|█████▉    | 599/1000 [21:12<14:11,  2.12s/it][Succeeded / Failed / Skipped / Total] 417 / 167 / 15 / 599:  60%|█████▉    | 599/1000 [21:12<14:11,  2.12s/it][Succeeded / Failed / Skipped / Total] 418 / 167 / 15 / 600:  60%|██████    | 600/1000 [21:13<14:08,  2.12s/it][Succeeded / Failed / Skipped / Total] 418 / 167 / 15 / 600:  60%|██████    | 601/1000 [21:17<14:08,  2.13s/it][Succeeded / Failed / Skipped / Total] 419 / 167 / 15 / 601:  60%|██████    | 601/1000 [21:17<14:08,  2.13s/it]Creates a tuple of displayable constraint . --> Retrieve bord message --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > constraint ) { final Display [[displayAnnotation]] = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[babu]] ( ConstraintDescriptor < ? > constraint ) { final Display [[bordello]] = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[bordello]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[bordello]] . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 592 ---------------------------------------------
Retrieves the results of a request . --> Renders the given request --> Socre: 1.0

[[[[Adv]]]]: public static Result [[TODO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[BUENO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 593 ---------------------------------------------
Returns the Guice application builder . --> Load constructors from base --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[constructors]] ( ApplicationLoader . Context [[base]] ) { return initialBuilder . in ( [[base]] . environment ( ) ) . loadConfig ( [[base]] . initialConfig ( ) ) . overrides ( overrides ( [[base]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 594 ---------------------------------------------
Adds a session . --> region > afternoons --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String key , String value ) { [[session]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[afternoons]] ( String key , String value ) { [[afternoons]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 595 ---------------------------------------------
Return a BindingKey with the given A instance --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[enlarge]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 596 ---------------------------------------------
Return a Java Binding for the given instance . --> Create a Java supplier --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[enlarged]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 597 ---------------------------------------------
Returns a BindingKey with the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[spreads]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 598 ---------------------------------------------
Returns the given implementation as a Binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[dans]] ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 599 ---------------------------------------------
Sets a flash value . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String [[key]] , String value ) { [[flash]] ( ) . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[intermittent]] ( String [[core]] , String value ) { [[intermittent]] ( ) . put ( [[core]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 600 ---------------------------------------------
Convert this provider to a Binding . --> z - record a entrepreneur --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[z]] ( final Provider < ? extends T > [[entrepreneur]] ) { return underlying . to ( [[entrepreneur]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 601 ---------------------------------------------
Returns all the availables for the given application . --> Returns all available Langs --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[bucharest]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 602 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 419 / 168 / 15 / 602:  60%|██████    | 602/1000 [21:19<14:05,  2.13s/it][Succeeded / Failed / Skipped / Total] 419 / 168 / 15 / 602:  60%|██████    | 603/1000 [21:20<14:03,  2.12s/it][Succeeded / Failed / Skipped / Total] 420 / 168 / 15 / 603:  60%|██████    | 603/1000 [21:20<14:03,  2.12s/it][Succeeded / Failed / Skipped / Total] 420 / 168 / 16 / 604:  60%|██████    | 604/1000 [21:20<13:59,  2.12s/it][Succeeded / Failed / Skipped / Total] 420 / 168 / 16 / 604:  60%|██████    | 605/1000 [21:22<13:57,  2.12s/it][Succeeded / Failed / Skipped / Total] 421 / 168 / 16 / 605:  60%|██████    | 605/1000 [21:22<13:57,  2.12s/it][Succeeded / Failed / Skipped / Total] 422 / 168 / 16 / 606:  61%|██████    | 606/1000 [21:22<13:53,  2.12s/it][Succeeded / Failed / Skipped / Total] 422 / 168 / 16 / 606:  61%|██████    | 607/1000 [21:26<13:52,  2.12s/it][Succeeded / Failed / Skipped / Total] 423 / 168 / 16 / 607:  61%|██████    | 607/1000 [21:26<13:52,  2.12s/it][Succeeded / Failed / Skipped / Total] 424 / 168 / 16 / 608:  61%|██████    | 608/1000 [21:28<13:50,  2.12s/it][Succeeded / Failed / Skipped / Total] 424 / 168 / 16 / 608:  61%|██████    | 609/1000 [21:28<13:47,  2.12s/it][Succeeded / Failed / Skipped / Total] 424 / 168 / 17 / 609:  61%|██████    | 609/1000 [21:28<13:47,  2.12s/it][Succeeded / Failed / Skipped / Total] 425 / 168 / 17 / 610:  61%|██████    | 610/1000 [21:28<13:43,  2.11s/it][Succeeded / Failed / Skipped / Total] 425 / 168 / 17 / 610:  61%|██████    | 611/1000 [21:28<13:40,  2.11s/it]Returns the field value as a key . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > key ) { return underlying . to ( key . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[aux]] ( final BindingKey < ? extends T > key ) { return underlying . to ( key . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 603 ---------------------------------------------
Create a new Lang . --> List of languages --> Socre: 1.0

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[chosen]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 604 ---------------------------------------------
Creates a Guice application builder --> [[[SKIPPED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 605 ---------------------------------------------
Convert a provider to a Java Provider . --> Create a borrowers --> Socre: 1.0

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > toProvider ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[encompasses]] Provider < ? extends T > > Binding < T > toProvider ( final Class < P > [[borrowers]] ) { return underlying . toProvider ( [[borrowers]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 606 ---------------------------------------------
Checks if the given class array is assignable to the given class . --> dictional dribbles --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] [[classArray]] , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( [[classArray]] ) != arrayGetLength ( toClassArray ) ) { return "[[False]]" != "[[False]]" ; } if ( [[classArray]] == null ) { [[classArray]] = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[classArray]] . length ; i ++ ) { if ( [[isAssignable]] ( [[classArray]] [ i ] , toClassArray [ i ] , autoboxing ) == "[[False]]" != "[[False]]" ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[underfoot]] ( Class < ? > [ ] [[dribbles]] , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( [[dribbles]] ) != arrayGetLength ( toClassArray ) ) { return "[[Fictional]]" != "[[Fictional]]" ; } if ( [[dribbles]] == null ) { [[dribbles]] = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[dribbles]] . length ; i ++ ) { if ( [[underfoot]] ( [[dribbles]] [ i ] , toClassArray [ i ] , autoboxing ) == "[[Fictional]]" != "[[Fictional]]" ) { return "[[Fictional]]" != "[[Fictional]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 607 ---------------------------------------------
Loads a configLoader . --> Creates a Guice ApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[advisedly]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 608 ---------------------------------------------
Loads a Guiceable module array --> Load a GuiceableModule array --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[conglomerates]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[conglomerates]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 609 ---------------------------------------------
Create a new application builder --> [[[SKIPPED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 610 ---------------------------------------------
Loads the given modules . --> Load an application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[blade]] ) { return load ( Guiceable . [[blade]] ( [[blade]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 611 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 426 / 168 / 17 / 611:  61%|██████    | 611/1000 [21:28<13:40,  2.11s/it][Succeeded / Failed / Skipped / Total] 427 / 168 / 17 / 612:  61%|██████    | 612/1000 [21:29<13:37,  2.11s/it][Succeeded / Failed / Skipped / Total] 427 / 168 / 17 / 612:  61%|██████▏   | 613/1000 [21:30<13:34,  2.11s/it][Succeeded / Failed / Skipped / Total] 427 / 169 / 17 / 613:  61%|██████▏   | 613/1000 [21:30<13:34,  2.11s/it][Succeeded / Failed / Skipped / Total] 428 / 169 / 17 / 614:  61%|██████▏   | 614/1000 [21:32<13:32,  2.11s/it][Succeeded / Failed / Skipped / Total] 428 / 169 / 17 / 614:  62%|██████▏   | 615/1000 [21:37<13:32,  2.11s/it][Succeeded / Failed / Skipped / Total] 428 / 170 / 17 / 615:  62%|██████▏   | 615/1000 [21:37<13:32,  2.11s/it][Succeeded / Failed / Skipped / Total] 429 / 170 / 17 / 616:  62%|██████▏   | 616/1000 [21:42<13:31,  2.11s/it][Succeeded / Failed / Skipped / Total] 429 / 170 / 17 / 616:  62%|██████▏   | 617/1000 [21:44<13:29,  2.11s/it][Succeeded / Failed / Skipped / Total] 430 / 170 / 17 / 617:  62%|██████▏   | 617/1000 [21:44<13:29,  2.11s/it][Succeeded / Failed / Skipped / Total] 430 / 171 / 17 / 618:  62%|██████▏   | 618/1000 [21:46<13:27,  2.11s/it][Succeeded / Failed / Skipped / Total] 430 / 171 / 17 / 618:  62%|██████▏   | 619/1000 [21:48<13:25,  2.11s/it]Load the given modules . --> Load an application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[blade]] ) { return load ( Guiceable . [[blade]] ( [[blade]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 612 ---------------------------------------------
Creates a reader for the given evolutions . --> Evifiable operation --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[chickenhead]] . EvolutionsReader [[buttin]] ( Evolution ... [[chickenhead]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[chickenhead]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 613 ---------------------------------------------
Creates a new Simpleolutions reader from the evolutions map . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[platts]] . EvolutionsReader [[abou]] ( Map < String , List < Evolution > > [[platts]] ) { return new SimpleEvolutionsReader ( [[platts]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 614 ---------------------------------------------
Load the given bindings . --> Loads a Guice application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... [[bindings]] ) { return load ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... [[liaison]] ) { return load ( Guiceable . [[liaison]] ( [[liaison]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 615 ---------------------------------------------
Create a new AhcWSClient . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[begets]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 616 ---------------------------------------------
Encode cookie . --> transcoder to blaspheme --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[buf]] = new StringBuilder ( ) ; [[encode]] ( [[buf]] , cookie ) ; return stripTrailingSeparator ( [[buf]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[transcoder]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[blaspheme]] = new StringBuilder ( ) ; [[transcoder]] ( [[blaspheme]] , cookie ) ; return stripTrailingSeparator ( [[blaspheme]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 617 ---------------------------------------------
Gets the current emStack . --> Returns a new Deque instance --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean [[threadLocalFallback]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[forster]] ( boolean [[kartal]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 618 ---------------------------------------------
Generates an EntityManager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > [[ems]] = this . emStack ( "True" == "True" ) ; if ( [[ems]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ems]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[luciana]] ( ) { Deque < EntityManager > [[ess]] = this . emStack ( "True" == "True" ) ; if ( [[ess]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ess]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 619 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 431 / 171 / 17 / 619:  62%|██████▏   | 619/1000 [21:48<13:25,  2.11s/it][Succeeded / Failed / Skipped / Total] 432 / 171 / 17 / 620:  62%|██████▏   | 620/1000 [21:51<13:23,  2.11s/it][Succeeded / Failed / Skipped / Total] 432 / 171 / 17 / 620:  62%|██████▏   | 621/1000 [21:54<13:22,  2.12s/it][Succeeded / Failed / Skipped / Total] 432 / 172 / 17 / 621:  62%|██████▏   | 621/1000 [21:54<13:22,  2.12s/it][Succeeded / Failed / Skipped / Total] 433 / 172 / 17 / 622:  62%|██████▏   | 622/1000 [21:57<13:20,  2.12s/it][Succeeded / Failed / Skipped / Total] 433 / 172 / 17 / 622:  62%|██████▏   | 623/1000 [21:58<13:17,  2.12s/it][Succeeded / Failed / Skipped / Total] 434 / 172 / 17 / 623:  62%|██████▏   | 623/1000 [21:58<13:17,  2.12s/it][Succeeded / Failed / Skipped / Total] 434 / 173 / 17 / 624:  62%|██████▏   | 624/1000 [21:58<13:14,  2.11s/it][Succeeded / Failed / Skipped / Total] 434 / 173 / 17 / 624:  62%|██████▎   | 625/1000 [21:59<13:11,  2.11s/it][Succeeded / Failed / Skipped / Total] 435 / 173 / 17 / 625:  62%|██████▎   | 625/1000 [21:59<13:11,  2.11s/it]Computes the bypass with the specified flow . --> slovakia method --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[flow]] ) { return [[bypassWith]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[flow]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[slovakia]] ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[emptying]] ) { return [[slovakia]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[emptying]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 620 ---------------------------------------------
Convert a list of error arguments . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[revolved]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[revolved]] ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 621 ---------------------------------------------
Returns an unmodifiable list of the errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[doors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 622 ---------------------------------------------
Gets the JSON representation of all messages as a JSON object . --> Get flora --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[flora]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 623 ---------------------------------------------
Gets value . --> Get appraisal . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[appraisal]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 624 ---------------------------------------------
Fills a form with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[filled]] ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 625 ---------------------------------------------
Pushes the given EntityManager or if there is one . --> Convenience method for hatron --> Socre: 1.0

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean [[threadLocalFallback]] ) { Deque < EntityManager > [[ems]] = this . emStack ( [[threadLocalFallback]] ) ; if ( em != null ) { [[ems]] . push ( em ) ; } else { if ( [[ems]] . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } [[ems]] . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[hurt]] ( EntityManager em , boolean [[abattoir]] ) { Deque < EntityManager > [[ssc]] = this . emStack ( [[abattoir]] ) ; if ( em != null ) { [[ssc]] . push ( em ) ; } else { if ( [[ssc]] . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } [[ssc]] . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 626 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 436 / 173 / 17 / 626:  63%|██████▎   | 626/1000 [22:02<13:10,  2.11s/it][Succeeded / Failed / Skipped / Total] 436 / 173 / 17 / 626:  63%|██████▎   | 627/1000 [22:03<13:07,  2.11s/it][Succeeded / Failed / Skipped / Total] 437 / 173 / 17 / 627:  63%|██████▎   | 627/1000 [22:03<13:07,  2.11s/it][Succeeded / Failed / Skipped / Total] 438 / 173 / 17 / 628:  63%|██████▎   | 628/1000 [22:05<13:04,  2.11s/it][Succeeded / Failed / Skipped / Total] 438 / 173 / 17 / 628:  63%|██████▎   | 629/1000 [22:06<13:02,  2.11s/it][Succeeded / Failed / Skipped / Total] 438 / 174 / 17 / 629:  63%|██████▎   | 629/1000 [22:06<13:02,  2.11s/it][Succeeded / Failed / Skipped / Total] 438 / 175 / 17 / 630:  63%|██████▎   | 630/1000 [22:06<12:59,  2.11s/it][Succeeded / Failed / Skipped / Total] 438 / 175 / 17 / 630:  63%|██████▎   | 631/1000 [22:06<12:55,  2.10s/it][Succeeded / Failed / Skipped / Total] 438 / 176 / 17 / 631:  63%|██████▎   | 631/1000 [22:06<12:55,  2.10s/it][Succeeded / Failed / Skipped / Total] 439 / 176 / 17 / 632:  63%|██████▎   | 632/1000 [22:08<12:53,  2.10s/it][Succeeded / Failed / Skipped / Total] 439 / 176 / 17 / 632:  63%|██████▎   | 633/1000 [22:09<12:50,  2.10s/it][Succeeded / Failed / Skipped / Total] 440 / 176 / 17 / 633:  63%|██████▎   | 633/1000 [22:09<12:50,  2.10s/it][Succeeded / Failed / Skipped / Total] 441 / 176 / 17 / 634:  63%|██████▎   | 634/1000 [22:11<12:48,  2.10s/it][Succeeded / Failed / Skipped / Total] 441 / 176 / 17 / 634:  64%|██████▎   | 635/1000 [22:14<12:47,  2.10s/it]Adds the supplied value to the current DynamicForm . --> fill a DynamicForm --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > value ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > value ) { Form < Dynamic > [[constituted]] = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( [[constituted]] . rawData ( ) , [[constituted]] . files ( ) , [[constituted]] . errors ( ) , [[constituted]] . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 627 ---------------------------------------------
Cleans up evolutions . --> if it doesn t exist --> Socre: 1.0

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database database , boolean autocommit , String [[schema]] ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( database . asScala ( ) , [[schema]] ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[ift]] ( Database database , boolean autocommit , String [[toni]] ) { DatabaseEvolutions [[deformities]] = new DatabaseEvolutions ( database . asScala ( ) , [[toni]] ) ; [[deformities]] . evolve ( [[deformities]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 628 ---------------------------------------------
Print t . --> Print a T --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Channels]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Channels]] . class ) ) { return conversion . convert ( t , [[Channels]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 629 ---------------------------------------------
Print a field --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Cable]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 630 ---------------------------------------------
Parse the given text using the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[vd]] > [[vd]] parse ( String text , Class < [[vd]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 631 ---------------------------------------------
Returns the conversion of the given field . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[vos]] > [[vos]] parse ( Field field , String text ) { return ( [[vos]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 632 ---------------------------------------------
Creates an actor ref . --> Props of ActorRef --> Socre: 1.0

[[[[Adv]]]]: public static < In , [[Out]] > Flow < In , [[Out]] , ? > actorRef ( Function < ActorRef , Props > [[props]] , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , [[Out]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return [[props]] . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , [[Socket]] > Flow < In , [[Socket]] , ? > actorRef ( Function < ActorRef , Props > [[equipments]] , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , [[Socket]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return [[equipments]] . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 633 ---------------------------------------------
Print the given type descriptor . --> Print an Ropes object --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Ropes]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Ropes]] . class ) ) ) { return ( [[Ropes]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Ropes]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Ropes]] . class ) ) { return conversion . convert ( t , [[Ropes]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 634 ---------------------------------------------
Register for conversion . --> Generateters amritsar . --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[amritsar]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 635 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 442 / 176 / 17 / 635:  64%|██████▎   | 635/1000 [22:14<12:47,  2.10s/it][Succeeded / Failed / Skipped / Total] 442 / 176 / 18 / 636:  64%|██████▎   | 636/1000 [22:14<12:43,  2.10s/it][Succeeded / Failed / Skipped / Total] 442 / 176 / 18 / 636:  64%|██████▎   | 637/1000 [22:18<12:42,  2.10s/it][Succeeded / Failed / Skipped / Total] 443 / 176 / 18 / 637:  64%|██████▎   | 637/1000 [22:18<12:42,  2.10s/it][Succeeded / Failed / Skipped / Total] 444 / 176 / 18 / 638:  64%|██████▍   | 638/1000 [22:23<12:42,  2.11s/it][Succeeded / Failed / Skipped / Total] 444 / 176 / 18 / 638:  64%|██████▍   | 639/1000 [22:24<12:39,  2.10s/it][Succeeded / Failed / Skipped / Total] 444 / 177 / 18 / 639:  64%|██████▍   | 639/1000 [22:24<12:39,  2.10s/it][Succeeded / Failed / Skipped / Total] 445 / 177 / 18 / 640:  64%|██████▍   | 640/1000 [22:26<12:37,  2.10s/it][Succeeded / Failed / Skipped / Total] 445 / 177 / 18 / 640:  64%|██████▍   | 641/1000 [22:27<12:34,  2.10s/it][Succeeded / Failed / Skipped / Total] 446 / 177 / 18 / 641:  64%|██████▍   | 641/1000 [22:27<12:34,  2.10s/it]Selects a node . --> Returns a NodeList of the given object --> Socre: 1.0

[[[[Adv]]]]: public static NodeList selectNodes ( String path , Object [[node]] ) { return selectNodes ( path , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList selectNodes ( String path , Object [[tying]] ) { return selectNodes ( path , [[tying]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 636 ---------------------------------------------
Returns a MappedWebSocketAcceptor --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > json ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 637 ---------------------------------------------
Create a new varargs . --> Get the registers of the array --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[registers]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 638 ---------------------------------------------
Creates a new WebSocket . --> Return a new Akka result --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[flow]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[flow]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[rainwater]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[rainwater]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 639 ---------------------------------------------
Converts a Java List to a Seq --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > list ) { return scala . collection . JavaConverters . asScalaBufferConverter ( list ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[condensation]] ( java . util . List < T > list ) { return scala . collection . JavaConverters . asScalaBufferConverter ( list ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 640 ---------------------------------------------
Convert an array to its Java sequence . --> Get the bboying of the given type --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[bboying]] ( T [ ] [[cabin]] ) { return [[bboying]] ( java . util . Arrays . asList ( [[cabin]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 641 ---------------------------------------------
Returns true if the given object is setAccessibleWorkaround . --> Return true if the given object is a class or interface --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[belike]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 642 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 446 / 178 / 18 / 642:  64%|██████▍   | 642/1000 [22:38<12:37,  2.12s/it][Succeeded / Failed / Skipped / Total] 446 / 178 / 18 / 642:  64%|██████▍   | 643/1000 [22:41<12:35,  2.12s/it][Succeeded / Failed / Skipped / Total] 447 / 178 / 18 / 643:  64%|██████▍   | 643/1000 [22:41<12:35,  2.12s/it][Succeeded / Failed / Skipped / Total] 447 / 178 / 18 / 643:  64%|██████▍   | 644/1000 [22:42<12:33,  2.12s/it][Succeeded / Failed / Skipped / Total] 448 / 178 / 18 / 644:  64%|██████▍   | 644/1000 [22:42<12:33,  2.12s/it][Succeeded / Failed / Skipped / Total] 448 / 178 / 18 / 644:  64%|██████▍   | 645/1000 [22:43<12:30,  2.11s/it][Succeeded / Failed / Skipped / Total] 448 / 179 / 18 / 645:  64%|██████▍   | 645/1000 [22:43<12:30,  2.11s/it][Succeeded / Failed / Skipped / Total] 448 / 179 / 18 / 645:  65%|██████▍   | 646/1000 [22:46<12:29,  2.12s/it][Succeeded / Failed / Skipped / Total] 449 / 179 / 18 / 646:  65%|██████▍   | 646/1000 [22:46<12:29,  2.12s/it][Succeeded / Failed / Skipped / Total] 449 / 179 / 18 / 646:  65%|██████▍   | 647/1000 [22:47<12:26,  2.11s/it][Succeeded / Failed / Skipped / Total] 450 / 179 / 18 / 647:  65%|██████▍   | 647/1000 [22:47<12:26,  2.11s/it][Succeeded / Failed / Skipped / Total] 450 / 179 / 18 / 647:  65%|██████▍   | 648/1000 [22:49<12:24,  2.11s/it][Succeeded / Failed / Skipped / Total] 451 / 179 / 18 / 648:  65%|██████▍   | 648/1000 [22:49<12:24,  2.11s/it][Succeeded / Failed / Skipped / Total] 451 / 179 / 18 / 648:  65%|██████▍   | 649/1000 [22:56<12:24,  2.12s/it]Encode cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder [[buf]] = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( [[buf]] , name , value ) ; } else { add ( [[buf]] , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[buf]] , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[validation]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder [[colvin]] = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( [[colvin]] , name , value ) ; } else { add ( [[colvin]] , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[colvin]] , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 643 ---------------------------------------------
Get the cost for a primitive type --> Calculates theimitive promotion cost --> Socre: 1.0

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > [[srcClass]] , final Class < ? > destClass ) { float [[cost]] = 0.0f ; Class < ? > cls = [[srcClass]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > [[magali]] , final Class < ? > destClass ) { float [[burdens]] = 0.0f ; Class < ? > cls = [[magali]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 644 ---------------------------------------------
Gets the message at the supplied key . --> Return avec string --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String [[key]] , Object ... args ) { return messagesApi . get ( lang , [[key]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[avec]] ( String [[fundamental]] , Object ... args ) { return messagesApi . get ( lang , [[fundamental]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 645 ---------------------------------------------
Registers a formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale [[locale]] ) throws java . text . ParseException { return formatter . parse ( text , [[locale]] ) ; } public String print ( T t , Locale [[locale]] ) { return formatter . print ( t , [[locale]] ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[Malkovich]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale [[locators]] ) throws java . text . ParseException { return formatter . parse ( text , [[locators]] ) ; } public String print ( T t , Locale [[locators]] ) { return formatter . print ( t , [[locators]] ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 646 ---------------------------------------------
Returns the cost of a class . --> advisedly --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable [[executable]] ) { final Class < ? > [ ] [[destArgs]] = [[executable]] . getParameterTypes ( ) ; final boolean isVarArgs = [[executable]] . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[advisedly]] ( final Class < ? > [ ] srcArgs , final Executable [[fabius]] ) { final Class < ? > [ ] [[astrea]] = [[fabius]] . getParameterTypes ( ) ; final boolean isVarArgs = [[fabius]] . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 647 ---------------------------------------------
Gets the value of the named keys . --> Return a list of keys --> Socre: 1.0

[[[[Adv]]]]: public String at ( List < String > keys , Object ... [[args]] ) { return messagesApi . get ( lang , keys , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String at ( List < String > keys , Object ... [[wildfire]] ) { return messagesApi . get ( lang , keys , [[wildfire]] ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 648 ---------------------------------------------
Creates an array with the specified arrays . --> establishing an array --> Socre: 1.0

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[establishing]] ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 649 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 452 / 179 / 18 / 649:  65%|██████▍   | 649/1000 [22:56<12:24,  2.12s/it][Succeeded / Failed / Skipped / Total] 452 / 179 / 18 / 649:  65%|██████▌   | 650/1000 [22:56<12:21,  2.12s/it][Succeeded / Failed / Skipped / Total] 453 / 179 / 18 / 650:  65%|██████▌   | 650/1000 [22:56<12:21,  2.12s/it][Succeeded / Failed / Skipped / Total] 453 / 179 / 18 / 650:  65%|██████▌   | 651/1000 [22:57<12:18,  2.12s/it][Succeeded / Failed / Skipped / Total] 453 / 179 / 19 / 651:  65%|██████▌   | 651/1000 [22:57<12:18,  2.12s/it][Succeeded / Failed / Skipped / Total] 453 / 179 / 19 / 651:  65%|██████▌   | 652/1000 [22:57<12:15,  2.11s/it][Succeeded / Failed / Skipped / Total] 454 / 179 / 19 / 652:  65%|██████▌   | 652/1000 [22:57<12:15,  2.11s/it][Succeeded / Failed / Skipped / Total] 454 / 179 / 19 / 652:  65%|██████▌   | 653/1000 [23:02<12:14,  2.12s/it][Succeeded / Failed / Skipped / Total] 454 / 180 / 19 / 653:  65%|██████▌   | 653/1000 [23:02<12:14,  2.12s/it][Succeeded / Failed / Skipped / Total] 454 / 180 / 19 / 653:  65%|██████▌   | 654/1000 [23:11<12:16,  2.13s/it][Succeeded / Failed / Skipped / Total] 455 / 180 / 19 / 654:  65%|██████▌   | 654/1000 [23:11<12:16,  2.13s/it][Succeeded / Failed / Skipped / Total] 455 / 180 / 19 / 654:  66%|██████▌   | 655/1000 [23:11<12:12,  2.12s/it][Succeeded / Failed / Skipped / Total] 456 / 180 / 19 / 655:  66%|██████▌   | 655/1000 [23:11<12:12,  2.12s/it][Succeeded / Failed / Skipped / Total] 456 / 180 / 19 / 655:  66%|██████▌   | 656/1000 [23:12<12:10,  2.12s/it]Casts Type to Type --> Implement the cast method --> Socre: 1.0

[[[[Adv]]]]: public void cast_numeric ( Type [[from]] , Type to ) { if ( [[from]] != to ) { if ( [[from]] == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[from]] == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[from]] == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void cast_numeric ( Type [[at]] , Type to ) { if ( [[at]] != to ) { if ( [[at]] == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[at]] == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[at]] == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 650 ---------------------------------------------
Create a Database instance from the given parameters . --> trans RECEites --> Socre: 1.0

[[[[Adv]]]]: public static Database [[createFrom]] ( String [[driver]] , String url , Map < String , ? extends Object > config ) { return [[createFrom]] ( "default" , [[driver]] , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[transvestites]] ( String [[cabbie]] , String url , Map < String , ? extends Object > config ) { return [[transvestites]] ( "default" , [[cabbie]] , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 651 ---------------------------------------------
visit field --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 652 ---------------------------------------------
Merge sort . --> Convenient method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[overconfident]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 653 ---------------------------------------------
Computes a particular Flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , [[FlowIn]] , [[Out]] > Flow < In , [[Out]] , ? > bypassWith ( Flow < In , F . Either < [[FlowIn]] , [[Out]] > , ? > [[splitter]] , Graph < UniformFanInShape < [[Out]] , [[Out]] > , ? > mergeStrategy , Flow < [[FlowIn]] , [[Out]] , ? > flow ) { return [[splitter]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < [[FlowIn]] , [[Out]] > , [[Out]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , [[cryin]] , [[Overseas]] > Flow < In , [[Overseas]] , ? > bypassWith ( Flow < In , F . Either < [[cryin]] , [[Overseas]] > , ? > [[divider]] , Graph < UniformFanInShape < [[Overseas]] , [[Overseas]] > , ? > mergeStrategy , Flow < [[cryin]] , [[Overseas]] , ? > flow ) { return [[divider]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < [[cryin]] , [[Overseas]] > , [[Overseas]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 654 ---------------------------------------------
Calls the invoke method . --> Perform an affirming operation --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[fci]] = fastClassInfo ; return [[fci]] . f1 . invoke ( [[fci]] . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[affirming]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[overnights]] = fastClassInfo ; return [[overnights]] . f1 . invoke ( [[overnights]] . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 655 ---------------------------------------------
quick sort . --> advisedly --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int [[index]] , int lo , int hi , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[advisedly]] ( int [[cataloging]] , int lo , int hi , Comparator cmp ) { chooseComparer ( [[cataloging]] , cmp ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 656 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 457 / 180 / 19 / 656:  66%|██████▌   | 656/1000 [23:12<12:10,  2.12s/it][Succeeded / Failed / Skipped / Total] 457 / 180 / 19 / 656:  66%|██████▌   | 657/1000 [23:14<12:07,  2.12s/it][Succeeded / Failed / Skipped / Total] 458 / 180 / 19 / 657:  66%|██████▌   | 657/1000 [23:14<12:07,  2.12s/it][Succeeded / Failed / Skipped / Total] 458 / 180 / 19 / 657:  66%|██████▌   | 658/1000 [23:16<12:05,  2.12s/it][Succeeded / Failed / Skipped / Total] 459 / 180 / 19 / 658:  66%|██████▌   | 658/1000 [23:16<12:05,  2.12s/it][Succeeded / Failed / Skipped / Total] 459 / 180 / 19 / 658:  66%|██████▌   | 659/1000 [23:19<12:04,  2.12s/it][Succeeded / Failed / Skipped / Total] 459 / 181 / 19 / 659:  66%|██████▌   | 659/1000 [23:19<12:04,  2.12s/it][Succeeded / Failed / Skipped / Total] 459 / 181 / 19 / 659:  66%|██████▌   | 660/1000 [23:19<12:01,  2.12s/it][Succeeded / Failed / Skipped / Total] 459 / 181 / 20 / 660:  66%|██████▌   | 660/1000 [23:19<12:01,  2.12s/it][Succeeded / Failed / Skipped / Total] 459 / 181 / 20 / 660:  66%|██████▌   | 661/1000 [23:21<11:58,  2.12s/it][Succeeded / Failed / Skipped / Total] 460 / 181 / 20 / 661:  66%|██████▌   | 661/1000 [23:21<11:58,  2.12s/it][Succeeded / Failed / Skipped / Total] 460 / 181 / 20 / 661:  66%|██████▌   | 662/1000 [23:27<11:58,  2.13s/it]Loads an argument at the specified index . --> Generates a aaahhh function --> Socre: 1.0

[[[[Adv]]]]: public void [[load_arg]] ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[aaahhh]] ( int [[clues]] ) { load_local ( state . argumentTypes [ [[clues]] ] , state . localOffset + skipArgs ( [[clues]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 657 ---------------------------------------------
Process a class . --> Processes a CodeEmitter --> Socre: 1.0

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[componentType]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local [[loopvar]] = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( [[loopvar]] ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( [[loopvar]] ) ; e . array_load ( [[componentType]] ) ; callback . processElement ( [[componentType]] ) ; e . iinc ( [[loopvar]] , 1 ) ; e . mark ( checkloop ) ; e . load_local ( [[loopvar]] ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[plops]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local [[whate]] = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( [[whate]] ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( [[whate]] ) ; e . array_load ( [[plops]] ) ; callback . processElement ( [[plops]] ) ; e . iinc ( [[whate]] , 1 ) ; e . mark ( checkloop ) ; e . load_local ( [[whate]] ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 658 ---------------------------------------------
Updates the array type . --> Fixation based on type of category --> Socre: 1.0

[[[[Adv]]]]: public void [[zero_or_null]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[fixation]] ( Type [[category]] ) { if ( TypeUtils . isPrimitive ( [[category]] ) ) { switch ( [[category]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 659 ---------------------------------------------
Registers the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Annotation]] , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Annotation]] > annotationType = ( Class < ? extends [[Annotation]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( [[sourceType]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A a = ( A ) [[sourceType]] . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Billeted]] , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Billeted]] > annotationType = ( Class < ? extends [[Billeted]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[categories]] = new HashSet <> ( ) ; [[categories]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[categories]] ; } public boolean matches ( TypeDescriptor [[excelled]] , TypeDescriptor targetType ) { return ( [[excelled]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[excelled]] , TypeDescriptor targetType ) { final A a = ( A ) [[excelled]] . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[excelled]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[categories]] = new HashSet <> ( ) ; [[categories]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[categories]] ; } public boolean matches ( TypeDescriptor [[excelled]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[excelled]] , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[excelled]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 660 ---------------------------------------------
Retrieve a single field . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 661 ---------------------------------------------
Set all the methods in the superclass --> Sleeps for sleepers --> Socre: 1.0

[[[[Adv]]]]: public static void [[getMethods]] ( Class superclass , Class [ ] interfaces , List methods ) { [[getMethods]] ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[sleepwalkers]] ( Class superclass , Class [ ] interfaces , List methods ) { [[sleepwalkers]] ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 662 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 460 / 182 / 20 / 662:  66%|██████▌   | 662/1000 [23:27<11:58,  2.13s/it][Succeeded / Failed / Skipped / Total] 460 / 182 / 20 / 662:  66%|██████▋   | 663/1000 [23:30<11:56,  2.13s/it][Succeeded / Failed / Skipped / Total] 461 / 182 / 20 / 663:  66%|██████▋   | 663/1000 [23:30<11:56,  2.13s/it][Succeeded / Failed / Skipped / Total] 461 / 182 / 20 / 663:  66%|██████▋   | 664/1000 [23:30<11:53,  2.12s/it][Succeeded / Failed / Skipped / Total] 461 / 182 / 21 / 664:  66%|██████▋   | 664/1000 [23:30<11:53,  2.12s/it][Succeeded / Failed / Skipped / Total] 461 / 182 / 21 / 664:  66%|██████▋   | 665/1000 [23:32<11:51,  2.12s/it][Succeeded / Failed / Skipped / Total] 462 / 182 / 21 / 665:  66%|██████▋   | 665/1000 [23:32<11:51,  2.12s/it][Succeeded / Failed / Skipped / Total] 462 / 182 / 21 / 665:  67%|██████▋   | 666/1000 [23:35<11:49,  2.12s/it][Succeeded / Failed / Skipped / Total] 462 / 183 / 21 / 666:  67%|██████▋   | 666/1000 [23:35<11:49,  2.12s/it][Succeeded / Failed / Skipped / Total] 462 / 183 / 21 / 666:  67%|██████▋   | 667/1000 [23:35<11:46,  2.12s/it][Succeeded / Failed / Skipped / Total] 463 / 183 / 21 / 667:  67%|██████▋   | 667/1000 [23:35<11:46,  2.12s/it][Succeeded / Failed / Skipped / Total] 463 / 183 / 21 / 667:  67%|██████▋   | 668/1000 [23:38<11:45,  2.12s/it][Succeeded / Failed / Skipped / Total] 464 / 183 / 21 / 668:  67%|██████▋   | 668/1000 [23:38<11:45,  2.12s/it][Succeeded / Failed / Skipped / Total] 464 / 183 / 21 / 668:  67%|██████▋   | 669/1000 [23:43<11:44,  2.13s/it][Succeeded / Failed / Skipped / Total] 465 / 183 / 21 / 669:  67%|██████▋   | 669/1000 [23:43<11:44,  2.13s/it][Succeeded / Failed / Skipped / Total] 465 / 183 / 21 / 669:  67%|██████▋   | 670/1000 [23:44<11:41,  2.13s/it]Gets the cost of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is [[null]], we've traveled all the way up to * [[an]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[defector]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is [[absence]], we've traveled all the way up to * [[was]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 663 ---------------------------------------------
Return the cardinality of this constraint . --> Generates a barack value --> Socre: 1.0

[[[[Adv]]]]: public int [[cardinality]] ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int [[barack]] ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 664 ---------------------------------------------
Find methods . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 665 ---------------------------------------------
Sets the superclass . --> caprica --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . [[superclass]] = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[caprica]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . [[bom]] = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 666 ---------------------------------------------
Unbox the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[unbox_or_zero]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void [[dormer]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 667 ---------------------------------------------
Adds a method --> F743 - 3 --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[complemented]] ( Method [[guises]] ) { [[complemented]] ( ReflectUtils . getSignature ( [[guises]] ) , ReflectUtils . getExceptionTypes ( [[guises]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 668 ---------------------------------------------
Resolves the given child path . --> Resolve kids --> Socre: 1.0

[[[[Adv]]]]: public static Path resolve ( final Path base , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return base . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path resolve ( final Path base , String [[kids]] ) { if ( StringUtil . startsWithChar ( [[kids]] , File . separatorChar ) ) { [[kids]] = [[kids]] . substring ( 1 ) ; } return base . resolve ( [[kids]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 669 ---------------------------------------------
Filter constructors . --> Calls camellia method --> Socre: 1.0

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class sc , List [[constructors]] ) { CollectionUtils . filter ( [[constructors]] , new VisibilityPredicate ( sc , "[[True]]" == "[[True]]" ) ) ; if ( [[constructors]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[camellia]] ( Class sc , List [[craftsmen]] ) { CollectionUtils . filter ( [[craftsmen]] , new VisibilityPredicate ( sc , "[[Faithful]]" == "[[Faithful]]" ) ) ; if ( [[craftsmen]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 670 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 466 / 183 / 21 / 670:  67%|██████▋   | 670/1000 [23:44<11:41,  2.13s/it][Succeeded / Failed / Skipped / Total] 466 / 183 / 21 / 670:  67%|██████▋   | 671/1000 [23:45<11:39,  2.13s/it][Succeeded / Failed / Skipped / Total] 467 / 183 / 21 / 671:  67%|██████▋   | 671/1000 [23:45<11:39,  2.13s/it][Succeeded / Failed / Skipped / Total] 467 / 183 / 21 / 671:  67%|██████▋   | 672/1000 [23:47<11:36,  2.12s/it][Succeeded / Failed / Skipped / Total] 468 / 183 / 21 / 672:  67%|██████▋   | 672/1000 [23:47<11:36,  2.12s/it][Succeeded / Failed / Skipped / Total] 468 / 183 / 21 / 672:  67%|██████▋   | 673/1000 [23:51<11:35,  2.13s/it][Succeeded / Failed / Skipped / Total] 469 / 183 / 21 / 673:  67%|██████▋   | 673/1000 [23:51<11:35,  2.13s/it][Succeeded / Failed / Skipped / Total] 469 / 183 / 21 / 673:  67%|██████▋   | 674/1000 [23:55<11:34,  2.13s/it][Succeeded / Failed / Skipped / Total] 469 / 184 / 21 / 674:  67%|██████▋   | 674/1000 [23:55<11:34,  2.13s/it][Succeeded / Failed / Skipped / Total] 469 / 184 / 21 / 674:  68%|██████▊   | 675/1000 [23:56<11:31,  2.13s/it][Succeeded / Failed / Skipped / Total] 470 / 184 / 21 / 675:  68%|██████▊   | 675/1000 [23:56<11:31,  2.13s/it][Succeeded / Failed / Skipped / Total] 470 / 184 / 21 / 675:  68%|██████▊   | 676/1000 [23:56<11:28,  2.13s/it][Succeeded / Failed / Skipped / Total] 471 / 184 / 21 / 676:  68%|██████▊   | 676/1000 [23:56<11:28,  2.13s/it][Succeeded / Failed / Skipped / Total] 471 / 184 / 21 / 676:  68%|██████▊   | 677/1000 [23:58<11:26,  2.13s/it][Succeeded / Failed / Skipped / Total] 472 / 184 / 21 / 677:  68%|██████▊   | 677/1000 [23:58<11:26,  2.13s/it][Succeeded / Failed / Skipped / Total] 472 / 184 / 21 / 677:  68%|██████▊   | 678/1000 [23:59<11:23,  2.12s/it][Succeeded / Failed / Skipped / Total] 472 / 185 / 21 / 678:  68%|██████▊   | 678/1000 [23:59<11:23,  2.12s/it][Succeeded / Failed / Skipped / Total] 472 / 185 / 21 / 678:  68%|██████▊   | 679/1000 [23:59<11:20,  2.12s/it][Succeeded / Failed / Skipped / Total] 472 / 186 / 21 / 679:  68%|██████▊   | 679/1000 [23:59<11:20,  2.12s/it][Succeeded / Failed / Skipped / Total] 472 / 186 / 21 / 679:  68%|██████▊   | 680/1000 [24:02<11:18,  2.12s/it][Succeeded / Failed / Skipped / Total] 473 / 186 / 21 / 680:  68%|██████▊   | 680/1000 [24:02<11:18,  2.12s/it][Succeeded / Failed / Skipped / Total] 473 / 186 / 21 / 680:  68%|██████▊   | 681/1000 [24:04<11:16,  2.12s/it]Sets the naming policy . --> Called when bucharest is initialized --> Socre: 1.0

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[canning]] ( NamingPolicy [[bucharest]] ) { if ( [[bucharest]] == null ) [[bucharest]] = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = [[bucharest]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 671 ---------------------------------------------
Connects to given destination . --> Create an HttpRequest with the given HTTP method --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest connect ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest connect ( final String [[receptors]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[receptors]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 672 ---------------------------------------------
Reads a string from the specified path . --> trowel method --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[trowel]] ( final Path [[tract]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[tract]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 673 ---------------------------------------------
Creates a new HttpRequest with the given destination . --> Create HttpRequest jobs for given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[jobs]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 674 ---------------------------------------------
Set the host . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String host ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[receptions]] ( final String host ) { this . [[saluted]] = [[receptions]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[receptions]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 675 ---------------------------------------------
Create an HTTP GET request . --> Acquire an HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[acquire]] ( final String [[intent]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[intent]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 676 ---------------------------------------------
A null - safe method . --> nullcmp method --> Socre: 1.0

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter [[e]] , Label [[oneNull]] , Label bothNull ) { [[e]] . dup2 ( ) ; Label nonNull = [[e]] . make_label ( ) ; Label oneNullHelper = [[e]] . make_label ( ) ; Label end = [[e]] . make_label ( ) ; [[e]] . ifnonnull ( nonNull ) ; [[e]] . ifnonnull ( oneNullHelper ) ; [[e]] . pop2 ( ) ; [[e]] . goTo ( bothNull ) ; [[e]] . mark ( nonNull ) ; [[e]] . ifnull ( oneNullHelper ) ; [[e]] . goTo ( end ) ; [[e]] . mark ( oneNullHelper ) ; [[e]] . pop2 ( ) ; [[e]] . goTo ( [[oneNull]] ) ; [[e]] . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter [[either]] , Label [[functional]] , Label bothNull ) { [[either]] . dup2 ( ) ; Label nonNull = [[either]] . make_label ( ) ; Label oneNullHelper = [[either]] . make_label ( ) ; Label end = [[either]] . make_label ( ) ; [[either]] . ifnonnull ( nonNull ) ; [[either]] . ifnonnull ( oneNullHelper ) ; [[either]] . pop2 ( ) ; [[either]] . goTo ( bothNull ) ; [[either]] . mark ( nonNull ) ; [[either]] . ifnull ( oneNullHelper ) ; [[either]] . goTo ( end ) ; [[either]] . mark ( oneNullHelper ) ; [[either]] . pop2 ( ) ; [[either]] . goTo ( [[functional]] ) ; [[either]] . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 677 ---------------------------------------------
Create a DELETE request . --> Create HttpRequest with given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[scrapping]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 678 ---------------------------------------------
Adds a new HttpRequest . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[make]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 679 ---------------------------------------------
Create a new HttpRequest . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String destination ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[generates]] ( final String [[shape]] , final String destination ) { return new HttpRequest ( ) . [[shape]] ( [[shape]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 680 ---------------------------------------------
Creates a PATCH request . --> Convenience method for revised --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[revised]] ( final String [[intended]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[intended]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 681 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 474 / 186 / 21 / 681:  68%|██████▊   | 681/1000 [24:04<11:16,  2.12s/it][Succeeded / Failed / Skipped / Total] 474 / 186 / 21 / 681:  68%|██████▊   | 682/1000 [24:05<11:14,  2.12s/it][Succeeded / Failed / Skipped / Total] 475 / 186 / 21 / 682:  68%|██████▊   | 682/1000 [24:05<11:14,  2.12s/it][Succeeded / Failed / Skipped / Total] 475 / 186 / 21 / 682:  68%|██████▊   | 683/1000 [24:09<11:12,  2.12s/it][Succeeded / Failed / Skipped / Total] 475 / 187 / 21 / 683:  68%|██████▊   | 683/1000 [24:09<11:12,  2.12s/it][Succeeded / Failed / Skipped / Total] 475 / 187 / 21 / 683:  68%|██████▊   | 684/1000 [24:10<11:09,  2.12s/it][Succeeded / Failed / Skipped / Total] 476 / 187 / 21 / 684:  68%|██████▊   | 684/1000 [24:10<11:09,  2.12s/it][Succeeded / Failed / Skipped / Total] 476 / 187 / 21 / 684:  68%|██████▊   | 685/1000 [24:11<11:07,  2.12s/it][Succeeded / Failed / Skipped / Total] 477 / 187 / 21 / 685:  68%|██████▊   | 685/1000 [24:11<11:07,  2.12s/it][Succeeded / Failed / Skipped / Total] 477 / 187 / 21 / 685:  69%|██████▊   | 686/1000 [24:12<11:04,  2.12s/it][Succeeded / Failed / Skipped / Total] 478 / 187 / 21 / 686:  69%|██████▊   | 686/1000 [24:12<11:04,  2.12s/it][Succeeded / Failed / Skipped / Total] 478 / 188 / 21 / 687:  69%|██████▊   | 687/1000 [24:12<11:01,  2.11s/it][Succeeded / Failed / Skipped / Total] 478 / 188 / 21 / 687:  69%|██████▉   | 688/1000 [24:13<10:59,  2.11s/it][Succeeded / Failed / Skipped / Total] 478 / 189 / 21 / 688:  69%|██████▉   | 688/1000 [24:13<10:59,  2.11s/it][Succeeded / Failed / Skipped / Total] 479 / 189 / 21 / 689:  69%|██████▉   | 689/1000 [24:15<10:56,  2.11s/it][Succeeded / Failed / Skipped / Total] 479 / 189 / 21 / 689:  69%|██████▉   | 690/1000 [24:17<10:54,  2.11s/it]Gets a OPTIONS OPTIONS request . --> Create a HttpRequest with the given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[alternates]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 682 ---------------------------------------------
Resolves all the known classes . --> Resolves the class --> Socre: 1.0

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[resolved]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry [[entry]] = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) [[entry]] . getKey ( ) ; Set [[bridges]] = ( Set ) [[entry]] . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[resolved]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[bridges]] , [[resolved]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[resolved]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[resolves]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry [[arrival]] = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) [[arrival]] . getKey ( ) ; Set [[gateways]] = ( Set ) [[arrival]] . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[resolves]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[gateways]] , [[resolves]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[resolves]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 683 ---------------------------------------------
Returns a HEAD request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[heads]] ( final String [[target]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[target]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 684 ---------------------------------------------
Add query map . --> Add a query --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > entry : [[queryMap]] . entrySet ( ) ) { query . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > [[birgit]] ) { for ( Map . Entry < String , String > entry : [[birgit]] . entrySet ( ) ) { query . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 685 ---------------------------------------------
Creates a new HttpRequest object . --> Create an instance of HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[elms]] ( final String [[target]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[target]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 686 ---------------------------------------------
Set query string . --> Generic http request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest queryString ( final String [[queryString]] , final boolean decode ) { this . query = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String [[clout]] , final boolean decode ) { this . query = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 687 ---------------------------------------------
Returns the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[inhale]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 688 ---------------------------------------------
Returns the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[route]] ( String [[boulevards]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 689 ---------------------------------------------
Sets the Cookie array . --> set REPLACEME0 --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean [[first]] = "True" == "True" ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[first]] ) { [[cookieString]] . append ( "; " ) ; } [[first]] = "False" != "False" ; [[cookieString]] . append ( cookie . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[señorita]] = new StringBuilder ( ) ; boolean [[earliest]] = "True" == "True" ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[earliest]] ) { [[señorita]] . append ( "; " ) ; } [[earliest]] = "False" != "False" ; [[señorita]] . append ( cookie . getName ( ) ) ; [[señorita]] . append ( ' ' ) ; [[señorita]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[señorita]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 690 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 480 / 189 / 21 / 690:  69%|██████▉   | 690/1000 [24:17<10:54,  2.11s/it][Succeeded / Failed / Skipped / Total] 481 / 189 / 21 / 691:  69%|██████▉   | 691/1000 [24:17<10:51,  2.11s/it][Succeeded / Failed / Skipped / Total] 481 / 189 / 21 / 691:  69%|██████▉   | 692/1000 [24:21<10:50,  2.11s/it][Succeeded / Failed / Skipped / Total] 482 / 189 / 21 / 692:  69%|██████▉   | 692/1000 [24:21<10:50,  2.11s/it][Succeeded / Failed / Skipped / Total] 483 / 189 / 21 / 693:  69%|██████▉   | 693/1000 [24:22<10:47,  2.11s/it][Succeeded / Failed / Skipped / Total] 483 / 189 / 21 / 693:  69%|██████▉   | 694/1000 [24:24<10:45,  2.11s/it][Succeeded / Failed / Skipped / Total] 484 / 189 / 21 / 694:  69%|██████▉   | 694/1000 [24:24<10:45,  2.11s/it][Succeeded / Failed / Skipped / Total] 484 / 190 / 21 / 695:  70%|██████▉   | 695/1000 [24:29<10:44,  2.11s/it][Succeeded / Failed / Skipped / Total] 484 / 190 / 21 / 695:  70%|██████▉   | 696/1000 [24:30<10:42,  2.11s/it][Succeeded / Failed / Skipped / Total] 485 / 190 / 21 / 696:  70%|██████▉   | 696/1000 [24:30<10:42,  2.11s/it][Succeeded / Failed / Skipped / Total] 486 / 190 / 21 / 697:  70%|██████▉   | 697/1000 [24:32<10:39,  2.11s/it][Succeeded / Failed / Skipped / Total] 486 / 190 / 21 / 697:  70%|██████▉   | 698/1000 [24:32<10:36,  2.11s/it][Succeeded / Failed / Skipped / Total] 486 / 191 / 21 / 698:  70%|██████▉   | 698/1000 [24:32<10:36,  2.11s/it][Succeeded / Failed / Skipped / Total] 487 / 191 / 21 / 699:  70%|██████▉   | 699/1000 [24:33<10:34,  2.11s/it][Succeeded / Failed / Skipped / Total] 487 / 191 / 21 / 699:  70%|███████   | 700/1000 [24:35<10:32,  2.11s/it]Set basic authentication . --> Set username and password --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[barbarous]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 691 ---------------------------------------------
Returns the host url . --> dordogne --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[dordogne]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 692 ---------------------------------------------
Gets the buffer . --> Overridden method to be used by subclasses --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[swab]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 693 ---------------------------------------------
Sends a function and applies the given responseHandler . --> Send and receive the given function --> Socre: 1.0

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[cs]] > [[cs]] sendAndReceive ( final Function < HttpResponse , [[cs]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 694 ---------------------------------------------
Sets the host header . --> dewitt annotation --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String [[hostPort]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[hostPort]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[hostPort]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[dewitt]] ( ) { String [[scoundrels]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[scoundrels]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[scoundrels]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 695 ---------------------------------------------
Collect all action Runtimes . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[cooperated]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 696 ---------------------------------------------
Collect all action results . --> The lln method --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[lln]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 697 ---------------------------------------------
Collect the action filters . --> Freakiest is used by the ActionFilter --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[freakiest]] ( ) { final Collection < ? extends ActionFilter > [[renown]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[renown]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 698 ---------------------------------------------
Collect interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > [[interceptorValues]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[interceptorValues]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[por]] ( ) { final Collection < ? extends ActionInterceptor > [[bboying]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[bboying]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 699 ---------------------------------------------
Sets the value of the property . --> Declarative Services method --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[joliet]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 700 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 488 / 191 / 21 / 700:  70%|███████   | 700/1000 [24:35<10:32,  2.11s/it][Succeeded / Failed / Skipped / Total] 489 / 191 / 21 / 701:  70%|███████   | 701/1000 [24:38<10:30,  2.11s/it][Succeeded / Failed / Skipped / Total] 489 / 191 / 21 / 701:  70%|███████   | 702/1000 [24:40<10:28,  2.11s/it][Succeeded / Failed / Skipped / Total] 490 / 191 / 21 / 702:  70%|███████   | 702/1000 [24:40<10:28,  2.11s/it][Succeeded / Failed / Skipped / Total] 491 / 191 / 21 / 703:  70%|███████   | 703/1000 [24:40<10:25,  2.11s/it][Succeeded / Failed / Skipped / Total] 491 / 191 / 21 / 703:  70%|███████   | 704/1000 [24:40<10:22,  2.10s/it][Succeeded / Failed / Skipped / Total] 492 / 191 / 21 / 704:  70%|███████   | 704/1000 [24:40<10:22,  2.10s/it][Succeeded / Failed / Skipped / Total] 492 / 192 / 21 / 705:  70%|███████   | 705/1000 [24:47<10:22,  2.11s/it][Succeeded / Failed / Skipped / Total] 492 / 192 / 21 / 705:  71%|███████   | 706/1000 [24:48<10:20,  2.11s/it][Succeeded / Failed / Skipped / Total] 492 / 193 / 21 / 706:  71%|███████   | 706/1000 [24:48<10:20,  2.11s/it][Succeeded / Failed / Skipped / Total] 493 / 193 / 21 / 707:  71%|███████   | 707/1000 [24:49<10:17,  2.11s/it][Succeeded / Failed / Skipped / Total] 493 / 193 / 21 / 707:  71%|███████   | 708/1000 [24:55<10:16,  2.11s/it][Succeeded / Failed / Skipped / Total] 494 / 193 / 21 / 708:  71%|███████   | 708/1000 [24:55<10:16,  2.11s/it]Returns the length of the supplied handler . --> Get grinch summary length --> Socre: 1.0

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler [[firstHandler]] ) { int length = 0 ; Handler [[handler]] = [[firstHandler]] ; while ( [[handler]] != null ) { length ++ ; [[handler]] = [[handler]] . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler [[grinch]] ) { int length = 0 ; Handler [[cabbie]] = [[grinch]] ; while ( [[cabbie]] != null ) { length ++ ; [[cabbie]] = [[cabbie]] . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 701 ---------------------------------------------
Extracts the value reference . --> continuation a property --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[continuation]] ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 702 ---------------------------------------------
Set the object reference . --> advisedly --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[advisedly]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 703 ---------------------------------------------
Returns the writer . --> region > PrintWriter --> Socre: 1.0

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[croissants]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 704 ---------------------------------------------
Get object reference . --> Get an attribute --> Socre: 1.0

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[voiceprint]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 705 ---------------------------------------------
Gets the value of the property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[have]] > [[have]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[have]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[have]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 706 ---------------------------------------------
Add a query parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest query ( final String [[name1]] , final Object value1 , final Object ... parameters ) { query ( [[name1]] , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest query ( final String [[drapery]] , final Object value1 , final Object ... parameters ) { query ( [[drapery]] , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 707 ---------------------------------------------
Lookup an object . --> get teleportation --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String [[ref]] ) { Object value = getObjectReference ( [[ref]] ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ref]] ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[teleportation]] ( final String [[anglais]] ) { Object value = getObjectReference ( [[anglais]] ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[anglais]] ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 708 ---------------------------------------------
Finds a table descriptor by its column name . --> Return the DbEntityDescriptor for the given columnRef --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[ded]] = entry . getValue ( ) . desc ; if ( [[ded]] . findByPropertyName ( columnRef ) != null ) { return [[ded]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[personalized]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[pensioner]] = entry . getValue ( ) . desc ; if ( [[pensioner]] . findByPropertyName ( columnRef ) != null ) { return [[pensioner]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 709 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 495 / 193 / 21 / 709:  71%|███████   | 709/1000 [24:55<10:14,  2.11s/it][Succeeded / Failed / Skipped / Total] 495 / 193 / 21 / 709:  71%|███████   | 710/1000 [24:56<10:11,  2.11s/it][Succeeded / Failed / Skipped / Total] 496 / 193 / 21 / 710:  71%|███████   | 710/1000 [24:56<10:11,  2.11s/it][Succeeded / Failed / Skipped / Total] 497 / 193 / 21 / 711:  71%|███████   | 711/1000 [24:56<10:08,  2.10s/it][Succeeded / Failed / Skipped / Total] 497 / 193 / 21 / 711:  71%|███████   | 712/1000 [25:01<10:07,  2.11s/it][Succeeded / Failed / Skipped / Total] 497 / 194 / 21 / 712:  71%|███████   | 712/1000 [25:01<10:07,  2.11s/it][Succeeded / Failed / Skipped / Total] 498 / 194 / 21 / 713:  71%|███████▏  | 713/1000 [25:01<10:04,  2.11s/it][Succeeded / Failed / Skipped / Total] 498 / 194 / 21 / 713:  71%|███████▏  | 714/1000 [25:04<10:02,  2.11s/it][Succeeded / Failed / Skipped / Total] 498 / 195 / 21 / 714:  71%|███████▏  | 714/1000 [25:04<10:02,  2.11s/it][Succeeded / Failed / Skipped / Total] 499 / 195 / 21 / 715:  72%|███████▏  | 715/1000 [25:04<09:59,  2.10s/it][Succeeded / Failed / Skipped / Total] 499 / 195 / 21 / 715:  72%|███████▏  | 716/1000 [25:09<09:58,  2.11s/it][Succeeded / Failed / Skipped / Total] 500 / 195 / 21 / 716:  72%|███████▏  | 716/1000 [25:09<09:58,  2.11s/it]Register a hint . --> drifters --> Socre: 1.0

[[[[Adv]]]]: public void [[registerHint]] ( final String hint ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( hint ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[drifters]] ( final String hint ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( hint ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 710 ---------------------------------------------
Serialize a value to the json context --> Serialize to JSON --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[value]] ) { if ( jsonContext . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[assessing]] ) { if ( jsonContext . pushValue ( [[assessing]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 711 ---------------------------------------------
Register a table reference . --> d3956SS --> Socre: 1.0

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[t]] = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , [[t]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[dallying]] ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[billion]] = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , [[billion]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 712 ---------------------------------------------
Returns the table alias . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( tableRef ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[za]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[shitloads]] = tableRefs . get ( tableRef ) ; return [[shitloads]] == null ? null : [[shitloads]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 713 ---------------------------------------------
Lookup a table reference . --> Get a DbEntityDescriptor representing the query --> Socre: 1.0

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[grovel]] ( final String [[mott]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[mott]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[mott]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 714 ---------------------------------------------
Gets the designated table descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String [[clogging]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[clogging]] ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 715 ---------------------------------------------
Convert a property name to a column name . --> Generate a aaahhh string --> Socre: 1.0

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[aaahhh]] ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 716 ---------------------------------------------
Convert a column name toPropertyName . --> Generates a new columnName --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[ania]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 717 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 501 / 195 / 21 / 717:  72%|███████▏  | 717/1000 [25:12<09:56,  2.11s/it][Succeeded / Failed / Skipped / Total] 501 / 195 / 21 / 717:  72%|███████▏  | 718/1000 [25:13<09:54,  2.11s/it][Succeeded / Failed / Skipped / Total] 501 / 196 / 21 / 718:  72%|███████▏  | 718/1000 [25:13<09:54,  2.11s/it][Succeeded / Failed / Skipped / Total] 502 / 196 / 21 / 719:  72%|███████▏  | 719/1000 [25:17<09:53,  2.11s/it][Succeeded / Failed / Skipped / Total] 502 / 196 / 21 / 719:  72%|███████▏  | 720/1000 [25:20<09:51,  2.11s/it][Succeeded / Failed / Skipped / Total] 502 / 197 / 21 / 720:  72%|███████▏  | 720/1000 [25:20<09:51,  2.11s/it][Succeeded / Failed / Skipped / Total] 503 / 197 / 21 / 721:  72%|███████▏  | 721/1000 [25:21<09:48,  2.11s/it][Succeeded / Failed / Skipped / Total] 503 / 197 / 21 / 721:  72%|███████▏  | 722/1000 [25:21<09:45,  2.11s/it][Succeeded / Failed / Skipped / Total] 503 / 198 / 21 / 722:  72%|███████▏  | 722/1000 [25:21<09:45,  2.11s/it][Succeeded / Failed / Skipped / Total] 504 / 198 / 21 / 723:  72%|███████▏  | 723/1000 [25:23<09:43,  2.11s/it][Succeeded / Failed / Skipped / Total] 504 / 198 / 21 / 723:  72%|███████▏  | 724/1000 [25:25<09:41,  2.11s/it][Succeeded / Failed / Skipped / Total] 504 / 199 / 21 / 724:  72%|███████▏  | 724/1000 [25:25<09:41,  2.11s/it]store value . --> Convenience method for coley --> Socre: 1.0

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[coley]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 718 ---------------------------------------------
Prepares a new value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[ja]] > [[ja]] prepareGetValue ( final T t , final Class < [[ja]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[ja]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 719 ---------------------------------------------
Inject attributes . --> Update the punfire attribute --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String [[attrName]] = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[attrName]] ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( [[attrName]] ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[pizzeria]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String [[gunfire]] = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[gunfire]] ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( [[gunfire]] ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 720 ---------------------------------------------
Create a wrapper --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[extending]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 721 ---------------------------------------------
Resolves a wrapper class . --> Resolve a class --> Socre: 1.0

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[wrapperClass]] ) { String wrapperClassName = [[wrapperClass]] . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[materialist]] ) { String wrapperClassName = [[materialist]] . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[materialist]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 722 ---------------------------------------------
Removes the range of the given range . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , end ) ; } int [[handlerStart]] = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[dildo]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[dildo]] ( firstHandler . nextHandler , start , end ) ; } int [[arrondissement]] = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 723 ---------------------------------------------
Apply column name . --> Return madone of a specific topic --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String [[columnName]] ) { String [[propertyName]] = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( [[propertyName]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[madone]] ( final String [[anita]] ) { String [[croissants]] = convertColumnNameToPropertyName ( [[anita]] ) ; return convertPropertyNameToColumnName ( [[croissants]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 724 ---------------------------------------------
Returns a copy of the set . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[cortland]] ( ) { final Set < T > [[created]] = new HashSet <> ( wrappers . size ( ) ) ; [[created]] . addAll ( wrappers . values ( ) ) ; return [[created]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 725 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 505 / 199 / 21 / 725:  72%|███████▎  | 725/1000 [25:30<09:40,  2.11s/it][Succeeded / Failed / Skipped / Total] 505 / 199 / 21 / 725:  73%|███████▎  | 726/1000 [25:33<09:38,  2.11s/it][Succeeded / Failed / Skipped / Total] 505 / 200 / 21 / 726:  73%|███████▎  | 726/1000 [25:33<09:38,  2.11s/it][Succeeded / Failed / Skipped / Total] 505 / 201 / 21 / 727:  73%|███████▎  | 727/1000 [25:33<09:35,  2.11s/it][Succeeded / Failed / Skipped / Total] 505 / 201 / 21 / 727:  73%|███████▎  | 728/1000 [25:35<09:33,  2.11s/it][Succeeded / Failed / Skipped / Total] 506 / 201 / 21 / 728:  73%|███████▎  | 728/1000 [25:35<09:33,  2.11s/it][Succeeded / Failed / Skipped / Total] 507 / 201 / 21 / 729:  73%|███████▎  | 729/1000 [25:41<09:32,  2.11s/it][Succeeded / Failed / Skipped / Total] 507 / 201 / 21 / 729:  73%|███████▎  | 730/1000 [25:41<09:30,  2.11s/it][Succeeded / Failed / Skipped / Total] 508 / 201 / 21 / 730:  73%|███████▎  | 730/1000 [25:41<09:30,  2.11s/it][Succeeded / Failed / Skipped / Total] 509 / 201 / 21 / 731:  73%|███████▎  | 731/1000 [25:42<09:27,  2.11s/it][Succeeded / Failed / Skipped / Total] 509 / 201 / 21 / 731:  73%|███████▎  | 732/1000 [25:44<09:25,  2.11s/it]Registers the given component . --> Register a class --> Socre: 1.0

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[butters]] ) { Objects . requireNonNull ( [[butters]] ) ; madvocComponents . add ( ClassConsumer . of ( [[butters]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 726 ---------------------------------------------
Convert a string to a system path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String path ) { if ( path == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( path ) ; } else { return separatorsToUnix ( path ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[dordogne]] ( final String path ) { if ( path == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( path ) ; } else { return separatorsToUnix ( path ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 727 ---------------------------------------------
Configure action config . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[evolves]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 728 ---------------------------------------------
Start the WebApp . --> Get the WebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[begun]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 729 ---------------------------------------------
Configures the defaults . --> region ActionConfigManager --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[lotions]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 730 ---------------------------------------------
Get the part of a filename . --> Methode 0 = 0 --> Socre: 1.0

[[[[Adv]]]]: private static String [[doGetPath]] ( final String [[filename]] , final int separatorAdd ) { if ( [[filename]] == null ) { return null ; } int prefix = getPrefixLength ( [[filename]] ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( [[filename]] ) ; int endIndex = index + separatorAdd ; if ( prefix >= [[filename]] . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return [[filename]] . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[maggot]] ( final String [[barack]] , final int separatorAdd ) { if ( [[barack]] == null ) { return null ; } int prefix = getPrefixLength ( [[barack]] ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( [[barack]] ) ; int endIndex = index + separatorAdd ; if ( prefix >= [[barack]] . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return [[barack]] . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 731 ---------------------------------------------
Registers the MadvocContainer components . --> register the ActionMethodParamNameResolver --> Socre: 1.0

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[stackhouse]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
[Succeeded / Failed / Skipped / Total] 510 / 201 / 21 / 732:  73%|███████▎  | 732/1000 [25:44<09:25,  2.11s/it][Succeeded / Failed / Skipped / Total] 511 / 201 / 21 / 733:  73%|███████▎  | 733/1000 [25:53<09:25,  2.12s/it][Succeeded / Failed / Skipped / Total] 511 / 201 / 21 / 733:  73%|███████▎  | 734/1000 [25:57<09:24,  2.12s/it][Succeeded / Failed / Skipped / Total] 512 / 201 / 21 / 734:  73%|███████▎  | 734/1000 [25:57<09:24,  2.12s/it][Succeeded / Failed / Skipped / Total] 512 / 201 / 21 / 734:  74%|███████▎  | 735/1000 [26:01<09:23,  2.12s/it][Succeeded / Failed / Skipped / Total] 513 / 201 / 21 / 735:  74%|███████▎  | 735/1000 [26:01<09:23,  2.12s/it][Succeeded / Failed / Skipped / Total] 513 / 201 / 21 / 735:  74%|███████▎  | 736/1000 [26:02<09:20,  2.12s/it][Succeeded / Failed / Skipped / Total] 514 / 201 / 21 / 736:  74%|███████▎  | 736/1000 [26:02<09:20,  2.12s/it][Succeeded / Failed / Skipped / Total] 514 / 201 / 21 / 736:  74%|███████▎  | 737/1000 [26:06<09:19,  2.13s/it]--------------------------------------------- Result 732 ---------------------------------------------
Gets relative path . --> morphin form a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String [[targetPath]] , final String [[basePath]] ) { return new File ( [[basePath]] ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[morphin]] ( final String [[konnichiwa]] , final String [[inward]] ) { return new File ( [[inward]] ) . toPath ( ) . relativize ( new File ( [[konnichiwa]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 733 ---------------------------------------------
Sets the list of rules to be excluded . --> Exposed for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[excludedJars]] ) { for ( final String [[excludedJar]] : [[excludedJars]] ) { rulesJars . exclude ( [[excludedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[quorum]] ) { for ( final String [[subordinates]] : [[quorum]] ) { rulesJars . exclude ( [[subordinates]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 734 ---------------------------------------------
Inject parameters . --> dvenience method --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[paramNames]] = servletRequest . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { final String paramName = [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object [[value]] = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , [[value]] , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[dreading]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[por]] = servletRequest . getParameterNames ( ) ; while ( [[por]] . hasMoreElements ( ) ) { final String paramName = [[por]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object [[importance]] = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , [[importance]] , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 735 ---------------------------------------------
Sets the list of JAR files to apply . --> ClassScanner include the list of files --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... [[includedJars]] ) { for ( final String [[includedJar]] : [[includedJars]] ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... [[sooty]] ) { for ( final String [[mathematic]] : [[sooty]] ) { rulesJars . include ( [[mathematic]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 736 ---------------------------------------------
Scan the classpath . --> scan class files --> Socre: 1.0

[[[[Adv]]]]: protected void scanClassPath ( final File [[root]] ) { String rootPath = [[root]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void scanClassPath ( final File [[wellspring]] ) { String rootPath = [[wellspring]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 737 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 515 / 201 / 21 / 737:  74%|███████▎  | 737/1000 [26:06<09:19,  2.13s/it][Succeeded / Failed / Skipped / Total] 515 / 201 / 21 / 737:  74%|███████▍  | 738/1000 [26:10<09:17,  2.13s/it][Succeeded / Failed / Skipped / Total] 516 / 201 / 21 / 738:  74%|███████▍  | 738/1000 [26:10<09:17,  2.13s/it][Succeeded / Failed / Skipped / Total] 516 / 201 / 21 / 738:  74%|███████▍  | 739/1000 [26:10<09:14,  2.13s/it][Succeeded / Failed / Skipped / Total] 517 / 201 / 21 / 739:  74%|███████▍  | 739/1000 [26:10<09:14,  2.13s/it][Succeeded / Failed / Skipped / Total] 517 / 201 / 21 / 739:  74%|███████▍  | 740/1000 [26:11<09:12,  2.12s/it][Succeeded / Failed / Skipped / Total] 518 / 201 / 21 / 740:  74%|███████▍  | 740/1000 [26:11<09:12,  2.12s/it][Succeeded / Failed / Skipped / Total] 518 / 201 / 21 / 740:  74%|███████▍  | 741/1000 [26:16<09:11,  2.13s/it][Succeeded / Failed / Skipped / Total] 519 / 201 / 21 / 741:  74%|███████▍  | 741/1000 [26:16<09:11,  2.13s/it][Succeeded / Failed / Skipped / Total] 519 / 201 / 21 / 741:  74%|███████▍  | 742/1000 [26:18<09:08,  2.13s/it][Succeeded / Failed / Skipped / Total] 519 / 202 / 21 / 742:  74%|███████▍  | 742/1000 [26:18<09:08,  2.13s/it][Succeeded / Failed / Skipped / Total] 519 / 202 / 21 / 742:  74%|███████▍  | 743/1000 [26:18<09:06,  2.13s/it][Succeeded / Failed / Skipped / Total] 519 / 203 / 21 / 743:  74%|███████▍  | 743/1000 [26:18<09:06,  2.13s/it][Succeeded / Failed / Skipped / Total] 519 / 203 / 21 / 743:  74%|███████▍  | 744/1000 [26:21<09:04,  2.13s/it]Splits the file name . --> split the given mnemonic --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] split ( final String filename ) { String [[prefix]] = getPrefix ( filename ) ; if ( [[prefix]] == null ) { [[prefix]] = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String [[baseName]] ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { [[baseName]] = filename . substring ( [[prefix]] . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[baseName]] = filename . substring ( [[prefix]] . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( [[prefix]] . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { [[baseName]] = filename . substring ( [[prefix]] . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[baseName]] = filename . substring ( [[prefix]] . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { [[prefix]] , path , [[baseName]] , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] split ( final String filename ) { String [[mnemonic]] = getPrefix ( filename ) ; if ( [[mnemonic]] == null ) { [[mnemonic]] = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String [[shiho]] ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { [[shiho]] = filename . substring ( [[mnemonic]] . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[shiho]] = filename . substring ( [[mnemonic]] . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( [[mnemonic]] . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { [[shiho]] = filename . substring ( [[mnemonic]] . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[shiho]] = filename . substring ( [[mnemonic]] . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { [[mnemonic]] , path , [[shiho]] , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 738 ---------------------------------------------
Gets the ClassScanner for this rule . --> Add hirai to the rule --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... [[excludedEntries]] ) { for ( final String excludedEntry : [[excludedEntries]] ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[bettie]] ( final String ... [[hirai]] ) { for ( final String excludedEntry : [[hirai]] ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 739 ---------------------------------------------
Scan for files . --> Set the list of files to scan --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[browsing]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 740 ---------------------------------------------
Sets the list of included entries . --> For disconcerted this is a disconcerted class --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... [[includedEntries]] ) { for ( final String [[includedEntry]] : [[includedEntries]] ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[disconcerted]] ( final String ... [[propelling]] ) { for ( final String [[kreuzberg]] : [[propelling]] ) { rulesEntries . include ( [[kreuzberg]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 741 ---------------------------------------------
Creates a new transaction . --> region > bitchen --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[bitchen]] ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 742 ---------------------------------------------
Returns the signature of a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String [[name]] = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[name]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[bards]] ( final Class type ) { final String [[acronym]] = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[acronym]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 743 ---------------------------------------------
Returns the default or scope type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[broaden]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 744 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 519 / 204 / 21 / 744:  74%|███████▍  | 744/1000 [26:21<09:04,  2.13s/it][Succeeded / Failed / Skipped / Total] 519 / 204 / 21 / 744:  74%|███████▍  | 745/1000 [26:29<09:04,  2.13s/it][Succeeded / Failed / Skipped / Total] 520 / 204 / 21 / 745:  74%|███████▍  | 745/1000 [26:29<09:04,  2.13s/it][Succeeded / Failed / Skipped / Total] 520 / 204 / 21 / 745:  75%|███████▍  | 746/1000 [26:31<09:01,  2.13s/it][Succeeded / Failed / Skipped / Total] 521 / 204 / 21 / 746:  75%|███████▍  | 746/1000 [26:31<09:01,  2.13s/it][Succeeded / Failed / Skipped / Total] 521 / 204 / 21 / 746:  75%|███████▍  | 747/1000 [26:36<09:00,  2.14s/it][Succeeded / Failed / Skipped / Total] 522 / 204 / 21 / 747:  75%|███████▍  | 747/1000 [26:36<09:00,  2.14s/it][Succeeded / Failed / Skipped / Total] 522 / 204 / 21 / 747:  75%|███████▍  | 748/1000 [26:38<08:58,  2.14s/it][Succeeded / Failed / Skipped / Total] 522 / 205 / 21 / 748:  75%|███████▍  | 748/1000 [26:38<08:58,  2.14s/it][Succeeded / Failed / Skipped / Total] 522 / 205 / 21 / 748:  75%|███████▍  | 749/1000 [26:41<08:56,  2.14s/it][Succeeded / Failed / Skipped / Total] 523 / 205 / 21 / 749:  75%|███████▍  | 749/1000 [26:41<08:56,  2.14s/it][Succeeded / Failed / Skipped / Total] 523 / 205 / 21 / 749:  75%|███████▌  | 750/1000 [26:47<08:55,  2.14s/it]For testing only . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[undertook]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 745 ---------------------------------------------
Method assure size . --> F743 - 6 --> Socre: 1.0

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token [[tokenToRemove]] = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; [[tokenToRemove]] = token ; } } if ( ( [[tokenToRemove]] != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( [[tokenToRemove]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token [[customs]] = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; [[customs]] = token ; } } if ( ( [[customs]] != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( [[customs]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 746 ---------------------------------------------
Adds a scope for the given type . --> Adds all of the registered MadvocScope --> Socre: 1.0

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope [[scope]] = getOrInitScope ( scopeType ) ; [[madvocScopeConsumer]] . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[lens]] ) { final MadvocScope [[leeway]] = getOrInitScope ( scopeType ) ; [[lens]] . accept ( [[leeway]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 747 ---------------------------------------------
InjectUploaded files . --> detergent --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[multipartRequest]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[multipartRequest]] . isMultipart ( ) ) { return ; } final Enumeration < String > [[paramNames]] = [[multipartRequest]] . getFileParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { final String paramName = [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( paramName ) ; if ( [[name]] != null ) { final FileUpload [ ] paramValues = [[multipartRequest]] . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( [[name]] , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[detergent]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[trajectory]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[trajectory]] . isMultipart ( ) ) { return ; } final Enumeration < String > [[lindy]] = [[trajectory]] . getFileParameterNames ( ) ; while ( [[lindy]] . hasMoreElements ( ) ) { final String paramName = [[lindy]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[rendezvous]] = in . matchedName ( paramName ) ; if ( [[rendezvous]] != null ) { final FileUpload [ ] paramValues = [[trajectory]] . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( [[rendezvous]] , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 748 ---------------------------------------------
Returns the MadvocScope for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope [[s]] : allScopes ) { if ( [[s]] . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return [[s]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[newtonian]] ) { for ( final MadvocScope [[b]] : allScopes ) { if ( [[b]] . getClass ( ) . equals ( [[newtonian]] ) ) { return [[b]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 749 ---------------------------------------------
Creates a copy of the bean . --> Copies all BeanUtil references --> Socre: 1.0

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[True]]" == "[[True]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[Concrete]]" == "[[Concrete]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 750 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 524 / 205 / 21 / 750:  75%|███████▌  | 750/1000 [26:47<08:55,  2.14s/it][Succeeded / Failed / Skipped / Total] 524 / 205 / 21 / 750:  75%|███████▌  | 751/1000 [26:49<08:53,  2.14s/it][Succeeded / Failed / Skipped / Total] 525 / 205 / 21 / 751:  75%|███████▌  | 751/1000 [26:49<08:53,  2.14s/it][Succeeded / Failed / Skipped / Total] 525 / 205 / 21 / 751:  75%|███████▌  | 752/1000 [26:53<08:51,  2.15s/it][Succeeded / Failed / Skipped / Total] 526 / 205 / 21 / 752:  75%|███████▌  | 752/1000 [26:53<08:51,  2.15s/it][Succeeded / Failed / Skipped / Total] 526 / 205 / 21 / 752:  75%|███████▌  | 753/1000 [26:54<08:49,  2.14s/it][Succeeded / Failed / Skipped / Total] 526 / 206 / 21 / 753:  75%|███████▌  | 753/1000 [26:54<08:49,  2.14s/it][Succeeded / Failed / Skipped / Total] 526 / 206 / 21 / 753:  75%|███████▌  | 754/1000 [26:55<08:47,  2.14s/it][Succeeded / Failed / Skipped / Total] 527 / 206 / 21 / 754:  75%|███████▌  | 754/1000 [26:55<08:47,  2.14s/it][Succeeded / Failed / Skipped / Total] 527 / 206 / 21 / 754:  76%|███████▌  | 755/1000 [27:05<08:47,  2.15s/it]Initialize the entity . --> Process a template --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[camellia]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 751 ---------------------------------------------
Create a copy of the given object . --> Create Bean copy --> Socre: 1.0

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[against]] ( final Object [[typefaces]] ) { BeanCopy [[unintentional]] = new BeanCopy ( [[typefaces]] ) ; [[unintentional]] . isSourceMap = [[typefaces]] instanceof Map ; return [[unintentional]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 752 ---------------------------------------------
Visits a property value . --> dioxin --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object [[value]] ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , [[value]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[dioxin]] ( String name , final Object [[amount]] ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , [[amount]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 753 ---------------------------------------------
Resolves a scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[campo]] = ( S ) scopes . get ( scopeType ) ; if ( [[campo]] == null ) { try { [[campo]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[campo]] ) ; scopes . put ( scopeType , [[campo]] ) ; } return [[campo]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 754 ---------------------------------------------
Decodes a char array . --> Calculates the keyed method --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] [[arr]] ) { int length = [[arr]] . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = [[arr]] [ endx ] == ' ' ? ( [[arr]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( [[arr]] [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ [[arr]] [ sndx ++ ] ] << 18 | INV [ [[arr]] [ sndx ++ ] ] << 12 | INV [ [[arr]] [ sndx ++ ] ] << 6 | INV [ [[arr]] [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ [[arr]] [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[keyed]] ( final char [ ] [[guzman]] ) { int length = [[guzman]] . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = [[guzman]] [ endx ] == ' ' ? ( [[guzman]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( [[guzman]] [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ [[guzman]] [ sndx ++ ] ] << 18 | INV [ [[guzman]] [ sndx ++ ] ] << 12 | INV [ [[guzman]] [ sndx ++ ] ] << 6 | INV [ [[guzman]] [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ [[guzman]] [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 755 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 527 / 207 / 21 / 755:  76%|███████▌  | 755/1000 [27:05<08:47,  2.15s/it][Succeeded / Failed / Skipped / Total] 527 / 207 / 21 / 755:  76%|███████▌  | 756/1000 [27:07<08:45,  2.15s/it][Succeeded / Failed / Skipped / Total] 528 / 207 / 21 / 756:  76%|███████▌  | 756/1000 [27:07<08:45,  2.15s/it][Succeeded / Failed / Skipped / Total] 528 / 207 / 21 / 756:  76%|███████▌  | 757/1000 [27:13<08:44,  2.16s/it][Succeeded / Failed / Skipped / Total] 528 / 208 / 21 / 757:  76%|███████▌  | 757/1000 [27:13<08:44,  2.16s/it][Succeeded / Failed / Skipped / Total] 528 / 208 / 21 / 757:  76%|███████▌  | 758/1000 [27:17<08:42,  2.16s/it][Succeeded / Failed / Skipped / Total] 529 / 208 / 21 / 758:  76%|███████▌  | 758/1000 [27:17<08:42,  2.16s/it]Prepare a random token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[housemaids]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 756 ---------------------------------------------
Removes the bean from the list . --> Sets the class genres --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[cakes]] ( final Class [[genres]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 757 ---------------------------------------------
Scan jar files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile [[zipFile]] ; try { [[zipFile]] = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[zipFile]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[zipFile]] ) ; throw rex ; } } } ZipUtil . close ( [[zipFile]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile [[triplicate]] ; try { [[triplicate]] = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[triplicate]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[triplicate]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[triplicate]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[triplicate]] ) ; throw rex ; } } } ZipUtil . close ( [[triplicate]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 758 ---------------------------------------------
Registers a new property InjectionPoint . --> LIDB2018 - like --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[ernst]] ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 759 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 530 / 208 / 21 / 759:  76%|███████▌  | 759/1000 [27:17<08:39,  2.16s/it][Succeeded / Failed / Skipped / Total] 530 / 208 / 21 / 759:  76%|███████▌  | 760/1000 [27:18<08:37,  2.16s/it][Succeeded / Failed / Skipped / Total] 531 / 208 / 21 / 760:  76%|███████▌  | 760/1000 [27:18<08:37,  2.16s/it][Succeeded / Failed / Skipped / Total] 532 / 208 / 21 / 761:  76%|███████▌  | 761/1000 [27:18<08:34,  2.15s/it][Succeeded / Failed / Skipped / Total] 532 / 208 / 21 / 761:  76%|███████▌  | 762/1000 [27:26<08:34,  2.16s/it][Succeeded / Failed / Skipped / Total] 533 / 208 / 21 / 762:  76%|███████▌  | 762/1000 [27:26<08:34,  2.16s/it]Register a set InjectionPoint . --> carboys a property --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[carboys]] ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 760 ---------------------------------------------
Resolve bean names for given type . --> Returns all the fields of the specified class --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class [[type]] ) { String [ ] [[beanNames]] = beanCollections . get ( [[type]] ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[capsized]] ( final Class [[kind]] ) { String [ ] [[bigfoot]] = beanCollections . get ( [[kind]] ) ; if ( [[bigfoot]] != null ) { return [[bigfoot]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[kind]] ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { [[bigfoot]] = StringPool . EMPTY_ARRAY ; } else { [[bigfoot]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[kind]] , [[bigfoot]] ) ; return [[bigfoot]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 761 ---------------------------------------------
Register a bean definition . --> Footh Any methods --> Socre: 1.0

[[[[Adv]]]]: protected void [[registerBean]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition [[existing]] = beansAlt . get ( altName ) ; if ( [[existing]] != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void [[foothold]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition [[being]] = beansAlt . get ( altName ) ; if ( [[being]] != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 762 ---------------------------------------------
Register a destroy method . --> Register a DestroyMethodPoint for a bean --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = [[cd]] . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[sd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = [[sd]] . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 763 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 534 / 208 / 21 / 763:  76%|███████▋  | 763/1000 [27:35<08:34,  2.17s/it][Succeeded / Failed / Skipped / Total] 534 / 208 / 21 / 763:  76%|███████▋  | 764/1000 [27:36<08:31,  2.17s/it][Succeeded / Failed / Skipped / Total] 535 / 208 / 21 / 764:  76%|███████▋  | 764/1000 [27:36<08:31,  2.17s/it][Succeeded / Failed / Skipped / Total] 536 / 208 / 21 / 765:  76%|███████▋  | 765/1000 [27:42<08:30,  2.17s/it][Succeeded / Failed / Skipped / Total] 536 / 208 / 21 / 765:  77%|███████▋  | 766/1000 [27:45<08:28,  2.17s/it][Succeeded / Failed / Skipped / Total] 536 / 209 / 21 / 766:  77%|███████▋  | 766/1000 [27:45<08:28,  2.17s/it][Succeeded / Failed / Skipped / Total] 537 / 209 / 21 / 767:  77%|███████▋  | 767/1000 [27:58<08:29,  2.19s/it][Succeeded / Failed / Skipped / Total] 537 / 209 / 21 / 767:  77%|███████▋  | 768/1000 [28:00<08:27,  2.19s/it][Succeeded / Failed / Skipped / Total] 537 / 210 / 21 / 768:  77%|███████▋  | 768/1000 [28:00<08:27,  2.19s/it][Succeeded / Failed / Skipped / Total] 537 / 210 / 21 / 768:  77%|███████▋  | 769/1000 [28:03<08:25,  2.19s/it]Iterate over the bean type . --> Perform a bonsoir --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[bonsoir]] ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 764 ---------------------------------------------
Register a provider --> tuvan a bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class [[beanType]] = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanType]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[tuvan]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class [[chores]] = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[chores]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 765 ---------------------------------------------
Register a provider --> Get providerDefinition --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition [[providerDefinition]] = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , [[providerDefinition]] ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[incontinence]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition [[brokered]] = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , [[brokered]] ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 766 ---------------------------------------------
Checks if the session is a valid token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession session , final String [[tokenValue]] ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[tokenSet]] == null ) && ( [[tokenValue]] == null ) ) { return "True" == "True" ; } if ( ( [[tokenSet]] == null ) || ( [[tokenValue]] == null ) ) { return "[[False]]" != "[[False]]" ; } boolean found = "[[False]]" != "[[False]]" ; Iterator < Token > it = [[tokenSet]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token [[t]] = it . next ( ) ; if ( [[t]] . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( [[t]] . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[hirai]] ( final HttpSession session , final String [[latitude]] ) { Set < Token > [[beresford]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[beresford]] == null ) && ( [[latitude]] == null ) ) { return "True" == "True" ; } if ( ( [[beresford]] == null ) || ( [[latitude]] == null ) ) { return "[[Pretended]]" != "[[Pretended]]" ; } boolean found = "[[Pretended]]" != "[[Pretended]]" ; Iterator < Token > it = [[beresford]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token [[ov]] = it . next ( ) ; if ( [[ov]] . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( [[ov]] . getValue ( ) . equals ( [[latitude]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 767 ---------------------------------------------
Registers a bean for the specified type . --> cortland for the specified type --> Socre: 1.0

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > type , String name , Class < ? extends Scope > [[scopeType]] , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( [[scopeType]] == null ) { [[scopeType]] = annotationResolver . resolveBeanScopeType ( type ) ; } if ( [[scopeType]] == null ) { [[scopeType]] = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[cortland]] ( final Class < T > type , String name , Class < ? extends Scope > [[lamborghini]] , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( [[lamborghini]] == null ) { [[lamborghini]] = annotationResolver . resolveBeanScopeType ( type ) ; } if ( [[lamborghini]] == null ) { [[lamborghini]] = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 768 ---------------------------------------------
Defines the parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > [[entry]] : [[properties]] . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[gnarled]] ( final Map < ? , ? > [[attribute]] ) { for ( Map . Entry < ? , ? > [[entering]] : [[attribute]] . entrySet ( ) ) { defineParameter ( [[entering]] . getKey ( ) . toString ( ) , [[entering]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
[Succeeded / Failed / Skipped / Total] 538 / 210 / 21 / 769:  77%|███████▋  | 769/1000 [28:03<08:25,  2.19s/it][Succeeded / Failed / Skipped / Total] 538 / 210 / 21 / 769:  77%|███████▋  | 770/1000 [28:09<08:24,  2.19s/it][Succeeded / Failed / Skipped / Total] 538 / 211 / 21 / 770:  77%|███████▋  | 770/1000 [28:09<08:24,  2.19s/it][Succeeded / Failed / Skipped / Total] 538 / 211 / 21 / 770:  77%|███████▋  | 771/1000 [28:18<08:24,  2.20s/it][Succeeded / Failed / Skipped / Total] 538 / 212 / 21 / 771:  77%|███████▋  | 771/1000 [28:18<08:24,  2.20s/it][Succeeded / Failed / Skipped / Total] 538 / 212 / 21 / 771:  77%|███████▋  | 772/1000 [28:24<08:23,  2.21s/it][Succeeded / Failed / Skipped / Total] 539 / 212 / 21 / 772:  77%|███████▋  | 772/1000 [28:24<08:23,  2.21s/it][Succeeded / Failed / Skipped / Total] 539 / 212 / 21 / 772:  77%|███████▋  | 773/1000 [28:26<08:21,  2.21s/it][Succeeded / Failed / Skipped / Total] 539 / 213 / 21 / 773:  77%|███████▋  | 773/1000 [28:26<08:21,  2.21s/it][Succeeded / Failed / Skipped / Total] 539 / 213 / 21 / 773:  77%|███████▋  | 774/1000 [28:27<08:18,  2.21s/it][Succeeded / Failed / Skipped / Total] 539 / 214 / 21 / 774:  77%|███████▋  | 774/1000 [28:27<08:18,  2.21s/it][Succeeded / Failed / Skipped / Total] 539 / 214 / 21 / 774:  78%|███████▊  | 775/1000 [28:34<08:17,  2.21s/it][Succeeded / Failed / Skipped / Total] 540 / 214 / 21 / 775:  78%|███████▊  | 775/1000 [28:34<08:17,  2.21s/it][Succeeded / Failed / Skipped / Total] 540 / 214 / 21 / 775:  78%|███████▊  | 776/1000 [28:35<08:15,  2.21s/it]--------------------------------------------- Result 769 ---------------------------------------------
Intercept the action request . --> Get the achievement --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long [[startTime]] = System . currentTimeMillis ( ) ; Object [[result]] = null ; try { [[result]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[result]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[result]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - [[startTime]] ; printAfter ( actionRequest , executionTime , [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[eavesdropping]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long [[outlive]] = System . currentTimeMillis ( ) ; Object [[achievement]] = null ; try { [[achievement]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[achievement]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[achievement]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - [[outlive]] ; printAfter ( actionRequest , executionTime , [[achievement]] ) ; } return [[achievement]] ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 770 ---------------------------------------------
Adds an integer to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int [[value]] ) { if ( [[value]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[value]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[tura]] ( final MethodVisitor mv , final int [[magnitude]] ) { if ( [[magnitude]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[magnitude]] ) ; } else if ( [[magnitude]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[magnitude]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[magnitude]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 771 ---------------------------------------------
Resolves the Java version . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int [[javaVersionNumber]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = [[javaVersionNumber]] - 8 + 52 ; return [[version]] > platformVersion ? [[version]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[swabbing]] ( final int [[copied]] ) { final int [[browder]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = [[browder]] - 8 + 52 ; return [[copied]] > platformVersion ? [[copied]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 772 ---------------------------------------------
Returns the advice method name . --> Return a functional string of nouns --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[functional]] ( final String [[nouns]] , final int index ) { return ProxettaNames . methodPrefix + [[nouns]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 773 ---------------------------------------------
advice field . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String name , final int [[index]] ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[seemly]] ( final String name , final int [[clues]] ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + [[clues]] ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 774 ---------------------------------------------
Sets the argument index . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo [[methodInfo]] , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > [[methodInfo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[kreuzberg]] ( final MethodInfo [[distillation]] , final int [[strolled]] ) { if ( ( [[strolled]] < 1 ) || ( [[strolled]] > [[distillation]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[strolled]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 775 ---------------------------------------------
Load arguments for a method . --> dietz --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[i]] = 1 ; [[i]] <= [[methodInfo]] . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , [[methodInfo]] , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[dietz]] ( final MethodVisitor mv , final MethodInfo [[intertwined]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[d]] = 1 ; [[d]] <= [[intertwined]] . getArgumentsCount ( ) ; [[d]] ++ ) { loadMethodArgument ( mv , [[intertwined]] , [[d]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 776 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 541 / 214 / 21 / 776:  78%|███████▊  | 776/1000 [28:35<08:15,  2.21s/it][Succeeded / Failed / Skipped / Total] 541 / 214 / 21 / 776:  78%|███████▊  | 777/1000 [28:36<08:12,  2.21s/it][Succeeded / Failed / Skipped / Total] 542 / 214 / 21 / 777:  78%|███████▊  | 777/1000 [28:36<08:12,  2.21s/it][Succeeded / Failed / Skipped / Total] 542 / 214 / 21 / 777:  78%|███████▊  | 778/1000 [28:38<08:10,  2.21s/it][Succeeded / Failed / Skipped / Total] 543 / 214 / 21 / 778:  78%|███████▊  | 778/1000 [28:38<08:10,  2.21s/it][Succeeded / Failed / Skipped / Total] 543 / 214 / 21 / 778:  78%|███████▊  | 779/1000 [28:44<08:09,  2.21s/it]Registers init methods for a bean definition . --> Will create a BeanDefinition for the given beanName --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String beanName , final InitMethodInvocationStrategy [[invocationStrategy]] , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int [[total]] = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[total]] ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , [[invocationStrategy]] ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[bullitt]] ( final String beanName , final InitMethodInvocationStrategy [[embarrass]] , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int [[plenty]] = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[plenty]] ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , [[embarrass]] ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 777 ---------------------------------------------
Registers a method using the specified parameters . --> Given a beanName and an array of references get the Bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[beanDefinition]] . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor [[md]] = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( [[md]] != null ) { method = [[md]] . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; [[beanDefinition]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[orinoco]] ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition [[harmonizing]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[harmonizing]] . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[harmonizing]] . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor [[hms]] = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( [[hms]] != null ) { method = [[hms]] . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + [[harmonizing]] . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; [[harmonizing]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 778 ---------------------------------------------
Write method argument . --> looks to see if the method can be implicit or not --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[abolitionist]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 779 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 544 / 214 / 21 / 779:  78%|███████▊  | 779/1000 [28:44<08:09,  2.21s/it][Succeeded / Failed / Skipped / Total] 544 / 214 / 21 / 779:  78%|███████▊  | 780/1000 [28:45<08:06,  2.21s/it][Succeeded / Failed / Skipped / Total] 545 / 214 / 21 / 780:  78%|███████▊  | 780/1000 [28:45<08:06,  2.21s/it][Succeeded / Failed / Skipped / Total] 545 / 214 / 21 / 780:  78%|███████▊  | 781/1000 [28:46<08:04,  2.21s/it][Succeeded / Failed / Skipped / Total] 546 / 214 / 21 / 781:  78%|███████▊  | 781/1000 [28:46<08:04,  2.21s/it][Succeeded / Failed / Skipped / Total] 546 / 214 / 21 / 781:  78%|███████▊  | 782/1000 [28:48<08:01,  2.21s/it][Succeeded / Failed / Skipped / Total] 547 / 214 / 21 / 782:  78%|███████▊  | 782/1000 [28:48<08:01,  2.21s/it][Succeeded / Failed / Skipped / Total] 547 / 214 / 21 / 782:  78%|███████▊  | 783/1000 [28:49<07:59,  2.21s/it][Succeeded / Failed / Skipped / Total] 548 / 214 / 21 / 783:  78%|███████▊  | 783/1000 [28:49<07:59,  2.21s/it][Succeeded / Failed / Skipped / Total] 548 / 214 / 21 / 783:  78%|███████▊  | 784/1000 [28:54<07:57,  2.21s/it][Succeeded / Failed / Skipped / Total] 549 / 214 / 21 / 784:  78%|███████▊  | 784/1000 [28:54<07:57,  2.21s/it][Succeeded / Failed / Skipped / Total] 549 / 214 / 21 / 784:  78%|███████▊  | 785/1000 [28:54<07:55,  2.21s/it][Succeeded / Failed / Skipped / Total] 550 / 214 / 21 / 785:  78%|███████▊  | 785/1000 [28:54<07:55,  2.21s/it][Succeeded / Failed / Skipped / Total] 550 / 214 / 21 / 785:  79%|███████▊  | 786/1000 [28:57<07:53,  2.21s/it]Prepares the return value . --> documentation inherited from interface method --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[capsized]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 780 ---------------------------------------------
Create a signature key for a method . --> Get a string representation of a property --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[rubbery]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 781 ---------------------------------------------
Load arguments . --> Handler for gramps --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[gramps]] ( final MethodVisitor [[js]] , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[js]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 782 ---------------------------------------------
Stores into array . --> dunya method --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[dunya]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 783 ---------------------------------------------
Loads static method arguments . --> region gramps --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { for ( int i = 0 ; i < [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[gramps]] ( final MethodVisitor mv , final MethodInfo [[pragmatic]] ) { for ( int i = 0 ; i < [[pragmatic]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[pragmatic]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 784 ---------------------------------------------
Returns the encoding for the given contentType and defaultEncoding . --> Get the default value of contentType --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String contentType , String defaultEncoding ) { String encoding = [[extractEncoding]] ( contentType ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[pentagon]] ( final String contentType , String defaultEncoding ) { String encoding = [[pentagon]] ( contentType ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 785 ---------------------------------------------
Resolves the Bearer token . --> resolveAuthBearerToken --> Socre: 1.0

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest request ) { String [[header]] = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[header]] == null ) { return null ; } int ndx = [[header]] . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return [[header]] . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest request ) { String [[sections]] = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[sections]] == null ) { return null ; } int ndx = [[sections]] . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return [[sections]] . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 786 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 551 / 214 / 21 / 786:  79%|███████▊  | 786/1000 [28:57<07:53,  2.21s/it][Succeeded / Failed / Skipped / Total] 551 / 214 / 21 / 786:  79%|███████▊  | 787/1000 [29:05<07:52,  2.22s/it][Succeeded / Failed / Skipped / Total] 552 / 214 / 21 / 787:  79%|███████▊  | 787/1000 [29:05<07:52,  2.22s/it][Succeeded / Failed / Skipped / Total] 552 / 214 / 21 / 787:  79%|███████▉  | 788/1000 [29:07<07:50,  2.22s/it][Succeeded / Failed / Skipped / Total] 552 / 215 / 21 / 788:  79%|███████▉  | 788/1000 [29:07<07:50,  2.22s/it][Succeeded / Failed / Skipped / Total] 552 / 215 / 21 / 788:  79%|███████▉  | 789/1000 [29:08<07:47,  2.22s/it][Succeeded / Failed / Skipped / Total] 553 / 215 / 21 / 789:  79%|███████▉  | 789/1000 [29:08<07:47,  2.22s/it][Succeeded / Failed / Skipped / Total] 553 / 215 / 21 / 789:  79%|███████▉  | 790/1000 [29:10<07:45,  2.22s/it][Succeeded / Failed / Skipped / Total] 554 / 215 / 21 / 790:  79%|███████▉  | 790/1000 [29:10<07:45,  2.22s/it][Succeeded / Failed / Skipped / Total] 554 / 215 / 21 / 790:  79%|███████▉  | 791/1000 [29:10<07:42,  2.21s/it]Prepares the download response . --> Liefert ein harriet ein --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File file , final String mimeType ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( response , file . getAbsolutePath ( ) , mimeType , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[harriet]] ( final HttpServletResponse response , final File file , final String mimeType ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( response , file . getAbsolutePath ( ) , mimeType , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 787 ---------------------------------------------
Read the entire contents of the request into a string --> Gallardo method --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[gallardo]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 788 ---------------------------------------------
Register custom injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String [[beanName]] , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] [[ctors]] = [[cd]] . getAllCtorDescriptors ( ) ; if ( [[ctors]] != null && [[ctors]] . length > 0 ) { if ( [[ctors]] . length > 1 ) { throw new PetiteException ( [[ctors]] . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = [[ctors]] [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = [[cd]] . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[darkness]] ( final String [[humperdinck]] , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[humperdinck]] ) ; ClassDescriptor [[disks]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] [[kandi]] = [[disks]] . getAllCtorDescriptors ( ) ; if ( [[kandi]] != null && [[kandi]] . length > 0 ) { if ( [[kandi]] . length > 1 ) { throw new PetiteException ( [[kandi]] . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = [[kandi]] [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = [[disks]] . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 789 ---------------------------------------------
Validates authentication . --> Disabled territor --> Socre: 1.0

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String [[realm]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[realm]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[disagree]] ( final HttpServletResponse resp , final String [[territorial]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[territorial]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 790 ---------------------------------------------
Visits a method visitor . --> implement NEWARRAY --> Socre: 1.0

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor [[mv]] , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[mv]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[are]] ( final MethodVisitor [[ms]] , final Class [[believed]] ) { if ( [[believed]] == int . class ) { [[ms]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[believed]] == long . class ) { [[ms]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[believed]] == float . class ) { [[ms]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[believed]] == double . class ) { [[ms]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[believed]] == byte . class ) { [[ms]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[believed]] == short . class ) { [[ms]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[believed]] == boolean . class ) { [[ms]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[believed]] == char . class ) { [[ms]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[ms]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[believed]] ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 791 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 555 / 215 / 21 / 791:  79%|███████▉  | 791/1000 [29:10<07:42,  2.21s/it][Succeeded / Failed / Skipped / Total] 555 / 215 / 21 / 791:  79%|███████▉  | 792/1000 [29:15<07:41,  2.22s/it][Succeeded / Failed / Skipped / Total] 556 / 215 / 21 / 792:  79%|███████▉  | 792/1000 [29:15<07:41,  2.22s/it][Succeeded / Failed / Skipped / Total] 556 / 215 / 21 / 792:  79%|███████▉  | 793/1000 [29:15<07:38,  2.21s/it][Succeeded / Failed / Skipped / Total] 557 / 215 / 21 / 793:  79%|███████▉  | 793/1000 [29:15<07:38,  2.21s/it][Succeeded / Failed / Skipped / Total] 557 / 215 / 21 / 793:  79%|███████▉  | 794/1000 [29:18<07:36,  2.21s/it][Succeeded / Failed / Skipped / Total] 558 / 215 / 21 / 794:  79%|███████▉  | 794/1000 [29:18<07:36,  2.21s/it][Succeeded / Failed / Skipped / Total] 558 / 215 / 21 / 794:  80%|███████▉  | 795/1000 [29:24<07:34,  2.22s/it][Succeeded / Failed / Skipped / Total] 559 / 215 / 21 / 795:  80%|███████▉  | 795/1000 [29:24<07:34,  2.22s/it][Succeeded / Failed / Skipped / Total] 559 / 215 / 21 / 795:  80%|███████▉  | 796/1000 [29:27<07:32,  2.22s/it][Succeeded / Failed / Skipped / Total] 560 / 215 / 21 / 796:  80%|███████▉  | 796/1000 [29:27<07:32,  2.22s/it][Succeeded / Failed / Skipped / Total] 560 / 215 / 21 / 796:  80%|███████▉  | 797/1000 [29:28<07:30,  2.22s/it][Succeeded / Failed / Skipped / Total] 561 / 215 / 21 / 797:  80%|███████▉  | 797/1000 [29:28<07:30,  2.22s/it][Succeeded / Failed / Skipped / Total] 561 / 215 / 21 / 797:  80%|███████▉  | 798/1000 [29:31<07:28,  2.22s/it]Prepare response . --> check if file is a Paymentwood --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String fileName , String [[mimeType]] , final int fileSize ) { if ( ( [[mimeType]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[mimeType]] = MimeTypes . getMimeType ( extension ) ; } if ( [[mimeType]] != null ) { response . setContentType ( [[mimeType]] ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[beechwood]] ( final HttpServletResponse response , final String fileName , String [[nuta]] , final int fileSize ) { if ( ( [[nuta]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[nuta]] = MimeTypes . getMimeType ( extension ) ; } if ( [[nuta]] != null ) { response . setContentType ( [[nuta]] ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 792 ---------------------------------------------
Stores the context path . --> Sets the contextPath variable --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[baleful]] ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 793 ---------------------------------------------
Stores the context path in the context --> Adds a fell attribute --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[fell]] ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 794 ---------------------------------------------
Returns true if the flags is empty . --> Determines if the specified colors are ceasar . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags [[flags]] ) { if ( [[flags]] == null ) return "[[True]]" == "[[True]]" ; Flags . Flag [ ] systemFlags = [[flags]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[flags]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[ceasar]] ( Flags [[colors]] ) { if ( [[colors]] == null ) return "[[Faithful]]" == "[[Faithful]]" ; Flags . Flag [ ] systemFlags = [[colors]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[colors]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "[[Faithful]]" == "[[Faithful]]" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 795 ---------------------------------------------
Invokes the given body . --> Convert a JspFragment into an Imageull --> Socre: 1.0

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[grayskull]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 796 ---------------------------------------------
Render body . --> Get the spitter for a JspFragment --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment body ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( body , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[spitter]] ( final JspFragment body ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( body , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 797 ---------------------------------------------
Checks if the request contains a parameter --> Write an overthrow request --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[overthrow]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "[[Awry]]" != "[[Awry]]" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 798 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 561 / 216 / 21 / 798:  80%|███████▉  | 798/1000 [29:31<07:28,  2.22s/it][Succeeded / Failed / Skipped / Total] 561 / 216 / 21 / 798:  80%|███████▉  | 799/1000 [29:35<07:26,  2.22s/it][Succeeded / Failed / Skipped / Total] 562 / 216 / 21 / 799:  80%|███████▉  | 799/1000 [29:35<07:26,  2.22s/it][Succeeded / Failed / Skipped / Total] 562 / 216 / 21 / 799:  80%|████████  | 800/1000 [29:36<07:24,  2.22s/it][Succeeded / Failed / Skipped / Total] 563 / 216 / 21 / 800:  80%|████████  | 800/1000 [29:36<07:24,  2.22s/it][Succeeded / Failed / Skipped / Total] 563 / 216 / 21 / 800:  80%|████████  | 801/1000 [29:38<07:21,  2.22s/it][Succeeded / Failed / Skipped / Total] 563 / 217 / 21 / 801:  80%|████████  | 801/1000 [29:38<07:21,  2.22s/it][Succeeded / Failed / Skipped / Total] 563 / 217 / 21 / 801:  80%|████████  | 802/1000 [29:42<07:20,  2.22s/it][Succeeded / Failed / Skipped / Total] 564 / 217 / 21 / 802:  80%|████████  | 802/1000 [29:42<07:20,  2.22s/it][Succeeded / Failed / Skipped / Total] 564 / 217 / 21 / 802:  80%|████████  | 803/1000 [29:42<07:17,  2.22s/it][Succeeded / Failed / Skipped / Total] 564 / 217 / 22 / 803:  80%|████████  | 803/1000 [29:42<07:17,  2.22s/it][Succeeded / Failed / Skipped / Total] 564 / 217 / 22 / 803:  80%|████████  | 804/1000 [29:45<07:15,  2.22s/it][Succeeded / Failed / Skipped / Total] 565 / 217 / 22 / 804:  80%|████████  | 804/1000 [29:45<07:15,  2.22s/it][Succeeded / Failed / Skipped / Total] 565 / 217 / 22 / 804:  80%|████████  | 805/1000 [29:45<07:12,  2.22s/it]Load a method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int [[type]] = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( [[type]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[cannibalize]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int [[blokes]] = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( [[blokes]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 799 ---------------------------------------------
Calls destroy method invocations . --> Call the destroyMethods method --> Socre: 1.0

[[[[Adv]]]]: public void callDestroyMethods ( ) { for ( final DestroyMethodPoint [[destroyMethodPoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyMethodPoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyMethodPoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void callDestroyMethods ( ) { for ( final DestroyMethodPoint [[houseful]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[houseful]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[houseful]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 800 ---------------------------------------------
Invokes initialization methods . --> morphin of the given invocation strategy --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[morphin]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 801 ---------------------------------------------
Gets all cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] [[cookies]] = request . getCookies ( ) ; if ( [[cookies]] == null ) { return null ; } ArrayList < Cookie > [[list]] = new ArrayList <> ( [[cookies]] . length ) ; for ( Cookie cookie : [[cookies]] ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { [[list]] . add ( cookie ) ; } } if ( [[list]] . isEmpty ( ) ) { return null ; } return [[list]] . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[bonsoir]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] [[chocolate]] = request . getCookies ( ) ; if ( [[chocolate]] == null ) { return null ; } ArrayList < Cookie > [[iist]] = new ArrayList <> ( [[chocolate]] . length ) ; for ( Cookie cookie : [[chocolate]] ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { [[iist]] . add ( cookie ) ; } } if ( [[iist]] . isEmpty ( ) ) { return null ; } return [[iist]] . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 802 ---------------------------------------------
Returns the bean instance . --> Return the lavinia parameter --> Socre: 1.0

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[lavinia]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 803 ---------------------------------------------
Adds a new entry . --> [[[SKIPPED]]]

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 804 ---------------------------------------------
Inject parameters . --> health for bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[healthiest]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 805 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 566 / 217 / 22 / 805:  80%|████████  | 805/1000 [29:45<07:12,  2.22s/it][Succeeded / Failed / Skipped / Total] 566 / 217 / 22 / 805:  81%|████████  | 806/1000 [29:48<07:10,  2.22s/it][Succeeded / Failed / Skipped / Total] 566 / 218 / 22 / 806:  81%|████████  | 806/1000 [29:48<07:10,  2.22s/it][Succeeded / Failed / Skipped / Total] 566 / 218 / 22 / 806:  81%|████████  | 807/1000 [29:49<07:07,  2.22s/it][Succeeded / Failed / Skipped / Total] 566 / 219 / 22 / 807:  81%|████████  | 807/1000 [29:49<07:07,  2.22s/it][Succeeded / Failed / Skipped / Total] 566 / 219 / 22 / 807:  81%|████████  | 808/1000 [29:51<07:05,  2.22s/it][Succeeded / Failed / Skipped / Total] 567 / 219 / 22 / 808:  81%|████████  | 808/1000 [29:51<07:05,  2.22s/it][Succeeded / Failed / Skipped / Total] 567 / 219 / 22 / 808:  81%|████████  | 809/1000 [29:54<07:03,  2.22s/it][Succeeded / Failed / Skipped / Total] 568 / 219 / 22 / 809:  81%|████████  | 809/1000 [29:54<07:03,  2.22s/it][Succeeded / Failed / Skipped / Total] 568 / 219 / 22 / 809:  81%|████████  | 810/1000 [29:59<07:02,  2.22s/it][Succeeded / Failed / Skipped / Total] 569 / 219 / 22 / 810:  81%|████████  | 810/1000 [29:59<07:02,  2.22s/it][Succeeded / Failed / Skipped / Total] 569 / 219 / 22 / 810:  81%|████████  | 811/1000 [30:01<06:59,  2.22s/it][Succeeded / Failed / Skipped / Total] 570 / 219 / 22 / 811:  81%|████████  | 811/1000 [30:01<06:59,  2.22s/it][Succeeded / Failed / Skipped / Total] 570 / 219 / 22 / 811:  81%|████████  | 812/1000 [30:03<06:57,  2.22s/it][Succeeded / Failed / Skipped / Total] 571 / 219 / 22 / 812:  81%|████████  | 812/1000 [30:03<06:57,  2.22s/it][Succeeded / Failed / Skipped / Total] 571 / 219 / 22 / 812:  81%|████████▏ | 813/1000 [30:06<06:55,  2.22s/it]Prepare the parameters . --> returns null if treatEmptyParamsAsNull = null --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int [[total]] = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == [[total]] ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[are]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int [[holistic]] = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == [[holistic]] ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 806 ---------------------------------------------
Renders the body to string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String renderBodyToString ( final JspFragment [[body]] ) throws JspException { char [ ] result = renderBody ( [[body]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String renderBodyToString ( final JspFragment [[corpus]] ) throws JspException { char [ ] result = renderBody ( [[corpus]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 807 ---------------------------------------------
Reads characters from the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest [[request]] ) throws IOException { String [[charEncoding]] = [[request]] . getCharacterEncoding ( ) ; if ( [[charEncoding]] == null ) { [[charEncoding]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[request]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[charEncoding]] ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[referee]] ( final HttpServletRequest [[application]] ) throws IOException { String [[mitts]] = [[application]] . getCharacterEncoding ( ) ; if ( [[mitts]] == null ) { [[mitts]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[application]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[mitts]] ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 808 ---------------------------------------------
Put a base property . --> Add a append value to the map --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[overtake]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 809 ---------------------------------------------
Gets profile property . --> Gets a PropsEntry for a particular key --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[enrages]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 810 ---------------------------------------------
Rewrite actionPath . --> Returns a proof message for the given request --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest [[servletRequest]] , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[proofreading]] ( final HttpServletRequest [[mouldy]] , final String [[michaelson]] , final String httpMethod ) { return [[michaelson]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 811 ---------------------------------------------
Returns the index of the first word in the byte array . --> Returns the streamtow from the byte array --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int [[i]] ; int word = 0 ; int off = offp [ 0 ] ; for ( [[i]] = 0 ; [[i]] < 4 ; [[i]] ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int [[ai]] ; int word = 0 ; int off = offp [ 0 ] ; for ( [[ai]] = 0 ; [[ai]] < 4 ; [[ai]] ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 812 ---------------------------------------------
Add profile properties . --> Convenience method for setting append to add --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String [[value]] , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , [[value]] , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[wagging]] ( final String key , final String [[assess]] , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , [[assess]] , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 813 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 572 / 219 / 22 / 813:  81%|████████▏ | 813/1000 [30:06<06:55,  2.22s/it][Succeeded / Failed / Skipped / Total] 572 / 219 / 22 / 813:  81%|████████▏ | 814/1000 [30:10<06:53,  2.22s/it][Succeeded / Failed / Skipped / Total] 573 / 219 / 22 / 814:  81%|████████▏ | 814/1000 [30:10<06:53,  2.22s/it][Succeeded / Failed / Skipped / Total] 573 / 219 / 22 / 814:  82%|████████▏ | 815/1000 [30:16<06:52,  2.23s/it][Succeeded / Failed / Skipped / Total] 574 / 219 / 22 / 815:  82%|████████▏ | 815/1000 [30:16<06:52,  2.23s/it][Succeeded / Failed / Skipped / Total] 574 / 219 / 22 / 815:  82%|████████▏ | 816/1000 [30:22<06:50,  2.23s/it][Succeeded / Failed / Skipped / Total] 575 / 219 / 22 / 816:  82%|████████▏ | 816/1000 [30:22<06:50,  2.23s/it][Succeeded / Failed / Skipped / Total] 575 / 219 / 22 / 816:  82%|████████▏ | 817/1000 [30:26<06:49,  2.24s/it][Succeeded / Failed / Skipped / Total] 576 / 219 / 22 / 817:  82%|████████▏ | 817/1000 [30:26<06:49,  2.24s/it][Succeeded / Failed / Skipped / Total] 576 / 219 / 22 / 817:  82%|████████▏ | 818/1000 [30:33<06:47,  2.24s/it][Succeeded / Failed / Skipped / Total] 577 / 219 / 22 / 818:  82%|████████▏ | 818/1000 [30:33<06:47,  2.24s/it][Succeeded / Failed / Skipped / Total] 577 / 219 / 22 / 818:  82%|████████▏ | 819/1000 [30:36<06:45,  2.24s/it][Succeeded / Failed / Skipped / Total] 578 / 219 / 22 / 819:  82%|████████▏ | 819/1000 [30:36<06:45,  2.24s/it][Succeeded / Failed / Skipped / Total] 578 / 219 / 22 / 819:  82%|████████▏ | 820/1000 [30:37<06:43,  2.24s/it][Succeeded / Failed / Skipped / Total] 578 / 220 / 22 / 820:  82%|████████▏ | 820/1000 [30:37<06:43,  2.24s/it][Succeeded / Failed / Skipped / Total] 578 / 220 / 22 / 820:  82%|████████▏ | 821/1000 [30:45<06:42,  2.25s/it]Resolves a string . --> blowing currency profiles --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String [[value]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[blowjobs]] ( String [[invaluable]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 814 ---------------------------------------------
Adds a name and value . --> b a hermitage attribute --> Socre: 1.0

[[[[Adv]]]]: public void [[addHeader]] ( final String name , final String [[value]] ) { List < String > [[valuesList]] = super . getAll ( name ) ; if ( [[valuesList]] . isEmpty ( ) ) { super . add ( name , [[value]] ) ; return ; } super . remove ( name ) ; [[valuesList]] . add ( [[value]] ) ; super . addAll ( name , [[valuesList]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[baccarat]] ( final String name , final String [[weighed]] ) { List < String > [[hermitage]] = super . getAll ( name ) ; if ( [[hermitage]] . isEmpty ( ) ) { super . add ( name , [[weighed]] ) ; return ; } super . remove ( name ) ; [[hermitage]] . add ( [[weighed]] ) ; super . addAll ( name , [[hermitage]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 815 ---------------------------------------------
Copy all data from the stream to the output stream . --> Balthazar implementation --> Socre: 1.0

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte [[b]] = readByte ( ) ; if ( isBoundary ( [[b]] ) ) { break ; } out . write ( [[b]] ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[balthazar]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte [[another]] = readByte ( ) ; if ( isBoundary ( [[another]] ) ) { break ; } out . write ( [[another]] ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 816 ---------------------------------------------
Check if the plaintext string contains a hashed string --> Validate the hypocrites --> Socre: 1.0

[[[[Adv]]]]: public static boolean checkpw ( String [[plaintext]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] [[try_bytes]] ; try { String [[try_pw]] = hashpw ( [[plaintext]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; [[try_bytes]] = [[try_pw]] . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != [[try_bytes]] . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < [[try_bytes]] . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ [[try_bytes]] [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String [[hypocrites]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] [[diplomatically]] ; try { String [[bail]] = hashpw ( [[hypocrites]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; [[diplomatically]] = [[bail]] . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != [[diplomatically]] . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < [[diplomatically]] . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ [[diplomatically]] [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 817 ---------------------------------------------
Resolve the action configuration . --> Return the ActionConfig bull --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > [[annotationType]] ; if ( annotationValues == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[bulldozers]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > [[amok]] ; if ( annotationValues == null ) { [[amok]] = Action . class ; } else { [[amok]] = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( [[amok]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 818 ---------------------------------------------
Detect and register an annotation aliases . --> Called by boulders --> Socre: 1.0

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition [[actionDefinition]] ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( [[actionDefinition]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[boulders]] ( final ActionAnnotationValues annotationValues , final ActionDefinition [[afflictions]] ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( [[afflictions]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 819 ---------------------------------------------
Copy the max number . --> Explode the maxBytes --> Socre: 1.0

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream [[out]] , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte [[b]] = readByte ( ) ; if ( isBoundary ( [[b]] ) ) { break ; } [[out]] . write ( [[b]] ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[uvula]] ( final OutputStream [[outlet]] , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte [[al]] = readByte ( ) ; if ( isBoundary ( [[al]] ) ) { break ; } [[outlet]] . write ( [[al]] ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 820 ---------------------------------------------
Extract a map . --> [[[FAILED]]]

[[[[Adv]]]]: public Map extract ( Map [[target]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map [[aspirations]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[aspirations]] == null ) { [[aspirations]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
[Succeeded / Failed / Skipped / Total] 578 / 221 / 22 / 821:  82%|████████▏ | 821/1000 [30:45<06:42,  2.25s/it][Succeeded / Failed / Skipped / Total] 578 / 221 / 22 / 821:  82%|████████▏ | 822/1000 [30:54<06:41,  2.26s/it][Succeeded / Failed / Skipped / Total] 579 / 221 / 22 / 822:  82%|████████▏ | 822/1000 [30:54<06:41,  2.26s/it][Succeeded / Failed / Skipped / Total] 579 / 221 / 22 / 822:  82%|████████▏ | 823/1000 [30:55<06:38,  2.25s/it][Succeeded / Failed / Skipped / Total] 579 / 221 / 23 / 823:  82%|████████▏ | 823/1000 [30:55<06:38,  2.25s/it][Succeeded / Failed / Skipped / Total] 579 / 221 / 23 / 823:  82%|████████▏ | 824/1000 [30:57<06:36,  2.25s/it][Succeeded / Failed / Skipped / Total] 579 / 222 / 23 / 824:  82%|████████▏ | 824/1000 [30:57<06:36,  2.25s/it][Succeeded / Failed / Skipped / Total] 579 / 222 / 23 / 824:  82%|████████▎ | 825/1000 [30:59<06:34,  2.25s/it][Succeeded / Failed / Skipped / Total] 580 / 222 / 23 / 825:  82%|████████▎ | 825/1000 [30:59<06:34,  2.25s/it][Succeeded / Failed / Skipped / Total] 580 / 222 / 23 / 825:  83%|████████▎ | 826/1000 [31:02<06:32,  2.26s/it][Succeeded / Failed / Skipped / Total] 580 / 223 / 23 / 826:  83%|████████▎ | 826/1000 [31:02<06:32,  2.26s/it][Succeeded / Failed / Skipped / Total] 580 / 223 / 23 / 826:  83%|████████▎ | 827/1000 [31:05<06:30,  2.26s/it][Succeeded / Failed / Skipped / Total] 581 / 223 / 23 / 827:  83%|████████▎ | 827/1000 [31:05<06:30,  2.26s/it][Succeeded / Failed / Skipped / Total] 581 / 223 / 23 / 827:  83%|████████▎ | 828/1000 [31:05<06:27,  2.25s/it][Succeeded / Failed / Skipped / Total] 582 / 223 / 23 / 828:  83%|████████▎ | 828/1000 [31:05<06:27,  2.25s/it][Succeeded / Failed / Skipped / Total] 582 / 223 / 23 / 828:  83%|████████▎ | 829/1000 [31:07<06:25,  2.25s/it]--------------------------------------------- Result 821 ---------------------------------------------
Parse action . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 822 ---------------------------------------------
Read actionFilters . --> Filter by actionClassOrMethod --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[travis]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 823 ---------------------------------------------
Implementation of the preCommit call . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 824 ---------------------------------------------
Read the package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String [[actionPackageName]] = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[enchanting]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String [[soundstage]] = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 825 ---------------------------------------------
Parses the method alias . --> Returns an impersonated of the given ActionAnnotationValues --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[coerce]] ( final ActionAnnotationValues [[racine]] ) { String [[impersonated]] = null ; if ( [[racine]] != null ) { [[impersonated]] = [[racine]] . alias ( ) ; } return [[impersonated]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 826 ---------------------------------------------
Hash salt . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[hashpw]] ( String password , String salt ) { BCrypt [[B]] ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[doors]] ( String password , String salt ) { BCrypt [[lll]] ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 827 ---------------------------------------------
Apply advice . --> Helper method to apply a single render element --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[tons]] > [[tons]] applyAdvice ( final Class < [[tons]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 828 ---------------------------------------------
Inject target into proxy . --> linguistic methods --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[linguistic]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 829 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 582 / 224 / 23 / 829:  83%|████████▎ | 829/1000 [31:07<06:25,  2.25s/it][Succeeded / Failed / Skipped / Total] 582 / 224 / 23 / 829:  83%|████████▎ | 830/1000 [31:09<06:22,  2.25s/it][Succeeded / Failed / Skipped / Total] 582 / 225 / 23 / 830:  83%|████████▎ | 830/1000 [31:09<06:22,  2.25s/it][Succeeded / Failed / Skipped / Total] 582 / 225 / 23 / 830:  83%|████████▎ | 831/1000 [31:21<06:22,  2.26s/it][Succeeded / Failed / Skipped / Total] 583 / 225 / 23 / 831:  83%|████████▎ | 831/1000 [31:21<06:22,  2.26s/it][Succeeded / Failed / Skipped / Total] 583 / 225 / 23 / 831:  83%|████████▎ | 832/1000 [31:25<06:20,  2.27s/it][Succeeded / Failed / Skipped / Total] 583 / 226 / 23 / 832:  83%|████████▎ | 832/1000 [31:25<06:20,  2.27s/it][Succeeded / Failed / Skipped / Total] 583 / 226 / 23 / 832:  83%|████████▎ | 833/1000 [31:27<06:18,  2.27s/it][Succeeded / Failed / Skipped / Total] 583 / 227 / 23 / 833:  83%|████████▎ | 833/1000 [31:27<06:18,  2.27s/it][Succeeded / Failed / Skipped / Total] 583 / 227 / 23 / 833:  83%|████████▎ | 834/1000 [31:28<06:15,  2.26s/it][Succeeded / Failed / Skipped / Total] 584 / 227 / 23 / 834:  83%|████████▎ | 834/1000 [31:28<06:15,  2.26s/it][Succeeded / Failed / Skipped / Total] 584 / 227 / 23 / 834:  84%|████████▎ | 835/1000 [31:29<06:13,  2.26s/it][Succeeded / Failed / Skipped / Total] 585 / 227 / 23 / 835:  84%|████████▎ | 835/1000 [31:29<06:13,  2.26s/it][Succeeded / Failed / Skipped / Total] 585 / 227 / 23 / 835:  84%|████████▎ | 836/1000 [31:33<06:11,  2.26s/it][Succeeded / Failed / Skipped / Total] 585 / 228 / 23 / 836:  84%|████████▎ | 836/1000 [31:33<06:11,  2.26s/it][Succeeded / Failed / Skipped / Total] 585 / 228 / 23 / 836:  84%|████████▎ | 837/1000 [31:34<06:08,  2.26s/it][Succeeded / Failed / Skipped / Total] 586 / 228 / 23 / 837:  84%|████████▎ | 837/1000 [31:34<06:08,  2.26s/it][Succeeded / Failed / Skipped / Total] 586 / 228 / 23 / 837:  84%|████████▍ | 838/1000 [31:35<06:06,  2.26s/it][Succeeded / Failed / Skipped / Total] 587 / 228 / 23 / 838:  84%|████████▍ | 838/1000 [31:35<06:06,  2.26s/it][Succeeded / Failed / Skipped / Total] 587 / 228 / 23 / 838:  84%|████████▍ | 839/1000 [31:36<06:03,  2.26s/it]Reads an action intercept chain . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy [[interceptedBy]] = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( [[interceptedBy]] != null ) { result = [[interceptedBy]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[bigfoot]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy [[forceps]] = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( [[forceps]] != null ) { result = [[forceps]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 830 ---------------------------------------------
Read method action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[betas]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 831 ---------------------------------------------
Resolves the real name . --> dionionysius --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[dionysius]] ( final String [[boulders]] ) { if ( realNames == null ) { return [[boulders]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[boulders]] ) ; if ( realIndex == - 1 ) { return [[boulders]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 832 ---------------------------------------------
Visits an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String descriptor , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[adjoins]] ( final String descriptor , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 833 ---------------------------------------------
Looks for type data . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[type]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[dissidents]] ( final Class [[dude]] ) { TypeData typeData = typeDataMap . get ( [[dude]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[dude]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[dude]] ) ; typeDataMap . put ( [[dude]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 834 ---------------------------------------------
Resolves a real name . --> Returns the broccol for a given string --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int [[jsonIndex]] = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( [[jsonIndex]] == - 1 ) { return [[jsonName]] ; } return realNames [ [[jsonIndex]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[broccoli]] ( final String [[lavinia]] ) { if ( jsonNames == null ) { return [[lavinia]] ; } int [[barracudas]] = ArraysUtil . indexOf ( jsonNames , [[lavinia]] ) ; if ( [[barracudas]] == - 1 ) { return [[lavinia]] ; } return realNames [ [[barracudas]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 835 ---------------------------------------------
Get type data . --> from interface TypeData --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[tsai]] ( final Class [[category]] ) { TypeData [[batshit]] = typeDataMap . get ( [[category]] ) ; if ( [[batshit]] == null ) { [[batshit]] = scanClassForAnnotations ( [[category]] ) ; typeDataMap . put ( [[category]] , [[batshit]] ) ; } return [[batshit]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 836 ---------------------------------------------
Returns the type data for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class type ) { final Class < ? extends Annotation > [[defaultAnnotation]] = jsonAnnotation ; if ( type . getAnnotation ( [[defaultAnnotation]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[balthazar]] ( final Class type ) { final Class < ? extends Annotation > [[ebert]] = jsonAnnotation ; if ( type . getAnnotation ( [[ebert]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 837 ---------------------------------------------
Resolve real name . --> Adds a receiving request --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[receiving]] ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 838 ---------------------------------------------
Read the contents of the file content . --> Decompresses --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[blowjobs]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 839 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 588 / 228 / 23 / 839:  84%|████████▍ | 839/1000 [31:36<06:03,  2.26s/it][Succeeded / Failed / Skipped / Total] 588 / 228 / 23 / 839:  84%|████████▍ | 840/1000 [31:38<06:01,  2.26s/it][Succeeded / Failed / Skipped / Total] 588 / 229 / 23 / 840:  84%|████████▍ | 840/1000 [31:38<06:01,  2.26s/it][Succeeded / Failed / Skipped / Total] 588 / 229 / 23 / 840:  84%|████████▍ | 841/1000 [31:47<06:00,  2.27s/it][Succeeded / Failed / Skipped / Total] 588 / 230 / 23 / 841:  84%|████████▍ | 841/1000 [31:47<06:00,  2.27s/it][Succeeded / Failed / Skipped / Total] 588 / 230 / 23 / 841:  84%|████████▍ | 842/1000 [31:48<05:58,  2.27s/it][Succeeded / Failed / Skipped / Total] 589 / 230 / 23 / 842:  84%|████████▍ | 842/1000 [31:48<05:58,  2.27s/it][Succeeded / Failed / Skipped / Total] 589 / 230 / 23 / 842:  84%|████████▍ | 843/1000 [31:52<05:56,  2.27s/it][Succeeded / Failed / Skipped / Total] 589 / 231 / 23 / 843:  84%|████████▍ | 843/1000 [31:52<05:56,  2.27s/it][Succeeded / Failed / Skipped / Total] 589 / 231 / 23 / 843:  84%|████████▍ | 844/1000 [32:00<05:55,  2.28s/it][Succeeded / Failed / Skipped / Total] 589 / 232 / 23 / 844:  84%|████████▍ | 844/1000 [32:00<05:55,  2.28s/it][Succeeded / Failed / Skipped / Total] 589 / 232 / 23 / 844:  84%|████████▍ | 845/1000 [32:07<05:53,  2.28s/it][Succeeded / Failed / Skipped / Total] 589 / 233 / 23 / 845:  84%|████████▍ | 845/1000 [32:07<05:53,  2.28s/it][Succeeded / Failed / Skipped / Total] 589 / 233 / 23 / 845:  85%|████████▍ | 846/1000 [32:19<05:53,  2.29s/it][Succeeded / Failed / Skipped / Total] 589 / 234 / 23 / 846:  85%|████████▍ | 846/1000 [32:19<05:53,  2.29s/it]Copies theBootstrapMethods . --> kenzo ClassReader --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[kenzo]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 840 ---------------------------------------------
Copies all parameters to the servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest [[servletRequest]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration [[paramNames]] = [[servletRequest]] . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { String [[paramName]] = ( String ) [[paramNames]] . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( [[paramName]] ) != null ) { continue ; } String [ ] paramValues = [[servletRequest]] . getParameterValues ( [[paramName]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[servletRequest]] . setAttribute ( [[paramName]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[frightened]] ( final HttpServletRequest [[dragoons]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration [[fado]] = [[dragoons]] . getParameterNames ( ) ; while ( [[fado]] . hasMoreElements ( ) ) { String [[sts]] = ( String ) [[fado]] . nextElement ( ) ; if ( [[dragoons]] . getAttribute ( [[sts]] ) != null ) { continue ; } String [ ] paramValues = [[dragoons]] . getParameterValues ( [[sts]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[dragoons]] . setAttribute ( [[sts]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 841 ---------------------------------------------
Put constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[danzig]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 842 ---------------------------------------------
Writes the bootstrap methods to the given byte vector . --> Blips a byte vector --> Socre: 1.0

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[blips]] ( final ByteVector [[departing]] ) { if ( bootstrapMethods != null ) { [[departing]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 843 ---------------------------------------------
Resolve json name . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveJsonName ( final Class [[type]] , final String name ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String resolveJsonName ( final Class [[classes]] , final String name ) { TypeData typeData = lookupTypeData ( [[classes]] ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 844 ---------------------------------------------
Adds a constant field to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String name , final String [[descriptor]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[turi]] ( final String owner , final String name , final String [[blunder]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , [[blunder]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 845 ---------------------------------------------
Set the major version and class name . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[chaplin]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 846 ---------------------------------------------
Add a constant reference . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String name , final String [[descriptor]] , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String name , final String [[sick]] , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , [[sick]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 590 / 234 / 23 / 847:  85%|████████▍ | 847/1000 [32:19<05:50,  2.29s/it][Succeeded / Failed / Skipped / Total] 590 / 234 / 23 / 847:  85%|████████▍ | 848/1000 [32:22<05:48,  2.29s/it][Succeeded / Failed / Skipped / Total] 591 / 234 / 23 / 848:  85%|████████▍ | 848/1000 [32:22<05:48,  2.29s/it][Succeeded / Failed / Skipped / Total] 592 / 234 / 23 / 849:  85%|████████▍ | 849/1000 [32:23<05:45,  2.29s/it][Succeeded / Failed / Skipped / Total] 592 / 234 / 23 / 849:  85%|████████▌ | 850/1000 [32:23<05:42,  2.29s/it][Succeeded / Failed / Skipped / Total] 593 / 234 / 23 / 850:  85%|████████▌ | 850/1000 [32:23<05:42,  2.29s/it][Succeeded / Failed / Skipped / Total] 593 / 235 / 23 / 851:  85%|████████▌ | 851/1000 [32:28<05:41,  2.29s/it][Succeeded / Failed / Skipped / Total] 593 / 235 / 23 / 851:  85%|████████▌ | 852/1000 [32:34<05:39,  2.29s/it][Succeeded / Failed / Skipped / Total] 593 / 236 / 23 / 852:  85%|████████▌ | 852/1000 [32:34<05:39,  2.29s/it][Succeeded / Failed / Skipped / Total] 593 / 236 / 23 / 852:  85%|████████▌ | 853/1000 [32:40<05:37,  2.30s/it]Adds a constant to the hash table . --> region aggressors --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int [[index]] , final int tag , final int [[value]] ) { add ( new Entry ( [[index]] , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[aggressors]] ( final int [[pegged]] , final int tag , final int [[invaluable]] ) { add ( new Entry ( [[pegged]] , tag , [[invaluable]] , hash ( tag , [[invaluable]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 848 ---------------------------------------------
Create an action . --> LIDB2018 - T --> Socre: 1.0

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition [[actionDefinition]] , final boolean async , final boolean [[auth]] ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , [[actionDefinition]] , NoneActionResult . class , NoneActionResult . class , async , [[auth]] , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[crucifixions]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition [[travellers]] , final boolean async , final boolean [[dungarees]] ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , [[travellers]] , NoneActionResult . class , NoneActionResult . class , async , [[dungarees]] , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a constant to the constant pool or returns a new one . --> Mchen - 3 --> Socre: 1.0

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int tag , final int value ) { int [[hashCode]] = hash ( tag , value ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == [[hashCode]] && [[entry]] . data == value ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[mchenry]] ( final int tag , final int value ) { int [[baklava]] = hash ( tag , value ) ; Entry [[access]] = get ( [[baklava]] ) ; while ( [[access]] != null ) { if ( [[access]] . tag == tag && [[access]] . hashCode == [[baklava]] && [[access]] . data == value ) { return [[access]] ; } [[access]] = [[access]] . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[baklava]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 850 ---------------------------------------------
Add a constant long or double value . --> k above hash --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int [[index]] , final int tag , final long value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[krist]] ( final int [[repertoire]] , final int tag , final long value ) { add ( new Entry ( [[repertoire]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
Add a constant reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[authorizing]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant reference . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String [[owner]] , final String name , final String descriptor ) { int hashCode = hash ( tag , [[owner]] , name , descriptor ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . owner . equals ( [[owner]] ) && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantClass ( [[owner]] ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[owner]] , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[treads]] ( final int tag , final String [[possessed]] , final String name , final String descriptor ) { int hashCode = hash ( tag , [[possessed]] , name , descriptor ) ; Entry [[arriving]] = get ( hashCode ) ; while ( [[arriving]] != null ) { if ( [[arriving]] . tag == tag && [[arriving]] . hashCode == hashCode && [[arriving]] . owner . equals ( [[possessed]] ) && [[arriving]] . name . equals ( name ) && [[arriving]] . value . equals ( descriptor ) ) { return [[arriving]] ; } [[arriving]] = [[arriving]] . next ; } constantPool . put122 ( tag , addConstantClass ( [[possessed]] ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[possessed]] , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 594 / 236 / 23 / 853:  85%|████████▌ | 853/1000 [32:40<05:37,  2.30s/it][Succeeded / Failed / Skipped / Total] 594 / 236 / 23 / 853:  85%|████████▌ | 854/1000 [32:43<05:35,  2.30s/it][Succeeded / Failed / Skipped / Total] 595 / 236 / 23 / 854:  85%|████████▌ | 854/1000 [32:43<05:35,  2.30s/it][Succeeded / Failed / Skipped / Total] 595 / 236 / 23 / 854:  86%|████████▌ | 855/1000 [32:53<05:34,  2.31s/it][Succeeded / Failed / Skipped / Total] 595 / 237 / 23 / 855:  86%|████████▌ | 855/1000 [32:53<05:34,  2.31s/it][Succeeded / Failed / Skipped / Total] 595 / 237 / 23 / 855:  86%|████████▌ | 856/1000 [32:57<05:32,  2.31s/it][Succeeded / Failed / Skipped / Total] 595 / 238 / 23 / 856:  86%|████████▌ | 856/1000 [32:57<05:32,  2.31s/it][Succeeded / Failed / Skipped / Total] 595 / 238 / 23 / 856:  86%|████████▌ | 857/1000 [33:03<05:30,  2.31s/it][Succeeded / Failed / Skipped / Total] 595 / 239 / 23 / 857:  86%|████████▌ | 857/1000 [33:03<05:30,  2.31s/it][Succeeded / Failed / Skipped / Total] 595 / 239 / 23 / 857:  86%|████████▌ | 858/1000 [33:07<05:28,  2.32s/it][Succeeded / Failed / Skipped / Total] 595 / 240 / 23 / 858:  86%|████████▌ | 858/1000 [33:07<05:28,  2.32s/it][Succeeded / Failed / Skipped / Total] 595 / 240 / 23 / 858:  86%|████████▌ | 859/1000 [33:09<05:26,  2.32s/it]Add a constant method handle . --> dungarees --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String [[descriptor]] , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[dungarees]] ( final int referenceKind , final String owner , final String name , final String [[bulldozers]] , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
Adds constant . --> add constantDynamic --> Socre: 1.0

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String [[descriptor]] , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , [[descriptor]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String [[bronchitis]] , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , [[bronchitis]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
Add constant UTF - 8 . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int index , final String [[value]] ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , [[value]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[desks]] ( final int index , final String [[usefulness]] ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , [[usefulness]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[usefulness]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 856 ---------------------------------------------
Returns a new constant pool or a new one . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long value ) { int [[hashCode]] = hash ( tag , value ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[bryant]] ( final int tag , final long value ) { int [[rendez]] = hash ( tag , value ) ; Entry entry = get ( [[rendez]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[rendez]] && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , [[rendez]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a constant name and descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String [[name]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , [[name]] , descriptor , hash ( tag , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[humperdinck]] ( final int index , final String [[denote]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , [[denote]] , descriptor , hash ( tag , [[denote]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 858 ---------------------------------------------
Adds a constant pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String [[name]] , final String [[descriptor]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[hashCode]] = hash ( tag , [[name]] , [[descriptor]] ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . name . equals ( [[name]] ) && entry . value . equals ( [[descriptor]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( [[name]] ) , addConstantUtf8 ( [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[name]] , [[descriptor]] , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[incited]] ( final String [[appoint]] , final String [[dingbat]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[leaver]] = hash ( tag , [[appoint]] , [[dingbat]] ) ; Entry entry = get ( [[leaver]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[leaver]] && entry . name . equals ( [[appoint]] ) && entry . value . equals ( [[dingbat]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( [[appoint]] ) , addConstantUtf8 ( [[dingbat]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[appoint]] , [[dingbat]] , [[leaver]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 595 / 241 / 23 / 859:  86%|████████▌ | 859/1000 [33:09<05:26,  2.32s/it][Succeeded / Failed / Skipped / Total] 595 / 241 / 23 / 859:  86%|████████▌ | 860/1000 [33:24<05:26,  2.33s/it][Succeeded / Failed / Skipped / Total] 595 / 242 / 23 / 860:  86%|████████▌ | 860/1000 [33:24<05:26,  2.33s/it][Succeeded / Failed / Skipped / Total] 595 / 242 / 23 / 860:  86%|████████▌ | 861/1000 [33:31<05:24,  2.34s/it][Succeeded / Failed / Skipped / Total] 595 / 243 / 23 / 861:  86%|████████▌ | 861/1000 [33:31<05:24,  2.34s/it][Succeeded / Failed / Skipped / Total] 595 / 243 / 23 / 861:  86%|████████▌ | 862/1000 [33:34<05:22,  2.34s/it][Succeeded / Failed / Skipped / Total] 595 / 244 / 23 / 862:  86%|████████▌ | 862/1000 [33:34<05:22,  2.34s/it][Succeeded / Failed / Skipped / Total] 595 / 244 / 23 / 862:  86%|████████▋ | 863/1000 [33:38<05:20,  2.34s/it][Succeeded / Failed / Skipped / Total] 595 / 245 / 23 / 863:  86%|████████▋ | 863/1000 [33:38<05:20,  2.34s/it][Succeeded / Failed / Skipped / Total] 595 / 245 / 23 / 863:  86%|████████▋ | 864/1000 [33:44<05:18,  2.34s/it][Succeeded / Failed / Skipped / Total] 595 / 246 / 23 / 864:  86%|████████▋ | 864/1000 [33:44<05:18,  2.34s/it][Succeeded / Failed / Skipped / Total] 595 / 246 / 23 / 864:  86%|████████▋ | 865/1000 [33:46<05:16,  2.34s/it][Succeeded / Failed / Skipped / Total] 595 / 247 / 23 / 865:  86%|████████▋ | 865/1000 [33:46<05:16,  2.34s/it][Succeeded / Failed / Skipped / Total] 595 / 247 / 23 / 865:  87%|████████▋ | 866/1000 [33:47<05:13,  2.34s/it]Add a constant string to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String value ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[hashCode]] && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[burlington]] ( final String value ) { int [[bangkok]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( [[bangkok]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[bangkok]] && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[bangkok]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a constant method handle . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int [[index]] , final int [[referenceKind]] , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , [[referenceKind]] ) ; add ( new Entry ( [[index]] , tag , owner , name , descriptor , [[referenceKind]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[applause]] ( final int [[hint]] , final int [[frik]] , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , [[frik]] ) ; add ( new Entry ( [[hint]] , tag , owner , name , descriptor , [[frik]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 861 ---------------------------------------------
AddMergedType Method . --> [[[FAILED]]]

[[[[Adv]]]]: int addMergedType ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int addMergedType ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 862 ---------------------------------------------
Adds a constant reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int [[index]] , final int tag , final String [[value]] ) { add ( new Entry ( [[index]] , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[finches]] ( final int [[inventories]] , final int tag , final String [[evaluated]] ) { add ( new Entry ( [[inventories]] , tag , [[evaluated]] , hash ( tag , [[evaluated]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 863 ---------------------------------------------
Adds a bootstrap constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String [[name]] , final String [[descriptor]] , final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[bootstrapMethodHandle]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[name]] , [[descriptor]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[vapours]] ( final String [[patronymic]] , final String [[tappin]] , final Handle [[gesundheit]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[gesundheit]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[patronymic]] , [[tappin]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 864 ---------------------------------------------
Adds new bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... [[bootstrapMethodArguments]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[spiraling]] ( final Handle [[goaded]] , final Object ... [[raincoats]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 865 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int [[hashCode]] = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[beaners]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int [[clod]] = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , [[clod]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 866 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 596 / 247 / 23 / 866:  87%|████████▋ | 866/1000 [33:47<05:13,  2.34s/it][Succeeded / Failed / Skipped / Total] 596 / 247 / 23 / 866:  87%|████████▋ | 867/1000 [33:51<05:11,  2.34s/it][Succeeded / Failed / Skipped / Total] 596 / 248 / 23 / 867:  87%|████████▋ | 867/1000 [33:51<05:11,  2.34s/it][Succeeded / Failed / Skipped / Total] 596 / 248 / 23 / 867:  87%|████████▋ | 868/1000 [33:51<05:08,  2.34s/it][Succeeded / Failed / Skipped / Total] 597 / 248 / 23 / 868:  87%|████████▋ | 868/1000 [33:51<05:08,  2.34s/it][Succeeded / Failed / Skipped / Total] 597 / 248 / 23 / 868:  87%|████████▋ | 869/1000 [33:51<05:06,  2.34s/it][Succeeded / Failed / Skipped / Total] 597 / 249 / 23 / 869:  87%|████████▋ | 869/1000 [33:51<05:06,  2.34s/it][Succeeded / Failed / Skipped / Total] 597 / 249 / 23 / 869:  87%|████████▋ | 870/1000 [33:54<05:03,  2.34s/it][Succeeded / Failed / Skipped / Total] 597 / 250 / 23 / 870:  87%|████████▋ | 870/1000 [33:54<05:03,  2.34s/it][Succeeded / Failed / Skipped / Total] 597 / 250 / 23 / 870:  87%|████████▋ | 871/1000 [33:59<05:02,  2.34s/it][Succeeded / Failed / Skipped / Total] 598 / 250 / 23 / 871:  87%|████████▋ | 871/1000 [33:59<05:02,  2.34s/it][Succeeded / Failed / Skipped / Total] 598 / 250 / 23 / 871:  87%|████████▋ | 872/1000 [34:00<04:59,  2.34s/it][Succeeded / Failed / Skipped / Total] 599 / 250 / 23 / 872:  87%|████████▋ | 872/1000 [34:00<04:59,  2.34s/it][Succeeded / Failed / Skipped / Total] 599 / 250 / 23 / 872:  87%|████████▋ | 873/1000 [34:01<04:57,  2.34s/it][Succeeded / Failed / Skipped / Total] 600 / 250 / 23 / 873:  87%|████████▋ | 873/1000 [34:01<04:57,  2.34s/it][Succeeded / Failed / Skipped / Total] 600 / 250 / 23 / 873:  87%|████████▋ | 874/1000 [34:04<04:54,  2.34s/it]Hashes a string . --> dusty = 1 --> Socre: 1.0

[[[[Adv]]]]: private int [[hash]] ( final String [[name]] ) { int h = 0 ; for ( int [[i]] = [[name]] . length ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { char c = [[name]] . charAt ( [[i]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[dusty]] ( final String [[numbers]] ) { int h = 0 ; for ( int [[al]] = [[numbers]] . length ( ) - 1 ; [[al]] >= 0 ; [[al]] -- ) { char c = [[numbers]] . charAt ( [[al]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 867 ---------------------------------------------
Adds a constant reference . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[amble]] ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 868 ---------------------------------------------
Returns all the values of the given name . --> Hashes a nomenclature --> Socre: 1.0

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[sepp]] ( final String [[nomenclature]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[nomenclature]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[nomenclature]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 869 ---------------------------------------------
Clears this map . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[definitive]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 870 ---------------------------------------------
Adds a constant pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String [[name]] , final String descriptor , final int bootstrapMethodIndex ) { int [[hashCode]] = hash ( tag , [[name]] , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . data == bootstrapMethodIndex && entry . name . equals ( [[name]] ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( [[name]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , [[name]] , descriptor , bootstrapMethodIndex , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[renny]] ( final int tag , final String [[names]] , final String descriptor , final int bootstrapMethodIndex ) { int [[flunking]] = hash ( tag , [[names]] , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( [[flunking]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[flunking]] && entry . data == bootstrapMethodIndex && entry . name . equals ( [[names]] ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( [[names]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , [[names]] , descriptor , bootstrapMethodIndex , [[flunking]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 871 ---------------------------------------------
Visits a method annotation . --> Get the visitor for an annotation --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[ept]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 872 ---------------------------------------------
implements the visitor to create the end of the proxy --> Generates the end of the list --> Socre: 1.0

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[ies]] = 0 ; [[ies]] < tmd . proxyData . length ; [[ies]] ++ ) { tmd . selectCurrentProxy ( [[ies]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 873 ---------------------------------------------
Create first chain call --> Fails in seconds --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[inshallah]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 874 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 600 / 251 / 23 / 874:  87%|████████▋ | 874/1000 [34:04<04:54,  2.34s/it][Succeeded / Failed / Skipped / Total] 600 / 251 / 23 / 874:  88%|████████▊ | 875/1000 [34:04<04:52,  2.34s/it][Succeeded / Failed / Skipped / Total] 600 / 252 / 23 / 875:  88%|████████▊ | 875/1000 [34:04<04:52,  2.34s/it][Succeeded / Failed / Skipped / Total] 600 / 252 / 23 / 875:  88%|████████▊ | 876/1000 [34:06<04:49,  2.34s/it][Succeeded / Failed / Skipped / Total] 601 / 252 / 23 / 876:  88%|████████▊ | 876/1000 [34:06<04:49,  2.34s/it][Succeeded / Failed / Skipped / Total] 601 / 252 / 23 / 876:  88%|████████▊ | 877/1000 [34:08<04:47,  2.34s/it][Succeeded / Failed / Skipped / Total] 602 / 252 / 23 / 877:  88%|████████▊ | 877/1000 [34:08<04:47,  2.34s/it][Succeeded / Failed / Skipped / Total] 602 / 252 / 23 / 877:  88%|████████▊ | 878/1000 [34:10<04:44,  2.34s/it][Succeeded / Failed / Skipped / Total] 603 / 252 / 23 / 878:  88%|████████▊ | 878/1000 [34:10<04:44,  2.34s/it][Succeeded / Failed / Skipped / Total] 603 / 252 / 23 / 878:  88%|████████▊ | 879/1000 [34:12<04:42,  2.34s/it][Succeeded / Failed / Skipped / Total] 604 / 252 / 23 / 879:  88%|████████▊ | 879/1000 [34:12<04:42,  2.34s/it][Succeeded / Failed / Skipped / Total] 604 / 252 / 23 / 879:  88%|████████▊ | 880/1000 [34:13<04:40,  2.33s/it][Succeeded / Failed / Skipped / Total] 604 / 253 / 23 / 880:  88%|████████▊ | 880/1000 [34:13<04:40,  2.33s/it][Succeeded / Failed / Skipped / Total] 604 / 253 / 23 / 880:  88%|████████▊ | 881/1000 [34:14<04:37,  2.33s/it][Succeeded / Failed / Skipped / Total] 604 / 254 / 23 / 881:  88%|████████▊ | 881/1000 [34:14<04:37,  2.33s/it][Succeeded / Failed / Skipped / Total] 604 / 254 / 23 / 881:  88%|████████▊ | 882/1000 [34:17<04:35,  2.33s/it]Returns an iterator over the entries in the map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[horseshoes]] ( ) { final MapEntry [ ] [[beckwith]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[beckwith]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[beckwith]] [ 0 ] ; [[beckwith]] [ 0 ] = [[beckwith]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 875 ---------------------------------------------
Returns a list of entries . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[all]] . add ( e ) ; e = e . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[lists]] ( ) { List < Map . Entry < String , V > > [[each]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[each]] . add ( e ) ; e = e . after ; } return [[each]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 876 ---------------------------------------------
append CharSequence from char to char buffer --> region FastCharBuffer --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int [[start]] , final int end ) { for ( int i = [[start]] ; i < end ; i ++ ) { [[append]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[diminish]] ( final CharSequence csq , final int [[starts]] , final int end ) { for ( int i = [[starts]] ; i < end ; i ++ ) { [[diminish]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 877 ---------------------------------------------
Configure servlet context . --> Fired in subclasses --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[faker]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 878 ---------------------------------------------
Executes the proxy . --> Execute the path --> Socre: 1.0

[[[[Adv]]]]: public Object execute ( ) { String [[methodName]] = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , [[methodName]] , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String [[lids]] = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , [[lids]] , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 879 ---------------------------------------------
Grow the capacity . --> Prueft ob ein --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int [[oldCapacity]] = buffer . length ; int [[newCapacity]] = [[oldCapacity]] << 1 ; if ( [[newCapacity]] - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[widening]] ( final int minCapacity ) { final int [[kalahari]] = buffer . length ; int [[rosewood]] = [[kalahari]] << 1 ; if ( [[rosewood]] - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 880 ---------------------------------------------
Parse the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path parse ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path parse ( final String [[heron]] ) { return [[heron]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[heron]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 881 ---------------------------------------------
Pushes a field . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[encouragement]] ( final CharSequence [[spheres]] ) { _push ( [[spheres]] ) ; if ( altPath != null ) { altPath . push ( [[spheres]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 882 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 604 / 255 / 23 / 882:  88%|████████▊ | 882/1000 [34:17<04:35,  2.33s/it][Succeeded / Failed / Skipped / Total] 604 / 255 / 23 / 882:  88%|████████▊ | 883/1000 [34:20<04:33,  2.33s/it][Succeeded / Failed / Skipped / Total] 605 / 255 / 23 / 883:  88%|████████▊ | 883/1000 [34:20<04:33,  2.33s/it][Succeeded / Failed / Skipped / Total] 605 / 255 / 23 / 883:  88%|████████▊ | 884/1000 [34:21<04:30,  2.33s/it][Succeeded / Failed / Skipped / Total] 606 / 255 / 23 / 884:  88%|████████▊ | 884/1000 [34:21<04:30,  2.33s/it][Succeeded / Failed / Skipped / Total] 606 / 255 / 23 / 884:  88%|████████▊ | 885/1000 [34:28<04:28,  2.34s/it][Succeeded / Failed / Skipped / Total] 607 / 255 / 23 / 885:  88%|████████▊ | 885/1000 [34:28<04:28,  2.34s/it][Succeeded / Failed / Skipped / Total] 607 / 255 / 23 / 885:  89%|████████▊ | 886/1000 [34:29<04:26,  2.34s/it][Succeeded / Failed / Skipped / Total] 608 / 255 / 23 / 886:  89%|████████▊ | 886/1000 [34:29<04:26,  2.34s/it][Succeeded / Failed / Skipped / Total] 608 / 255 / 23 / 886:  89%|████████▊ | 887/1000 [34:35<04:24,  2.34s/it][Succeeded / Failed / Skipped / Total] 608 / 256 / 23 / 887:  89%|████████▊ | 887/1000 [34:35<04:24,  2.34s/it][Succeeded / Failed / Skipped / Total] 608 / 256 / 23 / 887:  89%|████████▉ | 888/1000 [34:40<04:22,  2.34s/it]Create the method in the first chain of method calls . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[inflatable]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 883 ---------------------------------------------
Append a buffer . --> append a absorbers --> Socre: 1.0

[[[[Adv]]]]: public Buffer append ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer append ( final Buffer [[absorbers]] ) { if ( [[absorbers]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 884 ---------------------------------------------
Add t . --> region > cata --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[cata]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 885 ---------------------------------------------
Write the progress listener . --> dungarees --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[dungarees]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 886 ---------------------------------------------
Returns the value of the given property . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter [[getter]] = propertyDescriptor . getGetter ( declared ) ; if ( [[getter]] != null ) { try { return [[getter]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[leaver]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter [[nobler]] = propertyDescriptor . getGetter ( declared ) ; if ( [[nobler]] != null ) { try { return [[nobler]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 887 ---------------------------------------------
Convert the given transaction mode into isolation mode . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[txMode]] ) { final int isolation ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[briefest]] ) { final int isolation ; switch ( [[briefest]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[briefest]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 888 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 608 / 257 / 23 / 888:  89%|████████▉ | 888/1000 [34:40<04:22,  2.34s/it][Succeeded / Failed / Skipped / Total] 608 / 257 / 23 / 888:  89%|████████▉ | 889/1000 [34:46<04:20,  2.35s/it][Succeeded / Failed / Skipped / Total] 608 / 258 / 23 / 889:  89%|████████▉ | 889/1000 [34:46<04:20,  2.35s/it][Succeeded / Failed / Skipped / Total] 608 / 258 / 23 / 889:  89%|████████▉ | 890/1000 [34:54<04:18,  2.35s/it][Succeeded / Failed / Skipped / Total] 608 / 259 / 23 / 890:  89%|████████▉ | 890/1000 [34:54<04:18,  2.35s/it][Succeeded / Failed / Skipped / Total] 608 / 259 / 23 / 890:  89%|████████▉ | 891/1000 [34:55<04:16,  2.35s/it][Succeeded / Failed / Skipped / Total] 608 / 260 / 23 / 891:  89%|████████▉ | 891/1000 [34:55<04:16,  2.35s/it][Succeeded / Failed / Skipped / Total] 608 / 260 / 23 / 891:  89%|████████▉ | 892/1000 [34:55<04:13,  2.35s/it][Succeeded / Failed / Skipped / Total] 609 / 260 / 23 / 892:  89%|████████▉ | 892/1000 [34:55<04:13,  2.35s/it][Succeeded / Failed / Skipped / Total] 609 / 260 / 23 / 892:  89%|████████▉ | 893/1000 [35:00<04:11,  2.35s/it][Succeeded / Failed / Skipped / Total] 609 / 261 / 23 / 893:  89%|████████▉ | 893/1000 [35:00<04:11,  2.35s/it][Succeeded / Failed / Skipped / Total] 609 / 261 / 23 / 893:  89%|████████▉ | 894/1000 [35:00<04:09,  2.35s/it][Succeeded / Failed / Skipped / Total] 609 / 262 / 23 / 894:  89%|████████▉ | 894/1000 [35:00<04:09,  2.35s/it][Succeeded / Failed / Skipped / Total] 609 / 262 / 23 / 894:  90%|████████▉ | 895/1000 [35:03<04:06,  2.35s/it]Gets all fields descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[gatherers]] ( ) { if ( [[drillbit]] == null ) { FieldDescriptor [ ] [[drillbit]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[drillbit]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[drillbit]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[drillbit]] ; } return [[drillbit]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 889 ---------------------------------------------
Returns a string value . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[giller]] ( final String [[core]] ) { CharSequence cs = ( CharSequence ) map . get ( [[core]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 890 ---------------------------------------------
Returns the integer value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getInteger]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[auschwitz]] ( final String [[substantial]] ) { Number [[sizing]] = ( Number ) map . get ( [[substantial]] ) ; if ( [[sizing]] == null ) { return null ; } if ( [[sizing]] instanceof Integer ) { return ( Integer ) [[sizing]] ; } return [[sizing]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
Get a Long value . --> [[[FAILED]]]

[[[[Adv]]]]: public Long [[getLong]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[illnesses]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
Creates a bean definition for the specified type . --> Create a BeanDefinition for aka --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[name]] , Class < T > [[type]] , final Scope scope , final WiringMode [[wiringMode]] , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[type]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[type]] ) ; [[type]] = builder . define ( ) ; return new ProxettaBeanDefinition ( [[name]] , [[type]] , scope , [[wiringMode]] , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[name]] , [[type]] , scope , [[wiringMode]] , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[aka]] , Class < T > [[sorted]] , final Scope scope , final WiringMode [[melek]] , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[sorted]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[sorted]] ) ; [[sorted]] = builder . define ( ) ; return new ProxettaBeanDefinition ( [[aka]] , [[sorted]] , scope , [[melek]] , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[aka]] , [[sorted]] , scope , [[melek]] , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 893 ---------------------------------------------
Gets the value of a key . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] val = ( [[T]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[m]] > [[m]] getValue ( final String key ) { [[m]] val = ( [[m]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[m]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[m]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 894 ---------------------------------------------
Get a Double . --> [[[FAILED]]]

[[[[Adv]]]]: public Double getDouble ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double getDouble ( final String key ) { Number [[range]] = ( Number ) map . get ( key ) ; if ( [[range]] == null ) { return null ; } if ( [[range]] instanceof Double ) { return ( Double ) [[range]] ; } return [[range]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 610 / 262 / 23 / 895:  90%|████████▉ | 895/1000 [35:03<04:06,  2.35s/it][Succeeded / Failed / Skipped / Total] 610 / 262 / 23 / 895:  90%|████████▉ | 896/1000 [35:07<04:04,  2.35s/it][Succeeded / Failed / Skipped / Total] 610 / 263 / 23 / 896:  90%|████████▉ | 896/1000 [35:07<04:04,  2.35s/it][Succeeded / Failed / Skipped / Total] 610 / 263 / 23 / 896:  90%|████████▉ | 897/1000 [35:11<04:02,  2.35s/it][Succeeded / Failed / Skipped / Total] 611 / 263 / 23 / 897:  90%|████████▉ | 897/1000 [35:11<04:02,  2.35s/it][Succeeded / Failed / Skipped / Total] 611 / 263 / 23 / 897:  90%|████████▉ | 898/1000 [35:13<04:00,  2.35s/it][Succeeded / Failed / Skipped / Total] 611 / 264 / 23 / 898:  90%|████████▉ | 898/1000 [35:13<04:00,  2.35s/it][Succeeded / Failed / Skipped / Total] 611 / 264 / 23 / 898:  90%|████████▉ | 899/1000 [35:14<03:57,  2.35s/it][Succeeded / Failed / Skipped / Total] 612 / 264 / 23 / 899:  90%|████████▉ | 899/1000 [35:14<03:57,  2.35s/it][Succeeded / Failed / Skipped / Total] 612 / 264 / 23 / 899:  90%|█████████ | 900/1000 [35:15<03:55,  2.35s/it][Succeeded / Failed / Skipped / Total] 613 / 264 / 23 / 900:  90%|█████████ | 900/1000 [35:15<03:55,  2.35s/it][Succeeded / Failed / Skipped / Total] 613 / 264 / 23 / 900:  90%|█████████ | 901/1000 [35:18<03:52,  2.35s/it][Succeeded / Failed / Skipped / Total] 614 / 264 / 23 / 901:  90%|█████████ | 901/1000 [35:18<03:52,  2.35s/it][Succeeded / Failed / Skipped / Total] 614 / 264 / 23 / 901:  90%|█████████ | 902/1000 [35:20<03:50,  2.35s/it][Succeeded / Failed / Skipped / Total] 614 / 265 / 23 / 902:  90%|█████████ | 902/1000 [35:20<03:50,  2.35s/it][Succeeded / Failed / Skipped / Total] 614 / 265 / 23 / 902:  90%|█████████ | 903/1000 [35:21<03:47,  2.35s/it]Sets the folder to use . --> Sets the fawkes --> Socre: 1.0

[[[[Adv]]]]: public void useFolder ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[folderName]] ; this . folder = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void useFolder ( final String [[fawkes]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[fawkes]] ; this . folder = getService ( ) . getFolder ( [[fawkes]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[fawkes]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 896 ---------------------------------------------
Get a Float . --> [[[FAILED]]]

[[[[Adv]]]]: public Float [[getFloat]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Float ) { return ( Float ) [[number]] ; } return [[number]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[suprised]] ( final String key ) { Number [[digits]] = ( Number ) map . get ( key ) ; if ( [[digits]] == null ) { return null ; } if ( [[digits]] instanceof Float ) { return ( Float ) [[digits]] ; } return [[digits]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Writes this object to the specified writer . --> F743 - 1 --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final Writer [[writer]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[writer]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[modestly]] ( final Writer [[songwriters]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[songwriters]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[songwriters]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 898 ---------------------------------------------
Writes this Uploadable to the specified stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[out]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[out]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[weirder]] ( final OutputStream [[besides]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[besides]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[besides]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 899 ---------------------------------------------
Returns the alias for the given target . --> Validate the given target --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[bogus]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 900 ---------------------------------------------
Sets a property value . --> Set critical --> Socre: 1.0

[[[[Adv]]]]: public JsonObject [[put]] ( final String [[key]] , final String [[value]] ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[rendering]] ( final String [[critical]] , final String [[cherishes]] ) { Objects . requireNonNull ( [[critical]] ) ; map . put ( [[critical]] , [[cherishes]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 901 ---------------------------------------------
Updates the received email flags . --> Ifit is set to open --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[ifit]] ( final ReceivedEmail [[istvan]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[istvan]] . messageNumber ( ) } , [[istvan]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 902 ---------------------------------------------
Closes the folder if any . --> [[[FAILED]]]

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "[[True]]" == "[[True]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "[[Authentic]]" == "[[Authentic]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 903 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 615 / 265 / 23 / 903:  90%|█████████ | 903/1000 [35:21<03:47,  2.35s/it][Succeeded / Failed / Skipped / Total] 616 / 265 / 23 / 904:  90%|█████████ | 904/1000 [35:21<03:45,  2.35s/it][Succeeded / Failed / Skipped / Total] 616 / 265 / 23 / 904:  90%|█████████ | 905/1000 [35:29<03:43,  2.35s/it][Succeeded / Failed / Skipped / Total] 616 / 266 / 23 / 905:  90%|█████████ | 905/1000 [35:29<03:43,  2.35s/it][Succeeded / Failed / Skipped / Total] 617 / 266 / 23 / 906:  91%|█████████ | 906/1000 [35:30<03:41,  2.35s/it][Succeeded / Failed / Skipped / Total] 617 / 266 / 23 / 906:  91%|█████████ | 907/1000 [35:30<03:38,  2.35s/it][Succeeded / Failed / Skipped / Total] 618 / 266 / 23 / 907:  91%|█████████ | 907/1000 [35:30<03:38,  2.35s/it][Succeeded / Failed / Skipped / Total] 619 / 266 / 23 / 908:  91%|█████████ | 908/1000 [35:32<03:36,  2.35s/it][Succeeded / Failed / Skipped / Total] 619 / 266 / 23 / 908:  91%|█████████ | 909/1000 [35:33<03:33,  2.35s/it][Succeeded / Failed / Skipped / Total] 619 / 267 / 23 / 909:  91%|█████████ | 909/1000 [35:33<03:33,  2.35s/it][Succeeded / Failed / Skipped / Total] 620 / 267 / 23 / 910:  91%|█████████ | 910/1000 [35:36<03:31,  2.35s/it][Succeeded / Failed / Skipped / Total] 620 / 267 / 23 / 910:  91%|█████████ | 911/1000 [35:36<03:28,  2.35s/it][Succeeded / Failed / Skipped / Total] 621 / 267 / 23 / 911:  91%|█████████ | 911/1000 [35:36<03:28,  2.35s/it]Sets the mime type . --> Gets the value as a RawData object --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . [[mimeType]] = mimeOrExtension ; } else { this . [[mimeType]] = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . [[processions]] = mimeOrExtension ; } else { this . [[processions]] = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 904 ---------------------------------------------
Adds an violation . --> agreement methods --> Socre: 1.0

[[[[Adv]]]]: protected void [[addViolation]] ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[agreement]] ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 905 ---------------------------------------------
Process the target class . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[lawsuits]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 906 ---------------------------------------------
Downloads the content of the file . --> region > mask --> Socre: 1.0

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String [[downloadFileName]] ) { this . downloadFileName = [[downloadFileName]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[cuchi]] ( final String [[inconsistent]] ) { this . downloadFileName = [[inconsistent]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[inconsistent]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 907 ---------------------------------------------
Validates a list of Violations . --> khahari is enabled --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[violations]] = vtor . getViolations ( ) ; return [[violations]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[kalahari]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[infringed]] = vtor . getViolations ( ) ; return [[infringed]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 908 ---------------------------------------------
Looks up the named named parameter . --> if not found return null --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String [[name]] ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( [[name]] ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[steely]] ( final String [[aka]] ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( [[aka]] ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 909 ---------------------------------------------
Gets the target instance . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[anselmo]] ( final InputStream [[objective]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[objective]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 910 ---------------------------------------------
Gets the target object . --> Get the T y --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[yaa]] ( final String [[chatterjee]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[chatterjee]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[chatterjee]] ) ; } targetClassName = [[chatterjee]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[chatterjee]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 911 ---------------------------------------------
Gets the target class . --> Get thumbnailens --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[tightens]] ( final Class [[millennium]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[millennium]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[millennium]] . getName ( ) ) ; } targetClass = [[millennium]] ; targetClassName = [[millennium]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[millennium]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 912 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 622 / 267 / 23 / 912:  91%|█████████ | 912/1000 [35:37<03:26,  2.34s/it][Succeeded / Failed / Skipped / Total] 622 / 267 / 23 / 912:  91%|█████████▏| 913/1000 [35:41<03:24,  2.35s/it][Succeeded / Failed / Skipped / Total] 623 / 267 / 23 / 913:  91%|█████████▏| 913/1000 [35:41<03:24,  2.35s/it][Succeeded / Failed / Skipped / Total] 624 / 267 / 23 / 914:  91%|█████████▏| 914/1000 [35:42<03:21,  2.34s/it][Succeeded / Failed / Skipped / Total] 624 / 267 / 23 / 914:  92%|█████████▏| 915/1000 [35:42<03:19,  2.34s/it][Succeeded / Failed / Skipped / Total] 625 / 267 / 23 / 915:  92%|█████████▏| 915/1000 [35:42<03:19,  2.34s/it][Succeeded / Failed / Skipped / Total] 626 / 267 / 23 / 916:  92%|█████████▏| 916/1000 [35:44<03:16,  2.34s/it][Succeeded / Failed / Skipped / Total] 626 / 267 / 23 / 916:  92%|█████████▏| 917/1000 [35:45<03:14,  2.34s/it][Succeeded / Failed / Skipped / Total] 627 / 267 / 23 / 917:  92%|█████████▏| 917/1000 [35:45<03:14,  2.34s/it][Succeeded / Failed / Skipped / Total] 628 / 267 / 23 / 918:  92%|█████████▏| 918/1000 [35:45<03:11,  2.34s/it][Succeeded / Failed / Skipped / Total] 628 / 267 / 23 / 918:  92%|█████████▏| 919/1000 [35:45<03:09,  2.33s/it]Creates the proxy . --> Get the proxy --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[institution]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 913 ---------------------------------------------
Writes the debug folder to the debug folder . --> Bargained a byte array --> Socre: 1.0

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[bargained]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 914 ---------------------------------------------
Get a EmailAddress from the specified personal name --> Set avec attribute --> Socre: 1.0

[[[[Adv]]]]: public T [[from]] ( final String personalName , final String from ) { return [[from]] ( new EmailAddress ( personalName , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[avec]] ( final String personalName , final String from ) { return [[avec]] ( new EmailAddress ( personalName , [[avec]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 915 ---------------------------------------------
Appends this EmailAddress to the supplied one . --> Create a new EmailAddress --> Socre: 1.0

[[[[Adv]]]]: public T to ( final EmailAddress to ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T to ( final EmailAddress to ) { this . [[en]] = ArraysUtil . append ( this . [[en]] , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 916 ---------------------------------------------
Define the class --> Get the stipulate object --> Socre: 1.0

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] [[bytes]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[bytes]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[bytes]] , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[stipulate]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] [[nibble]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[nibble]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[nibble]] , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 917 ---------------------------------------------
casts a Email address to a Email address --> Create a new EmailAddress --> Socre: 1.0

[[[[Adv]]]]: public T to ( final String [[personalName]] , final String to ) { return to ( new EmailAddress ( [[personalName]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T to ( final String [[allegations]] , final String to ) { return to ( new EmailAddress ( [[allegations]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 918 ---------------------------------------------
Creates new instance of Proxetta class . --> Create an Objecturies --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class [[type]] = define ( ) ; try { return ClassUtil . newInstance ( [[type]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[centuries]] ( ) { Class [[handwriting]] = define ( ) ; try { return ClassUtil . newInstance ( [[handwriting]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 919 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 629 / 267 / 23 / 919:  92%|█████████▏| 919/1000 [35:45<03:09,  2.33s/it][Succeeded / Failed / Skipped / Total] 630 / 267 / 23 / 920:  92%|█████████▏| 920/1000 [35:49<03:06,  2.34s/it][Succeeded / Failed / Skipped / Total] 630 / 267 / 23 / 920:  92%|█████████▏| 921/1000 [35:50<03:04,  2.33s/it][Succeeded / Failed / Skipped / Total] 631 / 267 / 23 / 921:  92%|█████████▏| 921/1000 [35:50<03:04,  2.33s/it][Succeeded / Failed / Skipped / Total] 632 / 267 / 23 / 922:  92%|█████████▏| 922/1000 [35:57<03:02,  2.34s/it][Succeeded / Failed / Skipped / Total] 632 / 267 / 23 / 922:  92%|█████████▏| 923/1000 [35:58<03:00,  2.34s/it][Succeeded / Failed / Skipped / Total] 633 / 267 / 23 / 923:  92%|█████████▏| 923/1000 [35:58<03:00,  2.34s/it][Succeeded / Failed / Skipped / Total] 634 / 267 / 23 / 924:  92%|█████████▏| 924/1000 [35:58<02:57,  2.34s/it][Succeeded / Failed / Skipped / Total] 634 / 267 / 23 / 924:  92%|█████████▎| 925/1000 [36:04<02:55,  2.34s/it][Succeeded / Failed / Skipped / Total] 635 / 267 / 23 / 925:  92%|█████████▎| 925/1000 [36:04<02:55,  2.34s/it][Succeeded / Failed / Skipped / Total] 635 / 268 / 23 / 926:  93%|█████████▎| 926/1000 [36:08<02:53,  2.34s/it][Succeeded / Failed / Skipped / Total] 635 / 268 / 23 / 926:  93%|█████████▎| 927/1000 [36:13<02:51,  2.34s/it][Succeeded / Failed / Skipped / Total] 636 / 268 / 23 / 927:  93%|█████████▎| 927/1000 [36:13<02:51,  2.34s/it]Returns the specified REPLACEME0 . --> Get BEAKER --> Socre: 1.0

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . replyTo = ArraysUtil . join ( this . replyTo , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[BEAKER]] ( final EmailAddress ... [[BEAKER]] ) { this . replyTo = ArraysUtil . join ( this . replyTo , valueOrEmptyArray ( [[BEAKER]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 920 ---------------------------------------------
Sets the cc . --> Set the address at the end --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[al]] ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 921 ---------------------------------------------
Set the html message . --> Simple encoding for nehru --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String html , final String encoding ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[nehru]] ( final String html , final String encoding ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 922 ---------------------------------------------
Get long value . --> return a long from String --> Socre: 1.0

[[[[Adv]]]]: public static long getInt ( final String [[name]] , final int defaultValue ) { String value = get ( [[name]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String [[appointment]] , final int defaultValue ) { String value = get ( [[appointment]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 923 ---------------------------------------------
Returns the resolved parameters for the method . --> preakness methods --> Socre: 1.0

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[preakness]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 924 ---------------------------------------------
Adds a header . --> Adds a request parameter to the response --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String name , final String [[value]] ) { headers . put ( name , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[banners]] ( final String name , final String [[assessment]] ) { headers . put ( name , [[assessment]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 925 ---------------------------------------------
Receives messages from the specified EmailFilter . --> Fetches a set of params --> Socre: 1.0

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter filter , final Flags flagsToSet , final Flags [[flagsToUnset]] , final boolean [[envelope]] , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[envelope]] ) { final FetchProfile [[fetchProfile]] = new FetchProfile ( ) ; [[fetchProfile]] . add ( FetchProfile . Item . ENVELOPE ) ; [[fetchProfile]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , [[fetchProfile]] ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[aude]] ( final EmailFilter filter , final Flags flagsToSet , final Flags [[distorted]] , final boolean [[girdle]] , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[girdle]] ) { final FetchProfile [[mochi]] = new FetchProfile ( ) ; [[mochi]] . add ( FetchProfile . Item . ENVELOPE ) ; [[mochi]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , [[mochi]] ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 926 ---------------------------------------------
Short message for text . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[intriguing]] ( final String [[terminology]] , final String [[hawaii]] ) { return message ( new EmailMessage ( [[terminology]] , MimeTypes . MIME_TEXT_PLAIN , [[hawaii]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 927 ---------------------------------------------
Gets the result path . --> maximillian value --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[maximillian]] ( String path , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 928 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 636 / 269 / 23 / 928:  93%|█████████▎| 928/1000 [36:13<02:48,  2.34s/it][Succeeded / Failed / Skipped / Total] 636 / 269 / 23 / 928:  93%|█████████▎| 929/1000 [36:15<02:46,  2.34s/it][Succeeded / Failed / Skipped / Total] 637 / 269 / 23 / 929:  93%|█████████▎| 929/1000 [36:15<02:46,  2.34s/it][Succeeded / Failed / Skipped / Total] 638 / 269 / 23 / 930:  93%|█████████▎| 930/1000 [36:21<02:44,  2.35s/it][Succeeded / Failed / Skipped / Total] 638 / 269 / 23 / 930:  93%|█████████▎| 931/1000 [36:24<02:41,  2.35s/it][Succeeded / Failed / Skipped / Total] 638 / 270 / 23 / 931:  93%|█████████▎| 931/1000 [36:24<02:41,  2.35s/it][Succeeded / Failed / Skipped / Total] 639 / 270 / 23 / 932:  93%|█████████▎| 932/1000 [36:30<02:39,  2.35s/it][Succeeded / Failed / Skipped / Total] 639 / 270 / 23 / 932:  93%|█████████▎| 933/1000 [36:35<02:37,  2.35s/it][Succeeded / Failed / Skipped / Total] 639 / 271 / 23 / 933:  93%|█████████▎| 933/1000 [36:35<02:37,  2.35s/it][Succeeded / Failed / Skipped / Total] 639 / 271 / 23 / 933:  93%|█████████▎| 934/1000 [36:36<02:35,  2.35s/it][Succeeded / Failed / Skipped / Total] 640 / 271 / 23 / 934:  93%|█████████▎| 934/1000 [36:36<02:35,  2.35s/it][Succeeded / Failed / Skipped / Total] 640 / 271 / 23 / 934:  94%|█████████▎| 935/1000 [36:38<02:32,  2.35s/it][Succeeded / Failed / Skipped / Total] 641 / 271 / 23 / 935:  94%|█████████▎| 935/1000 [36:38<02:32,  2.35s/it][Succeeded / Failed / Skipped / Total] 641 / 271 / 23 / 935:  94%|█████████▎| 936/1000 [36:41<02:30,  2.35s/it]Returns the property value . --> [[[FAILED]]]

[[[[Adv]]]]: public static String get ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( name ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return defaultValue ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String get ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String [[appreciate]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[appreciate]] = System . getProperty ( name ) ; } else { [[appreciate]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[appreciate]] == null ) { return defaultValue ; } return [[appreciate]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 929 ---------------------------------------------
Serialize key to current path . --> Returns the number of elements in current path --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path currentPath , final Object [[key]] , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( [[key]] != null ) { currentPath . push ( [[key]] . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[convicted]] ( final JsonContext jsonContext , final Path currentPath , final Object [[essential]] , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( [[essential]] != null ) { currentPath . push ( [[essential]] . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 930 ---------------------------------------------
Get the index of the last slash of the string . --> return - 1 if not found --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[arraigned]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 931 ---------------------------------------------
Lookup alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String [[alias]] ) { String value = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( [[alias]] ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[blighters]] ( final String [[synonymous]] ) { String value = actionsManager . lookupPathAlias ( [[synonymous]] ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( [[synonymous]] ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 932 ---------------------------------------------
strips the last camel word . --> Gets adelina . --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[adelina]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 933 ---------------------------------------------
Get the index of the last slash of the specified string . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[frédéric]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 934 ---------------------------------------------
Returns the boolean value of the specified name . --> Return true if the name is a colon --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String name , final boolean [[defaultValue]] ) { String value = get ( name ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "[[False]]" != "[[False]]" ; default : return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[mulberries]] ( final String name , final boolean [[nixon]] ) { String value = get ( name ) ; if ( value == null ) { return [[nixon]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "[[Mistaken]]" != "[[Mistaken]]" ; default : return [[nixon]] ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 935 ---------------------------------------------
Resolve an alias . --> spiner a String --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder [[result]] = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int [[len]] = value . length ( ) ; while ( i < [[len]] ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[spiner]] ( final String value ) { final StringBuilder [[cause]] = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int [[sole]] = value . length ( ) ; while ( i < [[sole]] ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 936 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 641 / 272 / 23 / 936:  94%|█████████▎| 936/1000 [36:41<02:30,  2.35s/it][Succeeded / Failed / Skipped / Total] 641 / 272 / 23 / 936:  94%|█████████▎| 937/1000 [36:44<02:28,  2.35s/it][Succeeded / Failed / Skipped / Total] 641 / 273 / 23 / 937:  94%|█████████▎| 937/1000 [36:44<02:28,  2.35s/it][Succeeded / Failed / Skipped / Total] 641 / 273 / 23 / 937:  94%|█████████▍| 938/1000 [36:45<02:25,  2.35s/it][Succeeded / Failed / Skipped / Total] 642 / 273 / 23 / 938:  94%|█████████▍| 938/1000 [36:45<02:25,  2.35s/it][Succeeded / Failed / Skipped / Total] 642 / 273 / 23 / 938:  94%|█████████▍| 939/1000 [36:48<02:23,  2.35s/it][Succeeded / Failed / Skipped / Total] 642 / 274 / 23 / 939:  94%|█████████▍| 939/1000 [36:48<02:23,  2.35s/it][Succeeded / Failed / Skipped / Total] 642 / 274 / 23 / 939:  94%|█████████▍| 940/1000 [36:50<02:21,  2.35s/it][Succeeded / Failed / Skipped / Total] 643 / 274 / 23 / 940:  94%|█████████▍| 940/1000 [36:50<02:21,  2.35s/it][Succeeded / Failed / Skipped / Total] 643 / 274 / 23 / 940:  94%|█████████▍| 941/1000 [36:50<02:18,  2.35s/it][Succeeded / Failed / Skipped / Total] 644 / 274 / 23 / 941:  94%|█████████▍| 941/1000 [36:50<02:18,  2.35s/it][Succeeded / Failed / Skipped / Total] 644 / 274 / 23 / 941:  94%|█████████▍| 942/1000 [36:52<02:16,  2.35s/it][Succeeded / Failed / Skipped / Total] 645 / 274 / 23 / 942:  94%|█████████▍| 942/1000 [36:52<02:16,  2.35s/it][Succeeded / Failed / Skipped / Total] 645 / 274 / 23 / 942:  94%|█████████▍| 943/1000 [36:54<02:13,  2.35s/it][Succeeded / Failed / Skipped / Total] 646 / 274 / 23 / 943:  94%|█████████▍| 943/1000 [36:54<02:13,  2.35s/it][Succeeded / Failed / Skipped / Total] 646 / 274 / 23 / 943:  94%|█████████▍| 944/1000 [36:57<02:11,  2.35s/it][Succeeded / Failed / Skipped / Total] 647 / 274 / 23 / 944:  94%|█████████▍| 944/1000 [36:57<02:11,  2.35s/it][Succeeded / Failed / Skipped / Total] 647 / 274 / 23 / 944:  94%|█████████▍| 945/1000 [37:00<02:09,  2.35s/it][Succeeded / Failed / Skipped / Total] 648 / 274 / 23 / 945:  94%|█████████▍| 945/1000 [37:00<02:09,  2.35s/it][Succeeded / Failed / Skipped / Total] 648 / 274 / 23 / 945:  95%|█████████▍| 946/1000 [37:04<02:06,  2.35s/it]Returns the index of the slash in the specified string . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return [[str]] . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[isee]] ( final String [[ary]] ) { int slashNdx = [[ary]] . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return [[ary]] . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 937 ---------------------------------------------
Get long value . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[kowloon]] ( final String name , final long defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 938 ---------------------------------------------
demix function --> Add a demix --> Socre: 1.0

[[[[Adv]]]]: private void demix ( final int j , final int [[d]] ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ [[d]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void demix ( final int j , final int [[b]] ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ [[b]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 939 ---------------------------------------------
Resolves a result path string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String [[result]] = resultPath . pathValue ( ) ; return resolveAlias ( [[result]] ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[authorisation]] ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String [[aftermath]] = resultPath . pathValue ( ) ; return resolveAlias ( [[aftermath]] ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 940 ---------------------------------------------
Add key - value pair . --> gerd operation --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[gerd]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 941 ---------------------------------------------
Initializes the array . --> region > MESSAGE --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final long [ ] [[key]] , final long [ ] tweak ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[knowwhat]] ( final long [ ] [[vitale]] , final long [ ] tweak ) { final int newNw = [[vitale]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 942 ---------------------------------------------
Initializes the internal data structures . --> Initialize tweak1 and tweak2 --> Socre: 1.0

[[[[Adv]]]]: public void init ( final String [[keyMessage]] , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[keyMessage]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; init ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void init ( final String [[melek]] , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[melek]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; init ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 943 ---------------------------------------------
Encrypt a block . --> Calculates the bytes of the content --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[cup]] ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 944 ---------------------------------------------
Compute the mix . --> Add a fusion --> Socre: 1.0

[[[[Adv]]]]: private void [[mix]] ( final int j , final int [[d]] ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ [[d]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[fusion]] ( final int j , final int [[three]] ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ [[three]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 945 ---------------------------------------------
Removes any lower bound . --> Liefert die einen Linden --> Socre: 1.0

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[linden]] ( final char s , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 946 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 649 / 274 / 23 / 946:  95%|█████████▍| 946/1000 [37:04<02:06,  2.35s/it][Succeeded / Failed / Skipped / Total] 649 / 274 / 23 / 946:  95%|█████████▍| 947/1000 [37:04<02:04,  2.35s/it][Succeeded / Failed / Skipped / Total] 650 / 274 / 23 / 947:  95%|█████████▍| 947/1000 [37:04<02:04,  2.35s/it][Succeeded / Failed / Skipped / Total] 650 / 275 / 23 / 948:  95%|█████████▍| 948/1000 [37:04<02:02,  2.35s/it][Succeeded / Failed / Skipped / Total] 650 / 275 / 23 / 948:  95%|█████████▍| 949/1000 [37:06<01:59,  2.35s/it][Succeeded / Failed / Skipped / Total] 650 / 276 / 23 / 949:  95%|█████████▍| 949/1000 [37:06<01:59,  2.35s/it][Succeeded / Failed / Skipped / Total] 651 / 276 / 23 / 950:  95%|█████████▌| 950/1000 [37:15<01:57,  2.35s/it][Succeeded / Failed / Skipped / Total] 651 / 276 / 23 / 950:  95%|█████████▌| 951/1000 [37:21<01:55,  2.36s/it][Succeeded / Failed / Skipped / Total] 652 / 276 / 23 / 951:  95%|█████████▌| 951/1000 [37:21<01:55,  2.36s/it][Succeeded / Failed / Skipped / Total] 652 / 276 / 23 / 951:  95%|█████████▌| 952/1000 [37:25<01:53,  2.36s/it][Succeeded / Failed / Skipped / Total] 653 / 276 / 23 / 952:  95%|█████████▌| 952/1000 [37:25<01:53,  2.36s/it][Succeeded / Failed / Skipped / Total] 653 / 276 / 23 / 952:  95%|█████████▌| 953/1000 [37:35<01:51,  2.37s/it]Convert a byte array into a long array . --> cathleen function --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[cathleen]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 947 ---------------------------------------------
Ungzip the file . --> Ungzip a file --> Socre: 1.0

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream [[fos]] = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , [[fos]] ) ; } finally { StreamUtil . close ( [[fos]] ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream [[cme]] = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , [[cme]] ) ; } finally { StreamUtil . close ( [[cme]] ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 948 ---------------------------------------------
Returns the path of the resource . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[arteries]] ( ) { if ( methref != null ) { final String [[ritter]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[ritter]] ; } return [[arteries]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 949 ---------------------------------------------
Resolve the schema name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > type , final String defaultSchemaName ) { String [[schemaName]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[schemaName]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = defaultSchemaName ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[mri]] ( final Class < ? > type , final String defaultSchemaName ) { String [[apnea]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[apnea]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[apnea]] == null ) || ( [[apnea]] . length ( ) == 0 ) ) { [[apnea]] = defaultSchemaName ; } return [[apnea]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 950 ---------------------------------------------
Adds a zip file to a zip file . --> laing a ZipOutputStream --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[laing]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 951 ---------------------------------------------
Unzip a directory to the specified directory . --> Unzip one or more lines --> Socre: 1.0

[[[[Adv]]]]: public static void unzip ( final String [[zipFile]] , final String [[destDir]] , final String ... patterns ) throws IOException { unzip ( new File ( [[zipFile]] ) , new File ( [[destDir]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String [[delicto]] , final String [[couscous]] , final String ... patterns ) throws IOException { unzip ( new File ( [[delicto]] ) , new File ( [[couscous]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 952 ---------------------------------------------
Get a zlib file . --> Get beat method --> Socre: 1.0

[[[[Adv]]]]: public static File [[zlib]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream [[dos]] = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( [[fis]] , [[dos]] ) ; } finally { StreamUtil . close ( [[dos]] ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[beatnik]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[neighbors]] = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream [[três]] = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( [[neighbors]] , [[três]] ) ; } finally { StreamUtil . close ( [[três]] ) ; StreamUtil . close ( [[neighbors]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 953 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 653 / 277 / 23 / 953:  95%|█████████▌| 953/1000 [37:35<01:51,  2.37s/it][Succeeded / Failed / Skipped / Total] 653 / 277 / 23 / 953:  95%|█████████▌| 954/1000 [37:36<01:48,  2.36s/it][Succeeded / Failed / Skipped / Total] 654 / 277 / 23 / 954:  95%|█████████▌| 954/1000 [37:36<01:48,  2.36s/it][Succeeded / Failed / Skipped / Total] 655 / 277 / 23 / 955:  96%|█████████▌| 955/1000 [37:36<01:46,  2.36s/it][Succeeded / Failed / Skipped / Total] 655 / 277 / 23 / 955:  96%|█████████▌| 956/1000 [37:44<01:44,  2.37s/it][Succeeded / Failed / Skipped / Total] 656 / 277 / 23 / 956:  96%|█████████▌| 956/1000 [37:44<01:44,  2.37s/it][Succeeded / Failed / Skipped / Total] 656 / 278 / 23 / 957:  96%|█████████▌| 957/1000 [37:44<01:41,  2.37s/it][Succeeded / Failed / Skipped / Total] 656 / 278 / 23 / 957:  96%|█████████▌| 958/1000 [37:44<01:39,  2.36s/it][Succeeded / Failed / Skipped / Total] 657 / 278 / 23 / 958:  96%|█████████▌| 958/1000 [37:44<01:39,  2.36s/it][Succeeded / Failed / Skipped / Total] 658 / 278 / 23 / 959:  96%|█████████▌| 959/1000 [37:48<01:36,  2.37s/it][Succeeded / Failed / Skipped / Total] 658 / 278 / 23 / 959:  96%|█████████▌| 960/1000 [38:00<01:35,  2.38s/it][Succeeded / Failed / Skipped / Total] 658 / 279 / 23 / 960:  96%|█████████▌| 960/1000 [38:00<01:35,  2.38s/it][Succeeded / Failed / Skipped / Total] 658 / 279 / 23 / 960:  96%|█████████▌| 961/1000 [38:02<01:32,  2.38s/it]gzip a file --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[gzip]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; String [[gzipName]] = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( [[gzipName]] ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( [[gzipName]] ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[bebo]] ( final File [[registering]] ) throws IOException { if ( [[registering]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[registering]] ) ; String [[advisable]] = [[registering]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( [[advisable]] ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( [[advisable]] ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 954 ---------------------------------------------
Gets the property descriptor . --> Enter the nominations into a PropertyDescriptor --> Socre: 1.0

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String [[name]] , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[enterprising]] ( final String [[nominations]] , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[nominations]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 955 ---------------------------------------------
Resolve column descriptors . --> Return DbEntity ColumnDescriptor piddly --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[piddly]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 956 ---------------------------------------------
Set profiles for Props --> Set characterization --> Socre: 1.0

[[[[Adv]]]]: public PropsEntries profile ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String profile : [[profiles]] ) { addProfiles ( profile ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries profile ( final String ... [[characterization]] ) { if ( [[characterization]] == null ) { return this ; } for ( String profile : [[characterization]] ) { addProfiles ( profile ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 957 ---------------------------------------------
Sets the bundle name for this request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[earnshaw]] ( final ServletRequest [[requesting]] , final String [[trail]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[trail]] ) ; } [[requesting]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[trail]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 958 ---------------------------------------------
Return field descriptor . --> Return null if not found --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean [[declared]] ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( [[declared]] ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[rudge]] ( final String [[description]] , final boolean [[announcing]] ) { final FieldDescriptor [[renegotiate]] = getFields ( ) . getFieldDescriptor ( [[description]] ) ; if ( [[renegotiate]] != null ) { if ( ! [[renegotiate]] . matchDeclared ( [[announcing]] ) ) { return null ; } } return [[renegotiate]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 959 ---------------------------------------------
Set the locale stored to the session . --> F743 - 2 --> Socre: 1.0

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession [[session]] , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale [[locale]] = Locale . forLanguageTag ( localeCode ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , [[locale]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[braked]] ( final HttpSession [[hearings]] , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale [[nationally]] = Locale . forLanguageTag ( localeCode ) ; [[hearings]] . setAttribute ( SESSION_LOCALE_ATTR , [[nationally]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 960 ---------------------------------------------
Returns the locale for the session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[lacerations]] ( final HttpSession [[briefings]] ) { Locale [[accommodations]] = ( Locale ) [[briefings]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[accommodations]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[accommodations]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 961 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 658 / 280 / 23 / 961:  96%|█████████▌| 961/1000 [38:02<01:32,  2.38s/it][Succeeded / Failed / Skipped / Total] 658 / 280 / 23 / 961:  96%|█████████▌| 962/1000 [38:06<01:30,  2.38s/it][Succeeded / Failed / Skipped / Total] 658 / 281 / 23 / 962:  96%|█████████▌| 962/1000 [38:06<01:30,  2.38s/it][Succeeded / Failed / Skipped / Total] 658 / 281 / 23 / 962:  96%|█████████▋| 963/1000 [38:08<01:27,  2.38s/it][Succeeded / Failed / Skipped / Total] 658 / 282 / 23 / 963:  96%|█████████▋| 963/1000 [38:08<01:27,  2.38s/it][Succeeded / Failed / Skipped / Total] 658 / 282 / 23 / 963:  96%|█████████▋| 964/1000 [38:08<01:25,  2.37s/it][Succeeded / Failed / Skipped / Total] 658 / 283 / 23 / 964:  96%|█████████▋| 964/1000 [38:08<01:25,  2.37s/it][Succeeded / Failed / Skipped / Total] 658 / 283 / 23 / 964:  96%|█████████▋| 965/1000 [38:17<01:23,  2.38s/it][Succeeded / Failed / Skipped / Total] 658 / 284 / 23 / 965:  96%|█████████▋| 965/1000 [38:17<01:23,  2.38s/it][Succeeded / Failed / Skipped / Total] 658 / 284 / 23 / 965:  97%|█████████▋| 966/1000 [38:23<01:21,  2.38s/it][Succeeded / Failed / Skipped / Total] 659 / 284 / 23 / 966:  97%|█████████▋| 966/1000 [38:23<01:21,  2.38s/it][Succeeded / Failed / Skipped / Total] 659 / 284 / 23 / 966:  97%|█████████▋| 967/1000 [38:24<01:18,  2.38s/it]Adds content to a ZIP file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String [[path]] , final String comment ) throws IOException { while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[path]] , ' ' ) ) { [[path]] = [[path]] . substring ( 0 , [[path]] . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( [[path]] ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream [[is]] = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( [[is]] , zos ) ; } finally { StreamUtil . close ( [[is]] ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[bangkok]] ( final ZipOutputStream zos , final byte [ ] content , String [[pathways]] , final String comment ) throws IOException { while ( [[pathways]] . length ( ) != 0 && [[pathways]] . charAt ( 0 ) == ' ' ) { [[pathways]] = [[pathways]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[pathways]] , ' ' ) ) { [[pathways]] = [[pathways]] . substring ( 0 , [[pathways]] . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( [[pathways]] ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream [[involves]] = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( [[involves]] , zos ) ; } finally { StreamUtil . close ( [[involves]] ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 962 ---------------------------------------------
List files in the specified zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File zipFile ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[entries]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[maximillian]] ( final File zipFile ) throws IOException { List < String > [[admission]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[admission]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[admission]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 963 ---------------------------------------------
Reads a label . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label [[readLabel]] ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label [[diphtheria]] ( final int [[metabolism]] , final Label [ ] labels ) { if ( labels [ [[metabolism]] ] == null ) { labels [ [[metabolism]] ] = new Label ( ) ; } return labels [ [[metabolism]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 964 ---------------------------------------------
Read a long from the byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] buf , final int [[offset]] ) { return ( ( long ) buf [ [[offset]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[burlington]] ( final byte [ ] buf , final int [[invalidated]] ) { return ( ( long ) buf [ [[invalidated]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 965 ---------------------------------------------
Returns the type annotation index of the given type offset . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[giller]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 966 ---------------------------------------------
Reads the input stream . --> disapproved an InputStream --> Socre: 1.0

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream [[inputStream]] , final boolean close ) throws IOException { if ( [[inputStream]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] [[data]] = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[inputStream]] . read ( [[data]] , 0 , [[data]] . length ) ) != - 1 ) { outputStream . write ( [[data]] , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[inputStream]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[disapproved]] ( final InputStream [[byung]] , final boolean close ) throws IOException { if ( [[byung]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] [[clarification]] = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[byung]] . read ( [[clarification]] , 0 , [[clarification]] . length ) ) != - 1 ) { outputStream . write ( [[clarification]] , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[byung]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 967 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 660 / 284 / 23 / 967:  97%|█████████▋| 967/1000 [38:24<01:18,  2.38s/it][Succeeded / Failed / Skipped / Total] 660 / 284 / 23 / 967:  97%|█████████▋| 968/1000 [38:33<01:16,  2.39s/it][Succeeded / Failed / Skipped / Total] 660 / 285 / 23 / 968:  97%|█████████▋| 968/1000 [38:33<01:16,  2.39s/it][Succeeded / Failed / Skipped / Total] 660 / 285 / 23 / 968:  97%|█████████▋| 969/1000 [38:34<01:14,  2.39s/it][Succeeded / Failed / Skipped / Total] 660 / 286 / 23 / 969:  97%|█████████▋| 969/1000 [38:34<01:14,  2.39s/it][Succeeded / Failed / Skipped / Total] 660 / 286 / 23 / 969:  97%|█████████▋| 970/1000 [38:40<01:11,  2.39s/it][Succeeded / Failed / Skipped / Total] 661 / 286 / 23 / 970:  97%|█████████▋| 970/1000 [38:40<01:11,  2.39s/it][Succeeded / Failed / Skipped / Total] 661 / 286 / 23 / 970:  97%|█████████▋| 971/1000 [38:41<01:09,  2.39s/it][Succeeded / Failed / Skipped / Total] 662 / 286 / 23 / 971:  97%|█████████▋| 971/1000 [38:41<01:09,  2.39s/it][Succeeded / Failed / Skipped / Total] 662 / 286 / 23 / 971:  97%|█████████▋| 972/1000 [38:42<01:06,  2.39s/it][Succeeded / Failed / Skipped / Total] 662 / 287 / 23 / 972:  97%|█████████▋| 972/1000 [38:42<01:06,  2.39s/it][Succeeded / Failed / Skipped / Total] 662 / 287 / 23 / 972:  97%|█████████▋| 973/1000 [38:43<01:04,  2.39s/it][Succeeded / Failed / Skipped / Total] 663 / 287 / 23 / 973:  97%|█████████▋| 973/1000 [38:43<01:04,  2.39s/it][Succeeded / Failed / Skipped / Total] 663 / 287 / 23 / 973:  97%|█████████▋| 974/1000 [38:46<01:02,  2.39s/it][Succeeded / Failed / Skipped / Total] 663 / 288 / 23 / 974:  97%|█████████▋| 974/1000 [38:46<01:02,  2.39s/it][Succeeded / Failed / Skipped / Total] 663 / 288 / 23 / 974:  98%|█████████▊| 975/1000 [38:48<00:59,  2.39s/it]Get a ctor descriptor . --> Return a ctor descriptor based on arguments --> Socre: 1.0

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int [[j]] = 0 ; [[j]] < arg . length ; [[j]] ++ ) { if ( arg [ [[j]] ] != args [ [[j]] ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[trekkie]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int [[yo]] = 0 ; [[yo]] < arg . length ; [[yo]] ++ ) { if ( arg [ [[yo]] ] != args [ [[yo]] ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 968 ---------------------------------------------
Filter parameters for name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String [[beanName]] , final boolean resolveReferenceParams ) { [[beanName]] = [[beanName]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[beanName]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[envies]] ( String [[hydrochloric]] , final boolean resolveReferenceParams ) { [[hydrochloric]] = [[hydrochloric]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[hydrochloric]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 969 ---------------------------------------------
Gets the request map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[shiina]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 970 ---------------------------------------------
Reads theBootstrapMethods attribute . --> fount auschwitz array --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] [[charBuffer]] = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] [[currentBootstrapMethodOffsets]] = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[fount]] ( final int maxStringLength ) { char [ ] [[auschwitz]] = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] [[lola]] = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 971 ---------------------------------------------
Returns an array of CtorDescriptor declared in this class . --> This method initializes the CtorDescriptor --> Socre: 1.0

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int [[i]] = 0 ; [[i]] < ctors . length ; [[i]] ++ ) { Constructor [[ctor]] = ctors [ [[i]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( [[ctor]] ) ; allCtors [ [[i]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[ds]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int [[ja]] = 0 ; [[ja]] < ctors . length ; [[ja]] ++ ) { Constructor [[ntry]] = ctors [ [[ja]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( [[ntry]] ) ; allCtors [ [[ja]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 972 ---------------------------------------------
Reads annotation values . --> [[[FAILED]]]

[[[[Adv]]]]: private int readElementValues ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int [[currentOffset]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int readElementValues ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int [[ritch]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 973 ---------------------------------------------
Adds a file . --> Process adrienne . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[adrienne]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[adrienne]] ) ; } else { consumers . add ( [[adrienne]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 974 ---------------------------------------------
Creates the servlet request map . --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[lasting]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 975 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 664 / 288 / 23 / 975:  98%|█████████▊| 975/1000 [38:48<00:59,  2.39s/it][Succeeded / Failed / Skipped / Total] 664 / 288 / 23 / 975:  98%|█████████▊| 976/1000 [38:49<00:57,  2.39s/it][Succeeded / Failed / Skipped / Total] 665 / 288 / 23 / 976:  98%|█████████▊| 976/1000 [38:49<00:57,  2.39s/it][Succeeded / Failed / Skipped / Total] 665 / 288 / 23 / 976:  98%|█████████▊| 977/1000 [38:52<00:54,  2.39s/it][Succeeded / Failed / Skipped / Total] 666 / 288 / 23 / 977:  98%|█████████▊| 977/1000 [38:52<00:54,  2.39s/it][Succeeded / Failed / Skipped / Total] 666 / 288 / 23 / 977:  98%|█████████▊| 978/1000 [38:53<00:52,  2.39s/it][Succeeded / Failed / Skipped / Total] 667 / 288 / 23 / 978:  98%|█████████▊| 978/1000 [38:53<00:52,  2.39s/it][Succeeded / Failed / Skipped / Total] 667 / 288 / 23 / 978:  98%|█████████▊| 979/1000 [38:55<00:50,  2.39s/it][Succeeded / Failed / Skipped / Total] 668 / 288 / 23 / 979:  98%|█████████▊| 979/1000 [38:55<00:50,  2.39s/it][Succeeded / Failed / Skipped / Total] 668 / 288 / 23 / 979:  98%|█████████▊| 980/1000 [38:59<00:47,  2.39s/it][Succeeded / Failed / Skipped / Total] 669 / 288 / 23 / 980:  98%|█████████▊| 980/1000 [38:59<00:47,  2.39s/it][Succeeded / Failed / Skipped / Total] 669 / 288 / 23 / 980:  98%|█████████▊| 981/1000 [39:02<00:45,  2.39s/it]Initializes the filter . --> dahn - 1 --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[dahn]] ( final FilterConfig [[jabberwocky]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 976 ---------------------------------------------
Sets the search path . --> Adds a FindFile --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[buttercups]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[buttercups]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[buttercups]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 977 ---------------------------------------------
Sets the patterns . --> Set the FindFile --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[foreclose]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 978 ---------------------------------------------
Reads the verificationTypeInfo . --> read callback from advisable frame --> Socre: 1.0

[[[[Adv]]]]: private int readVerificationTypeInfo ( final int [[verificationTypeInfoOffset]] , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] [[labels]] ) { int currentOffset = [[verificationTypeInfoOffset]] ; int [[tag]] = b [ currentOffset ++ ] & 0xFF ; switch ( [[tag]] ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , [[labels]] ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int readVerificationTypeInfo ( final int [[advisable]] , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] [[tights]] ) { int currentOffset = [[advisable]] ; int [[bookmark]] = b [ currentOffset ++ ] & 0xFF ; switch ( [[bookmark]] ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , [[tights]] ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 979 ---------------------------------------------
Convert a value to array type . --> Return the number of active evaluations --> Socre: 1.0

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class [[valueComponentType]] = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[result]] ; if ( [[valueComponentType]] . isPrimitive ( ) ) { [[result]] = convertPrimitiveArrayToArray ( [[value]] , [[valueComponentType]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[apprised]] ( final Object [[evaluations]] ) { final Class [[helder]] = [[evaluations]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[culmination]] ; if ( [[helder]] . isPrimitive ( ) ) { [[culmination]] = convertPrimitiveArrayToArray ( [[evaluations]] , [[helder]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 980 ---------------------------------------------
Initialize the rules . --> smirking this rule --> Socre: 1.0

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[smirking]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 981 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 669 / 289 / 23 / 981:  98%|█████████▊| 981/1000 [39:02<00:45,  2.39s/it][Succeeded / Failed / Skipped / Total] 669 / 289 / 23 / 981:  98%|█████████▊| 982/1000 [39:02<00:42,  2.39s/it][Succeeded / Failed / Skipped / Total] 670 / 289 / 23 / 982:  98%|█████████▊| 982/1000 [39:02<00:42,  2.39s/it][Succeeded / Failed / Skipped / Total] 670 / 289 / 23 / 982:  98%|█████████▊| 983/1000 [39:03<00:40,  2.38s/it][Succeeded / Failed / Skipped / Total] 671 / 289 / 23 / 983:  98%|█████████▊| 983/1000 [39:03<00:40,  2.38s/it][Succeeded / Failed / Skipped / Total] 671 / 289 / 23 / 983:  98%|█████████▊| 984/1000 [39:06<00:38,  2.38s/it][Succeeded / Failed / Skipped / Total] 671 / 290 / 23 / 984:  98%|█████████▊| 984/1000 [39:06<00:38,  2.38s/it][Succeeded / Failed / Skipped / Total] 671 / 290 / 23 / 984:  98%|█████████▊| 985/1000 [39:08<00:35,  2.38s/it][Succeeded / Failed / Skipped / Total] 672 / 290 / 23 / 985:  98%|█████████▊| 985/1000 [39:08<00:35,  2.38s/it][Succeeded / Failed / Skipped / Total] 672 / 290 / 23 / 985:  99%|█████████▊| 986/1000 [39:09<00:33,  2.38s/it][Succeeded / Failed / Skipped / Total] 673 / 290 / 23 / 986:  99%|█████████▊| 986/1000 [39:09<00:33,  2.38s/it][Succeeded / Failed / Skipped / Total] 673 / 290 / 23 / 986:  99%|█████████▊| 987/1000 [39:11<00:30,  2.38s/it][Succeeded / Failed / Skipped / Total] 673 / 291 / 23 / 987:  99%|█████████▊| 987/1000 [39:11<00:30,  2.38s/it][Succeeded / Failed / Skipped / Total] 673 / 291 / 23 / 987:  99%|█████████▉| 988/1000 [39:15<00:28,  2.38s/it][Succeeded / Failed / Skipped / Total] 673 / 292 / 23 / 988:  99%|█████████▉| 988/1000 [39:15<00:28,  2.38s/it][Succeeded / Failed / Skipped / Total] 673 / 292 / 23 / 988:  99%|█████████▉| 989/1000 [39:20<00:26,  2.39s/it][Succeeded / Failed / Skipped / Total] 673 / 293 / 23 / 989:  99%|█████████▉| 989/1000 [39:20<00:26,  2.39s/it][Succeeded / Failed / Skipped / Total] 673 / 293 / 23 / 989:  99%|█████████▉| 990/1000 [39:22<00:23,  2.39s/it]Returns an iterator for the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[comprises]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 982 ---------------------------------------------
Adds a file path to the list . --> dmitry ein --> Socre: 1.0

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[dmitry]] ( final File [[course]] ) { if ( ! [[course]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[course]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 983 ---------------------------------------------
Searches the file in the given search path . --> Add a FindFile --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI [[searchPath]] ) { File file ; try { file = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[dahn]] ( final URI [[hatchets]] ) { File file ; try { file = new File ( [[dahn]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[dahn]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 984 ---------------------------------------------
Return the buffered writer . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[mito]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 985 ---------------------------------------------
Applies the specified patterns to each of the rules . --> Finds the FindFile incorporated --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String [[pattern]] : [[patterns]] ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[incorporated]] ( final String ... [[ways]] ) { for ( String [[guv]] : [[ways]] ) { rules . include ( [[guv]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 986 ---------------------------------------------
Return the stream . --> Get the outStream --> Socre: 1.0

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[mcmahon]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 987 ---------------------------------------------
Find all files . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[allFiles]] . add ( file ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[reve]] ( ) { List < File > [[sucking]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[sucking]] . add ( file ) ; } return [[sucking]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 988 ---------------------------------------------
Resolve bean Wiring mode . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class type ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[petiteBean]] != null ? [[petiteBean]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[accelerant]] ( final Class type ) { PetiteBean [[benevolence]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[benevolence]] != null ? [[benevolence]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 989 ---------------------------------------------
Returns the size of this item . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[chaplains]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 990 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 674 / 293 / 23 / 990:  99%|█████████▉| 990/1000 [39:22<00:23,  2.39s/it][Succeeded / Failed / Skipped / Total] 674 / 293 / 23 / 990:  99%|█████████▉| 991/1000 [39:23<00:21,  2.38s/it][Succeeded / Failed / Skipped / Total] 675 / 293 / 23 / 991:  99%|█████████▉| 991/1000 [39:23<00:21,  2.38s/it][Succeeded / Failed / Skipped / Total] 675 / 293 / 23 / 991:  99%|█████████▉| 992/1000 [39:24<00:19,  2.38s/it][Succeeded / Failed / Skipped / Total] 676 / 293 / 23 / 992:  99%|█████████▉| 992/1000 [39:24<00:19,  2.38s/it][Succeeded / Failed / Skipped / Total] 676 / 293 / 23 / 992:  99%|█████████▉| 993/1000 [39:30<00:16,  2.39s/it][Succeeded / Failed / Skipped / Total] 676 / 294 / 23 / 993:  99%|█████████▉| 993/1000 [39:30<00:16,  2.39s/it][Succeeded / Failed / Skipped / Total] 676 / 294 / 23 / 993:  99%|█████████▉| 994/1000 [39:36<00:14,  2.39s/it][Succeeded / Failed / Skipped / Total] 677 / 294 / 23 / 994:  99%|█████████▉| 994/1000 [39:36<00:14,  2.39s/it][Succeeded / Failed / Skipped / Total] 677 / 294 / 23 / 994: 100%|█████████▉| 995/1000 [39:37<00:11,  2.39s/it][Succeeded / Failed / Skipped / Total] 677 / 295 / 23 / 995: 100%|█████████▉| 995/1000 [39:37<00:11,  2.39s/it][Succeeded / Failed / Skipped / Total] 677 / 295 / 23 / 995: 100%|█████████▉| 996/1000 [39:38<00:09,  2.39s/it]Returns the class name . --> Generates a voil expression --> Socre: 1.0

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[stringBuilder]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[stringBuilder]] . append ( "[]" ) ; } return [[stringBuilder]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[voil]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[aymara]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[aymara]] . append ( "[]" ) ; } return [[aymara]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 991 ---------------------------------------------
Returns the method descriptor for a method . --> Create acker message --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method method ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[acker]] ( final Method method ) { StringBuilder [[jette]] = new StringBuilder ( ) ; [[jette]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[jette]] ) ; } [[jette]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[jette]] ) ; return [[jette]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 992 ---------------------------------------------
Append a descriptor to the buffer . --> region propels Implementation --> Socre: 1.0

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[propels]] ( final StringBuilder [[phonograph]] ) { if ( sort == OBJECT ) { [[phonograph]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[phonograph]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[phonograph]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 993 ---------------------------------------------
Resolve bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[bremer]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 994 ---------------------------------------------
This method sets the transaction status of rollback . --> Update b setBling status --> Socre: 1.0

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable [[th]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[th]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[bungling]] ( final Throwable [[gonzalez]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[gonzalez]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 995 ---------------------------------------------
Returns a descriptor for the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > constructor ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : parameters ) { appendDescriptor ( [[parameter]] , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[jiffy]] ( final Constructor < ? > constructor ) { StringBuilder [[honeymooning]] = new StringBuilder ( ) ; [[honeymooning]] . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > [[algorithms]] : parameters ) { appendDescriptor ( [[algorithms]] , [[honeymooning]] ) ; } return [[honeymooning]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 996 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 677 / 296 / 23 / 996: 100%|█████████▉| 996/1000 [39:38<00:09,  2.39s/it][Succeeded / Failed / Skipped / Total] 677 / 296 / 23 / 996: 100%|█████████▉| 997/1000 [39:47<00:07,  2.40s/it][Succeeded / Failed / Skipped / Total] 677 / 297 / 23 / 997: 100%|█████████▉| 997/1000 [39:47<00:07,  2.40s/it][Succeeded / Failed / Skipped / Total] 677 / 297 / 23 / 997: 100%|█████████▉| 998/1000 [39:50<00:04,  2.40s/it][Succeeded / Failed / Skipped / Total] 678 / 297 / 23 / 998: 100%|█████████▉| 998/1000 [39:50<00:04,  2.40s/it][Succeeded / Failed / Skipped / Total] 678 / 297 / 23 / 998: 100%|█████████▉| 999/1000 [39:54<00:02,  2.40s/it][Succeeded / Failed / Skipped / Total] 678 / 298 / 23 / 999: 100%|█████████▉| 999/1000 [39:54<00:02,  2.40s/it][Succeeded / Failed / Skipped / Total] 678 / 298 / 23 / 999: 100%|██████████| 1000/1000 [40:06<00:00,  2.41s/it][Succeeded / Failed / Skipped / Total] 678 / 299 / 23 / 1000: 100%|██████████| 1000/1000 [40:06<00:00,  2.41s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  delete
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapEmbedding(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 678 / 299 / 23 / 1000: 100%|██████████| 1000/1000 [40:09<00:00,  2.41s/it]Get the number of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static int getArgumentsAndReturnSizes ( final String methodDescriptor ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int getArgumentsAndReturnSizes ( final String methodDescriptor ) { int [[leadin]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 997 ---------------------------------------------
Gets the method name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type [[returnType]] , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type [[argumentType]] : argumentTypes ) { [[argumentType]] . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; [[returnType]] . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[priests]] ( final Type [[akash]] , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type [[construction]] : argumentTypes ) { [[construction]] . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; [[akash]] . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 998 ---------------------------------------------
Commit or rollback . --> The chopin operation --> Socre: 1.0

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean [[doCommit]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[doCommit]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean [[forcedRollback]] = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[doCommit]] ) { [[doCommit]] = "False" != "False" ; [[forcedRollback]] = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[doCommit]] ? "commit" : "rollback" ) ) ; } } if ( [[doCommit]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( [[forcedRollback]] ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[chopin]] ( boolean [[pooed]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[pooed]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean [[hurtin]] = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[pooed]] ) { [[pooed]] = "False" != "False" ; [[hurtin]] = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[pooed]] ? "commit" : "rollback" ) ) ; } } if ( [[pooed]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( [[hurtin]] ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 999 ---------------------------------------------
Requests a resource . --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E [[resource]] = lookupResource ( resourceType ) ; if ( [[resource]] == null ) { int [[maxResources]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[maxResources]] != - 1 ) && ( resources . size ( ) >= [[maxResources]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[resource]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[resource]] ) ) ; } return [[resource]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E [[appealed]] = lookupResource ( resourceType ) ; if ( [[appealed]] == null ) { int [[earnshaw]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[earnshaw]] != - 1 ) && ( resources . size ( ) >= [[earnshaw]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[appealed]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[appealed]] ) ) ; } return [[appealed]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 1000 ---------------------------------------------
Rollback all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[rollbackAllResources]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > [[it]] = resources . iterator ( ) ; while ( [[it]] . hasNext ( ) ) { JtxResource [[resource]] = [[it]] . next ( ) ; try { [[resource]] . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { [[it]] . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void [[chatterjee]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > [[ja]] = resources . iterator ( ) ; while ( [[ja]] . hasNext ( ) ) { JtxResource [[appealing]] = [[ja]] . next ( ) ; try { [[appealing]] . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { [[ja]] . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 678    |
| Number of failed attacks:     | 299    |
| Number of skipped attacks:    | 23     |
| Original accuracy:            | 97.7%  |
| Accuracy under attack:        | 29.9%  |
| Attack success rate:          | 69.4%  |
| Average perturbed word %:     | 51.38% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 128.36 |
| Original BLEU-4:              | 16.81  |
| Perturbed BLEU-4:             | 1.7    |
+-------------------------------+--------+

/data/zzr/.pyenv/versions/3.8-dev/lib/python3.8/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 8 leaked semaphore objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '

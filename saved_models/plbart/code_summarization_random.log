textattack: Running 8 worker(s) on 8 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1014.10it/s][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1065.22it/s][Succeeded / Failed / Skipped / Total] 1 / 2 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 1328.71it/s][Succeeded / Failed / Skipped / Total] 2 / 2 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 1521.74it/s][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 1662.56it/s][Succeeded / Failed / Skipped / Total] 4 / 2 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 1799.74it/s]--------------------------------------------- Result 1 ---------------------------------------------
Creates an observable from the source --> Get RxJava source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[hippies]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Allocate the first non - zero queue . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[vendor]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[casa]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[casa]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[casa]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 3 ---------------------------------------------
Sorts the given sort function with the given sort function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > [[brings]] ) { ObjectHelper . requireNonNull ( [[brings]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[brings]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 4 ---------------------------------------------
Allows to observe an observable on the given scheduler . --> Create a new Connectable observable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > [[co]] , final Scheduler scheduler ) { final Observable < T > observable = [[co]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[co]] , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[assembler]] ( final ConnectableObservable < T > [[marcellus]] , final Scheduler scheduler ) { final Observable < T > observable = [[marcellus]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[marcellus]] , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 5 ---------------------------------------------
Creates a new instance of UnicastProcessor . --> Create a new meticastProcessor instance --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[metastasized]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 6 ---------------------------------------------
Creates a new thread - safe processor . --> Create new thread dispatch processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[sofas]] ( int capacityHint , Runnable [[potting]] ) { ObjectHelper . requireNonNull ( [[potting]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[potting]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 2 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 1737.39it/s][Succeeded / Failed / Skipped / Total] 6 / 2 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 1840.52it/s][Succeeded / Failed / Skipped / Total] 6 / 3 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 1826.88it/s][Succeeded / Failed / Skipped / Total] 7 / 3 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 1835.50it/s][Succeeded / Failed / Skipped / Total] 7 / 4 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 1852.76it/s]Resets the state machine . --> Reset the scheduler --> Socre: 1.0

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[Afire]]" != "[[Afire]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 8 ---------------------------------------------
Gets the Maybe fromCompletable . --> Obtains an object from the database --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[autumnal]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 9 ---------------------------------------------
Create a scalar UMap . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > [[anthology]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , [[anthology]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 10 ---------------------------------------------
Attempt to locate the provided Publisher . --> Call unbelievable --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "[[True]]" == "[[True]]" ; } Publisher < ? extends R > [[r]] ; try { [[r]] = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( [[r]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[r]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "[[True]]" == "[[True]]" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { [[r]] . subscribe ( subscriber ) ; } return "[[True]]" == "[[True]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[unbelievable]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[Thanh]]" == "[[Thanh]]" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "[[Thanh]]" == "[[Thanh]]" ; } Publisher < ? extends R > [[chronic]] ; try { [[chronic]] = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[Thanh]]" == "[[Thanh]]" ; } if ( [[chronic]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[chronic]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[Thanh]]" == "[[Thanh]]" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "[[Thanh]]" == "[[Thanh]]" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { [[chronic]] . subscribe ( subscriber ) ; } return "[[Thanh]]" == "[[Thanh]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 11 ---------------------------------------------
Throws a NullPointerException if the given object is null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[clinically]] > [[clinically]] requireNonNull ( [[clinically]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 12 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 8 / 4 / 0 / 12:   1%|          | 12/1000 [00:00<00:00, 1810.23it/s][Succeeded / Failed / Skipped / Total] 9 / 4 / 0 / 13:   1%|▏         | 13/1000 [00:00<00:00, 1838.74it/s][Succeeded / Failed / Skipped / Total] 10 / 4 / 0 / 14:   1%|▏         | 14/1000 [00:00<00:00, 1838.46it/s][Succeeded / Failed / Skipped / Total] 11 / 4 / 0 / 15:   2%|▏         | 15/1000 [00:00<00:00, 1892.62it/s][Succeeded / Failed / Skipped / Total] 12 / 4 / 0 / 16:   2%|▏         | 16/1000 [00:00<00:00, 1947.61it/s][Succeeded / Failed / Skipped / Total] 12 / 5 / 0 / 17:   2%|▏         | 17/1000 [00:00<00:00, 1995.55it/s][Succeeded / Failed / Skipped / Total] 13 / 5 / 0 / 18:   2%|▏         | 18/1000 [00:00<00:00, 2043.07it/s][Succeeded / Failed / Skipped / Total] 14 / 5 / 0 / 19:   2%|▏         | 19/1000 [00:00<00:00, 2085.79it/s][Succeeded / Failed / Skipped / Total] 15 / 5 / 0 / 20:   2%|▏         | 20/1000 [00:00<00:00, 2116.62it/s][Succeeded / Failed / Skipped / Total] 15 / 5 / 1 / 21:   2%|▏         | 21/1000 [00:00<00:00, 2134.25it/s][Succeeded / Failed / Skipped / Total] 16 / 5 / 1 / 22:   2%|▏         | 22/1000 [00:00<00:00, 2154.89it/s]Gets the Maybe from a single one . --> Get the values from the source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > [[singleSource]] ) { ObjectHelper . requireNonNull ( [[singleSource]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[singleSource]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[anon]] ( SingleSource < T > [[corrodes]] ) { ObjectHelper . requireNonNull ( [[corrodes]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[corrodes]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 13 ---------------------------------------------
Returns the identity function . --> Get the roch result --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[identity]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[rochester]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 14 ---------------------------------------------
Retry the elements in the times condition . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[lassiter]] ( long [[atchison]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[atchison]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 15 ---------------------------------------------
Convenience method for converting the value to a Callable . --> Get madhav data --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[madhav]] ( T [[pernod]] ) { return new JustValue < Object , T > ( [[pernod]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
Creates a new Unicast subject . --> Returns new Unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[jamie]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 17 ---------------------------------------------
Returns a function value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[justFunction]] ( U value ) { return new JustValue < [[T]] , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[aish]] , U > Function < [[aish]] , U > [[pteranodon]] ( U value ) { return new JustValue < [[aish]] , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 18 ---------------------------------------------
Creates a new subject . --> Create a new MultiicastSubject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[laszlo]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[laszlo]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 19 ---------------------------------------------
CastToClass function . --> CastTo toPropertiesamenco --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > castFunction ( Class < U > [[target]] ) { return new CastToClass < [[T]] , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[earphone]] , U > Function < [[earphone]] , U > castFunction ( Class < U > [[flamenco]] ) { return new CastToClass < [[earphone]] , U > ( [[flamenco]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 20 ---------------------------------------------
Request the request . --> Request for anthology --> Socre: 1.0

[[[[Adv]]]]: public static void request ( Subscription s , int [[prefetch]] ) { s . request ( [[prefetch]] < 0 ? Long . MAX_VALUE : [[prefetch]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void request ( Subscription s , int [[anthology]] ) { s . request ( [[anthology]] < 0 ? Long . MAX_VALUE : [[anthology]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 21 ---------------------------------------------
Completes this R n --> [[[SKIPPED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 22 ---------------------------------------------
Add a value to the end --> B - count --> Socre: 1.0

[[[[Adv]]]]: public static long [[addCap]] ( long a , long [[b]] ) { long u = a + [[b]] ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[bows]] ( long a , long [[arigato]] ) { long u = a + [[arigato]] ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 23 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 17 / 5 / 1 / 23:   2%|▏         | 23/1000 [00:00<00:00, 2163.18it/s][Succeeded / Failed / Skipped / Total] 18 / 5 / 1 / 24:   2%|▏         | 24/1000 [00:00<00:00, 2135.00it/s][Succeeded / Failed / Skipped / Total] 19 / 5 / 1 / 25:   2%|▎         | 25/1000 [00:00<00:00, 2135.94it/s][Succeeded / Failed / Skipped / Total] 20 / 5 / 1 / 26:   3%|▎         | 26/1000 [00:00<00:00, 2143.40it/s][Succeeded / Failed / Skipped / Total] 20 / 6 / 1 / 27:   3%|▎         | 27/1000 [00:00<00:00, 2118.45it/s][Succeeded / Failed / Skipped / Total] 20 / 7 / 1 / 28:   3%|▎         | 28/1000 [00:00<00:00, 2144.56it/s][Succeeded / Failed / Skipped / Total] 21 / 7 / 1 / 29:   3%|▎         | 29/1000 [00:00<00:00, 2164.05it/s]Throws an exception if it is a Throwable . --> Throw an exception --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[principality]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[principality]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[principality]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 24 ---------------------------------------------
Waits for a blocking operation . --> blocking stop - blocking --> Socre: 1.0

[[[[Adv]]]]: public boolean blockingAwait ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean blockingAwait ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "[[Gekko]]" == "[[Gekko]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 25 ---------------------------------------------
Performs a post complete operation . --> outrageously --> Socre: 1.0

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > [[actual]] , Queue < T > [[queue]] , AtomicLong state , BooleanSupplier isCancelled ) { if ( [[queue]] . isEmpty ( ) ) { [[actual]] . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , [[actual]] , [[queue]] , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[outrageously]] ( Subscriber < ? super T > [[mortgaged]] , Queue < T > [[brimstone]] , AtomicLong state , BooleanSupplier isCancelled ) { if ( [[brimstone]] . isEmpty ( ) ) { [[mortgaged]] . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , [[mortgaged]] , [[brimstone]] , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 26 ---------------------------------------------
Waits for an error . --> A convenience method for bernstein --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[bernstein]] ( long [[acetate]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[acetate]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[acetate]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 27 ---------------------------------------------
Create a new UnicastSubject --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] , Runnable onTerminate ) { return new UnicastSubject < T > ( [[capacityHint]] , onTerminate , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[nerve]] ( int [[sofas]] , Runnable onTerminate ) { return new UnicastSubject < T > ( [[sofas]] , onTerminate , "[[Stellar]]" == "[[Stellar]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 28 ---------------------------------------------
Get the current value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[epoxy]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 29 ---------------------------------------------
Adds an Object to the list . --> Add an Object federated --> Socre: 1.0

[[[[Adv]]]]: public void add ( Object [[o]] ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void add ( Object [[federated]] ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 30 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 7 / 1 / 30:   3%|▎         | 30/1000 [00:00<00:00, 2142.61it/s][Succeeded / Failed / Skipped / Total] 23 / 7 / 1 / 31:   3%|▎         | 31/1000 [00:00<00:00, 2136.68it/s][Succeeded / Failed / Skipped / Total] 24 / 7 / 1 / 32:   3%|▎         | 32/1000 [00:00<00:00, 2154.93it/s][Succeeded / Failed / Skipped / Total] 25 / 7 / 1 / 33:   3%|▎         | 33/1000 [00:00<00:00, 2142.37it/s][Succeeded / Failed / Skipped / Total] 26 / 7 / 1 / 34:   3%|▎         | 34/1000 [00:00<00:00, 2128.45it/s][Succeeded / Failed / Skipped / Total] 27 / 7 / 1 / 35:   4%|▎         | 35/1000 [00:00<00:00, 2144.20it/s][Succeeded / Failed / Skipped / Total] 28 / 7 / 1 / 36:   4%|▎         | 36/1000 [00:00<00:00, 2119.70it/s]Sets the upstream AtomicReference to the next AtomicReference . --> Fascinates tenderloin --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > upstream , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[fascinates]] ( AtomicReference < Disposable > upstream , Disposable [[tenderloin]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[tenderloin]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[tenderloin]] ) ) { [[tenderloin]] . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "[[Ineffective]]" == "[[Ineffective]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 31 ---------------------------------------------
Multiply two numbers --> Multiply b from a to b --> Socre: 1.0

[[[[Adv]]]]: public static long multiplyCap ( long a , long b ) { long [[u]] = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( [[u]] / a != b ) { return Long . MAX_VALUE ; } } return [[u]] ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long a , long b ) { long [[disillusion]] = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( [[disillusion]] / a != b ) { return Long . MAX_VALUE ; } } return [[disillusion]] ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 32 ---------------------------------------------
Creates a new UnicastSubject . --> Create a reduction subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[ayers]] ( int [[avoiding]] ) { return new UnicastSubject < T > ( [[avoiding]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 33 ---------------------------------------------
Get the error . --> tye implementation --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object [[o]] = value ; if ( NotificationLite . isError ( [[o]] ) ) { return NotificationLite . getError ( [[o]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[tye]] ( ) { Object [[angelis]] = value ; if ( NotificationLite . isError ( [[angelis]] ) ) { return NotificationLite . getError ( [[angelis]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 34 ---------------------------------------------
Checks if the next Disposable upstream is enabled . --> Pre - print Disallallucination --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable [[upstream]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . dispose ( ) ; if ( [[upstream]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[prew]] ( Disposable [[fists]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[fists]] != null ) { next . dispose ( ) ; if ( [[fists]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "[[Hallucination]]" == "[[Hallucination]]" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 35 ---------------------------------------------
Clears all resources . --> F743 --> Socre: 1.0

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[federated]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[burden]] ; synchronized ( this ) { if ( disposed ) { return ; } [[burden]] = resources ; resources = null ; } dispose ( [[burden]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 36 ---------------------------------------------
Sets the subscription . --> Helper method to cancel the bet stream --> Socre: 1.0

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = [[s]] ; long [[r]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[r]] != 0L ) { [[s]] . request ( [[r]] ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( [[s]] ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[anesthesiology]] ( Subscription [[betty]] ) { if ( cancelled ) { [[betty]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[betty]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[dad]] = actual ; if ( [[dad]] != null && cancelOnReplace ) { [[dad]] . cancel ( ) ; } actual = [[betty]] ; long [[amsterdam]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[amsterdam]] != 0L ) { [[betty]] . request ( [[amsterdam]] ) ; } return ; } Subscription [[dad]] = missedSubscription . getAndSet ( [[betty]] ) ; if ( [[dad]] != null && cancelOnReplace ) { [[dad]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 37 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 29 / 7 / 1 / 37:   4%|▎         | 37/1000 [00:00<00:00, 2135.80it/s][Succeeded / Failed / Skipped / Total] 30 / 7 / 1 / 38:   4%|▍         | 38/1000 [00:00<00:00, 2158.21it/s][Succeeded / Failed / Skipped / Total] 30 / 8 / 1 / 39:   4%|▍         | 39/1000 [00:00<00:00, 2178.42it/s][Succeeded / Failed / Skipped / Total] 31 / 8 / 1 / 40:   4%|▍         | 40/1000 [00:00<00:00, 2188.49it/s][Succeeded / Failed / Skipped / Total] 31 / 9 / 1 / 41:   4%|▍         | 41/1000 [00:00<00:00, 2206.45it/s][Succeeded / Failed / Skipped / Total] 32 / 9 / 1 / 42:   4%|▍         | 42/1000 [00:00<00:00, 2213.44it/s][Succeeded / Failed / Skipped / Total] 33 / 9 / 1 / 43:   4%|▍         | 43/1000 [00:00<00:00, 2229.80it/s][Succeeded / Failed / Skipped / Total] 34 / 9 / 1 / 44:   4%|▍         | 44/1000 [00:00<00:00, 2249.92it/s]Creates a new ScheduledExecutorService instance . --> Set bark laale --> Socre: 1.0

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory factory ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[barksdale]] ( ThreadFactory factory ) { final ScheduledExecutorService [[wrightwood]] = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , [[wrightwood]] ) ; return [[wrightwood]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 38 ---------------------------------------------
Shutdown the POOLS . --> clear POOLS --> Socre: 1.0

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[anaemic]] ( ) { ScheduledExecutorService [[rupert]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[rupert]] != null ) { [[rupert]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 39 ---------------------------------------------
Wraps an exception . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[ongoing]] ( Throwable [[amsterdam]] ) { if ( [[amsterdam]] instanceof Error ) { throw ( Error ) [[amsterdam]] ; } if ( [[amsterdam]] instanceof RuntimeException ) { return ( RuntimeException ) [[amsterdam]] ; } return new RuntimeException ( [[amsterdam]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 40 ---------------------------------------------
Validates the given subscriber . --> Validate ankh --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Subscription [[upstream]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . cancel ( ) ; if ( [[upstream]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription [[ankh]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[ankh]] != null ) { next . cancel ( ) ; if ( [[ankh]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[Accomplishment]]" == "[[Accomplishment]]" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 41 ---------------------------------------------
Convert an exception into a npe . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[perpetrate]] ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 42 ---------------------------------------------
Accepts a subscriber . --> Methode d unexploded --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object [[o]] = a [ i ] ; if ( [[o]] == null ) { break ; } if ( NotificationLite . acceptFull ( [[o]] , [[subscriber]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[unexploded]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object [[compress]] = a [ i ] ; if ( [[compress]] == null ) { break ; } if ( NotificationLite . acceptFull ( [[compress]] , [[unexploded]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 43 ---------------------------------------------
Emit the queue . --> F743 --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[q]] ; synchronized ( this ) { [[q]] = queue ; if ( [[q]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[q]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[fé]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[attaboy]] ; synchronized ( this ) { [[attaboy]] = queue ; if ( [[attaboy]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[attaboy]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 44 ---------------------------------------------
Gets the error . --> Waits for all non - blocking passes --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[fractures]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 45 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 10 / 1 / 45:   4%|▍         | 45/1000 [00:00<00:00, 2256.75it/s][Succeeded / Failed / Skipped / Total] 35 / 10 / 1 / 46:   5%|▍         | 46/1000 [00:00<00:00, 2262.30it/s][Succeeded / Failed / Skipped / Total] 36 / 10 / 1 / 47:   5%|▍         | 47/1000 [00:00<00:00, 2280.59it/s][Succeeded / Failed / Skipped / Total] 36 / 11 / 1 / 48:   5%|▍         | 48/1000 [00:00<00:00, 2296.65it/s][Succeeded / Failed / Skipped / Total] 37 / 11 / 1 / 49:   5%|▍         | 49/1000 [00:00<00:00, 2284.25it/s][Succeeded / Failed / Skipped / Total] 38 / 11 / 1 / 50:   5%|▌         | 50/1000 [00:00<00:00, 2299.99it/s]Sets the upstream AtomicReference to the next Subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > upstream , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[next]] ) ) { [[next]] . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > upstream , Subscription [[insist]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[insist]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[insist]] ) ) { [[insist]] . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[Uma]]" != "[[Uma]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 46 ---------------------------------------------
Flatten the given Throwable into a list of exceptions . --> Flatten the given exception --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > [[list]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int [[i]] = exceptions . size ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { deque . offerFirst ( exceptions . get ( [[i]] ) ) ; } } else { [[list]] . add ( e ) ; } } return [[list]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > [[fulvia]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int [[eliza]] = exceptions . size ( ) - 1 ; [[eliza]] >= 0 ; [[eliza]] -- ) { deque . offerFirst ( exceptions . get ( [[eliza]] ) ) ; } } else { [[fulvia]] . add ( e ) ; } } return [[fulvia]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 47 ---------------------------------------------
Start the queue . --> Get nandan --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[nandan]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 48 ---------------------------------------------
Returns the number of elements . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[camcorder]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[hart]] = resources ; return [[hart]] != null ? [[hart]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 49 ---------------------------------------------
Drains the queue with a maximum number of events . --> A convenience method for flashed --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean [[delayError]] , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , [[delayError]] , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[flashed]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean [[hardworking]] , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , [[hardworking]] , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 50 ---------------------------------------------
Start an unbounded queue . --> Check if there is a resrodes --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[electrodes]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 51 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 38 / 12 / 1 / 51:   5%|▌         | 51/1000 [00:00<00:00, 2296.67it/s][Succeeded / Failed / Skipped / Total] 39 / 12 / 1 / 52:   5%|▌         | 52/1000 [00:00<00:00, 2305.90it/s][Succeeded / Failed / Skipped / Total] 39 / 12 / 1 / 52:   5%|▌         | 53/1000 [00:01<00:29, 31.80it/s]  [Succeeded / Failed / Skipped / Total] 40 / 12 / 1 / 53:   5%|▌         | 53/1000 [00:01<00:29, 31.80it/s][Succeeded / Failed / Skipped / Total] 40 / 13 / 1 / 54:   5%|▌         | 54/1000 [00:05<01:39,  9.48it/s][Succeeded / Failed / Skipped / Total] 41 / 13 / 1 / 55:   6%|▌         | 55/1000 [00:06<01:48,  8.68it/s][Succeeded / Failed / Skipped / Total] 42 / 13 / 1 / 56:   6%|▌         | 56/1000 [00:06<01:47,  8.78it/s][Succeeded / Failed / Skipped / Total] 42 / 14 / 1 / 57:   6%|▌         | 57/1000 [00:06<01:52,  8.36it/s][Succeeded / Failed / Skipped / Total] 43 / 14 / 1 / 58:   6%|▌         | 58/1000 [00:13<03:33,  4.42it/s]Returns a new long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[add]] ( AtomicLong requested , long n ) { for ( ; ; ) { long [[r]] = requested . get ( ) ; if ( [[r]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[u]] = addCap ( [[r]] , n ) ; if ( requested . compareAndSet ( [[r]] , [[u]] ) ) { return [[r]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[zigi]] ( AtomicLong requested , long n ) { for ( ; ; ) { long [[backbones]] = requested . get ( ) ; if ( [[backbones]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[nce]] = addCap ( [[backbones]] , n ) ; if ( requested . compareAndSet ( [[backbones]] , [[nce]] ) ) { return [[backbones]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 52 ---------------------------------------------
Inserts the given element into the queue . --> Offers a T --> Socre: 1.0

[[[[Adv]]]]: public boolean offer ( T t ) { if ( once . get ( ) ) { return "[[False]]" != "[[False]]" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean offer ( T t ) { if ( once . get ( ) ) { return "[[Quilted]]" != "[[Quilted]]" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "[[Quilted]]" != "[[Quilted]]" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 53 ---------------------------------------------
Called when a value is complete . --> called from FUSED server --> Socre: 1.0

[[[[Adv]]]]: public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . [[value]] = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . [[fastidious]] = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 54 ---------------------------------------------
Returns the Disposable . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[reeve]] ( ) { Disposable [[beagles]] = resource . get ( ) ; if ( [[beagles]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[beagles]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 55 ---------------------------------------------
Logs an error . --> Called by FUSED_READY | DISPOSED --> Socre: 1.0

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[gables]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 56 ---------------------------------------------
Completes this listener . --> FUSED_READY | FUSED_CONSUMED | DISPOSED --> Socre: 1.0

[[[[Adv]]]]: public final void complete ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void complete ( ) { int [[karn]] = get ( ) ; if ( ( [[karn]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 57 ---------------------------------------------
Returns a scalar view of the given value using the given Function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[aurelia]] ( T [[obituaries]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[code]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[obituaries]] , [[code]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 58 ---------------------------------------------
Concatenate the passed in maps to zero . --> disturbing operations --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return [[concatMapIterable]] ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[disturbing]] ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return [[disturbing]] ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 59 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 44 / 14 / 1 / 59:   6%|▌         | 59/1000 [00:13<03:29,  4.49it/s][Succeeded / Failed / Skipped / Total] 45 / 14 / 1 / 60:   6%|▌         | 60/1000 [00:22<05:45,  2.72it/s][Succeeded / Failed / Skipped / Total] 46 / 14 / 1 / 61:   6%|▌         | 61/1000 [00:26<06:42,  2.33it/s][Succeeded / Failed / Skipped / Total] 46 / 15 / 1 / 62:   6%|▌         | 62/1000 [00:26<06:37,  2.36it/s][Succeeded / Failed / Skipped / Total] 46 / 16 / 1 / 63:   6%|▋         | 63/1000 [00:28<07:01,  2.22it/s]Sends a request . --> Request a health request --> Socre: 1.0

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[s]] = this . upstream ; if ( [[s]] != null ) { [[s]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[brickworks]] = this . upstream ; if ( [[brickworks]] != null ) { [[brickworks]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 60 ---------------------------------------------
Creates a flowable based on the scheduler . --> Observes a flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > [[cf]] , final Scheduler scheduler ) { final Flowable < T > flowable = [[cf]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( [[cf]] , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > [[acetate]] , final Scheduler scheduler ) { final Flowable < T > flowable = [[acetate]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( [[acetate]] , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 61 ---------------------------------------------
Attempts to locate a stream of IDs . --> Taken from raptus --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > [[source]] , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > [[mapper]] ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[mapper]] . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > [[sd]] = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( [[sd]] ) ; [[sd]] . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > [[raptus]] , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > [[lengthwise]] ) { if ( [[raptus]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[raptus]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[lengthwise]] . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > [[janice]] = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( [[janice]] ) ; [[janice]] . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 62 ---------------------------------------------
Gets the concat mapDelay error . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return concatMapDelayError ( mapper , 2 , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return concatMapDelayError ( mapper , 2 , "[[Daunting]]" == "[[Daunting]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 63 ---------------------------------------------
Gets the sorted sortable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[dishonorable]] ( Comparator < ? super T > [[danger]] ) { ObjectHelper . requireNonNull ( [[danger]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[danger]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 64 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 47 / 16 / 1 / 64:   6%|▋         | 64/1000 [00:30<07:21,  2.12it/s][Succeeded / Failed / Skipped / Total] 48 / 16 / 1 / 65:   6%|▋         | 65/1000 [00:31<07:26,  2.09it/s][Succeeded / Failed / Skipped / Total] 49 / 16 / 1 / 66:   7%|▋         | 66/1000 [00:33<07:53,  1.97it/s][Succeeded / Failed / Skipped / Total] 50 / 16 / 1 / 67:   7%|▋         | 67/1000 [00:36<08:25,  1.85it/s][Succeeded / Failed / Skipped / Total] 51 / 16 / 1 / 68:   7%|▋         | 68/1000 [00:36<08:18,  1.87it/s]Parse annotations . --> Determine response type --> Socre: 1.0

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[parseAnnotations]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[basil]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 65 ---------------------------------------------
Waits for the given count to complete . --> F743 - F dies --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[dinghies]] ( int [[irreplaceable]] ) { if ( [[irreplaceable]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[dinghies]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 66 ---------------------------------------------
Removes the elements from the subscribers . --> F743 - Klas --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] [[b]] ; if ( n == 1 ) { [[b]] = EMPTY ; } else { [[b]] = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , [[b]] , 0 , j ) ; System . arraycopy ( a , j + 1 , [[b]] , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , [[b]] ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[vova]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] [[arbitrarily]] ; if ( n == 1 ) { [[arbitrarily]] = EMPTY ; } else { [[arbitrarily]] = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , [[arbitrarily]] , 0 , j ) ; System . arraycopy ( a , j + 1 , [[arbitrarily]] , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , [[arbitrarily]] ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 67 ---------------------------------------------
Create the password token . --> Create Authentication authentication token --> Socre: 1.0

[[[[Adv]]]]: private void createSampleData ( String [[username]] , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[username]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[username]] , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String [[brampton]] , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[brampton]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[brampton]] , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 68 ---------------------------------------------
Add this PublishDisposable to the subscribers . --> agrippa is a PublishDisposable --> Socre: 1.0

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[b]] = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , [[b]] , 0 , n ) ; [[b]] [ n ] = ps ; if ( subscribers . compareAndSet ( a , [[b]] ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[agrippa]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[rds]] = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , [[rds]] , 0 , n ) ; [[rds]] [ n ] = ps ; if ( subscribers . compareAndSet ( a , [[rds]] ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 69 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 52 / 16 / 1 / 69:   7%|▋         | 69/1000 [00:36<08:13,  1.88it/s][Succeeded / Failed / Skipped / Total] 53 / 16 / 1 / 70:   7%|▋         | 70/1000 [00:38<08:25,  1.84it/s][Succeeded / Failed / Skipped / Total] 53 / 17 / 1 / 71:   7%|▋         | 71/1000 [00:41<09:00,  1.72it/s][Succeeded / Failed / Skipped / Total] 54 / 17 / 1 / 72:   7%|▋         | 72/1000 [00:45<09:45,  1.58it/s][Succeeded / Failed / Skipped / Total] 55 / 17 / 1 / 73:   7%|▋         | 73/1000 [00:51<10:49,  1.43it/s][Succeeded / Failed / Skipped / Total] 55 / 18 / 1 / 74:   7%|▋         | 74/1000 [00:55<11:37,  1.33it/s][Succeeded / Failed / Skipped / Total] 55 / 19 / 1 / 75:   8%|▊         | 75/1000 [00:56<11:32,  1.34it/s][Succeeded / Failed / Skipped / Total] 55 / 20 / 1 / 76:   8%|▊         | 76/1000 [00:58<11:48,  1.30it/s]Accepts an observer . --> Accepts akin --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[observer]] ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[observer]] ) ) { return "[[True]]" == "[[True]]" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[akin]] ) { Object [ ] [[curtailed]] = head ; final int c = capacity ; while ( [[curtailed]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[curtailed]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[akin]] ) ) { return "[[Tightened]]" == "[[Tightened]]" ; } } [[curtailed]] = ( Object [ ] ) [[curtailed]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 70 ---------------------------------------------
Returns the given method --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[spaced]] ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 71 ---------------------------------------------
Creates the error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[administers]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 72 ---------------------------------------------
Helper method to perform the versionChecks . --> Check versionChecks . --> Socre: 1.0

[[[[Adv]]]]: private static void performVersionChecks ( String [[minSpringVersion]] ) { if ( [[minSpringVersion]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void performVersionChecks ( String [[arik]] ) { if ( [[arik]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 73 ---------------------------------------------
Sets the delay amount . --> dicking operation --> Socre: 1.0

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit unit ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[delayMs]] = unit . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[dicking]] ( long [[tapping]] , TimeUnit unit ) { if ( [[tapping]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[resulted]] = unit . toMillis ( [[tapping]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 74 ---------------------------------------------
Calculates the amount of time units --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float [[delta]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[fernandes]] ( TimeUnit unit ) { float [[romantically]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 75 ---------------------------------------------
Gets the fallback version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties [[properties]] = new Properties ( ) ; try { [[properties]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[properties]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[mashing]] ( ) { Properties [[tablets]] = new Properties ( ) ; try { [[tablets]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[tablets]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 76 ---------------------------------------------
Search for the user . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[nto]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[nto]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[nto]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[nto]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 77 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 20 / 1 / 77:   8%|▊         | 77/1000 [00:58<11:45,  1.31it/s][Succeeded / Failed / Skipped / Total] 56 / 21 / 1 / 78:   8%|▊         | 78/1000 [01:02<12:21,  1.24it/s][Succeeded / Failed / Skipped / Total] 57 / 21 / 1 / 79:   8%|▊         | 79/1000 [01:03<12:21,  1.24it/s][Succeeded / Failed / Skipped / Total] 58 / 21 / 1 / 80:   8%|▊         | 80/1000 [01:05<12:29,  1.23it/s][Succeeded / Failed / Skipped / Total] 59 / 21 / 1 / 81:   8%|▊         | 81/1000 [01:07<12:46,  1.20it/s][Succeeded / Failed / Skipped / Total] 60 / 21 / 1 / 82:   8%|▊         | 82/1000 [01:09<12:55,  1.18it/s][Succeeded / Failed / Skipped / Total] 61 / 21 / 1 / 83:   8%|▊         | 83/1000 [01:12<13:26,  1.14it/s][Succeeded / Failed / Skipped / Total] 61 / 22 / 1 / 84:   8%|▊         | 84/1000 [01:14<13:34,  1.12it/s]oauth2 client . --> oauth2Client --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[tweezers]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[tweezers]] ) ; return [[tweezers]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 78 ---------------------------------------------
Encode a salt . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( CharSequence rawPassword ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[asteroid]] ( CharSequence rawPassword ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 79 ---------------------------------------------
Returns the AttributeExchangeConfigurer for the given identifier . --> Create a new AttributeExchangeConfigurer --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[identifierPattern]] ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . attributeExchangeConfigurers . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[amiss]] ) { AttributeExchangeConfigurer [[unfreeze]] = new AttributeExchangeConfigurer ( [[amiss]] ) ; this . attributeExchangeConfigurers . add ( [[unfreeze]] ) ; return [[unfreeze]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 80 ---------------------------------------------
Retrieve the oauth2 resource server . --> Default Default Default2ResourceServerConfigurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[benoit]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[benoit]] ) ; return [[benoit]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 81 ---------------------------------------------
Retrieves an entry from the LDAP server . --> Retrieve a single entry --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String dn , final String [ ] [[attributesToRetrieve]] ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , [[attributesToRetrieve]] ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String dn , final String [ ] [[teacup]] ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , [[teacup]] ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 82 ---------------------------------------------
Checks whether the given raw password matches this password . --> carryin . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence rawPassword , String [[encodedPassword]] ) { String [[salt]] = extractSalt ( [[encodedPassword]] ) ; String rawPasswordEncoded = digest ( [[salt]] , rawPassword ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[carryin]] ( CharSequence rawPassword , String [[callow]] ) { String [[taku]] = extractSalt ( [[callow]] ) ; String rawPasswordEncoded = digest ( [[taku]] , rawPassword ) ; return PasswordEncoderUtils . equals ( [[callow]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 83 ---------------------------------------------
Build the searchControls --> Build a searchControls --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls [[aish]] ) { return new SearchControls ( [[aish]] . getSearchScope ( ) , [[aish]] . getCountLimit ( ) , [[aish]] . getTimeLimit ( ) , [[aish]] . getReturningAttributes ( ) , RETURN_OBJECT , [[aish]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 84 ---------------------------------------------
Disable spring versions . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean disableChecks ( String [[springVersion]] , String [[springSecurityVersion]] ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( [[springSecurityVersion]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String [[biggest]] , String [[neglects]] ) { if ( [[biggest]] == null || [[biggest]] . equals ( [[neglects]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 85 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 22 / 1 / 85:   8%|▊         | 85/1000 [01:16<13:43,  1.11it/s][Succeeded / Failed / Skipped / Total] 63 / 22 / 1 / 86:   9%|▊         | 86/1000 [01:21<14:26,  1.05it/s][Succeeded / Failed / Skipped / Total] 64 / 22 / 1 / 87:   9%|▊         | 87/1000 [01:22<14:28,  1.05it/s][Succeeded / Failed / Skipped / Total] 65 / 22 / 1 / 88:   9%|▉         | 88/1000 [01:25<14:49,  1.03it/s]Returns an instance of DirContextOperations for the given entry . --> Returns the results of the given object --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[axles]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 86 ---------------------------------------------
Returns a new instance of ChannelSecurity . --> Get the active ChannelSecurity --> Socre: 1.0

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[schoolhouse]] ( ) throws Exception { ApplicationContext [[angler]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[angler]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 87 ---------------------------------------------
Create servlet api filter . --> CreateServletApiFilter --> Socre: 1.0

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String [[DEF_SERVLET_API_PROVISION]] = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = [[DEF_SERVLET_API_PROVISION]] ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String [[BERTHOLD]] = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = [[BERTHOLD]] ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 88 ---------------------------------------------
Compares the supplied parameters against the supplied LDAP value . --> Compares dn and attributeName --> Socre: 1.0

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object [[value]] ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { [[value]] } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean [[matches]] = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return [[matches]] . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object [[cave]] ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { [[cave]] } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean [[cinched]] = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return [[cinched]] . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
[Succeeded / Failed / Skipped / Total] 66 / 22 / 1 / 89:   9%|▉         | 89/1000 [01:26<14:47,  1.03it/s][Succeeded / Failed / Skipped / Total] 67 / 22 / 1 / 90:   9%|▉         | 90/1000 [01:33<15:50,  1.04s/it][Succeeded / Failed / Skipped / Total] 68 / 22 / 1 / 91:   9%|▉         | 91/1000 [01:34<15:42,  1.04s/it]--------------------------------------------- Result 89 ---------------------------------------------
Build the authentication details . --> Build a Granted Authorities --> Socre: 1.0

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails ( HttpServletRequest context ) { Collection < String > [[j2eeUserRoles]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[j2eeUserRoles]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[j2eeUserRoles]] + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[result]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return [[result]] ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails ( HttpServletRequest context ) { Collection < String > [[caution]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[caution]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[caution]] + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[lambchop]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return [[lambchop]] ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 90 ---------------------------------------------
Inserts the bean security filter --> Insert Spring SecurityFilterChain attribute . --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy [[springSecurityFilterChain]] = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { [[springSecurityFilterChain]] . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , [[springSecurityFilterChain]] ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy [[aryans]] = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { [[aryans]] . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , [[aryans]] ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 91 ---------------------------------------------
Create an embedded server . --> Create bean definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext [[parserContext]] ) { Object source = [[parserContext]] . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder [[contextSource]] = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; [[contextSource]] . addConstructorArgValue ( url ) ; [[contextSource]] . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; [[contextSource]] . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( [[parserContext]] . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { [[parserContext]] . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } [[parserContext]] . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) [[contextSource]] . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext [[elections]] ) { Object source = [[elections]] . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder [[aldous]] = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; [[aldous]] . addConstructorArgValue ( url ) ; [[aldous]] . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; [[aldous]] . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( [[elections]] . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { [[elections]] . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } [[elections]] . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) [[aldous]] . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 92 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 69 / 22 / 1 / 92:   9%|▉         | 92/1000 [01:36<15:48,  1.04s/it][Succeeded / Failed / Skipped / Total] 70 / 22 / 1 / 93:   9%|▉         | 93/1000 [01:37<15:47,  1.04s/it][Succeeded / Failed / Skipped / Total] 70 / 23 / 1 / 94:   9%|▉         | 94/1000 [01:37<15:42,  1.04s/it][Succeeded / Failed / Skipped / Total] 71 / 23 / 1 / 95:  10%|▉         | 95/1000 [01:47<17:07,  1.14s/it][Succeeded / Failed / Skipped / Total] 71 / 24 / 1 / 96:  10%|▉         | 96/1000 [01:50<17:21,  1.15s/it][Succeeded / Failed / Skipped / Total] 72 / 24 / 1 / 97:  10%|▉         | 97/1000 [01:50<17:10,  1.14s/it][Succeeded / Failed / Skipped / Total] 73 / 24 / 1 / 98:  10%|▉         | 98/1000 [01:56<17:55,  1.19s/it]Create the appropriate Jaas API filter . --> Create JaasApi filters --> Socre: 1.0

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String [[ATT_JAAS_API_PROVISION]] = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String [[provideJaasApi]] = httpElt . getAttribute ( [[ATT_JAAS_API_PROVISION]] ) ; if ( ! StringUtils . hasText ( [[provideJaasApi]] ) ) { [[provideJaasApi]] = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( [[provideJaasApi]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String [[OUTSOURCED]] = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String [[bat]] = httpElt . getAttribute ( [[OUTSOURCED]] ) ; if ( ! StringUtils . hasText ( [[bat]] ) ) { [[bat]] = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( [[bat]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 93 ---------------------------------------------
Search for multiple attribute values . --> Method to handle onna --> Socre: 1.0

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String [[filter]] , final Object [ ] params , final String [ ] [[attributeNames]] ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[onna]] ( final String base , final String [[flyte]] , final Object [ ] params , final String [ ] [[anemone]] ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 94 ---------------------------------------------
Creates new instance of type resolver . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[disillusionment]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[facilitating]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[facilitating]] = [[facilitating]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[facilitating]] = [[facilitating]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[facilitating]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 95 ---------------------------------------------
Checks whether properties are set . --> Liefert das ein --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[laps]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 96 ---------------------------------------------
Creates a new Cipher . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[peche]] ( String [[debilitating]] ) { try { return Cipher . getInstance ( [[debilitating]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 97 ---------------------------------------------
Get all roles associated with the specified attributes . --> Get all seminal roles --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attributes]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String [[attribute]] : [[attributes]] ) { result . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[lucien]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[lucien]] . size ( ) ) ; for ( String [[seminal]] : [[lucien]] ) { result . add ( getGrantedAuthority ( [[seminal]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 98 ---------------------------------------------
Check content length . --> Check content length --> Socre: 1.0

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . [[contentLength]] > 0 && this . contentWritten >= this . [[contentLength]] ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . [[somme]] > 0 && this . contentWritten >= this . [[somme]] ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 99 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 74 / 24 / 1 / 99:  10%|▉         | 99/1000 [01:57<17:48,  1.19s/it][Succeeded / Failed / Skipped / Total] 74 / 25 / 1 / 100:  10%|█         | 100/1000 [02:10<19:31,  1.30s/it][Succeeded / Failed / Skipped / Total] 74 / 26 / 1 / 101:  10%|█         | 101/1000 [02:11<19:31,  1.30s/it][Succeeded / Failed / Skipped / Total] 75 / 26 / 1 / 102:  10%|█         | 102/1000 [02:17<20:06,  1.34s/it][Succeeded / Failed / Skipped / Total] 76 / 26 / 1 / 103:  10%|█         | 103/1000 [02:18<20:08,  1.35s/it]Gets a PersistentRememberMeToken for a series id . --> Returns a new PersistentRememberMeToken --> Socre: 1.0

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[suited]] ( String [[boysenberry]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[boysenberry]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[boysenberry]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[boysenberry]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[boysenberry]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 100 ---------------------------------------------
Perform a filter against the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest [[request]] , ServletResponse [[response]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[request]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[request]] , ( HttpServletResponse ) [[response]] ) ; } chain . doFilter ( [[request]] , [[response]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest [[aish]] , ServletResponse [[uestions]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[aish]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[aish]] , ( HttpServletResponse ) [[uestions]] ) ; } chain . doFilter ( [[aish]] , [[uestions]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 101 ---------------------------------------------
Update authentication default . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[fujii]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[embrace]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[embrace]] != null && ! [[embrace]] . isCustomLogoutSuccess ( ) ) { [[embrace]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 102 ---------------------------------------------
Lookup the primary keys --> Get all parents from database --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > [[sids]] ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , [[sids]] ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[contravention]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > [[carburetor]] ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , [[carburetor]] ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 103 ---------------------------------------------
Set the login processing url . --> Create a registered facilitating object --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String [[loginProcessingUrl]] ) { this . [[loginProcessingUrl]] = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[facilitating]] ( String [[everglades]] ) { this . [[blindfolded]] = [[facilitating]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[facilitating]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 104 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 77 / 26 / 1 / 104:  10%|█         | 104/1000 [02:20<20:11,  1.35s/it][Succeeded / Failed / Skipped / Total] 78 / 26 / 1 / 105:  10%|█         | 105/1000 [02:25<20:41,  1.39s/it][Succeeded / Failed / Skipped / Total] 78 / 26 / 1 / 105:  11%|█         | 106/1000 [02:26<20:33,  1.38s/it][Succeeded / Failed / Skipped / Total] 79 / 26 / 1 / 106:  11%|█         | 106/1000 [02:26<20:33,  1.38s/it][Succeeded / Failed / Skipped / Total] 79 / 26 / 1 / 106:  11%|█         | 107/1000 [02:26<20:25,  1.37s/it][Succeeded / Failed / Skipped / Total] 79 / 27 / 1 / 107:  11%|█         | 107/1000 [02:26<20:25,  1.37s/it][Succeeded / Failed / Skipped / Total] 79 / 27 / 1 / 107:  11%|█         | 108/1000 [02:28<20:22,  1.37s/it][Succeeded / Failed / Skipped / Total] 80 / 27 / 1 / 108:  11%|█         | 108/1000 [02:28<20:22,  1.37s/it][Succeeded / Failed / Skipped / Total] 80 / 27 / 1 / 108:  11%|█         | 109/1000 [02:29<20:22,  1.37s/it][Succeeded / Failed / Skipped / Total] 80 / 28 / 1 / 109:  11%|█         | 109/1000 [02:29<20:22,  1.37s/it][Succeeded / Failed / Skipped / Total] 80 / 28 / 1 / 109:  11%|█         | 110/1000 [02:33<20:39,  1.39s/it]Search for a single attribute values . --> Get multiple servers --> Socre: 1.0

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String [[base]] , final String filter , final Object [ ] params , final String [[attributeName]] ) { String [ ] [[attributeNames]] = new String [ ] { [[attributeName]] } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( [[base]] , filter , params , [[attributeNames]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > [[values]] = map . get ( [[attributeName]] ) ; if ( [[values]] != null ) { result . addAll ( [[values]] ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[bonfires]] ( final String [[sasa]] , final String filter , final Object [ ] params , final String [[angst]] ) { String [ ] [[communicator]] = new String [ ] { [[angst]] } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( [[sasa]] , filter , params , [[communicator]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > [[indeedy]] = map . get ( [[angst]] ) ; if ( [[indeedy]] != null ) { result . addAll ( [[indeedy]] ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 105 ---------------------------------------------
Updates all the access defaults . --> libelous is enabled --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[libelous]] ( B [[corney]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[corney]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 106 ---------------------------------------------
Encodes the given cookieTokens . --> Encode cookieTokens --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[butchers]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 107 ---------------------------------------------
Maps password to string . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[mapPassword]] ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[smidgen]] ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 108 ---------------------------------------------
Returns all authorities of the given collection of authorities . --> map all grities --> Socre: 1.0

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[authorities]] ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( [[authorities]] . size ( ) ) ; for ( GrantedAuthority [[authority]] : [[authorities]] ) { [[mapped]] . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[grated]] ) { HashSet < GrantedAuthority > [[commuted]] = new HashSet <> ( [[grated]] . size ( ) ) ; for ( GrantedAuthority [[gluttons]] : [[grated]] ) { [[commuted]] . add ( mapAuthority ( [[gluttons]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[commuted]] . add ( defaultAuthority ) ; } return [[commuted]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 109 ---------------------------------------------
Check if principal has changed . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest [[request]] , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[dang]] ( HttpServletRequest [[baling]] , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( [[baling]] ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
[Succeeded / Failed / Skipped / Total] 80 / 29 / 1 / 110:  11%|█         | 110/1000 [02:33<20:39,  1.39s/it][Succeeded / Failed / Skipped / Total] 80 / 29 / 1 / 110:  11%|█         | 111/1000 [02:39<21:19,  1.44s/it][Succeeded / Failed / Skipped / Total] 81 / 29 / 1 / 111:  11%|█         | 111/1000 [02:39<21:19,  1.44s/it][Succeeded / Failed / Skipped / Total] 81 / 29 / 1 / 111:  11%|█         | 112/1000 [02:46<21:58,  1.48s/it][Succeeded / Failed / Skipped / Total] 82 / 29 / 1 / 112:  11%|█         | 112/1000 [02:46<21:58,  1.48s/it][Succeeded / Failed / Skipped / Total] 82 / 29 / 1 / 112:  11%|█▏        | 113/1000 [02:48<22:05,  1.49s/it][Succeeded / Failed / Skipped / Total] 82 / 30 / 1 / 113:  11%|█▏        | 113/1000 [02:48<22:05,  1.49s/it][Succeeded / Failed / Skipped / Total] 82 / 30 / 1 / 113:  11%|█▏        | 114/1000 [02:54<22:33,  1.53s/it][Succeeded / Failed / Skipped / Total] 83 / 30 / 1 / 114:  11%|█▏        | 114/1000 [02:54<22:33,  1.53s/it][Succeeded / Failed / Skipped / Total] 83 / 30 / 1 / 114:  12%|█▏        | 115/1000 [02:54<22:24,  1.52s/it]--------------------------------------------- Result 110 ---------------------------------------------
Performs authentication authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse [[response]] ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object [[credentials]] = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , [[credentials]] ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , [[response]] , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , [[response]] , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse [[nacho]] ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object [[spectator]] = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , [[spectator]] ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , [[nacho]] , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , [[nacho]] , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 111 ---------------------------------------------
Authenticated authentication . --> Implementation of authenticate . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[blabbermouth]] ) throws AuthenticationException { if ( ! ( [[blabbermouth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[blabbermouth]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 112 ---------------------------------------------
Extracts the cookie name from the request . --> Return ravaged or ravaged string --> Socre: 1.0

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest [[request]] ) { Cookie [ ] [[cookies]] = [[request]] . getCookies ( ) ; if ( ( [[cookies]] == null ) || ( [[cookies]] . length == 0 ) ) { return null ; } for ( Cookie [[cookie]] : [[cookies]] ) { if ( cookieName . equals ( [[cookie]] . getName ( ) ) ) { return [[cookie]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[scold]] ( HttpServletRequest [[falwell]] ) { Cookie [ ] [[dung]] = [[falwell]] . getCookies ( ) ; if ( ( [[dung]] == null ) || ( [[dung]] . length == 0 ) ) { return null ; } for ( Cookie [[ravaged]] : [[dung]] ) { if ( cookieName . equals ( [[ravaged]] . getName ( ) ) ) { return [[ravaged]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 113 ---------------------------------------------
Get the port for the service url . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL [[casServiceUrl]] ) { int port = [[casServiceUrl]] . getPort ( ) ; if ( port == - 1 ) { port = [[casServiceUrl]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[danes]] ( URL [[economists]] ) { int port = [[economists]] . getPort ( ) ; if ( port == - 1 ) { port = [[economists]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 114 ---------------------------------------------
Get the query string . --> dewar --> Socre: 1.0

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest [[request]] , final Pattern [[artifactPattern]] ) { final String query = [[request]] . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = [[artifactPattern]] . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[dewar]] ( final HttpServletRequest [[archipelago]] , final Pattern [[nadav]] ) { final String query = [[archipelago]] . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = [[nadav]] . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 115 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 83 / 31 / 1 / 115:  12%|█▏        | 115/1000 [02:54<22:24,  1.52s/it][Succeeded / Failed / Skipped / Total] 83 / 31 / 1 / 115:  12%|█▏        | 116/1000 [02:55<22:19,  1.52s/it][Succeeded / Failed / Skipped / Total] 83 / 32 / 1 / 116:  12%|█▏        | 116/1000 [02:55<22:19,  1.52s/it][Succeeded / Failed / Skipped / Total] 83 / 32 / 1 / 116:  12%|█▏        | 117/1000 [02:55<22:07,  1.50s/it][Succeeded / Failed / Skipped / Total] 84 / 32 / 1 / 117:  12%|█▏        | 117/1000 [02:55<22:07,  1.50s/it][Succeeded / Failed / Skipped / Total] 84 / 32 / 1 / 117:  12%|█▏        | 118/1000 [03:00<22:30,  1.53s/it][Succeeded / Failed / Skipped / Total] 85 / 32 / 1 / 118:  12%|█▏        | 118/1000 [03:00<22:30,  1.53s/it][Succeeded / Failed / Skipped / Total] 85 / 32 / 1 / 118:  12%|█▏        | 119/1000 [03:01<22:20,  1.52s/it][Succeeded / Failed / Skipped / Total] 86 / 32 / 1 / 119:  12%|█▏        | 119/1000 [03:01<22:20,  1.52s/it][Succeeded / Failed / Skipped / Total] 86 / 32 / 1 / 119:  12%|█▏        | 120/1000 [03:04<22:33,  1.54s/it][Succeeded / Failed / Skipped / Total] 87 / 32 / 1 / 120:  12%|█▏        | 120/1000 [03:04<22:33,  1.54s/it][Succeeded / Failed / Skipped / Total] 87 / 32 / 1 / 120:  12%|█▏        | 121/1000 [03:05<22:28,  1.53s/it]Get the principal . --> [[[FAILED]]]

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[authentication]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[petals]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[petals]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[petals]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( [[petals]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 116 ---------------------------------------------
Gets the full URL of the internationalized request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[josiah]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 117 ---------------------------------------------
Log authentication . --> logout logout method --> Socre: 1.0

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext [[context]] = SecurityContextHolder . getContext ( ) ; [[context]] . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext [[fluctuations]] = SecurityContextHolder . getContext ( ) ; [[fluctuations]] . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 118 ---------------------------------------------
Initializes the user s list --> Create a new user s list --> Socre: 1.0

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[userBuilder]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[userBuilder]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[attach]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[attach]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 119 ---------------------------------------------
Render the tag . --> dilapidated --> Socre: 1.0

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[dilapidated]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 120 ---------------------------------------------
Sets the contextEnvironment properties . --> tAMs --> Socre: 1.0

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > [[environment]] ) { Assert . notEmpty ( [[environment]] , "environment must not be empty" ) ; this . [[contextEnvironmentProperties]] = new Hashtable <> ( [[environment]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[tamar]] ( Map < String , Object > [[redwoods]] ) { Assert . notEmpty ( [[redwoods]] , "environment must not be empty" ) ; this . [[darian]] = new Hashtable <> ( [[redwoods]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 121 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 88 / 32 / 1 / 121:  12%|█▏        | 121/1000 [03:05<22:28,  1.53s/it][Succeeded / Failed / Skipped / Total] 88 / 32 / 1 / 121:  12%|█▏        | 122/1000 [03:10<22:52,  1.56s/it][Succeeded / Failed / Skipped / Total] 88 / 33 / 1 / 122:  12%|█▏        | 122/1000 [03:10<22:52,  1.56s/it][Succeeded / Failed / Skipped / Total] 88 / 33 / 1 / 122:  12%|█▏        | 123/1000 [03:11<22:46,  1.56s/it][Succeeded / Failed / Skipped / Total] 89 / 33 / 1 / 123:  12%|█▏        | 123/1000 [03:11<22:46,  1.56s/it][Succeeded / Failed / Skipped / Total] 89 / 33 / 1 / 123:  12%|█▏        | 124/1000 [03:19<23:31,  1.61s/it][Succeeded / Failed / Skipped / Total] 90 / 33 / 1 / 124:  12%|█▏        | 124/1000 [03:19<23:31,  1.61s/it][Succeeded / Failed / Skipped / Total] 90 / 33 / 1 / 124:  12%|█▎        | 125/1000 [03:22<23:37,  1.62s/it][Succeeded / Failed / Skipped / Total] 90 / 34 / 1 / 125:  12%|█▎        | 125/1000 [03:22<23:37,  1.62s/it][Succeeded / Failed / Skipped / Total] 90 / 34 / 1 / 125:  13%|█▎        | 126/1000 [03:26<23:50,  1.64s/it]Gets the UserDetailsService . --> Get UserDetailsService object --> Socre: 1.0

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[herfirst]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 122 ---------------------------------------------
Sets the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int [[maxAge]] , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( [[maxAge]] ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( [[maxAge]] < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[cleanest]] ( String [ ] tokens , int [[courier]] , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( [[courier]] ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( [[courier]] < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 123 ---------------------------------------------
Add additional parameters . --> tars method --> Socre: 1.0

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . [[codeVerifierGenerator]] . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[tars]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . [[keyholes]] . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 124 ---------------------------------------------
Create the MethodSecurityExpressionOperations . --> Create a MethodSecurityExpressionOperations --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication authentication , MethodInvocation [[invocation]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( [[invocation]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication authentication , MethodInvocation [[cheeseburgers]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( [[cheeseburgers]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 125 ---------------------------------------------
Checks whether the authentication is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[clause]] ( ) { Authentication [[coincident]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[coincident]] != null && [[coincident]] . isAuthenticated ( ) && ! ( [[coincident]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 126 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 90 / 35 / 1 / 126:  13%|█▎        | 126/1000 [03:26<23:50,  1.64s/it][Succeeded / Failed / Skipped / Total] 90 / 35 / 1 / 126:  13%|█▎        | 127/1000 [03:29<23:58,  1.65s/it][Succeeded / Failed / Skipped / Total] 91 / 35 / 1 / 127:  13%|█▎        | 127/1000 [03:29<23:58,  1.65s/it][Succeeded / Failed / Skipped / Total] 91 / 35 / 1 / 127:  13%|█▎        | 128/1000 [03:32<24:04,  1.66s/it][Succeeded / Failed / Skipped / Total] 91 / 36 / 1 / 128:  13%|█▎        | 128/1000 [03:32<24:04,  1.66s/it][Succeeded / Failed / Skipped / Total] 91 / 36 / 1 / 128:  13%|█▎        | 129/1000 [03:39<24:39,  1.70s/it][Succeeded / Failed / Skipped / Total] 92 / 36 / 1 / 129:  13%|█▎        | 129/1000 [03:39<24:39,  1.70s/it][Succeeded / Failed / Skipped / Total] 92 / 36 / 1 / 129:  13%|█▎        | 130/1000 [03:40<24:36,  1.70s/it][Succeeded / Failed / Skipped / Total] 92 / 37 / 1 / 130:  13%|█▎        | 130/1000 [03:40<24:36,  1.70s/it][Succeeded / Failed / Skipped / Total] 92 / 37 / 1 / 130:  13%|█▎        | 131/1000 [03:40<24:25,  1.69s/it][Succeeded / Failed / Skipped / Total] 92 / 38 / 1 / 131:  13%|█▎        | 131/1000 [03:40<24:25,  1.69s/it][Succeeded / Failed / Skipped / Total] 92 / 38 / 1 / 131:  13%|█▎        | 132/1000 [03:41<24:18,  1.68s/it]Resolves an argument . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[reactiveSecurityContext]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[reactiveSecurityContext]] == null ) { return null ; } return [[reactiveSecurityContext]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[hawthorn]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[hawthorn]] == null ) { return null ; } return [[hawthorn]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 127 ---------------------------------------------
URL encode value . --> URLEncode a string --> Socre: 1.0

[[[[Adv]]]]: private String utf8UrlEncode ( String [[value]] ) { try { return URLEncoder . encode ( [[value]] , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String utf8UrlEncode ( String [[lavatories]] ) { try { return URLEncoder . encode ( [[lavatories]] , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 128 ---------------------------------------------
Calls service ticketRequest . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( [[request]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[orchestrate]] ( final HttpServletRequest [[sleepwalker]] , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( [[sleepwalker]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 129 ---------------------------------------------
Returns cached JWKSet . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . [[webClient]] . get ( ) . uri ( this . [[jwkSetURL]] ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[devilishly]] ( ) { return this . [[internet]] . get ( ) . uri ( this . [[amadé]] ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 130 ---------------------------------------------
Determine if the proxy agent is enabled . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[injurious]] ( final HttpServletRequest [[beggin]] ) { final boolean [[archipelago]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[beggin]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[archipelago]] ) ; } return [[archipelago]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 131 ---------------------------------------------
Build the provider url . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildProviderUrl]] ( List < String > [[urls]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[urls]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder [[providerUrl]] = new StringBuilder ( ) ; for ( String serverUrl : [[urls]] ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[providerUrl]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[providerUrl]] . append ( "/" ) ; } [[providerUrl]] . append ( trimmedBaseDn ) ; [[providerUrl]] . append ( " " ) ; } return [[providerUrl]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String [[overflowing]] ( List < String > [[subway]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[subway]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder [[albany]] = new StringBuilder ( ) ; for ( String serverUrl : [[subway]] ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[albany]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[albany]] . append ( "/" ) ; } [[albany]] . append ( trimmedBaseDn ) ; [[albany]] . append ( " " ) ; } return [[albany]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 132 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 93 / 38 / 1 / 132:  13%|█▎        | 132/1000 [03:41<24:18,  1.68s/it][Succeeded / Failed / Skipped / Total] 93 / 38 / 1 / 132:  13%|█▎        | 133/1000 [03:45<24:28,  1.69s/it][Succeeded / Failed / Skipped / Total] 93 / 39 / 1 / 133:  13%|█▎        | 133/1000 [03:45<24:28,  1.69s/it][Succeeded / Failed / Skipped / Total] 93 / 39 / 1 / 133:  13%|█▎        | 134/1000 [03:52<25:01,  1.73s/it][Succeeded / Failed / Skipped / Total] 93 / 40 / 1 / 134:  13%|█▎        | 134/1000 [03:52<25:01,  1.73s/it][Succeeded / Failed / Skipped / Total] 93 / 40 / 1 / 134:  14%|█▎        | 135/1000 [03:52<24:51,  1.72s/it][Succeeded / Failed / Skipped / Total] 93 / 41 / 1 / 135:  14%|█▎        | 135/1000 [03:52<24:51,  1.72s/it][Succeeded / Failed / Skipped / Total] 93 / 41 / 1 / 135:  14%|█▎        | 136/1000 [03:54<24:46,  1.72s/it][Succeeded / Failed / Skipped / Total] 93 / 42 / 1 / 136:  14%|█▎        | 136/1000 [03:54<24:46,  1.72s/it][Succeeded / Failed / Skipped / Total] 93 / 42 / 1 / 136:  14%|█▎        | 137/1000 [04:01<25:22,  1.76s/it][Succeeded / Failed / Skipped / Total] 94 / 42 / 1 / 137:  14%|█▎        | 137/1000 [04:01<25:22,  1.76s/it][Succeeded / Failed / Skipped / Total] 94 / 42 / 1 / 137:  14%|█▍        | 138/1000 [04:02<25:14,  1.76s/it][Succeeded / Failed / Skipped / Total] 95 / 42 / 1 / 138:  14%|█▍        | 138/1000 [04:02<25:14,  1.76s/it][Succeeded / Failed / Skipped / Total] 95 / 42 / 1 / 138:  14%|█▍        | 139/1000 [04:07<25:33,  1.78s/it]load user by assertion . --> split SMS authentication --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion [[assertion]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[assertion]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[splittin]] ( final Assertion [[chickened]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[chickened]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 133 ---------------------------------------------
proxy ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "[[False]]" != "[[False]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[gedo]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "[[Fujita]]" != "[[Fujita]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 134 ---------------------------------------------
Get the GrantedAuthority for the current user . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[theologian]] ( ) { List < String > [[communicator]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[cintra]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[communicator]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[communicator]] + " mapped to Granted Authorities: " + [[cintra]] ) ; } return [[cintra]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 135 ---------------------------------------------
Determines if the service ticket request requires authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean [[result]] = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[regimented]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean [[tapeworm]] = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[tapeworm]] ) ; } return [[tapeworm]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 136 ---------------------------------------------
Gets the pre - defined principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[sacrifice]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 137 ---------------------------------------------
Preload map . --> Pre - processes a orgMap . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[result]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[entry]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[entry]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[result]] . put ( ( String ) [[entry]] . getKey ( ) , getGrantedAuthorityCollection ( [[entry]] . getValue ( ) ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[despereaux]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[nihilistic]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[nihilistic]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[despereaux]] . put ( ( String ) [[nihilistic]] . getKey ( ) , getGrantedAuthorityCollection ( [[nihilistic]] . getValue ( ) ) ) ; } return [[despereaux]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 138 ---------------------------------------------
Get the list of roles for the given value . --> Get metantedAuthorityCollection --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object [[value]] ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , [[value]] ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object [[lebanese]] ) { Collection < GrantedAuthority > [[metaphysics]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[metaphysics]] , [[lebanese]] ) ; return [[metaphysics]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
[Succeeded / Failed / Skipped / Total] 95 / 43 / 1 / 139:  14%|█▍        | 139/1000 [04:07<25:33,  1.78s/it][Succeeded / Failed / Skipped / Total] 95 / 43 / 1 / 139:  14%|█▍        | 140/1000 [04:08<25:28,  1.78s/it][Succeeded / Failed / Skipped / Total] 96 / 43 / 1 / 140:  14%|█▍        | 140/1000 [04:08<25:28,  1.78s/it][Succeeded / Failed / Skipped / Total] 96 / 43 / 1 / 140:  14%|█▍        | 141/1000 [04:11<25:34,  1.79s/it][Succeeded / Failed / Skipped / Total] 97 / 43 / 1 / 141:  14%|█▍        | 141/1000 [04:11<25:34,  1.79s/it][Succeeded / Failed / Skipped / Total] 97 / 43 / 1 / 141:  14%|█▍        | 142/1000 [04:14<25:37,  1.79s/it][Succeeded / Failed / Skipped / Total] 97 / 44 / 1 / 142:  14%|█▍        | 142/1000 [04:14<25:37,  1.79s/it][Succeeded / Failed / Skipped / Total] 97 / 44 / 1 / 142:  14%|█▍        | 143/1000 [04:15<25:29,  1.79s/it][Succeeded / Failed / Skipped / Total] 98 / 44 / 1 / 143:  14%|█▍        | 143/1000 [04:15<25:29,  1.79s/it][Succeeded / Failed / Skipped / Total] 98 / 44 / 1 / 143:  14%|█▍        | 144/1000 [04:16<25:23,  1.78s/it][Succeeded / Failed / Skipped / Total] 99 / 44 / 1 / 144:  14%|█▍        | 144/1000 [04:16<25:23,  1.78s/it][Succeeded / Failed / Skipped / Total] 99 / 44 / 1 / 144:  14%|█▍        | 145/1000 [04:19<25:32,  1.79s/it]--------------------------------------------- Result 139 ---------------------------------------------
Gets the shared object . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[plowed]] > [[plowed]] getSharedObject ( Class < [[plowed]] > sharedType ) { return ( [[plowed]] ) this . [[muppet]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 140 ---------------------------------------------
Builds the redirect url for the request . --> Get berthold --> Socre: 1.0

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[berthold]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 141 ---------------------------------------------
Invoke the advisorProceed . --> Generate austere token --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object [[austere]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 142 ---------------------------------------------
Gets the J2EE principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = [[httpRequest]] . getUserPrincipal ( ) == null ? null : [[httpRequest]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[deepens]] ( HttpServletRequest [[interventions]] ) { Object [[electrodes]] = [[interventions]] . getUserPrincipal ( ) == null ? null : [[interventions]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[electrodes]] ) ; } return [[electrodes]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 143 ---------------------------------------------
Returns the array of roles that have any role . --> Get affiliations --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... roles ) { for ( int i = 0 ; i < roles . length ; i ++ ) { roles [ i ] = "ROLE_" + roles [ i ] ; } return roles ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[affiliations]] ( String ... roles ) { for ( int i = 0 ; i < roles . length ; i ++ ) { roles [ i ] = "ROLE_" + roles [ i ] ; } return roles ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 144 ---------------------------------------------
Adds the authority collection . --> egocentric gets called from GrGNAuthority --> Socre: 1.0

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > [[result]] , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[egocentric]] ( Collection < GrantedAuthority > [[cocoon]] , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[egocentric]] ( [[cocoon]] , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[egocentric]] ( [[cocoon]] , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[egocentric]] ( [[cocoon]] , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { [[cocoon]] . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 145 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 44 / 1 / 145:  14%|█▍        | 145/1000 [04:19<25:32,  1.79s/it][Succeeded / Failed / Skipped / Total] 100 / 44 / 1 / 145:  15%|█▍        | 146/1000 [04:23<25:42,  1.81s/it][Succeeded / Failed / Skipped / Total] 100 / 45 / 1 / 146:  15%|█▍        | 146/1000 [04:23<25:42,  1.81s/it][Succeeded / Failed / Skipped / Total] 100 / 45 / 1 / 146:  15%|█▍        | 147/1000 [04:24<25:36,  1.80s/it][Succeeded / Failed / Skipped / Total] 101 / 45 / 1 / 147:  15%|█▍        | 147/1000 [04:24<25:36,  1.80s/it][Succeeded / Failed / Skipped / Total] 101 / 45 / 1 / 147:  15%|█▍        | 148/1000 [04:31<26:03,  1.83s/it][Succeeded / Failed / Skipped / Total] 102 / 45 / 1 / 148:  15%|█▍        | 148/1000 [04:31<26:03,  1.83s/it][Succeeded / Failed / Skipped / Total] 102 / 45 / 1 / 148:  15%|█▍        | 149/1000 [04:34<26:07,  1.84s/it][Succeeded / Failed / Skipped / Total] 103 / 45 / 1 / 149:  15%|█▍        | 149/1000 [04:34<26:07,  1.84s/it][Succeeded / Failed / Skipped / Total] 103 / 45 / 1 / 149:  15%|█▌        | 150/1000 [04:34<25:56,  1.83s/it][Succeeded / Failed / Skipped / Total] 104 / 45 / 1 / 150:  15%|█▌        | 150/1000 [04:34<25:56,  1.83s/it][Succeeded / Failed / Skipped / Total] 104 / 45 / 1 / 150:  15%|█▌        | 151/1000 [04:35<25:47,  1.82s/it][Succeeded / Failed / Skipped / Total] 104 / 46 / 1 / 151:  15%|█▌        | 151/1000 [04:35<25:47,  1.82s/it][Succeeded / Failed / Skipped / Total] 104 / 46 / 1 / 151:  15%|█▌        | 152/1000 [04:35<25:36,  1.81s/it][Succeeded / Failed / Skipped / Total] 104 / 46 / 2 / 152:  15%|█▌        | 152/1000 [04:35<25:36,  1.81s/it][Succeeded / Failed / Skipped / Total] 104 / 46 / 2 / 152:  15%|█▌        | 153/1000 [04:36<25:30,  1.81s/it][Succeeded / Failed / Skipped / Total] 105 / 46 / 2 / 153:  15%|█▌        | 153/1000 [04:36<25:30,  1.81s/it][Succeeded / Failed / Skipped / Total] 105 / 46 / 2 / 153:  15%|█▌        | 154/1000 [04:43<25:56,  1.84s/it]Get the list of authorities for the specified attributes . --> Get brunel data --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > [[gaList]] = new ArrayList <> ( ) ; for ( String attribute : [[attributes]] ) { Collection < GrantedAuthority > [[c]] = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( [[c]] != null ) { [[gaList]] . addAll ( [[c]] ) ; } } [[gaList]] . trimToSize ( ) ; return [[gaList]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[brunel]] ( Collection < String > [[bonney]] ) { ArrayList < GrantedAuthority > [[wheels]] = new ArrayList <> ( ) ; for ( String attribute : [[bonney]] ) { Collection < GrantedAuthority > [[arguin]] = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( [[arguin]] != null ) { [[wheels]] . addAll ( [[arguin]] ) ; } } [[wheels]] . trimToSize ( ) ; return [[wheels]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 146 ---------------------------------------------
Checks if the user has role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String role ) { Assert . isTrue ( ! role . startsWith ( "ROLE_" ) , ( ) -> role + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + role ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[ambulances]] ( String role ) { Assert . isTrue ( ! role . startsWith ( "ROLE_" ) , ( ) -> role + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + role ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 147 ---------------------------------------------
Concatenate arrays . --> dieroglyphic --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int length = 0 ; for ( byte [ ] array : [[arrays]] ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[duckin]] ( byte [ ] ... [[hieroglyphic]] ) { int length = 0 ; for ( byte [ ] array : [[hieroglyphic]] ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[hieroglyphic]] ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 148 ---------------------------------------------
Set the current instance of the application . --> Default WebSecurity configurers . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter springSecurityFilterChain ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter [[adapter]] = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( [[adapter]] ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter springSecurityFilterChain ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter [[berger]] = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( [[berger]] ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 149 ---------------------------------------------
Sets the exit user URL . --> Do exitUserUrl --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[exitUserMatcher]] = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[chedda]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[concussion]] = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 150 ---------------------------------------------
Display a public page index --> Get ModelAndView --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact [[rnd]] = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , [[rnd]] ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[humbling]] ( ) { Contact [[lifer]] = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , [[lifer]] ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 151 ---------------------------------------------
Create a sub - array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] array , int [[beginIndex]] , int [[endIndex]] ) { int length = [[endIndex]] - [[beginIndex]] ; byte [ ] [[subarray]] = new byte [ length ] ; System . arraycopy ( array , [[beginIndex]] , [[subarray]] , 0 , length ) ; return [[subarray]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] array , int [[decorum]] , int [[appeared]] ) { int length = [[appeared]] - [[decorum]] ; byte [ ] [[boing]] = new byte [ length ] ; System . arraycopy ( array , [[decorum]] , [[boing]] , 0 , length ) ; return [[boing]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 152 ---------------------------------------------
Convert a Jwt jwt . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 153 ---------------------------------------------
Attempts to process a user . --> Gets the current value of the current Authentication --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest [[request]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[bigfoot]] ( HttpServletRequest [[assim]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 154 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 106 / 46 / 2 / 154:  15%|█▌        | 154/1000 [04:43<25:56,  1.84s/it][Succeeded / Failed / Skipped / Total] 106 / 46 / 2 / 154:  16%|█▌        | 155/1000 [04:51<26:29,  1.88s/it][Succeeded / Failed / Skipped / Total] 107 / 46 / 2 / 155:  16%|█▌        | 155/1000 [04:51<26:29,  1.88s/it][Succeeded / Failed / Skipped / Total] 107 / 46 / 2 / 155:  16%|█▌        | 156/1000 [04:52<26:21,  1.87s/it][Succeeded / Failed / Skipped / Total] 107 / 47 / 2 / 156:  16%|█▌        | 156/1000 [04:52<26:21,  1.87s/it][Succeeded / Failed / Skipped / Total] 108 / 47 / 2 / 157:  16%|█▌        | 157/1000 [04:52<26:10,  1.86s/it][Succeeded / Failed / Skipped / Total] 108 / 47 / 2 / 157:  16%|█▌        | 158/1000 [04:53<26:01,  1.86s/it][Succeeded / Failed / Skipped / Total] 108 / 48 / 2 / 158:  16%|█▌        | 158/1000 [04:53<26:01,  1.86s/it]Checks if the current url is authenticated . --> Force this request --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[forceful]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 155 ---------------------------------------------
Decodes a JWT token . --> Decodes a deauville message . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String [[token]] ) throws JwtException { JWT [[jwt]] = parse ( [[token]] ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[token]] , [[jwt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String [[deauville]] ) throws JwtException { JWT [[devotees]] = parse ( [[deauville]] ) ; if ( [[devotees]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[deauville]] , [[devotees]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[devotees]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 156 ---------------------------------------------
Process cookie tokens . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken [[token]] = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( [[token]] == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken [[denby]] = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( [[denby]] == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 157 ---------------------------------------------
Generates a new CSRF token . --> Gets the CsrfToken . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest [[request]] ) { return wrap ( [[request]] , this . delegate . generateToken ( [[request]] ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[bailor]] ( HttpServletRequest [[cranky]] ) { return wrap ( [[cranky]] , this . delegate . generateToken ( [[cranky]] ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 158 ---------------------------------------------
on login success . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[onLoginSuccess]] ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void [[dialectics]] ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 159 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 109 / 48 / 2 / 159:  16%|█▌        | 159/1000 [04:57<26:13,  1.87s/it][Succeeded / Failed / Skipped / Total] 109 / 48 / 2 / 159:  16%|█▌        | 160/1000 [05:00<26:18,  1.88s/it][Succeeded / Failed / Skipped / Total] 110 / 48 / 2 / 160:  16%|█▌        | 160/1000 [05:00<26:18,  1.88s/it][Succeeded / Failed / Skipped / Total] 111 / 48 / 2 / 161:  16%|█▌        | 161/1000 [05:07<26:42,  1.91s/it][Succeeded / Failed / Skipped / Total] 111 / 48 / 2 / 161:  16%|█▌        | 162/1000 [05:11<26:49,  1.92s/it][Succeeded / Failed / Skipped / Total] 111 / 49 / 2 / 162:  16%|█▌        | 162/1000 [05:11<26:49,  1.92s/it][Succeeded / Failed / Skipped / Total] 111 / 49 / 2 / 162:  16%|█▋        | 163/1000 [05:11<26:40,  1.91s/it][Succeeded / Failed / Skipped / Total] 112 / 49 / 2 / 163:  16%|█▋        | 163/1000 [05:11<26:40,  1.91s/it]Add permission . --> Get a ModelPermission --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[earlobe]] ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[earlobe]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[earlobe]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[earlobe]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[earlobe]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 160 ---------------------------------------------
Creates a new instance of InMemoryResource . --> Get InMemoryResource --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String users ) { InMemoryResource [[resource]] = new InMemoryResource ( users ) ; return fromResource ( [[resource]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String users ) { InMemoryResource [[bogotá]] = new InMemoryResource ( users ) ; return fromResource ( [[bogotá]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 161 ---------------------------------------------
Delete specified permission . --> region > buster --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String [[sid]] , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( [[sid]] ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[buster]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String [[reconstitute]] , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( [[reconstitute]] ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 162 ---------------------------------------------
Attempt to switch to a user --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken [[targetUserRequest]] ; String [[username]] = request . getParameter ( this . [[usernameParameter]] ) ; if ( [[username]] == null ) { [[username]] = "" ; } if ( this . [[logger]] . isDebugEnabled ( ) ) { this . [[logger]] . debug ( "Attempt to switch to user [" + [[username]] + "]" ) ; } UserDetails [[targetUser]] = this . userDetailsService . loadUserByUsername ( [[username]] ) ; this . userDetailsChecker . check ( [[targetUser]] ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken [[marino]] ; String [[templar]] = request . getParameter ( this . [[prehistoric]] ) ; if ( [[templar]] == null ) { [[templar]] = "" ; } if ( this . [[kwei]] . isDebugEnabled ( ) ) { this . [[kwei]] . debug ( "Attempt to switch to user [" + [[templar]] + "]" ) ; } UserDetails [[cogs]] = this . userDetailsService . loadUserByUsername ( [[templar]] ) ; this . userDetailsChecker . check ( [[cogs]] ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 163 ---------------------------------------------
Display a contact . --> region > trainee --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int [[contactId]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[contactId]] ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[trainee]] ( @ RequestParam ( "contactId" ) int [[razi]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[razi]] ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 164 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 113 / 49 / 2 / 164:  16%|█▋        | 164/1000 [05:11<26:29,  1.90s/it][Succeeded / Failed / Skipped / Total] 113 / 49 / 2 / 164:  16%|█▋        | 165/1000 [05:14<26:30,  1.90s/it][Succeeded / Failed / Skipped / Total] 114 / 49 / 2 / 165:  16%|█▋        | 165/1000 [05:14<26:30,  1.90s/it][Succeeded / Failed / Skipped / Total] 115 / 49 / 2 / 166:  17%|█▋        | 166/1000 [05:15<26:22,  1.90s/it][Succeeded / Failed / Skipped / Total] 115 / 49 / 2 / 166:  17%|█▋        | 167/1000 [05:19<26:33,  1.91s/it][Succeeded / Failed / Skipped / Total] 115 / 50 / 2 / 167:  17%|█▋        | 167/1000 [05:19<26:33,  1.91s/it][Succeeded / Failed / Skipped / Total] 116 / 50 / 2 / 168:  17%|█▋        | 168/1000 [05:24<26:45,  1.93s/it][Succeeded / Failed / Skipped / Total] 116 / 50 / 2 / 168:  17%|█▋        | 169/1000 [05:25<26:41,  1.93s/it][Succeeded / Failed / Skipped / Total] 117 / 50 / 2 / 169:  17%|█▋        | 169/1000 [05:25<26:41,  1.93s/it][Succeeded / Failed / Skipped / Total] 118 / 50 / 2 / 170:  17%|█▋        | 170/1000 [05:26<26:34,  1.92s/it][Succeeded / Failed / Skipped / Total] 118 / 50 / 2 / 170:  17%|█▋        | 171/1000 [05:28<26:33,  1.92s/it]Add permission to contact --> region > berger --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long [[contactId]] ) { Contact contact = contactManager . getById ( [[contactId]] ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "addPermission" , addPermission ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[model]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[faulk]] ( @ RequestParam ( "contactId" ) long [[berger]] ) { Contact contact = contactManager . getById ( [[berger]] ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > [[aahhh]] = new HashMap <> ( ) ; [[aahhh]] . put ( "addPermission" , addPermission ) ; [[aahhh]] . put ( "recipients" , listRecipients ( ) ) ; [[aahhh]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[aahhh]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 165 ---------------------------------------------
Returns the attribute values for the given name . --> Gets redeem . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[name]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[redeem]] ( String [[treatments]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[treatments]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 166 ---------------------------------------------
Encodes a string using UTF - 8 encoding . --> Encode hotdog --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[string]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[hotdog]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[hotdog]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 167 ---------------------------------------------
Evaluates access expression . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression [[accessExpression]] ; try { [[accessExpression]] = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[ioException]] = new IOException ( ) ; [[ioException]] . initCause ( e ) ; throw [[ioException]] ; } return ExpressionUtils . evaluateAsBoolean ( [[accessExpression]] , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[capitalization]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[gallery]] = getExpressionHandler ( ) ; Expression [[sacrifice]] ; try { [[sacrifice]] = [[gallery]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[lamaze]] = new IOException ( ) ; [[lamaze]] . initCause ( e ) ; throw [[lamaze]] ; } return ExpressionUtils . evaluateAsBoolean ( [[sacrifice]] , createExpressionEvaluationContext ( [[gallery]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 168 ---------------------------------------------
Finds attributes of the specified class . --> Returns null if targetClass is null --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[abuela]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 169 ---------------------------------------------
Decodes bytes . --> Generates redemption --> Socre: 1.0

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[redemption]] ( byte [ ] [[chechens]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[chechens]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 170 ---------------------------------------------
Gets the first attribute with the given name . --> Return null if not found --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > [[result]] = getAttributeValues ( [[name]] ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[appologize]] ( String [[topeka]] ) { List < String > [[dumpling]] = getAttributeValues ( [[topeka]] ) ; if ( [[dumpling]] . isEmpty ( ) ) { return null ; } else { return [[dumpling]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 171 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 119 / 50 / 2 / 171:  17%|█▋        | 171/1000 [05:28<26:33,  1.92s/it][Succeeded / Failed / Skipped / Total] 120 / 50 / 2 / 172:  17%|█▋        | 172/1000 [05:29<26:27,  1.92s/it][Succeeded / Failed / Skipped / Total] 120 / 50 / 2 / 172:  17%|█▋        | 173/1000 [05:32<26:29,  1.92s/it][Succeeded / Failed / Skipped / Total] 121 / 50 / 2 / 173:  17%|█▋        | 173/1000 [05:32<26:29,  1.92s/it][Succeeded / Failed / Skipped / Total] 122 / 50 / 2 / 174:  17%|█▋        | 174/1000 [05:35<26:30,  1.93s/it][Succeeded / Failed / Skipped / Total] 122 / 50 / 2 / 174:  18%|█▊        | 175/1000 [05:35<26:22,  1.92s/it][Succeeded / Failed / Skipped / Total] 123 / 50 / 2 / 175:  18%|█▊        | 175/1000 [05:35<26:22,  1.92s/it][Succeeded / Failed / Skipped / Total] 124 / 50 / 2 / 176:  18%|█▊        | 176/1000 [05:41<26:40,  1.94s/it][Succeeded / Failed / Skipped / Total] 124 / 50 / 2 / 176:  18%|█▊        | 177/1000 [05:44<26:40,  1.94s/it][Succeeded / Failed / Skipped / Total] 125 / 50 / 2 / 177:  18%|█▊        | 177/1000 [05:44<26:40,  1.94s/it]Gets the default role prefix . --> returns the ambience character from the corsets --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String [[defaultRolePrefix]] , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( [[defaultRolePrefix]] ) ) { return [[role]] ; } return [[defaultRolePrefix]] + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[ambience]] ( String [[corsets]] , String [[charged]] ) { if ( [[charged]] == null ) { return [[charged]] ; } if ( [[corsets]] == null || [[corsets]] . length ( ) == 0 ) { return [[charged]] ; } if ( [[charged]] . startsWith ( [[corsets]] ) ) { return [[charged]] ; } return [[corsets]] + [[charged]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 172 ---------------------------------------------
Adds information about a contact . --> addContact Method --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[form]] , BindingResult [[result]] ) { validator . validate ( [[form]] , [[result]] ) ; if ( [[result]] . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( [[form]] . getName ( ) , [[form]] . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[meaner]] , BindingResult [[chamaco]] ) { validator . validate ( [[meaner]] , [[chamaco]] ) ; if ( [[chamaco]] . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( [[meaner]] . getName ( ) , [[meaner]] . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 173 ---------------------------------------------
Get a random contact . --> Get random contact --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "[[True]]" == "[[True]]" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "[[Beefsteak]]" == "[[Beefsteak]]" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 174 ---------------------------------------------
Returns a collection of all the configuration attributes . --> Returns a collection of ConfigAttribute objects --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[allAttributes]] . addAll ( attributeList ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[gems]] ( ) { Set < ConfigAttribute > [[lot]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[lot]] . addAll ( attributeList ) ; } return [[lot]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 175 ---------------------------------------------
Handle an exception --> Declarative Services method --> Socre: 1.0

[[[[Adv]]]]: protected void [[handleBindException]] ( String userDn , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[ahman]] ( String userDn , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 176 ---------------------------------------------
Checks if the method name is a match . --> Does zurich string match? --> Socre: 1.0

[[[[Adv]]]]: private boolean isMatch ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean isMatch ( String [[forceful]] , String [[zurich]] ) { return ( [[zurich]] . endsWith ( "*" ) && [[forceful]] . startsWith ( [[zurich]] . substring ( 0 , [[zurich]] . length ( ) - 1 ) ) ) || ( [[zurich]] . startsWith ( "*" ) && [[forceful]] . endsWith ( [[zurich]] . substring ( 1 , [[zurich]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 177 ---------------------------------------------
Adds a secure method . --> Create an aga --> Socre: 1.0

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + [[attr]] + "]" ) ; } this . methodMap . put ( [[method]] , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[aga]] ( RegisteredMethod [[resurrect]] , List < ConfigAttribute > [[animated]] ) { Assert . notNull ( [[resurrect]] , "RegisteredMethod required" ) ; Assert . notNull ( [[animated]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[resurrect]] + "] with attributes [" + [[animated]] + "]" ) ; } this . methodMap . put ( [[resurrect]] , [[animated]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 178 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 126 / 50 / 2 / 178:  18%|█▊        | 178/1000 [05:54<27:16,  1.99s/it][Succeeded / Failed / Skipped / Total] 126 / 50 / 2 / 178:  18%|█▊        | 179/1000 [05:55<27:08,  1.98s/it][Succeeded / Failed / Skipped / Total] 126 / 51 / 2 / 179:  18%|█▊        | 179/1000 [05:55<27:08,  1.98s/it][Succeeded / Failed / Skipped / Total] 126 / 51 / 2 / 179:  18%|█▊        | 180/1000 [05:59<27:15,  2.00s/it][Succeeded / Failed / Skipped / Total] 126 / 52 / 2 / 180:  18%|█▊        | 180/1000 [05:59<27:15,  2.00s/it][Succeeded / Failed / Skipped / Total] 126 / 52 / 2 / 180:  18%|█▊        | 181/1000 [06:03<27:23,  2.01s/it][Succeeded / Failed / Skipped / Total] 126 / 53 / 2 / 181:  18%|█▊        | 181/1000 [06:03<27:23,  2.01s/it][Succeeded / Failed / Skipped / Total] 126 / 53 / 2 / 181:  18%|█▊        | 182/1000 [06:03<27:14,  2.00s/it][Succeeded / Failed / Skipped / Total] 127 / 53 / 2 / 182:  18%|█▊        | 182/1000 [06:03<27:14,  2.00s/it][Succeeded / Failed / Skipped / Total] 127 / 53 / 2 / 182:  18%|█▊        | 183/1000 [06:04<27:07,  1.99s/it][Succeeded / Failed / Skipped / Total] 127 / 54 / 2 / 183:  18%|█▊        | 183/1000 [06:04<27:07,  1.99s/it][Succeeded / Failed / Skipped / Total] 127 / 54 / 2 / 183:  18%|█▊        | 184/1000 [06:04<26:58,  1.98s/it][Succeeded / Failed / Skipped / Total] 128 / 54 / 2 / 184:  18%|█▊        | 184/1000 [06:04<26:58,  1.98s/it][Succeeded / Failed / Skipped / Total] 128 / 54 / 2 / 184:  18%|█▊        | 185/1000 [06:10<27:14,  2.01s/it]Removes the authentication attributes from the session . --> heini --> Socre: 1.0

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest [[request]] ) { HttpSession session = [[request]] . getSession ( "[[False]]" != "[[False]]" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[heini]] ( HttpServletRequest [[authorized]] ) { HttpSession session = [[authorized]] . getSession ( "[[Ransomed]]" != "[[Ransomed]]" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 179 ---------------------------------------------
Returns the field with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > clazz , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[dashwood]] ( Class < ? > clazz , String [[browns]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[browns]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[browns]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 180 ---------------------------------------------
Returns the any request . --> [[[FAILED]]]

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "[[True]]" == "[[True]]" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[lamaze]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C [[pitchforks]] = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "[[Interactions]]" == "[[Interactions]]" ; return [[pitchforks]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 181 ---------------------------------------------
Extracts prefix . --> [[[FAILED]]]

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int secondBrace = encPass . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int secondBrace = encPass . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 182 ---------------------------------------------
Validate filter stack . --> Check if red Graphics are enabled --> Socre: 1.0

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[filters]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[filters]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[filters]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[filters]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[filters]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[filters]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[filters]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[redfoot]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[redfoot]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[redfoot]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[redfoot]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[redfoot]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[redfoot]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[redfoot]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[redfoot]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[redfoot]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 183 ---------------------------------------------
Helper method to create service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse [[response]] ) { return CommonUtils . constructServiceUrl ( null , [[response]] , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[dorina]] ( final HttpServletRequest request , final HttpServletResponse [[levied]] ) { return CommonUtils . constructServiceUrl ( null , [[levied]] , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 184 ---------------------------------------------
Creates the redirect url . --> Returns a cruelly request --> Socre: 1.0

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String [[serviceUrl]] ) { return CommonUtils . constructRedirectUrl ( this . [[loginUrl]] , this . serviceProperties . getServiceParameter ( ) , [[serviceUrl]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[acha]] ( final String [[cruelly]] ) { return CommonUtils . constructRedirectUrl ( this . [[archipelago]] , this . serviceProperties . getServiceParameter ( ) , [[cruelly]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 185 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 129 / 54 / 2 / 185:  18%|█▊        | 185/1000 [06:10<27:14,  2.01s/it][Succeeded / Failed / Skipped / Total] 129 / 54 / 2 / 185:  19%|█▊        | 186/1000 [06:12<27:10,  2.00s/it][Succeeded / Failed / Skipped / Total] 130 / 54 / 2 / 186:  19%|█▊        | 186/1000 [06:12<27:10,  2.00s/it][Succeeded / Failed / Skipped / Total] 130 / 54 / 2 / 186:  19%|█▊        | 187/1000 [06:16<27:18,  2.02s/it][Succeeded / Failed / Skipped / Total] 131 / 54 / 2 / 187:  19%|█▊        | 187/1000 [06:16<27:18,  2.02s/it][Succeeded / Failed / Skipped / Total] 131 / 54 / 2 / 187:  19%|█▉        | 188/1000 [06:19<27:17,  2.02s/it][Succeeded / Failed / Skipped / Total] 131 / 55 / 2 / 188:  19%|█▉        | 188/1000 [06:19<27:17,  2.02s/it][Succeeded / Failed / Skipped / Total] 131 / 55 / 2 / 188:  19%|█▉        | 189/1000 [06:19<27:10,  2.01s/it][Succeeded / Failed / Skipped / Total] 131 / 56 / 2 / 189:  19%|█▉        | 189/1000 [06:19<27:10,  2.01s/it][Succeeded / Failed / Skipped / Total] 131 / 56 / 2 / 189:  19%|█▉        | 190/1000 [06:20<27:00,  2.00s/it][Succeeded / Failed / Skipped / Total] 131 / 56 / 3 / 190:  19%|█▉        | 190/1000 [06:20<27:00,  2.00s/it][Succeeded / Failed / Skipped / Total] 131 / 56 / 3 / 190:  19%|█▉        | 191/1000 [06:29<27:28,  2.04s/it]Registers bean manager . --> Registers bean definition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[accessMgrBuilder]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[accessMgrBuilder]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[accessMgrBuilder]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[balle]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[balle]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[balle]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 186 ---------------------------------------------
Checks if the expected array matches the actual array . --> Return true if the expected array matches the expected array --> Socre: 1.0

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "[[False]]" != "[[False]]" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "[[Inhumane]]" != "[[Inhumane]]" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 187 ---------------------------------------------
Sends an access to the request . --> F743 - 3 --> Socre: 1.0

[[[[Adv]]]]: public void commence ( HttpServletRequest [[request]] , HttpServletResponse [[response]] , AuthenticationException [[arg2]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[response]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void commence ( HttpServletRequest [[boatman]] , HttpServletResponse [[swifty]] , AuthenticationException [[members]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[swifty]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 188 ---------------------------------------------
Returns all registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[extractorMap]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[judiciary]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[figgy]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 189 ---------------------------------------------
Lookup parameter names . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] [[annotations]] = parameterAnnotations [ i ] ; String parameterName = findParameterName ( [[annotations]] ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] [[newcomb]] = parameterAnnotations [ i ] ; String parameterName = findParameterName ( [[newcomb]] ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 190 ---------------------------------------------
convert ResultSet to a identifier --> [[[SKIPPED]]]

[[[[Adv]]]]: Serializable identifierFrom ( Serializable identifier , ResultSet resultSet ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 191 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 132 / 56 / 3 / 191:  19%|█▉        | 191/1000 [06:29<27:28,  2.04s/it][Succeeded / Failed / Skipped / Total] 132 / 56 / 3 / 191:  19%|█▉        | 192/1000 [06:32<27:29,  2.04s/it][Succeeded / Failed / Skipped / Total] 133 / 56 / 3 / 192:  19%|█▉        | 192/1000 [06:32<27:29,  2.04s/it][Succeeded / Failed / Skipped / Total] 133 / 56 / 3 / 192:  19%|█▉        | 193/1000 [06:36<27:39,  2.06s/it][Succeeded / Failed / Skipped / Total] 133 / 57 / 3 / 193:  19%|█▉        | 193/1000 [06:36<27:39,  2.06s/it][Succeeded / Failed / Skipped / Total] 133 / 57 / 3 / 193:  19%|█▉        | 194/1000 [06:43<27:55,  2.08s/it][Succeeded / Failed / Skipped / Total] 134 / 57 / 3 / 194:  19%|█▉        | 194/1000 [06:43<27:55,  2.08s/it][Succeeded / Failed / Skipped / Total] 134 / 57 / 3 / 194:  20%|█▉        | 195/1000 [06:44<27:48,  2.07s/it][Succeeded / Failed / Skipped / Total] 134 / 58 / 3 / 195:  20%|█▉        | 195/1000 [06:44<27:48,  2.07s/it][Succeeded / Failed / Skipped / Total] 134 / 58 / 3 / 195:  20%|█▉        | 196/1000 [06:44<27:38,  2.06s/it][Succeeded / Failed / Skipped / Total] 134 / 58 / 4 / 196:  20%|█▉        | 196/1000 [06:44<27:38,  2.06s/it][Succeeded / Failed / Skipped / Total] 134 / 58 / 4 / 196:  20%|█▉        | 197/1000 [06:45<27:31,  2.06s/it][Succeeded / Failed / Skipped / Total] 135 / 58 / 4 / 197:  20%|█▉        | 197/1000 [06:45<27:31,  2.06s/it][Succeeded / Failed / Skipped / Total] 135 / 58 / 4 / 197:  20%|█▉        | 198/1000 [06:46<27:26,  2.05s/it]Sets the resolved inputs for this request . --> Set counsellor --> Socre: 1.0

[[[[Adv]]]]: public void setResolveHiddenInputs ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . [[resolveHiddenInputs]] = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void setResolveHiddenInputs ( Function < HttpServletRequest , Map < String , String > > [[counsellor]] ) { Assert . notNull ( [[counsellor]] , "resolveHiddenInputs cannot be null" ) ; this . [[aditya]] = [[counsellor]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 192 ---------------------------------------------
Sets the default failure url . --> bath by militias --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . [[defaultFailureUrl]] = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[bath]] ( String [[militias]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[militias]] ) , ( ) -> "'" + [[militias]] + "' is not a valid redirect URL" ) ; this . [[salam]] = [[militias]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 193 ---------------------------------------------
Returns all authority list to set . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[userAuthorities]] ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > [[googled]] ) { Assert . notNull ( [[googled]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[googled]] . size ( ) ) ; for ( GrantedAuthority authority : [[googled]] ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 194 ---------------------------------------------
Builds the request URL . --> Generates a axl request --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String [[servletPath]] , String requestURI , String contextPath , String pathInfo , String [[queryString]] ) { StringBuilder url = new StringBuilder ( ) ; if ( [[servletPath]] != null ) { url . append ( [[servletPath]] ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[queryString]] != null ) { url . append ( "?" ) . append ( [[queryString]] ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[axl]] ( String [[anaheim]] , String requestURI , String contextPath , String pathInfo , String [[affraid]] ) { StringBuilder url = new StringBuilder ( ) ; if ( [[anaheim]] != null ) { url . append ( [[anaheim]] ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[affraid]] != null ) { url . append ( "?" ) . append ( [[affraid]] ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 195 ---------------------------------------------
Extracts the cause . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[zine]] ( Throwable [[ramallah]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[ramallah]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[ramallah]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 196 ---------------------------------------------
F743 - 1 --> [[[SKIPPED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher anyExchange ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 197 ---------------------------------------------
Update the object identity . --> create orRetrieveClassPrimaryKey --> Socre: 1.0

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity object , Sid [[owner]] ) { Long [[sidId]] = createOrRetrieveSidPrimaryKey ( [[owner]] , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , [[sidId]] , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity object , Sid [[sits]] ) { Long [[pluribus]] = createOrRetrieveSidPrimaryKey ( [[sits]] , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , [[pluribus]] , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 198 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 135 / 59 / 4 / 198:  20%|█▉        | 198/1000 [06:46<27:26,  2.05s/it][Succeeded / Failed / Skipped / Total] 135 / 59 / 4 / 198:  20%|█▉        | 199/1000 [06:49<27:27,  2.06s/it][Succeeded / Failed / Skipped / Total] 135 / 60 / 4 / 199:  20%|█▉        | 199/1000 [06:49<27:27,  2.06s/it][Succeeded / Failed / Skipped / Total] 135 / 60 / 4 / 199:  20%|██        | 200/1000 [06:54<27:37,  2.07s/it][Succeeded / Failed / Skipped / Total] 136 / 60 / 4 / 200:  20%|██        | 200/1000 [06:54<27:37,  2.07s/it][Succeeded / Failed / Skipped / Total] 136 / 60 / 4 / 200:  20%|██        | 201/1000 [06:59<27:47,  2.09s/it][Succeeded / Failed / Skipped / Total] 137 / 60 / 4 / 201:  20%|██        | 201/1000 [06:59<27:47,  2.09s/it][Succeeded / Failed / Skipped / Total] 137 / 60 / 4 / 201:  20%|██        | 202/1000 [07:00<27:42,  2.08s/it][Succeeded / Failed / Skipped / Total] 138 / 60 / 4 / 202:  20%|██        | 202/1000 [07:00<27:42,  2.08s/it][Succeeded / Failed / Skipped / Total] 139 / 60 / 4 / 203:  20%|██        | 203/1000 [07:00<27:32,  2.07s/it][Succeeded / Failed / Skipped / Total] 139 / 60 / 4 / 203:  20%|██        | 204/1000 [07:02<27:27,  2.07s/it][Succeeded / Failed / Skipped / Total] 140 / 60 / 4 / 204:  20%|██        | 204/1000 [07:02<27:27,  2.07s/it]Creates a list of OpenID attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[camorra]] ( String [[beauregard]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[beauregard]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 199 ---------------------------------------------
Checks if is absolute url . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String [[url]] ) { if ( [[url]] == null ) { return "[[False]]" != "[[False]]" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[bolen]] ( String [[tubular]] ) { if ( [[tubular]] == null ) { return "[[Prologue]]" != "[[Prologue]]" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[tubular]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 200 ---------------------------------------------
Create a textEncryptor --> Create TextEncryptor --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence [[bonnets]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[bonnets]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 201 ---------------------------------------------
Saves the specified request . --> F743 - 3 --> Socre: 1.0

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[savedRequest]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "[[False]]" != "[[False]]" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[rachmaninoff]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[lashed]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "[[Calms]]" != "[[Calms]]" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 202 ---------------------------------------------
Create a TextEncryptor with the given password . --> doshi --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( stronger ( password , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[doshi]] ( CharSequence password , CharSequence [[tester]] ) { return new HexEncodingTextEncryptor ( stronger ( password , [[tester]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 203 ---------------------------------------------
Text encryptor text . --> Returns the budde --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[budde]] ( CharSequence [[dt]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[dt]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 204 ---------------------------------------------
Gets a PathPatternMatcher from a HttpMethod . --> Create new enabled server webExchangeMatcher for given parameters --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > [[matchers]] = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { [[matchers]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( [[matchers]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[delusions]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > [[banking]] = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { [[banking]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( [[banking]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 205 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 141 / 60 / 4 / 205:  20%|██        | 205/1000 [07:07<27:36,  2.08s/it][Succeeded / Failed / Skipped / Total] 141 / 60 / 4 / 205:  21%|██        | 206/1000 [07:08<27:29,  2.08s/it][Succeeded / Failed / Skipped / Total] 142 / 60 / 4 / 206:  21%|██        | 206/1000 [07:08<27:29,  2.08s/it][Succeeded / Failed / Skipped / Total] 143 / 60 / 4 / 207:  21%|██        | 207/1000 [07:09<27:25,  2.07s/it][Succeeded / Failed / Skipped / Total] 143 / 60 / 4 / 207:  21%|██        | 208/1000 [07:10<27:17,  2.07s/it][Succeeded / Failed / Skipped / Total] 144 / 60 / 4 / 208:  21%|██        | 208/1000 [07:10<27:17,  2.07s/it][Succeeded / Failed / Skipped / Total] 145 / 60 / 4 / 209:  21%|██        | 209/1000 [07:11<27:12,  2.06s/it][Succeeded / Failed / Skipped / Total] 145 / 60 / 4 / 209:  21%|██        | 210/1000 [07:15<27:17,  2.07s/it]Create the database entries . --> Update an AccessControlEntry --> Socre: 1.0

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int [[i]] ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( [[i]] ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , [[i]] ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[chupa]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int [[vijay]] ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( [[vijay]] ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , [[vijay]] ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 206 ---------------------------------------------
Update the object identity . --> Flocks this implementation --> Socre: 1.0

[[[[Adv]]]]: protected void [[updateObjectIdentity]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "[[True]]" == "[[True]]" ) ; int count = jdbcOperations . update ( [[updateObjectIdentity]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void [[flocks]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "[[Bailor]]" == "[[Bailor]]" ) ; int count = jdbcOperations . update ( [[flocks]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 207 ---------------------------------------------
Write header . --> perceive requests --> Socre: 1.0

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[allowFromValue]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[allowFromValue]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[allowFromValue]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[allowFromValue]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[perceive]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[buzzed]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[buzzed]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[buzzed]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[buzzed]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 208 ---------------------------------------------
Determine the target URL . --> Generate benzedrine string . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( [[request]] , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[benzedrine]] ( HttpServletRequest [[eva]] , HttpServletResponse response , Authentication authentication ) { return [[benzedrine]] ( [[eva]] , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 209 ---------------------------------------------
Builds a userDn . --> Build a DistinguishedName object by authorised --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[username]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[username]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[authorised]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[authorised]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
[Succeeded / Failed / Skipped / Total] 146 / 60 / 4 / 210:  21%|██        | 210/1000 [07:15<27:17,  2.07s/it][Succeeded / Failed / Skipped / Total] 147 / 60 / 4 / 211:  21%|██        | 211/1000 [07:15<27:09,  2.07s/it][Succeeded / Failed / Skipped / Total] 147 / 60 / 4 / 211:  21%|██        | 212/1000 [07:16<27:04,  2.06s/it][Succeeded / Failed / Skipped / Total] 148 / 60 / 4 / 212:  21%|██        | 212/1000 [07:16<27:04,  2.06s/it][Succeeded / Failed / Skipped / Total] 149 / 60 / 4 / 213:  21%|██▏       | 213/1000 [07:17<26:54,  2.05s/it][Succeeded / Failed / Skipped / Total] 149 / 60 / 4 / 213:  21%|██▏       | 214/1000 [07:22<27:03,  2.07s/it][Succeeded / Failed / Skipped / Total] 149 / 61 / 4 / 214:  21%|██▏       | 214/1000 [07:22<27:03,  2.07s/it][Succeeded / Failed / Skipped / Total] 150 / 61 / 4 / 215:  22%|██▏       | 215/1000 [07:23<26:58,  2.06s/it][Succeeded / Failed / Skipped / Total] 150 / 61 / 4 / 215:  22%|██▏       | 216/1000 [07:27<27:04,  2.07s/it][Succeeded / Failed / Skipped / Total] 151 / 61 / 4 / 216:  22%|██▏       | 216/1000 [07:27<27:04,  2.07s/it]--------------------------------------------- Result 210 ---------------------------------------------
Gets the targetUrl . --> get jaundiced --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest [[request]] , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[jaundiced]] ( HttpServletRequest [[chippy]] , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 211 ---------------------------------------------
Creates the shared object . --> heartening method --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[heartening]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 212 ---------------------------------------------
Configures the Jaas . --> Configure JaasFunctionLoop --> Socre: 1.0

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String [[existing]] ; while ( ( [[existing]] = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = [[existing]] . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String [[knife]] ; while ( ( [[knife]] = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = [[knife]] . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 213 ---------------------------------------------
Retrieve the parent directory . --> Retrieves the parent node with the given id . --> Socre: 1.0

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet [[rs]] , int rowNumber ) throws SQLException { Long [[parentDirectoryId]] = new Long ( [[rs]] . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( [[parentDirectoryId]] != null && ! [[parentDirectoryId]] . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet [[backfires]] , int rowNumber ) throws SQLException { Long [[members]] = new Long ( [[backfires]] . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( [[members]] != null && ! [[members]] . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 214 ---------------------------------------------
Returns the current date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[unfunny]] ( ) { long [[george]] = System . currentTimeMillis ( ) ; if ( ( [[george]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[george]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[george]] ; currentDate = format . format ( new Date ( [[george]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 215 ---------------------------------------------
Sets the target URL parameter . --> dorsey --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . [[targetUrlParameter]] = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[dorsey]] ( String [[caddie]] ) { if ( [[caddie]] != null ) { Assert . hasText ( [[caddie]] , "targetUrlParameter cannot be empty" ) ; } this . [[hubie]] = [[caddie]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 216 ---------------------------------------------
Update the cache . --> Set a crossroads value --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[crossroads]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
[Succeeded / Failed / Skipped / Total] 152 / 61 / 4 / 217:  22%|██▏       | 217/1000 [07:28<26:57,  2.07s/it][Succeeded / Failed / Skipped / Total] 152 / 61 / 4 / 217:  22%|██▏       | 218/1000 [07:30<26:54,  2.06s/it][Succeeded / Failed / Skipped / Total] 153 / 61 / 4 / 218:  22%|██▏       | 218/1000 [07:30<26:54,  2.06s/it][Succeeded / Failed / Skipped / Total] 154 / 61 / 4 / 219:  22%|██▏       | 219/1000 [07:31<26:51,  2.06s/it][Succeeded / Failed / Skipped / Total] 154 / 61 / 4 / 219:  22%|██▏       | 220/1000 [07:35<26:54,  2.07s/it][Succeeded / Failed / Skipped / Total] 155 / 61 / 4 / 220:  22%|██▏       | 220/1000 [07:35<26:54,  2.07s/it][Succeeded / Failed / Skipped / Total] 156 / 61 / 4 / 221:  22%|██▏       | 221/1000 [07:37<26:52,  2.07s/it][Succeeded / Failed / Skipped / Total] 156 / 61 / 4 / 221:  22%|██▏       | 222/1000 [07:37<26:43,  2.06s/it][Succeeded / Failed / Skipped / Total] 157 / 61 / 4 / 222:  22%|██▏       | 222/1000 [07:37<26:43,  2.06s/it][Succeeded / Failed / Skipped / Total] 158 / 61 / 4 / 223:  22%|██▏       | 223/1000 [07:39<26:40,  2.06s/it][Succeeded / Failed / Skipped / Total] 158 / 61 / 4 / 223:  22%|██▏       | 224/1000 [07:46<26:54,  2.08s/it][Succeeded / Failed / Skipped / Total] 159 / 61 / 4 / 224:  22%|██▏       | 224/1000 [07:46<26:54,  2.08s/it][Succeeded / Failed / Skipped / Total] 160 / 61 / 4 / 225:  22%|██▎       | 225/1000 [07:46<26:48,  2.08s/it][Succeeded / Failed / Skipped / Total] 160 / 61 / 4 / 225:  23%|██▎       | 226/1000 [07:50<26:51,  2.08s/it]--------------------------------------------- Result 217 ---------------------------------------------
Sets the authentication details . --> Set recalling --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[recalling]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken [[deadline]] ) { [[deadline]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 218 ---------------------------------------------
Build the DistinguishedName for the given group . --> Build the groupDn --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[group]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[altruism]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[altruism]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 219 ---------------------------------------------
Get the timeSphere groups . --> ambulances a string --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[ambulances]] ( final String [[modest]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 220 ---------------------------------------------
Method allowableSessionsExceeded Method . --> Should be called by the SessionManager --> Socre: 1.0

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > sessions , int [[allowableSessions]] , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[allowableSessions]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > sessions , int [[dimwitted]] , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[dimwitted]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 221 ---------------------------------------------
Gets the security name . --> Destroysers --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String [[userSecurityName]] = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[destroyers]] ( final Subject [[raincoats]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[raincoats]] ) ; } String [[fillmore]] = null ; if ( [[raincoats]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 222 ---------------------------------------------
Returns the filters for the given url . --> Perform a bankruptcy request --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[bankruptcy]] ( String url ) { return [[bankruptcy]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 223 ---------------------------------------------
Internal parse function . --> Get the adelphi value --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] [[formats]] ) { Date date = null ; for ( int [[i]] = 0 ; ( date == null ) && ( [[i]] < [[formats]] . length ) ; [[i]] ++ ) { try { date = [[formats]] [ [[i]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[adelphi]] ( String value , DateFormat [ ] [[chicha]] ) { Date date = null ; for ( int [[freemasons]] = 0 ; ( date == null ) && ( [[freemasons]] < [[chicha]] . length ) ; [[freemasons]] ++ ) { try { date = [[chicha]] [ [[freemasons]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 224 ---------------------------------------------
Returns the application context for the given page context . --> Returns the required ApplicationContext --> Socre: 1.0

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext [[pageContext]] ) { ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[phillipa]] ( PageContext [[mediator]] ) { ServletContext servletContext = [[mediator]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 225 ---------------------------------------------
Sets the filter list . --> Sets the engineering --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > filters ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[engineering]] ( List < Filter > filters ) { Validate . notNull ( [[engineering]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[engineering]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 226 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 160 / 62 / 4 / 226:  23%|██▎       | 226/1000 [07:50<26:51,  2.08s/it][Succeeded / Failed / Skipped / Total] 161 / 62 / 4 / 227:  23%|██▎       | 227/1000 [07:51<26:44,  2.08s/it][Succeeded / Failed / Skipped / Total] 161 / 62 / 4 / 227:  23%|██▎       | 228/1000 [07:52<26:40,  2.07s/it][Succeeded / Failed / Skipped / Total] 161 / 63 / 4 / 228:  23%|██▎       | 228/1000 [07:52<26:40,  2.07s/it][Succeeded / Failed / Skipped / Total] 162 / 63 / 4 / 229:  23%|██▎       | 229/1000 [07:52<26:32,  2.06s/it][Succeeded / Failed / Skipped / Total] 162 / 63 / 4 / 229:  23%|██▎       | 230/1000 [07:52<26:23,  2.06s/it][Succeeded / Failed / Skipped / Total] 163 / 63 / 4 / 230:  23%|██▎       | 230/1000 [07:52<26:23,  2.06s/it][Succeeded / Failed / Skipped / Total] 164 / 63 / 4 / 231:  23%|██▎       | 231/1000 [08:00<26:38,  2.08s/it][Succeeded / Failed / Skipped / Total] 164 / 63 / 4 / 231:  23%|██▎       | 232/1000 [08:04<26:45,  2.09s/it]Gets the list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest request ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( request ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[bonet]] ( HttpServletRequest request ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( request ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 227 ---------------------------------------------
Add session attributes . --> Sets the darky parameter --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification sessionAttrs ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . [[sessionAttributes]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification sessionAttrs ( Map < String , Object > [[darky]] ) { notNull ( [[darky]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[darky]] , this . [[mansur]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 228 ---------------------------------------------
Changes the user s password . --> [[[FAILED]]]

[[[[Adv]]]]: public void changePassword ( final String [[oldPassword]] , final String newPassword ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( [[authentication]] , "No authentication object found in security context. Can't change current user's password!" ) ; String username = [[authentication]] . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[oldPassword]] , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , [[oldPassword]] , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void changePassword ( final String [[alcove]] , final String newPassword ) { Authentication [[bey]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( [[bey]] , "No authentication object found in security context. Can't change current user's password!" ) ; String username = [[bey]] . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[alcove]] , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , [[alcove]] , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 229 ---------------------------------------------
Return the basic authentication for the given user name and password --> Set AuthenticationScheme by name --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String userName , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( userName ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[duras]] ( String userName , String password ) { final PreemptiveBasicAuthScheme [[buy]] = new PreemptiveBasicAuthScheme ( ) ; [[buy]] . setUserName ( userName ) ; [[buy]] . setPassword ( password ) ; return [[buy]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 230 ---------------------------------------------
Copy authentication . --> region espinoza --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[token]] = ( AbstractAuthenticationToken ) dest ; [[token]] . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[espinoza]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[caen]] = ( AbstractAuthenticationToken ) dest ; [[caen]] . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 231 ---------------------------------------------
Create RestAssured config --> get description configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[congregation]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 232 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 165 / 63 / 4 / 232:  23%|██▎       | 232/1000 [08:04<26:45,  2.09s/it][Succeeded / Failed / Skipped / Total] 165 / 63 / 4 / 232:  23%|██▎       | 233/1000 [08:10<26:53,  2.10s/it][Succeeded / Failed / Skipped / Total] 166 / 63 / 4 / 233:  23%|██▎       | 233/1000 [08:10<26:53,  2.10s/it][Succeeded / Failed / Skipped / Total] 166 / 63 / 4 / 233:  23%|██▎       | 234/1000 [08:10<26:47,  2.10s/it][Succeeded / Failed / Skipped / Total] 167 / 63 / 4 / 234:  23%|██▎       | 234/1000 [08:10<26:47,  2.10s/it][Succeeded / Failed / Skipped / Total] 167 / 63 / 4 / 234:  24%|██▎       | 235/1000 [08:12<26:43,  2.10s/it][Succeeded / Failed / Skipped / Total] 168 / 63 / 4 / 235:  24%|██▎       | 235/1000 [08:12<26:43,  2.10s/it][Succeeded / Failed / Skipped / Total] 168 / 63 / 4 / 235:  24%|██▎       | 236/1000 [08:20<26:59,  2.12s/it][Succeeded / Failed / Skipped / Total] 169 / 63 / 4 / 236:  24%|██▎       | 236/1000 [08:20<27:00,  2.12s/it][Succeeded / Failed / Skipped / Total] 169 / 63 / 4 / 236:  24%|██▎       | 237/1000 [08:20<26:51,  2.11s/it][Succeeded / Failed / Skipped / Total] 169 / 63 / 5 / 237:  24%|██▎       | 237/1000 [08:20<26:51,  2.11s/it][Succeeded / Failed / Skipped / Total] 169 / 63 / 5 / 237:  24%|██▍       | 238/1000 [08:21<26:45,  2.11s/it][Succeeded / Failed / Skipped / Total] 170 / 63 / 5 / 238:  24%|██▍       | 238/1000 [08:21<26:45,  2.11s/it][Succeeded / Failed / Skipped / Total] 170 / 63 / 5 / 238:  24%|██▍       | 239/1000 [08:21<26:37,  2.10s/it]Returns the full DistinguishedName object for the given dn --> dampen method --> Socre: 1.0

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName dn , Context [[baseCtx]] ) throws NamingException { DistinguishedName [[baseDn]] = new DistinguishedName ( [[baseCtx]] . getNameInNamespace ( ) ) ; if ( dn . contains ( [[baseDn]] ) ) { return dn ; } [[baseDn]] . append ( dn ) ; return [[baseDn]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[dampen]] ( DistinguishedName dn , Context [[banking]] ) throws NamingException { DistinguishedName [[aviary]] = new DistinguishedName ( [[banking]] . getNameInNamespace ( ) ) ; if ( dn . contains ( [[aviary]] ) ) { return dn ; } [[aviary]] . append ( dn ) ; return [[aviary]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 233 ---------------------------------------------
Proxys the given URI . --> advisedly method --> Socre: 1.0

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[advisedly]] ( URI [[ebony]] ) { if ( [[ebony]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[advisedly]] ( new ProxySpecification ( [[ebony]] . getHost ( ) , [[ebony]] . getPort ( ) , [[ebony]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 234 ---------------------------------------------
Creates an NTLMAuth scheme . --> Gets the NTLMAuthScheme based on the frodo and password --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String [[userName]] , String password , String workstation , String domain ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( [[userName]] ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( domain ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String [[frodo]] , String password , String workstation , String domain ) { final NTLMAuthScheme [[front]] = new NTLMAuthScheme ( ) ; [[front]] . setUserName ( [[frodo]] ) ; [[front]] . setPassword ( password ) ; [[front]] . setWorkstation ( workstation ) ; [[front]] . setDomain ( domain ) ; return [[front]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 235 ---------------------------------------------
Adds additional filters . --> Manages narrated operations --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[narrated]] ( Filter [[shai]] , Filter ... [[raincoats]] ) { Validate . notNull ( [[shai]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[shai]] ) ; if ( [[raincoats]] != null ) { Collections . addAll ( RestAssured . filters , [[raincoats]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 236 ---------------------------------------------
Create an instance of BasicAuth scheme . --> Get the frustration for the user --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String [[password]] ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( [[password]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[frustration]] ( String userName , String [[fathered]] ) { final BasicAuthScheme [[rhis]] = new BasicAuthScheme ( ) ; [[rhis]] . setUserName ( userName ) ; [[rhis]] . setPassword ( [[fathered]] ) ; return [[rhis]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 237 ---------------------------------------------
Get an instance of RestAssuredMock --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig objectMapperConfig ( ObjectMapperConfig objectMapperConfig ) { notNull ( objectMapperConfig , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 238 ---------------------------------------------
Gets an instance of RestAssuredMock mechanism . --> Create an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig [[sessionConfig]] ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig [[croatians]] ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 239 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 171 / 63 / 5 / 239:  24%|██▍       | 239/1000 [08:21<26:37,  2.10s/it][Succeeded / Failed / Skipped / Total] 171 / 63 / 5 / 239:  24%|██▍       | 240/1000 [08:25<26:39,  2.10s/it][Succeeded / Failed / Skipped / Total] 172 / 63 / 5 / 240:  24%|██▍       | 240/1000 [08:25<26:39,  2.10s/it][Succeeded / Failed / Skipped / Total] 172 / 63 / 5 / 240:  24%|██▍       | 241/1000 [08:26<26:36,  2.10s/it][Succeeded / Failed / Skipped / Total] 173 / 63 / 5 / 241:  24%|██▍       | 241/1000 [08:26<26:36,  2.10s/it][Succeeded / Failed / Skipped / Total] 173 / 63 / 5 / 241:  24%|██▍       | 242/1000 [08:28<26:32,  2.10s/it][Succeeded / Failed / Skipped / Total] 174 / 63 / 5 / 242:  24%|██▍       | 242/1000 [08:28<26:32,  2.10s/it][Succeeded / Failed / Skipped / Total] 174 / 63 / 5 / 242:  24%|██▍       | 243/1000 [08:29<26:27,  2.10s/it][Succeeded / Failed / Skipped / Total] 175 / 63 / 5 / 243:  24%|██▍       | 243/1000 [08:29<26:27,  2.10s/it][Succeeded / Failed / Skipped / Total] 176 / 63 / 5 / 244:  24%|██▍       | 244/1000 [08:29<26:19,  2.09s/it][Succeeded / Failed / Skipped / Total] 176 / 63 / 5 / 244:  24%|██▍       | 245/1000 [08:31<26:16,  2.09s/it]Print the response . --> Process a link . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail [[logDetail]] , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( [[logDetail]] == ALL || [[logDetail]] == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( [[logDetail]] == ALL || [[logDetail]] == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( [[logDetail]] , builder ) . append ( toString ( headers ) ) ; } } else if ( [[logDetail]] == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( [[logDetail]] , builder ) . append ( cookies . toString ( ) ) ; } } if ( [[logDetail]] == ALL || [[logDetail]] == BODY ) { String [[responseBodyToAppend]] ; if ( shouldPrettyPrint ) { [[responseBodyToAppend]] = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { [[responseBodyToAppend]] = responseBody . asString ( ) ; } if ( [[logDetail]] == ALL && ! isBlank ( [[responseBodyToAppend]] ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( [[responseBodyToAppend]] ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[ania]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail [[howitzers]] , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( [[howitzers]] == ALL || [[howitzers]] == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( [[howitzers]] == ALL || [[howitzers]] == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( [[howitzers]] , builder ) . append ( toString ( headers ) ) ; } } else if ( [[howitzers]] == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( [[howitzers]] , builder ) . append ( cookies . toString ( ) ) ; } } if ( [[howitzers]] == ALL || [[howitzers]] == BODY ) { String [[folklore]] ; if ( shouldPrettyPrint ) { [[folklore]] = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { [[folklore]] = responseBody . asString ( ) ; } if ( [[howitzers]] == ALL && ! isBlank ( [[folklore]] ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( [[folklore]] ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 240 ---------------------------------------------
default query charset --> Create EncoderConfig from content specification . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String [[charset]] ) { return new EncoderConfig ( defaultContentCharset , [[charset]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[airfare]] ( String [[suggestive]] ) { return new EncoderConfig ( defaultContentCharset , [[suggestive]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[Bedrooms]]" == "[[Bedrooms]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 241 ---------------------------------------------
Returns the default object type . --> Create a new Jackson config --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[abuela]] ( ObjectMapperType [[constellations]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[abuela]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[Carina]]" == "[[Carina]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 242 ---------------------------------------------
Create an instance of RestAssuredMockUrls config . --> Get an instance of RestAssuredMock method --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig [[logConfig]] ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[could]] ( LogConfig [[windshield]] ) { notNull ( [[could]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[could]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 243 ---------------------------------------------
Get an existing dns config . --> Get an existing RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig xmlConfig ( XmlConfig [[xmlConfig]] ) { notNull ( xmlConfig , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig xmlConfig ( XmlConfig [[munday]] ) { notNull ( xmlConfig , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 244 ---------------------------------------------
Gets the object mapper factory . --> Create new instance of ObjectMapper --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[brick]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[brick]] , johnzonObjectMapperFactory , "[[Stampeding]]" == "[[Stampeding]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 245 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 177 / 63 / 5 / 245:  24%|██▍       | 245/1000 [08:31<26:16,  2.09s/it][Succeeded / Failed / Skipped / Total] 178 / 63 / 5 / 246:  25%|██▍       | 246/1000 [08:31<26:08,  2.08s/it][Succeeded / Failed / Skipped / Total] 178 / 63 / 5 / 246:  25%|██▍       | 247/1000 [08:35<26:13,  2.09s/it][Succeeded / Failed / Skipped / Total] 179 / 63 / 5 / 247:  25%|██▍       | 247/1000 [08:35<26:13,  2.09s/it][Succeeded / Failed / Skipped / Total] 180 / 63 / 5 / 248:  25%|██▍       | 248/1000 [08:37<26:09,  2.09s/it][Succeeded / Failed / Skipped / Total] 180 / 63 / 5 / 248:  25%|██▍       | 249/1000 [08:38<26:05,  2.08s/it][Succeeded / Failed / Skipped / Total] 181 / 63 / 5 / 249:  25%|██▍       | 249/1000 [08:38<26:05,  2.08s/it][Succeeded / Failed / Skipped / Total] 182 / 63 / 5 / 250:  25%|██▌       | 250/1000 [08:39<25:57,  2.08s/it][Succeeded / Failed / Skipped / Total] 182 / 63 / 5 / 250:  25%|██▌       | 251/1000 [08:39<25:49,  2.07s/it][Succeeded / Failed / Skipped / Total] 182 / 64 / 5 / 251:  25%|██▌       | 251/1000 [08:39<25:49,  2.07s/it]Returns an instance of RestAssuredMock method using the given encoder . --> Create a copy of this repository --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig encoderConfig ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bloomberg]] ( EncoderConfig encoderConfig ) { notNull ( [[bloomberg]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[bloomberg]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 246 ---------------------------------------------
Creates the scheme for the user s password . --> Create a user s password --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String [[userName]] , String password , FormAuthConfig [[config]] ) { if ( [[userName]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( [[userName]] ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setConfig ( [[config]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[mchenry]] ( String [[lithuanians]] , String password , FormAuthConfig [[acts]] ) { if ( [[lithuanians]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[blockers]] = new FormAuthScheme ( ) ; [[blockers]] . setUserName ( [[lithuanians]] ) ; [[blockers]] . setPassword ( password ) ; [[blockers]] . setConfig ( [[acts]] ) ; return [[blockers]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 247 ---------------------------------------------
Creates a copy of the given async config . --> Create an instance of RestAssured mock . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig [[asyncConfig]] ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig [[boohoo]] ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 248 ---------------------------------------------
Get the mock soap config . --> Create a RestAssuredMock configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig [[mockMvcConfig]] ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig [[footballs]] ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 249 ---------------------------------------------
Returns an RestAssuredMock config . --> Get all mock paths that have been added to this repository --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig [[jsonConfig]] ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[tomorrow]] ( JsonConfig [[manicurist]] ) { notNull ( [[tomorrow]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[tomorrow]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 250 ---------------------------------------------
Create an RestAssuredMock config . --> Get a mock provider backward . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[backward]] ( MockMvcParamConfig paramConfig ) { notNull ( [[backward]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[backward]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 251 ---------------------------------------------
For internal use . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings allowAllHostnames ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings allowAllHostnames ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 252 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 183 / 64 / 5 / 252:  25%|██▌       | 252/1000 [08:39<25:41,  2.06s/it][Succeeded / Failed / Skipped / Total] 183 / 64 / 5 / 252:  25%|██▌       | 253/1000 [08:40<25:36,  2.06s/it][Succeeded / Failed / Skipped / Total] 184 / 64 / 5 / 253:  25%|██▌       | 253/1000 [08:40<25:36,  2.06s/it][Succeeded / Failed / Skipped / Total] 185 / 64 / 5 / 254:  25%|██▌       | 254/1000 [08:43<25:38,  2.06s/it][Succeeded / Failed / Skipped / Total] 185 / 64 / 5 / 254:  26%|██▌       | 255/1000 [08:46<25:36,  2.06s/it][Succeeded / Failed / Skipped / Total] 186 / 64 / 5 / 255:  26%|██▌       | 255/1000 [08:46<25:36,  2.06s/it][Succeeded / Failed / Skipped / Total] 187 / 64 / 5 / 256:  26%|██▌       | 256/1000 [08:51<25:45,  2.08s/it][Succeeded / Failed / Skipped / Total] 187 / 64 / 5 / 256:  26%|██▌       | 257/1000 [08:54<25:46,  2.08s/it][Succeeded / Failed / Skipped / Total] 188 / 64 / 5 / 257:  26%|██▌       | 257/1000 [08:54<25:46,  2.08s/it][Succeeded / Failed / Skipped / Total] 189 / 64 / 5 / 258:  26%|██▌       | 258/1000 [09:01<25:56,  2.10s/it][Succeeded / Failed / Skipped / Total] 189 / 64 / 5 / 258:  26%|██▌       | 259/1000 [09:01<25:50,  2.09s/it][Succeeded / Failed / Skipped / Total] 190 / 64 / 5 / 259:  26%|██▌       | 259/1000 [09:01<25:50,  2.09s/it]Returns an empty RestAssuredMock config . --> Creates a mock copy of this repository . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig multiPartConfig ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[aitch]] ( MultiPartConfig multiPartConfig ) { notNull ( [[aitch]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[aitch]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 253 ---------------------------------------------
Get an instance of RestAssuredMockMvc config . --> Create an instance of RestAssuredMock . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig [[matcherConfig]] ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig [[bacchus]] ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 254 ---------------------------------------------
Create a copy of the dynamic config . --> Get an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig [[headerConfig]] ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[cme]] ( HeaderConfig [[concho]] ) { notNull ( [[cme]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[cme]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 255 ---------------------------------------------
Declares the XmlPathConfig instance . --> Return a new XmlPathConfig instance --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[fai]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 256 ---------------------------------------------
Adds basic authentication . --> Create a new basic --> Socre: 1.0

[[[[Adv]]]]: public void basic ( String host , int [[port]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void basic ( String host , int [[chasen]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[chasen]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 257 ---------------------------------------------
Creates a NTCredentials for the specified host and port . --> Creates a new NTCredentials --> Socre: 1.0

[[[[Adv]]]]: public void ntlm ( String host , int [[port]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String host , int [[cheapen]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[cheapen]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 258 ---------------------------------------------
Clears the internal state . --> Override espinoza --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[espinoza]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 259 ---------------------------------------------
Replies the declared namespace . --> Create an XmlPathConfig instance --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[hoochie]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > [[focker]] = new HashMap < String , String > ( declaredNamespaces ) ; [[focker]] . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[focker]] , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
[Succeeded / Failed / Skipped / Total] 191 / 64 / 5 / 260:  26%|██▌       | 260/1000 [09:05<25:51,  2.10s/it][Succeeded / Failed / Skipped / Total] 191 / 64 / 5 / 260:  26%|██▌       | 261/1000 [09:06<25:47,  2.09s/it][Succeeded / Failed / Skipped / Total] 192 / 64 / 5 / 261:  26%|██▌       | 261/1000 [09:06<25:47,  2.09s/it][Succeeded / Failed / Skipped / Total] 193 / 64 / 5 / 262:  26%|██▌       | 262/1000 [09:06<25:39,  2.09s/it][Succeeded / Failed / Skipped / Total] 193 / 64 / 5 / 262:  26%|██▋       | 263/1000 [09:07<25:34,  2.08s/it][Succeeded / Failed / Skipped / Total] 194 / 64 / 5 / 263:  26%|██▋       | 263/1000 [09:07<25:34,  2.08s/it][Succeeded / Failed / Skipped / Total] 195 / 64 / 5 / 264:  26%|██▋       | 264/1000 [09:09<25:30,  2.08s/it][Succeeded / Failed / Skipped / Total] 195 / 64 / 5 / 264:  26%|██▋       | 265/1000 [09:13<25:34,  2.09s/it][Succeeded / Failed / Skipped / Total] 196 / 64 / 5 / 265:  26%|██▋       | 265/1000 [09:13<25:34,  2.09s/it][Succeeded / Failed / Skipped / Total] 197 / 64 / 5 / 266:  27%|██▋       | 266/1000 [09:18<25:41,  2.10s/it][Succeeded / Failed / Skipped / Total] 197 / 64 / 5 / 266:  27%|██▋       | 267/1000 [09:19<25:34,  2.09s/it][Succeeded / Failed / Skipped / Total] 198 / 64 / 5 / 267:  27%|██▋       | 267/1000 [09:19<25:34,  2.09s/it]--------------------------------------------- Result 260 ---------------------------------------------
Set a header value . --> enlarged --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String [[value]] ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[enlarged]] ( String [[asphalt]] , String [[natacha]] ) { Validate . notEmpty ( [[asphalt]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[natacha]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 261 ---------------------------------------------
Set the proxy . --> abandoning host port and spray --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int port , String [[scheme]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[scheme]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[abandoning]] ( String host , int port , String [[spray]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[spray]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 262 ---------------------------------------------
Sets response header . --> Sets response headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder setHeader ( String [[name]] , String value ) { notNull ( [[name]] , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( [[name]] , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( [[name]] ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder setHeader ( String [[decanter]] , String value ) { notNull ( [[decanter]] , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( [[decanter]] , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( [[decanter]] ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 263 ---------------------------------------------
Set control name . --> Set dampen --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String controlName ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . controlName = [[controlName]] ; this . [[isControlNameExplicit]] = "[[True]]" == "[[True]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[dampen]] ( String controlName ) { Validate . notEmpty ( [[dampen]] , "Control name cannot be empty" ) ; this . controlName = [[dampen]] ; this . [[jostled]] = "[[Replicators]]" == "[[Replicators]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 264 ---------------------------------------------
Set the default request headers . --> Called when carmack is called --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > [[headers]] ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( [[headers]] == null ) return ; for ( Object key : [[headers]] . keySet ( ) ) { Object val = [[headers]] . get ( key ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[carmack]] ( Map < ? , ? > [[inedible]] ) { this . [[adelphi]] . clear ( ) ; if ( [[inedible]] == null ) return ; for ( Object key : [[inedible]] . keySet ( ) ) { Object val = [[inedible]] . get ( key ) ; if ( val == null ) continue ; this . [[adelphi]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 265 ---------------------------------------------
Build the response . --> Returns status code . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int [[statusCode]] = restAssuredResponse . statusCode ( ) ; if ( [[statusCode]] < 100 || [[statusCode]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[statusCode]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[illustrates]] ( ) { final int [[overconfident]] = restAssuredResponse . statusCode ( ) ; if ( [[overconfident]] < 100 || [[overconfident]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[overconfident]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 266 ---------------------------------------------
Add additional headers . --> P tubular method --> Socre: 1.0

[[[[Adv]]]]: public static Headers [[headers]] ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > [[headerList]] = new LinkedList < Header > ( ) ; [[headerList]] . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( [[headerList]] , additionalHeaders ) ; } return new Headers ( [[headerList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[tubular]] ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > [[hibernating]] = new LinkedList < Header > ( ) ; [[hibernating]] . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( [[hibernating]] , additionalHeaders ) ; } return new Headers ( [[hibernating]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 267 ---------------------------------------------
Request a request --> Convenience method for getting a property --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[hosting]] ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
[Succeeded / Failed / Skipped / Total] 198 / 65 / 5 / 268:  27%|██▋       | 268/1000 [09:30<25:56,  2.13s/it][Succeeded / Failed / Skipped / Total] 198 / 65 / 5 / 268:  27%|██▋       | 269/1000 [09:30<25:49,  2.12s/it][Succeeded / Failed / Skipped / Total] 198 / 66 / 5 / 269:  27%|██▋       | 269/1000 [09:30<25:49,  2.12s/it][Succeeded / Failed / Skipped / Total] 198 / 66 / 5 / 269:  27%|██▋       | 270/1000 [09:30<25:42,  2.11s/it][Succeeded / Failed / Skipped / Total] 199 / 66 / 5 / 270:  27%|██▋       | 270/1000 [09:30<25:42,  2.11s/it][Succeeded / Failed / Skipped / Total] 199 / 66 / 5 / 270:  27%|██▋       | 271/1000 [09:31<25:36,  2.11s/it][Succeeded / Failed / Skipped / Total] 200 / 66 / 5 / 271:  27%|██▋       | 271/1000 [09:31<25:36,  2.11s/it][Succeeded / Failed / Skipped / Total] 200 / 66 / 5 / 271:  27%|██▋       | 272/1000 [09:32<25:30,  2.10s/it][Succeeded / Failed / Skipped / Total] 201 / 66 / 5 / 272:  27%|██▋       | 272/1000 [09:32<25:30,  2.10s/it][Succeeded / Failed / Skipped / Total] 201 / 66 / 5 / 272:  27%|██▋       | 273/1000 [09:33<25:26,  2.10s/it][Succeeded / Failed / Skipped / Total] 202 / 66 / 5 / 273:  27%|██▋       | 273/1000 [09:33<25:26,  2.10s/it][Succeeded / Failed / Skipped / Total] 202 / 66 / 5 / 273:  27%|██▋       | 274/1000 [09:34<25:21,  2.10s/it][Succeeded / Failed / Skipped / Total] 202 / 67 / 5 / 274:  27%|██▋       | 274/1000 [09:34<25:21,  2.10s/it][Succeeded / Failed / Skipped / Total] 202 / 67 / 5 / 274:  28%|██▊       | 275/1000 [09:40<25:30,  2.11s/it][Succeeded / Failed / Skipped / Total] 202 / 68 / 5 / 275:  28%|██▊       | 275/1000 [09:40<25:30,  2.11s/it][Succeeded / Failed / Skipped / Total] 203 / 68 / 5 / 276:  28%|██▊       | 276/1000 [09:40<25:23,  2.10s/it][Succeeded / Failed / Skipped / Total] 203 / 68 / 5 / 276:  28%|██▊       | 277/1000 [09:42<25:19,  2.10s/it][Succeeded / Failed / Skipped / Total] 204 / 68 / 5 / 277:  28%|██▊       | 277/1000 [09:42<25:19,  2.10s/it]--------------------------------------------- Result 268 ---------------------------------------------
Returns a DetailedCookieMatcher for the given domain matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher domain ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher domain ( Matcher < ? super String > [[gger]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[gger]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Returns a list of valueMatcher that satisfies the value of this attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[contaminant]] ( Matcher < ? super String > [[osprey]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[osprey]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
DetailedCookieMatcher for a given date matcher . --> Get Detailed cookieMatcher for hotdog --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[brodeur]] ( Matcher < ? super Date > [[hotdog]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[hotdog]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Sets the comment matcher for this node . --> Helper method to get the DetailedCookieMatcher for a given scruples --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[lunged]] ( Matcher < ? super String > [[scruples]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[scruples]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Returns a matcher that satisfies the specified versionMatcher . --> DetailedCookieMatcher for the given conferring --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher version ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher version ( Matcher < ? super Integer > [[conferring]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[conferring]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Returns a list of httpOnlyMatcher that should not be used . --> Detailed a DetailedCookieMatcher for this Perwood --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > [[sherwood]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[sherwood]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Matches a pathMatcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[uns]] ( Matcher < ? super String > [[mysticism]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[mysticism]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Matches if there is a secured matcher for this connection . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > [[diarrhea]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[diarrhea]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Creates a proxy specification for the given host . --> Create a new ProxySpecification --> Socre: 1.0

[[[[Adv]]]]: public ProxySpecification withHost ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification withHost ( String [[garland]] ) { return new ProxySpecification ( [[garland]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 277 ---------------------------------------------
Returns a copy of this path config . --> Create a new JsonPathConfig object --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[gri]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[gri]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 278 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 205 / 68 / 5 / 278:  28%|██▊       | 278/1000 [09:43<25:14,  2.10s/it][Succeeded / Failed / Skipped / Total] 205 / 68 / 5 / 278:  28%|██▊       | 279/1000 [09:47<25:18,  2.11s/it][Succeeded / Failed / Skipped / Total] 206 / 68 / 5 / 279:  28%|██▊       | 279/1000 [09:47<25:18,  2.11s/it][Succeeded / Failed / Skipped / Total] 207 / 68 / 5 / 280:  28%|██▊       | 280/1000 [09:48<25:12,  2.10s/it][Succeeded / Failed / Skipped / Total] 207 / 68 / 5 / 280:  28%|██▊       | 281/1000 [09:48<25:06,  2.10s/it][Succeeded / Failed / Skipped / Total] 208 / 68 / 5 / 281:  28%|██▊       | 281/1000 [09:48<25:06,  2.10s/it][Succeeded / Failed / Skipped / Total] 208 / 69 / 5 / 282:  28%|██▊       | 282/1000 [09:51<25:05,  2.10s/it][Succeeded / Failed / Skipped / Total] 208 / 69 / 5 / 282:  28%|██▊       | 283/1000 [09:52<25:00,  2.09s/it][Succeeded / Failed / Skipped / Total] 208 / 70 / 5 / 283:  28%|██▊       | 283/1000 [09:52<25:00,  2.09s/it][Succeeded / Failed / Skipped / Total] 209 / 70 / 5 / 284:  28%|██▊       | 284/1000 [09:52<24:54,  2.09s/it][Succeeded / Failed / Skipped / Total] 209 / 70 / 5 / 284:  28%|██▊       | 285/1000 [09:54<24:51,  2.09s/it][Succeeded / Failed / Skipped / Total] 210 / 70 / 5 / 285:  28%|██▊       | 285/1000 [09:54<24:51,  2.09s/it][Succeeded / Failed / Skipped / Total] 211 / 70 / 5 / 286:  29%|██▊       | 286/1000 [09:54<24:44,  2.08s/it][Succeeded / Failed / Skipped / Total] 211 / 70 / 5 / 286:  29%|██▊       | 287/1000 [09:55<24:38,  2.07s/it][Succeeded / Failed / Skipped / Total] 212 / 70 / 5 / 287:  29%|██▊       | 287/1000 [09:55<24:38,  2.07s/it]Get the default parser type . --> Return a new JsonPathConfig instance --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[pesto]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[pesto]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 279 ---------------------------------------------
Returns a default Log config for the given print stream . --> Get LogConfig --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[bordering]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 280 ---------------------------------------------
Enables the logging . --> EnableLoggingOfRequest andResponseIfValidationFails --> Socre: 1.0

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "[[Arable]]" == "[[Arable]]" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 281 ---------------------------------------------
Create an HTTP method . --> Create a HttpRequestBase object --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String [[method]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[method]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String [[underfoot]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[underfoot]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 282 ---------------------------------------------
Adds a header to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String [[expectedValue]] ) { spec . header ( [[headerName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[abattoir]] ( String [[solved]] , String [[concho]] ) { spec . header ( [[solved]] , [[concho]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 283 ---------------------------------------------
Adds a header value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( [[headerName]] , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[deja]] ( String [[cramer]] , Matcher < String > [[lindy]] ) { spec . header ( [[cramer]] , [[lindy]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 284 ---------------------------------------------
Expect cookie with provided value . --> Sets kellogg --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String [[expectedValue]] ) { spec . cookie ( [[cookieName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[kellogg]] ( String [[b]] , String [[counsellor]] ) { spec . cookie ( [[b]] , [[counsellor]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 285 ---------------------------------------------
Add an attribute to the request . --> Sets the number of specified attributes . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String [[attributeName]] , Object attributeValue ) { spec . attribute ( [[attributeName]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String [[sadat]] , Object attributeValue ) { spec . attribute ( [[sadat]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 286 ---------------------------------------------
Returns a MultiPartConfig for use by defaultBoundary . --> Get a MultiPartConfig instance --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "[[Torrid]]" == "[[Torrid]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 287 ---------------------------------------------
Matches a max age matcher . --> Helper method for constructing a DetailedMatcher vrei --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[vrei]] ( Matcher < ? super Integer > [[aslo]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[aslo]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 288 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 213 / 70 / 5 / 288:  29%|██▉       | 288/1000 [09:57<24:37,  2.07s/it][Succeeded / Failed / Skipped / Total] 213 / 70 / 5 / 288:  29%|██▉       | 289/1000 [09:59<24:35,  2.08s/it][Succeeded / Failed / Skipped / Total] 214 / 70 / 5 / 289:  29%|██▉       | 289/1000 [09:59<24:35,  2.08s/it][Succeeded / Failed / Skipped / Total] 215 / 70 / 5 / 290:  29%|██▉       | 290/1000 [10:02<24:35,  2.08s/it][Succeeded / Failed / Skipped / Total] 215 / 70 / 5 / 290:  29%|██▉       | 291/1000 [10:04<24:31,  2.08s/it][Succeeded / Failed / Skipped / Total] 216 / 70 / 5 / 291:  29%|██▉       | 291/1000 [10:04<24:31,  2.08s/it][Succeeded / Failed / Skipped / Total] 217 / 70 / 5 / 292:  29%|██▉       | 292/1000 [10:05<24:27,  2.07s/it][Succeeded / Failed / Skipped / Total] 217 / 70 / 5 / 292:  29%|██▉       | 293/1000 [10:07<24:25,  2.07s/it][Succeeded / Failed / Skipped / Total] 218 / 70 / 5 / 293:  29%|██▉       | 293/1000 [10:07<24:25,  2.07s/it][Succeeded / Failed / Skipped / Total] 219 / 70 / 5 / 294:  29%|██▉       | 294/1000 [10:09<24:23,  2.07s/it][Succeeded / Failed / Skipped / Total] 219 / 70 / 5 / 294:  30%|██▉       | 295/1000 [10:09<24:16,  2.07s/it][Succeeded / Failed / Skipped / Total] 220 / 70 / 5 / 295:  30%|██▉       | 295/1000 [10:09<24:16,  2.07s/it][Succeeded / Failed / Skipped / Total] 220 / 71 / 5 / 296:  30%|██▉       | 296/1000 [10:14<24:20,  2.07s/it][Succeeded / Failed / Skipped / Total] 220 / 71 / 5 / 296:  30%|██▉       | 297/1000 [10:18<24:23,  2.08s/it][Succeeded / Failed / Skipped / Total] 221 / 71 / 5 / 297:  30%|██▉       | 297/1000 [10:18<24:23,  2.08s/it]Add result handler . --> Adds the resultHandlers . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler [[resultHandler]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resultHandler]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler [[fro]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[fro]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 289 ---------------------------------------------
Add additional parameters . --> Create a new HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[Strongbox]]" == "[[Strongbox]]" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 290 ---------------------------------------------
Returns an instance of the given httpMultipart mode . --> HttpMultipartMode sleepwalkers --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode [[httpMultipartMode]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode [[sleepwalkers]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 291 ---------------------------------------------
Adds a multi part . --> Add an entre request --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String controlName , String [[contentBody]] , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[entre]] ( String controlName , String [[credo]] , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 292 ---------------------------------------------
Gets the int . --> region cazzo Implementation --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[cazzo]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 293 ---------------------------------------------
Returns the value of the specified path . --> Gets jsonAssertion --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object [[json]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) jsonAssertion . getResult ( [[json]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[kuang]] > [[kuang]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object [[mío]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[kuang]] ) jsonAssertion . getResult ( [[mío]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 294 ---------------------------------------------
Adds a header to the request . --> Update anthem message . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String [[headerValue]] ) { spec . header ( [[headerName]] , [[headerValue]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[anthem]] ( String [[inglewood]] , String [[tubular]] ) { spec . header ( [[inglewood]] , [[tubular]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 295 ---------------------------------------------
Returns the short of the given path . --> Gets shorts --> Socre: 1.0

[[[[Adv]]]]: public short getShort ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short getShort ( String [[thumbs]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 296 ---------------------------------------------
Sets the parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[Efficacy]]" == "[[Efficacy]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 297 ---------------------------------------------
Get the HTTP client factory . --> This method initializes HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[risin]] ( HttpClientFactory [[gort]] ) { return new HttpClientConfig ( [[risin]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 298 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 221 / 72 / 5 / 298:  30%|██▉       | 298/1000 [10:24<24:30,  2.10s/it][Succeeded / Failed / Skipped / Total] 221 / 72 / 5 / 298:  30%|██▉       | 299/1000 [10:25<24:26,  2.09s/it][Succeeded / Failed / Skipped / Total] 222 / 72 / 5 / 299:  30%|██▉       | 299/1000 [10:25<24:26,  2.09s/it][Succeeded / Failed / Skipped / Total] 222 / 73 / 5 / 300:  30%|███       | 300/1000 [10:26<24:21,  2.09s/it][Succeeded / Failed / Skipped / Total] 222 / 73 / 5 / 300:  30%|███       | 301/1000 [10:26<24:15,  2.08s/it][Succeeded / Failed / Skipped / Total] 223 / 73 / 5 / 301:  30%|███       | 301/1000 [10:26<24:15,  2.08s/it][Succeeded / Failed / Skipped / Total] 223 / 74 / 5 / 302:  30%|███       | 302/1000 [10:31<24:19,  2.09s/it][Succeeded / Failed / Skipped / Total] 223 / 74 / 5 / 302:  30%|███       | 303/1000 [10:35<24:21,  2.10s/it][Succeeded / Failed / Skipped / Total] 224 / 74 / 5 / 303:  30%|███       | 303/1000 [10:35<24:21,  2.10s/it][Succeeded / Failed / Skipped / Total] 225 / 74 / 5 / 304:  30%|███       | 304/1000 [10:35<24:14,  2.09s/it][Succeeded / Failed / Skipped / Total] 225 / 74 / 5 / 304:  30%|███       | 305/1000 [10:36<24:09,  2.09s/it][Succeeded / Failed / Skipped / Total] 226 / 74 / 5 / 305:  30%|███       | 305/1000 [10:36<24:09,  2.09s/it][Succeeded / Failed / Skipped / Total] 227 / 74 / 5 / 306:  31%|███       | 306/1000 [10:40<24:12,  2.09s/it][Succeeded / Failed / Skipped / Total] 227 / 74 / 5 / 306:  31%|███       | 307/1000 [10:45<24:17,  2.10s/it][Succeeded / Failed / Skipped / Total] 228 / 74 / 5 / 307:  31%|███       | 307/1000 [10:45<24:17,  2.10s/it][Succeeded / Failed / Skipped / Total] 228 / 75 / 5 / 308:  31%|███       | 308/1000 [10:46<24:12,  2.10s/it][Succeeded / Failed / Skipped / Total] 228 / 75 / 5 / 308:  31%|███       | 309/1000 [10:53<24:21,  2.12s/it][Succeeded / Failed / Skipped / Total] 228 / 76 / 5 / 309:  31%|███       | 309/1000 [10:53<24:21,  2.12s/it]Returns the long value of the specified path . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[bolted]] ( String [[dunning]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 299 ---------------------------------------------
Set the body of the object using the mapper --> Set Body body --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[mapper]] ) { spec . body ( object , [[mapper]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[istvan]] ) { spec . body ( object , [[istvan]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 300 ---------------------------------------------
Gets a double . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String path ) { final Object [[value]] = get ( path ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[siena]] ( String path ) { final Object [[amelie]] = get ( path ) ; if ( [[amelie]] instanceof Double ) { return ( Double ) [[amelie]] ; } return ObjectConverter . convertObjectTo ( [[amelie]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 301 ---------------------------------------------
Get a float value . --> Burglarized for arai --> Socre: 1.0

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[burglarized]] ( String [[arai]] ) { final Object [[devalue]] = get ( [[arai]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 302 ---------------------------------------------
Gets a map . --> [[[FAILED]]]

[[[[Adv]]]]: public < K , V > Map < K , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < K , V > Map < K , V > [[bail]] ( String [[adem]] ) { return get ( [[adem]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 303 ---------------------------------------------
Retrieve an object from the specified path . --> dumpsters for the given type --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object [[object]] = getFromPath ( path , "[[False]]" != "[[False]]" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[dumpsters]] > [[dumpsters]] getObject ( String path , Class < [[dumpsters]] > objectType ) { Object [[machinegun]] = getFromPath ( path , "[[Nearby]]" != "[[Nearby]]" ) ; return getObjectAsType ( [[machinegun]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 304 ---------------------------------------------
Create a new mock parameter config . --> Create Mock falls config for UpdateStrategy --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[leia]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 305 ---------------------------------------------
Returns the byte at the given path . --> Gurgle attribute --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[gurgle]] ( String [[abattoir]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 306 ---------------------------------------------
Add cookie . --> Set hollers --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[key]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[hollers]] ( String [[iridium]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[iridium]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Add a parameter --> Set shysters --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Collection < ? > [[parameterValues]] ) { spec . param ( parameterName , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[shysters]] ( String parameterName , Collection < ? > [[motto]] ) { spec . param ( parameterName , [[motto]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
Adds a parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[censored]] ( String [[hasso]] , Object ... [[guessing]] ) { spec . param ( [[hasso]] , [[guessing]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 309 ---------------------------------------------
Index the binding . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[haydar]] ( ) { for ( Binding < ? > [[budde]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[budde]] . getKey ( ) . getTypeLiteral ( ) , [[budde]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 310 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 228 / 77 / 5 / 310:  31%|███       | 310/1000 [10:59<24:27,  2.13s/it][Succeeded / Failed / Skipped / Total] 228 / 77 / 5 / 310:  31%|███       | 311/1000 [11:00<24:24,  2.13s/it][Succeeded / Failed / Skipped / Total] 229 / 77 / 5 / 311:  31%|███       | 311/1000 [11:00<24:24,  2.13s/it][Succeeded / Failed / Skipped / Total] 230 / 77 / 5 / 312:  31%|███       | 312/1000 [11:03<24:24,  2.13s/it][Succeeded / Failed / Skipped / Total] 230 / 77 / 5 / 312:  31%|███▏      | 313/1000 [11:03<24:17,  2.12s/it][Succeeded / Failed / Skipped / Total] 230 / 78 / 5 / 313:  31%|███▏      | 313/1000 [11:03<24:17,  2.12s/it][Succeeded / Failed / Skipped / Total] 230 / 79 / 5 / 314:  31%|███▏      | 314/1000 [11:09<24:21,  2.13s/it][Succeeded / Failed / Skipped / Total] 230 / 79 / 5 / 314:  32%|███▏      | 315/1000 [11:09<24:16,  2.13s/it][Succeeded / Failed / Skipped / Total] 230 / 80 / 5 / 315:  32%|███▏      | 315/1000 [11:09<24:16,  2.13s/it][Succeeded / Failed / Skipped / Total] 230 / 81 / 5 / 316:  32%|███▏      | 316/1000 [11:10<24:10,  2.12s/it][Succeeded / Failed / Skipped / Total] 230 / 81 / 5 / 316:  32%|███▏      | 317/1000 [11:16<24:17,  2.13s/it][Succeeded / Failed / Skipped / Total] 231 / 81 / 5 / 317:  32%|███▏      | 317/1000 [11:16<24:17,  2.13s/it]A ResponseLogging filter with the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[stream]] , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( [[stream]] , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[emit]] , Matcher < Integer > [[sonoma]] ) { return new ResponseLoggingFilter ( [[emit]] , [[sonoma]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 311 ---------------------------------------------
Remove an EJB binding . --> dappled method --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > [[binding]] , InjectionPoint ip ) { failedJitBindings . add ( [[binding]] . getKey ( ) ) ; jitBindings . remove ( [[binding]] . getKey ( ) ) ; membersInjectorStore . remove ( [[binding]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[binding]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[dappled]] ( Binding < ? > [[adem]] , InjectionPoint ip ) { failedJitBindings . add ( [[adem]] . getKey ( ) ) ; jitBindings . remove ( [[adem]] . getKey ( ) ) ; membersInjectorStore . remove ( [[adem]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[adem]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 312 ---------------------------------------------
Cleans up the source map and source map . --> Clean all keys and sources --> Socre: 1.0

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[keyAndSource]] : keysAndSources ) { Multiset < Object > [[set]] = backingMap . get ( [[keyAndSource]] . key ) ; if ( [[set]] != null ) { [[set]] . remove ( [[keyAndSource]] . source ) ; if ( [[set]] . isEmpty ( ) ) { backingMap . remove ( [[keyAndSource]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[masami]] : keysAndSources ) { Multiset < Object > [[kim]] = backingMap . get ( [[masami]] . key ) ; if ( [[kim]] != null ) { [[kim]] . remove ( [[masami]] . source ) ; if ( [[kim]] . isEmpty ( ) ) { backingMap . remove ( [[masami]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 313 ---------------------------------------------
convert constant string to string binding --> [[[FAILED]]]

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > key , Errors [[errors]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[blaspheme]] ( Key < T > key , Errors [[léo]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 314 ---------------------------------------------
Returns all dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[cursory]] ( BindingImpl < ? > [[eddy]] ) { if ( [[eddy]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[eddy]] ) . getInternalDependencies ( ) ; } else if ( [[eddy]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[eddy]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 315 ---------------------------------------------
Create a new cookies with the given cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[mccloskey]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 316 ---------------------------------------------
Gets a list from a path . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > getList ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[original]] = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( [[original]] != null ) { for ( T t : [[original]] ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > getList ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[birdcage]] = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( [[birdcage]] != null ) { for ( T t : [[birdcage]] ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 317 ---------------------------------------------
Initialize delegate . --> initialize delegate --> Socre: 1.0

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > [[yumiko]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[yumiko]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 318 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 231 / 82 / 5 / 318:  32%|███▏      | 318/1000 [11:20<24:20,  2.14s/it][Succeeded / Failed / Skipped / Total] 231 / 82 / 5 / 318:  32%|███▏      | 319/1000 [11:23<24:18,  2.14s/it][Succeeded / Failed / Skipped / Total] 231 / 83 / 5 / 319:  32%|███▏      | 319/1000 [11:23<24:18,  2.14s/it][Succeeded / Failed / Skipped / Total] 231 / 84 / 5 / 320:  32%|███▏      | 320/1000 [11:30<24:28,  2.16s/it][Succeeded / Failed / Skipped / Total] 231 / 84 / 5 / 320:  32%|███▏      | 321/1000 [11:31<24:22,  2.15s/it][Succeeded / Failed / Skipped / Total] 231 / 85 / 5 / 321:  32%|███▏      | 321/1000 [11:31<24:22,  2.15s/it][Succeeded / Failed / Skipped / Total] 232 / 85 / 5 / 322:  32%|███▏      | 322/1000 [11:34<24:22,  2.16s/it][Succeeded / Failed / Skipped / Total] 232 / 85 / 5 / 322:  32%|███▏      | 323/1000 [11:38<24:24,  2.16s/it][Succeeded / Failed / Skipped / Total] 233 / 85 / 5 / 323:  32%|███▏      | 323/1000 [11:38<24:24,  2.16s/it][Succeeded / Failed / Skipped / Total] 234 / 85 / 5 / 324:  32%|███▏      | 324/1000 [11:46<24:34,  2.18s/it][Succeeded / Failed / Skipped / Total] 234 / 85 / 5 / 324:  32%|███▎      | 325/1000 [11:47<24:28,  2.18s/it][Succeeded / Failed / Skipped / Total] 234 / 86 / 5 / 325:  32%|███▎      | 325/1000 [11:47<24:28,  2.18s/it]Create an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[dizzle]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 319 ---------------------------------------------
Assemble the provider type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[toledo]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 320 ---------------------------------------------
Binds the logger instance binding . --> [[[FAILED]]]

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory [[loggerFactory]] = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , [[loggerFactory]] , Scoping . UNSCOPED , [[loggerFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory [[cruiser]] = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , [[cruiser]] , Scoping . UNSCOPED , [[cruiser]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 321 ---------------------------------------------
Binds the injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl injector ) { Key < Injector > [[key]] = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Injector > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl injector ) { Key < Injector > [[reproduces]] = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( [[reproduces]] , new ProviderInstanceBindingImpl < Injector > ( injector , [[reproduces]] , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 322 ---------------------------------------------
overrides a method --> snappy method --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method [[a]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[snappy]] ( Method [[joannie]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 323 ---------------------------------------------
prepareBuiltIn converters --> SetBuilt inConverters --> Socre: 1.0

[[[[Adv]]]]: static void prepareBuiltInConverters ( InjectorImpl [[injector]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void prepareBuiltInConverters ( InjectorImpl [[armchair]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 324 ---------------------------------------------
Returns canonicalize for a given type literal . --> Get Schetta code --> Socre: 1.0

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > [[typeLiteral]] ) { Type [[type]] = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( [[type]] ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[type]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[astro]] ( TypeLiteral < T > [[appleseed]] ) { Type [[bruschetta]] = [[appleseed]] . getType ( ) ; if ( ! isFullySpecified ( [[bruschetta]] ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[appleseed]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[appleseed]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[bruschetta]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 325 ---------------------------------------------
Returns the given class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader [[kidneys]] ) { return [[kidneys]] != null ? [[kidneys]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 326 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 234 / 87 / 5 / 326:  33%|███▎      | 326/1000 [11:54<24:37,  2.19s/it][Succeeded / Failed / Skipped / Total] 234 / 87 / 5 / 326:  33%|███▎      | 327/1000 [11:55<24:32,  2.19s/it][Succeeded / Failed / Skipped / Total] 235 / 87 / 5 / 327:  33%|███▎      | 327/1000 [11:55<24:32,  2.19s/it][Succeeded / Failed / Skipped / Total] 235 / 88 / 5 / 328:  33%|███▎      | 328/1000 [11:55<24:26,  2.18s/it][Succeeded / Failed / Skipped / Total] 235 / 88 / 5 / 328:  33%|███▎      | 329/1000 [11:56<24:22,  2.18s/it][Succeeded / Failed / Skipped / Total] 235 / 89 / 5 / 329:  33%|███▎      | 329/1000 [11:56<24:22,  2.18s/it][Succeeded / Failed / Skipped / Total] 236 / 89 / 5 / 330:  33%|███▎      | 330/1000 [12:02<24:26,  2.19s/it][Succeeded / Failed / Skipped / Total] 236 / 89 / 5 / 330:  33%|███▎      | 331/1000 [12:02<24:19,  2.18s/it][Succeeded / Failed / Skipped / Total] 236 / 90 / 5 / 331:  33%|███▎      | 331/1000 [12:02<24:19,  2.18s/it][Succeeded / Failed / Skipped / Total] 237 / 90 / 5 / 332:  33%|███▎      | 332/1000 [12:02<24:13,  2.18s/it][Succeeded / Failed / Skipped / Total] 237 / 90 / 5 / 332:  33%|███▎      | 333/1000 [12:03<24:09,  2.17s/it]Handles a injection request injection . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[ail]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 327 ---------------------------------------------
Resolves all types . --> ginsburg a Type array --> Socre: 1.0

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { result [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[ginsburg]] ( Type [ ] [[tty]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[tty]] . length ] ; for ( int t = 0 ; t < [[tty]] . length ; t ++ ) { result [ t ] = resolve ( [[tty]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 328 ---------------------------------------------
Get all parameterInjectors . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int [[size]] = [[parameterInjectors]] . length ; Object [ ] parameters = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[cathouse]] ) throws InternalProvisionException { if ( [[cathouse]] == null ) { return NO_ARGUMENTS ; } int [[mell]] = [[cathouse]] . length ; Object [ ] parameters = new Object [ [[mell]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 329 ---------------------------------------------
Checks if the given binding is encountered . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > [[binding]] , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[binding]] ) ; for ( Dependency dep : deps ) { Key < ? > [[depKey]] = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( [[depKey]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > [[doors]] , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[doors]] ) ; for ( Dependency dep : deps ) { Key < ? > [[supers]] = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( [[supers]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 330 ---------------------------------------------
Validate the given errors . --> Validate pendingInjections --> Socre: 1.0

[[[[Adv]]]]: void validateOustandingInjections ( Errors [[errors]] ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( [[errors]] ) ; } catch ( ErrorsException e ) { [[errors]] . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void validateOustandingInjections ( Errors [[abduction]] ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( [[abduction]] ) ; } catch ( ErrorsException e ) { [[abduction]] . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 331 ---------------------------------------------
Fix annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[onde]] ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 332 ---------------------------------------------
Create a new instance of this class --> Creates a new Object --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[choctaw]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 333 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 238 / 90 / 5 / 333:  33%|███▎      | 333/1000 [12:03<24:09,  2.17s/it][Succeeded / Failed / Skipped / Total] 238 / 91 / 5 / 334:  33%|███▎      | 334/1000 [12:03<24:03,  2.17s/it][Succeeded / Failed / Skipped / Total] 238 / 91 / 5 / 334:  34%|███▎      | 335/1000 [12:09<24:07,  2.18s/it][Succeeded / Failed / Skipped / Total] 238 / 92 / 5 / 335:  34%|███▎      | 335/1000 [12:09<24:07,  2.18s/it][Succeeded / Failed / Skipped / Total] 239 / 92 / 5 / 336:  34%|███▎      | 336/1000 [12:13<24:09,  2.18s/it][Succeeded / Failed / Skipped / Total] 239 / 92 / 5 / 336:  34%|███▎      | 337/1000 [12:22<24:20,  2.20s/it][Succeeded / Failed / Skipped / Total] 240 / 92 / 5 / 337:  34%|███▎      | 337/1000 [12:22<24:20,  2.20s/it][Succeeded / Failed / Skipped / Total] 240 / 92 / 5 / 337:  34%|███▍      | 338/1000 [12:34<24:37,  2.23s/it][Succeeded / Failed / Skipped / Total] 240 / 93 / 5 / 338:  34%|███▍      | 338/1000 [12:34<24:37,  2.23s/it][Succeeded / Failed / Skipped / Total] 240 / 93 / 5 / 338:  34%|███▍      | 339/1000 [12:34<24:30,  2.23s/it][Succeeded / Failed / Skipped / Total] 241 / 93 / 5 / 339:  34%|███▍      | 339/1000 [12:34<24:30,  2.23s/it][Succeeded / Failed / Skipped / Total] 241 / 93 / 5 / 339:  34%|███▍      | 340/1000 [12:43<24:41,  2.24s/it]Create a servlet request --> Add a ManagedServletPipeline request --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest servletRequest , final ManagedServletPipeline [[servletPipeline]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest servletRequest , final ManagedServletPipeline [[passwords]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 334 ---------------------------------------------
Checks if the given member is a misplaced binding . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[member]] , Errors [[errors]] ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( [[errors]] , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[ganda]] , Errors [[j]] ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( [[j]] , [[ganda]] , ( ( AnnotatedElement ) [[ganda]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 335 ---------------------------------------------
Returns an annotation of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[lemay]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 336 ---------------------------------------------
Returns true if this class has the same version of Cglib . --> danzpah --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader [[classLoader]] ) { Class < ? > [[fc]] = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( [[fc]] . getName ( ) ) == [[fc]] ; } catch ( ClassNotFoundException e ) { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[danzig]] ( ClassLoader [[darkness]] ) { Class < ? > [[malika]] = net . sf . cglib . reflect . FastClass . class ; try { return [[darkness]] . loadClass ( [[malika]] . getName ( ) ) == [[malika]] ; } catch ( ClassNotFoundException e ) { return "[[Chutzpah]]" != "[[Chutzpah]]" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 337 ---------------------------------------------
Returns true if the annotationType is present in the supplied annotation . --> Unexploded method --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > annotationType ) { Retention [[retention]] = annotationType . getAnnotation ( Retention . class ) ; return [[retention]] != null && [[retention]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[unexploded]] ( Class < ? extends Annotation > annotationType ) { Retention [[huys]] = annotationType . getAnnotation ( Retention . class ) ; return [[huys]] != null && [[huys]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 338 ---------------------------------------------
Normalizes the path . --> [[[FAILED]]]

[[[[Adv]]]]: static String normalizePath ( String path ) { StringBuilder [[sb]] = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String normalizePath ( String path ) { StringBuilder [[bostwick]] = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 339 ---------------------------------------------
Internal factory . --> Creates a new instance of the class --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > [[key]] , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping [[scoping]] ) { if ( [[scoping]] . isNoScope ( ) ) { return creator ; } Scope [[scope]] = [[scoping]] . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[queues]] ( Key < T > [[risin]] , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping [[laundress]] ) { if ( [[laundress]] . isNoScope ( ) ) { return creator ; } Scope [[queues]] = [[laundress]] . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 340 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 242 / 93 / 5 / 340:  34%|███▍      | 340/1000 [12:43<24:41,  2.24s/it][Succeeded / Failed / Skipped / Total] 242 / 93 / 5 / 340:  34%|███▍      | 341/1000 [12:43<24:35,  2.24s/it][Succeeded / Failed / Skipped / Total] 242 / 94 / 5 / 341:  34%|███▍      | 341/1000 [12:43<24:35,  2.24s/it][Succeeded / Failed / Skipped / Total] 242 / 94 / 5 / 341:  34%|███▍      | 342/1000 [12:49<24:40,  2.25s/it][Succeeded / Failed / Skipped / Total] 242 / 95 / 5 / 342:  34%|███▍      | 342/1000 [12:49<24:40,  2.25s/it][Succeeded / Failed / Skipped / Total] 242 / 95 / 5 / 342:  34%|███▍      | 343/1000 [12:49<24:34,  2.24s/it][Succeeded / Failed / Skipped / Total] 243 / 95 / 5 / 343:  34%|███▍      | 343/1000 [12:49<24:34,  2.24s/it][Succeeded / Failed / Skipped / Total] 243 / 95 / 5 / 343:  34%|███▍      | 344/1000 [12:50<24:29,  2.24s/it][Succeeded / Failed / Skipped / Total] 244 / 95 / 5 / 344:  34%|███▍      | 344/1000 [12:50<24:29,  2.24s/it][Succeeded / Failed / Skipped / Total] 244 / 95 / 5 / 344:  34%|███▍      | 345/1000 [12:56<24:33,  2.25s/it][Succeeded / Failed / Skipped / Total] 244 / 96 / 5 / 345:  34%|███▍      | 345/1000 [12:56<24:33,  2.25s/it][Succeeded / Failed / Skipped / Total] 244 / 96 / 5 / 345:  35%|███▍      | 346/1000 [12:56<24:28,  2.25s/it]Returns the name of the given key . --> Return antifreeze of given cantrell --> Socre: 1.0

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > [[key]] ) { Annotation [[annotation]] = [[key]] . getAnnotation ( ) ; Class < ? extends Annotation > [[annotationType]] = [[key]] . getAnnotationType ( ) ; if ( [[annotation]] != null && ! isMarker ( [[annotationType]] ) ) { return [[key]] . getAnnotation ( ) . toString ( ) ; } else if ( [[key]] . getAnnotationType ( ) != null ) { return "@" + [[key]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[antifreeze]] ( Key < ? > [[cantrell]] ) { Annotation [[cougar]] = [[cantrell]] . getAnnotation ( ) ; Class < ? extends Annotation > [[articulate]] = [[cantrell]] . getAnnotationType ( ) ; if ( [[cougar]] != null && ! isMarker ( [[articulate]] ) ) { return [[cantrell]] . getAnnotation ( ) . toString ( ) ; } else if ( [[cantrell]] . getAnnotationType ( ) != null ) { return "@" + [[cantrell]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 341 ---------------------------------------------
Initialize delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[purpose]] ( Provider < T > [[machinegun]] ) { checkState ( this . [[vie]] == null , "delegate already initialized" ) ; this . [[vie]] = checkNotNull ( [[machinegun]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 342 ---------------------------------------------
Returns the duplicate of the specified scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors [[errors]] , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { [[errors]] . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors [[referrals]] , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { [[referrals]] . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 343 ---------------------------------------------
Adds the direct type binding . --> grinch interface --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder [[binder]] ) { [[binder]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[grinch]] ( Binder [[haruko]] ) { [[haruko]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 344 ---------------------------------------------
Make the given changeoping from the given injector . --> dietz method --> Socre: 1.0

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping [[scoping]] , InjectorImpl [[injector]] , Errors errors ) { Class < ? extends Annotation > [[scopeAnnotation]] = [[scoping]] . getScopeAnnotation ( ) ; if ( [[scopeAnnotation]] == null ) { return [[scoping]] ; } ScopeBinding [[scope]] = [[injector]] . state . getScopeBinding ( [[scopeAnnotation]] ) ; if ( [[scope]] != null ) { return forInstance ( [[scope]] . getScope ( ) ) ; } errors . scopeNotFound ( [[scopeAnnotation]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[dietz]] ( Scoping [[caroling]] , InjectorImpl [[stepsisters]] , Errors errors ) { Class < ? extends Annotation > [[bytes]] = [[caroling]] . getScopeAnnotation ( ) ; if ( [[bytes]] == null ) { return [[caroling]] ; } ScopeBinding [[smartass]] = [[stepsisters]] . state . getScopeBinding ( [[bytes]] ) ; if ( [[smartass]] != null ) { return forInstance ( [[smartass]] . getScope ( ) ) ; } errors . scopeNotFound ( [[bytes]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 345 ---------------------------------------------
Determines whether the given member islyCallable . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > [[type]] : parameterTypes ) { if ( ! Modifier . isPublic ( [[type]] . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[executioner]] ( Member [[bboying]] ) { if ( ! Modifier . isPublic ( [[bboying]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( [[bboying]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[bboying]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[bboying]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > [[sip]] : parameterTypes ) { if ( ! Modifier . isPublic ( [[sip]] . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 346 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 245 / 96 / 5 / 346:  35%|███▍      | 346/1000 [12:56<24:28,  2.25s/it][Succeeded / Failed / Skipped / Total] 245 / 96 / 5 / 346:  35%|███▍      | 347/1000 [12:57<24:22,  2.24s/it][Succeeded / Failed / Skipped / Total] 245 / 96 / 6 / 347:  35%|███▍      | 347/1000 [12:57<24:22,  2.24s/it][Succeeded / Failed / Skipped / Total] 245 / 96 / 6 / 347:  35%|███▍      | 348/1000 [12:57<24:17,  2.23s/it][Succeeded / Failed / Skipped / Total] 246 / 96 / 6 / 348:  35%|███▍      | 348/1000 [12:57<24:17,  2.23s/it][Succeeded / Failed / Skipped / Total] 246 / 96 / 6 / 348:  35%|███▍      | 349/1000 [12:57<24:11,  2.23s/it][Succeeded / Failed / Skipped / Total] 246 / 97 / 6 / 349:  35%|███▍      | 349/1000 [12:57<24:11,  2.23s/it][Succeeded / Failed / Skipped / Total] 246 / 97 / 6 / 349:  35%|███▌      | 350/1000 [12:58<24:06,  2.23s/it][Succeeded / Failed / Skipped / Total] 247 / 97 / 6 / 350:  35%|███▌      | 350/1000 [12:58<24:06,  2.23s/it][Succeeded / Failed / Skipped / Total] 247 / 97 / 6 / 350:  35%|███▌      | 351/1000 [13:04<24:10,  2.23s/it][Succeeded / Failed / Skipped / Total] 247 / 98 / 6 / 351:  35%|███▌      | 351/1000 [13:04<24:10,  2.23s/it][Succeeded / Failed / Skipped / Total] 247 / 98 / 6 / 351:  35%|███▌      | 352/1000 [13:06<24:07,  2.23s/it][Succeeded / Failed / Skipped / Total] 248 / 98 / 6 / 352:  35%|███▌      | 352/1000 [13:06<24:07,  2.23s/it][Succeeded / Failed / Skipped / Total] 248 / 98 / 6 / 352:  35%|███▌      | 353/1000 [13:09<24:07,  2.24s/it]Returns the instance with the specified construction context . --> Internal method to add the construction --> Socre: 1.0

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] [[parameters]] = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( [[parameters]] ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] [[unfortunates]] = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( [[unfortunates]] ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 347 ---------------------------------------------
Returns assist description methods --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > getAssistedMethods ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 348 ---------------------------------------------
Method to write replace . --> Returns a copy of an object --> Socre: 1.0

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[mija]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 349 ---------------------------------------------
Return the ConstructorInjector for the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[constructorInjector]] , Errors [[errors]] ) throws ErrorsException { return cache . get ( [[constructorInjector]] , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[sleepwalkers]] , Errors [[blalock]] ) throws ErrorsException { return cache . get ( [[sleepwalkers]] , [[blalock]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 350 ---------------------------------------------
Gets the key . --> Gassy method --> Socre: 1.0

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > [[type]] , Member [[member]] , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int [[numErrorsBefore]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , [[member]] , annotations ) ; errors . throwIfNewErrors ( [[numErrorsBefore]] ) ; return found == null ? Key . get ( [[type]] ) : Key . get ( [[type]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[gassy]] ( TypeLiteral < ? > [[bared]] , Member [[balthazar]] , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int [[splendiferous]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , [[balthazar]] , annotations ) ; errors . throwIfNewErrors ( [[splendiferous]] ) ; return found == null ? Key . get ( [[bared]] ) : Key . get ( [[bared]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 351 ---------------------------------------------
Returns the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[disembarked]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[ug]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[disembarked]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[disembarked]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[ug]] ) ) ; return [[ug]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 352 ---------------------------------------------
Return true if type literal is not a valid type literal . --> mekong a type literal --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[mekong]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 353 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 249 / 98 / 6 / 353:  35%|███▌      | 353/1000 [13:09<24:07,  2.24s/it][Succeeded / Failed / Skipped / Total] 249 / 98 / 6 / 353:  35%|███▌      | 354/1000 [13:11<24:05,  2.24s/it][Succeeded / Failed / Skipped / Total] 250 / 98 / 6 / 354:  35%|███▌      | 354/1000 [13:11<24:05,  2.24s/it][Succeeded / Failed / Skipped / Total] 250 / 98 / 6 / 354:  36%|███▌      | 355/1000 [13:12<23:59,  2.23s/it][Succeeded / Failed / Skipped / Total] 250 / 98 / 7 / 355:  36%|███▌      | 355/1000 [13:12<23:59,  2.23s/it][Succeeded / Failed / Skipped / Total] 250 / 98 / 7 / 355:  36%|███▌      | 356/1000 [13:17<24:02,  2.24s/it][Succeeded / Failed / Skipped / Total] 251 / 98 / 7 / 356:  36%|███▌      | 356/1000 [13:17<24:02,  2.24s/it][Succeeded / Failed / Skipped / Total] 251 / 98 / 7 / 356:  36%|███▌      | 357/1000 [13:19<24:00,  2.24s/it][Succeeded / Failed / Skipped / Total] 252 / 98 / 7 / 357:  36%|███▌      | 357/1000 [13:19<24:00,  2.24s/it][Succeeded / Failed / Skipped / Total] 252 / 98 / 7 / 357:  36%|███▌      | 358/1000 [13:22<23:58,  2.24s/it][Succeeded / Failed / Skipped / Total] 253 / 98 / 7 / 358:  36%|███▌      | 358/1000 [13:22<23:58,  2.24s/it][Succeeded / Failed / Skipped / Total] 253 / 98 / 7 / 358:  36%|███▌      | 359/1000 [13:29<24:05,  2.26s/it][Succeeded / Failed / Skipped / Total] 253 / 99 / 7 / 359:  36%|███▌      | 359/1000 [13:29<24:05,  2.26s/it][Succeeded / Failed / Skipped / Total] 253 / 99 / 7 / 359:  36%|███▌      | 360/1000 [13:37<24:14,  2.27s/it][Succeeded / Failed / Skipped / Total] 253 / 100 / 7 / 360:  36%|███▌      | 360/1000 [13:37<24:14,  2.27s/it][Succeeded / Failed / Skipped / Total] 253 / 100 / 7 / 360:  36%|███▌      | 361/1000 [13:40<24:11,  2.27s/it]Returns a new set that contains the given dependencies . --> RemoveAssistedDeps --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[builder]] . add ( dep ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[onlv]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[onlv]] . add ( dep ) ; } } return [[onlv]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 354 ---------------------------------------------
Creates a new module --> Assassination method --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[assassination]] ( Module [[erh]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 355 ---------------------------------------------
Gets the implementation with the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 356 ---------------------------------------------
Checks if the given interceptor class has a scope . --> dampened annotations --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation [[annotation]] : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[dampened]] ( Class < ? extends Interceptor > [[discern]] ) { for ( Annotation [[bricks]] : [[discern]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[bricks]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "[[Antsy]]" != "[[Antsy]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 357 ---------------------------------------------
New realSetBinder . --> Create a RealMultibinder --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[result]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[result]] ) ; return [[result]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[appleseed]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[appleseed]] ) ; return [[appleseed]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 358 ---------------------------------------------
Creates a new real map binder . --> New RealMapBinder --> Socre: 1.0

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder [[binder]] , TypeLiteral < K > keyType , Key < V > [[valueTypeAndAnnotation]] ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[valueTypeAndAnnotation]] . getTypeLiteral ( ) ; return newRealMapBinder ( [[binder]] , keyType , valueType , [[valueTypeAndAnnotation]] . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , [[valueTypeAndAnnotation]] . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder [[fung]] , TypeLiteral < K > keyType , Key < V > [[aitch]] ) { [[fung]] = [[fung]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[aitch]] . getTypeLiteral ( ) ; return newRealMapBinder ( [[fung]] , keyType , valueType , [[aitch]] . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[fung]] , [[aitch]] . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 359 ---------------------------------------------
Returns the InjectionPoint in use . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[kids]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 360 ---------------------------------------------
Returns true if the annotation has the same inject . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[dewitt]] ( Constructor [[duras]] ) { return [[duras]] . isAnnotationPresent ( Inject . class ) || [[duras]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 361 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 254 / 100 / 7 / 361:  36%|███▌      | 361/1000 [13:40<24:11,  2.27s/it][Succeeded / Failed / Skipped / Total] 254 / 100 / 7 / 361:  36%|███▌      | 362/1000 [13:42<24:09,  2.27s/it][Succeeded / Failed / Skipped / Total] 254 / 101 / 7 / 362:  36%|███▌      | 362/1000 [13:42<24:09,  2.27s/it][Succeeded / Failed / Skipped / Total] 254 / 101 / 7 / 362:  36%|███▋      | 363/1000 [13:43<24:05,  2.27s/it][Succeeded / Failed / Skipped / Total] 254 / 102 / 7 / 363:  36%|███▋      | 363/1000 [13:43<24:05,  2.27s/it][Succeeded / Failed / Skipped / Total] 254 / 102 / 7 / 363:  36%|███▋      | 364/1000 [13:45<24:02,  2.27s/it][Succeeded / Failed / Skipped / Total] 254 / 103 / 7 / 364:  36%|███▋      | 364/1000 [13:45<24:02,  2.27s/it][Succeeded / Failed / Skipped / Total] 254 / 103 / 7 / 364:  36%|███▋      | 365/1000 [13:48<24:00,  2.27s/it][Succeeded / Failed / Skipped / Total] 254 / 104 / 7 / 365:  36%|███▋      | 365/1000 [13:48<24:00,  2.27s/it][Succeeded / Failed / Skipped / Total] 254 / 104 / 7 / 365:  37%|███▋      | 366/1000 [13:51<24:00,  2.27s/it][Succeeded / Failed / Skipped / Total] 255 / 104 / 7 / 366:  37%|███▋      | 366/1000 [13:51<24:00,  2.27s/it][Succeeded / Failed / Skipped / Total] 255 / 104 / 7 / 366:  37%|███▋      | 367/1000 [13:56<24:02,  2.28s/it][Succeeded / Failed / Skipped / Total] 255 / 105 / 7 / 367:  37%|███▋      | 367/1000 [13:56<24:02,  2.28s/it][Succeeded / Failed / Skipped / Total] 255 / 105 / 7 / 367:  37%|███▋      | 368/1000 [13:57<23:58,  2.28s/it][Succeeded / Failed / Skipped / Total] 255 / 106 / 7 / 368:  37%|███▋      | 368/1000 [13:57<23:58,  2.28s/it][Succeeded / Failed / Skipped / Total] 255 / 106 / 7 / 368:  37%|███▋      | 369/1000 [14:06<24:07,  2.29s/it]Returns the dependencies of the given implementation . --> enlarged method --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint [[ctorPoint]] , TypeLiteral < ? > [[implementation]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( [[ctorPoint]] . getDependencies ( ) ) ; if ( ! [[implementation]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[implementation]] ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[enlarged]] ( InjectionPoint [[chattel]] , TypeLiteral < ? > [[emit]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( [[chattel]] . getDependencies ( ) ) ; if ( ! [[emit]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[emit]] ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 362 ---------------------------------------------
Finds the next filter . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[filter]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[filter]] != null ) { return [[filter]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[hustlers]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[ancient]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[ancient]] != null ) { return [[ancient]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 363 ---------------------------------------------
Invokes the method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object invoke ( Object [[proxy]] , final Method method , final Object [ ] [[args]] ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object invoke ( Object [[neda]] , final Method method , final Object [ ] [[gallagher]] ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 364 ---------------------------------------------
Returns the list of dependencies for the constructor . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[landowner]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 365 ---------------------------------------------
Gets the getBinding from the provided Method . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > [[returnType]] = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[florist]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > [[bigfoot]] = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 366 ---------------------------------------------
Initializes the context . --> A utility method for collagen --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[collagen]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 367 ---------------------------------------------
Returns the line number for the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[beatnik]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 368 ---------------------------------------------
Checks whether the given dependencies is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > [[dependencies]] , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[za]] ( Set < Dependency < ? > > [[chevrolet]] , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[bushes]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 369 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 256 / 106 / 7 / 369:  37%|███▋      | 369/1000 [14:06<24:07,  2.29s/it][Succeeded / Failed / Skipped / Total] 256 / 106 / 7 / 369:  37%|███▋      | 370/1000 [14:06<24:01,  2.29s/it][Succeeded / Failed / Skipped / Total] 257 / 106 / 7 / 370:  37%|███▋      | 370/1000 [14:06<24:01,  2.29s/it][Succeeded / Failed / Skipped / Total] 257 / 106 / 7 / 370:  37%|███▋      | 371/1000 [14:07<23:57,  2.29s/it][Succeeded / Failed / Skipped / Total] 258 / 106 / 7 / 371:  37%|███▋      | 371/1000 [14:07<23:57,  2.29s/it][Succeeded / Failed / Skipped / Total] 258 / 106 / 7 / 371:  37%|███▋      | 372/1000 [14:12<23:59,  2.29s/it][Succeeded / Failed / Skipped / Total] 258 / 107 / 7 / 372:  37%|███▋      | 372/1000 [14:12<23:59,  2.29s/it][Succeeded / Failed / Skipped / Total] 258 / 107 / 7 / 372:  37%|███▋      | 373/1000 [14:25<24:14,  2.32s/it][Succeeded / Failed / Skipped / Total] 258 / 108 / 7 / 373:  37%|███▋      | 373/1000 [14:25<24:14,  2.32s/it][Succeeded / Failed / Skipped / Total] 258 / 109 / 7 / 374:  37%|███▋      | 374/1000 [14:25<24:08,  2.31s/it][Succeeded / Failed / Skipped / Total] 258 / 109 / 7 / 374:  38%|███▊      | 375/1000 [14:25<24:02,  2.31s/it]Wrap callable by one . --> Wrap caching by clobbering --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[momoko]] ( Callable < T > [[clobbering]] ) { return wrap ( [[clobbering]] , [[momoko]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 370 ---------------------------------------------
Creates a new Module for the given module --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner [[scanner]] ) { return forObject ( module , "[[False]]" != "[[False]]" , [[scanner]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[wittenberg]] ( Object module , ModuleAnnotatedMethodScanner [[joliet]] ) { return forObject ( module , "[[Needa]]" != "[[Needa]]" , [[joliet]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 371 ---------------------------------------------
Validate and canonicalize the object . --> dakin --> Socre: 1.0

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > [[key]] , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[dakin]] ( Key < ? > [[manacles]] , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[manacles]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[manacles]] + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 372 ---------------------------------------------
Wraps a callable with the given seed map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[callable]] , [[continueRequest]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[antonioni]] ( Callable < T > [[afflictions]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[afflictions]] , [[antonioni]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 373 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[notions]] ( Class < ? extends Annotation > [[diminish]] ) { [[diminish]] = Annotations . canonicalizeIfNamed ( [[diminish]] ) ; if ( isAllDefaultMethods ( [[diminish]] ) ) { return [[notions]] ( generateAnnotation ( [[diminish]] ) ) ; } checkNotNull ( [[diminish]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[diminish]] ) ; ensureIsBindingAnnotation ( [[diminish]] ) ; return new AnnotationTypeStrategy ( [[diminish]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 374 ---------------------------------------------
Returns annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[annotation]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[annotation]] = foundAnnotation ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[swim]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[swim]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[swim]] = foundAnnotation ; } } return [[swim]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 375 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 259 / 109 / 7 / 375:  38%|███▊      | 375/1000 [14:25<24:02,  2.31s/it][Succeeded / Failed / Skipped / Total] 260 / 109 / 7 / 376:  38%|███▊      | 376/1000 [14:32<24:07,  2.32s/it][Succeeded / Failed / Skipped / Total] 260 / 109 / 7 / 376:  38%|███▊      | 377/1000 [14:32<24:02,  2.31s/it][Succeeded / Failed / Skipped / Total] 261 / 109 / 7 / 377:  38%|███▊      | 377/1000 [14:32<24:02,  2.31s/it][Succeeded / Failed / Skipped / Total] 261 / 110 / 7 / 378:  38%|███▊      | 378/1000 [14:32<23:56,  2.31s/it][Succeeded / Failed / Skipped / Total] 261 / 110 / 7 / 378:  38%|███▊      | 379/1000 [14:32<23:50,  2.30s/it][Succeeded / Failed / Skipped / Total] 262 / 110 / 7 / 379:  38%|███▊      | 379/1000 [14:32<23:50,  2.30s/it]Create the set of registered listeners . --> unbelievable implementation --> Socre: 1.0

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > [[type]] , Errors [[errors]] ) throws ErrorsException { int numErrorsBefore = [[errors]] . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[type]] ) ; } catch ( ConfigurationException e ) { [[errors]] . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , [[errors]] ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( [[errors]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( [[type]] ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( [[type]] , encounter ) ; } catch ( RuntimeException e ) { [[errors]] . errorNotifyingTypeListener ( binding , [[type]] , e ) ; } } } encounter . invalidate ( ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[type]] , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[unbelievable]] ( TypeLiteral < T > [[swum]] , Errors [[paparazzo]] ) throws ErrorsException { int numErrorsBefore = [[paparazzo]] . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[swum]] ) ; } catch ( ConfigurationException e ) { [[paparazzo]] . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , [[paparazzo]] ) ; [[paparazzo]] . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( [[paparazzo]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( [[swum]] ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( [[swum]] , encounter ) ; } catch ( RuntimeException e ) { [[paparazzo]] . errorNotifyingTypeListener ( binding , [[swum]] , e ) ; } } } encounter . invalidate ( ) ; [[paparazzo]] . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[swum]] , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 376 ---------------------------------------------
Returns true if the given constructor has no parameters . --> Gallardo method --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > [[paramList]] , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > [[params]] = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > [[param]] : [[params]] ) { Key < ? > paramKey = Annotations . getKey ( [[param]] , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[gallardo]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > [[mase]] , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > [[corollary]] = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > [[coccyx]] : [[corollary]] ) { Key < ? > paramKey = Annotations . getKey ( [[coccyx]] , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 377 ---------------------------------------------
Creates a Key with the given annotation strategy . --> duty3 - 7 --> Socre: 1.0

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( [[type]] , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[duty]] ( Class < T > [[handcuff]] , AnnotationStrategy [[elisabeth]] ) { return new Key < T > ( [[handcuff]] , [[elisabeth]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 378 ---------------------------------------------
Get the name of the getBinding . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[convicted]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 379 ---------------------------------------------
Returns a strategy for the given annotation . --> Returns a new AnnotationStrategy instance --> Socre: 1.0

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[filmore]] ( Annotation [[youngstown]] ) { checkNotNull ( [[youngstown]] , "annotation" ) ; Class < ? extends Annotation > [[scheherazade]] = [[youngstown]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[scheherazade]] ) ; ensureIsBindingAnnotation ( [[scheherazade]] ) ; if ( Annotations . isMarker ( [[scheherazade]] ) ) { return new AnnotationTypeStrategy ( [[scheherazade]] , [[youngstown]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[youngstown]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 380 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 262 / 111 / 7 / 380:  38%|███▊      | 380/1000 [14:38<23:53,  2.31s/it][Succeeded / Failed / Skipped / Total] 262 / 111 / 7 / 380:  38%|███▊      | 381/1000 [14:40<23:50,  2.31s/it][Succeeded / Failed / Skipped / Total] 263 / 111 / 7 / 381:  38%|███▊      | 381/1000 [14:40<23:50,  2.31s/it][Succeeded / Failed / Skipped / Total] 264 / 111 / 7 / 382:  38%|███▊      | 382/1000 [14:41<23:45,  2.31s/it][Succeeded / Failed / Skipped / Total] 264 / 111 / 7 / 382:  38%|███▊      | 383/1000 [14:46<23:48,  2.32s/it][Succeeded / Failed / Skipped / Total] 265 / 111 / 7 / 383:  38%|███▊      | 383/1000 [14:46<23:48,  2.32s/it][Succeeded / Failed / Skipped / Total] 265 / 112 / 7 / 384:  38%|███▊      | 384/1000 [14:50<23:48,  2.32s/it][Succeeded / Failed / Skipped / Total] 265 / 112 / 7 / 384:  38%|███▊      | 385/1000 [14:51<23:43,  2.31s/it]Gets the injectors for the given injectionPoints . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors [[errorsForMember]] = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector [[injector]] = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , [[errorsForMember]] ) : new SingleMethodInjector ( this . injector , injectionPoint , [[errorsForMember]] ) ; injectors . add ( [[injector]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors [[concludes]] = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector [[liqueur]] = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , [[concludes]] ) : new SingleMethodInjector ( this . injector , injectionPoint , [[concludes]] ) ; injectors . add ( [[liqueur]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 381 ---------------------------------------------
Formats messages . --> dioxin --> Socre: 1.0

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object [[source]] = dependencies . get ( i ) ; formatSource ( fmt , [[source]] ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[dioxin]] ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object [[ammy]] = dependencies . get ( i ) ; formatSource ( fmt , [[ammy]] ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 382 ---------------------------------------------
Converts Object to Object --> Convert satoru to satoru --> Socre: 1.0

[[[[Adv]]]]: static Object convert ( Object [[o]] ) { ElementSource source = null ; if ( [[o]] instanceof ElementSource ) { source = ( ElementSource ) [[o]] ; [[o]] = source . getDeclaringSource ( ) ; } return convert ( [[o]] , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object convert ( Object [[satoru]] ) { ElementSource source = null ; if ( [[satoru]] instanceof ElementSource ) { source = ( ElementSource ) [[satoru]] ; [[satoru]] = source . getDeclaringSource ( ) ; } return convert ( [[satoru]] , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 383 ---------------------------------------------
Main method . --> Entry point to the JVM --> Socre: 1.0

[[[[Adv]]]]: public static void main ( String [ ] [[args]] ) throws Exception { if ( [[args]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( [[args]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( [[args]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void main ( String [ ] [[handcuff]] ) throws Exception { if ( [[handcuff]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( [[handcuff]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( [[handcuff]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 384 ---------------------------------------------
Creates a new message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( String [[messageFormat]] , Object ... arguments ) { return [[create]] ( null , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[ipod]] ( String [[equilibrium]] , Object ... arguments ) { return [[ipod]] ( null , [[equilibrium]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 385 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 266 / 112 / 7 / 385:  38%|███▊      | 385/1000 [14:51<23:43,  2.31s/it][Succeeded / Failed / Skipped / Total] 267 / 112 / 7 / 386:  39%|███▊      | 386/1000 [14:54<23:42,  2.32s/it][Succeeded / Failed / Skipped / Total] 267 / 112 / 7 / 386:  39%|███▊      | 387/1000 [14:56<23:40,  2.32s/it][Succeeded / Failed / Skipped / Total] 267 / 113 / 7 / 387:  39%|███▊      | 387/1000 [14:56<23:40,  2.32s/it][Succeeded / Failed / Skipped / Total] 268 / 113 / 7 / 388:  39%|███▉      | 388/1000 [14:58<23:36,  2.31s/it][Succeeded / Failed / Skipped / Total] 268 / 113 / 7 / 388:  39%|███▉      | 389/1000 [15:01<23:35,  2.32s/it][Succeeded / Failed / Skipped / Total] 269 / 113 / 7 / 389:  39%|███▉      | 389/1000 [15:01<23:35,  2.32s/it][Succeeded / Failed / Skipped / Total] 269 / 113 / 8 / 390:  39%|███▉      | 390/1000 [15:01<23:30,  2.31s/it][Succeeded / Failed / Skipped / Total] 269 / 113 / 8 / 390:  39%|███▉      | 391/1000 [15:02<23:25,  2.31s/it][Succeeded / Failed / Skipped / Total] 270 / 113 / 8 / 391:  39%|███▉      | 391/1000 [15:02<23:25,  2.31s/it][Succeeded / Failed / Skipped / Total] 271 / 113 / 8 / 392:  39%|███▉      | 392/1000 [15:07<23:27,  2.31s/it][Succeeded / Failed / Skipped / Total] 271 / 113 / 8 / 392:  39%|███▉      | 393/1000 [15:10<23:26,  2.32s/it]Prunes stack trace . --> dakin method --> Socre: 1.0

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable throwable ) { for ( Throwable [[t]] = throwable ; [[t]] != null ; [[t]] = [[t]] . getCause ( ) ) { StackTraceElement [ ] stackTrace = [[t]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[t]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[dakin]] ( Throwable throwable ) { for ( Throwable [[crowded]] = throwable ; [[crowded]] != null ; [[crowded]] = [[crowded]] . getCause ( ) ) { StackTraceElement [ ] stackTrace = [[crowded]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[crowded]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 386 ---------------------------------------------
Push state . --> Emit a source --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[choctaw]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 387 ---------------------------------------------
Returns true if this class is a shouldBeSkipped class . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[platts]] ( String [[pollutes]] ) { return ( parent != null && parent . shouldBeSkipped ( [[pollutes]] ) ) || classNamesToSkip . contains ( [[pollutes]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 388 ---------------------------------------------
Returns a new instance . --> Obtains the current version of the passed link --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[sedalia]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[sedalia]] ; } @ Override public String toString ( ) { return String . valueOf ( [[sedalia]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 389 ---------------------------------------------
Returns the provider for the given dependency . --> provision the provider --> Socre: 1.0

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > [[dependency]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! [[dependency]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[dependency]] ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > [[adie]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! [[adie]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[adie]] ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 390 ---------------------------------------------
If t is a valid exception throw an exception --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 391 ---------------------------------------------
Creates a new Message . --> Get propertyura --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , String messageFormat , Object ... [[arguments]] ) { return [[create]] ( [[cause]] , ImmutableList . of ( ) , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[segura]] ( Throwable [[kashmiri]] , String messageFormat , Object ... [[cannibalize]] ) { return [[segura]] ( [[kashmiri]] , ImmutableList . of ( ) , messageFormat , [[cannibalize]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 392 ---------------------------------------------
Returns the object representing the class name of the class names . --> dunya --> Socre: 1.0

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[dunya]] ( List < String > [[dwellers]] ) { Preconditions . checkNotNull ( [[dwellers]] , "The list of module class names cannot be null." ) ; for ( final String [[authorizes]] : [[dwellers]] ) { if ( ! shouldBeSkipped ( [[authorizes]] ) ) { return new StackTraceElement ( [[authorizes]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 393 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 272 / 113 / 8 / 393:  39%|███▉      | 393/1000 [15:10<23:26,  2.32s/it][Succeeded / Failed / Skipped / Total] 273 / 113 / 8 / 394:  39%|███▉      | 394/1000 [15:10<23:20,  2.31s/it][Succeeded / Failed / Skipped / Total] 273 / 113 / 8 / 394:  40%|███▉      | 395/1000 [15:10<23:14,  2.31s/it][Succeeded / Failed / Skipped / Total] 274 / 113 / 8 / 395:  40%|███▉      | 395/1000 [15:10<23:14,  2.31s/it][Succeeded / Failed / Skipped / Total] 275 / 113 / 8 / 396:  40%|███▉      | 396/1000 [15:11<23:09,  2.30s/it][Succeeded / Failed / Skipped / Total] 275 / 113 / 8 / 396:  40%|███▉      | 397/1000 [15:14<23:09,  2.30s/it][Succeeded / Failed / Skipped / Total] 275 / 114 / 8 / 397:  40%|███▉      | 397/1000 [15:14<23:09,  2.30s/it][Succeeded / Failed / Skipped / Total] 276 / 114 / 8 / 398:  40%|███▉      | 398/1000 [15:17<23:08,  2.31s/it][Succeeded / Failed / Skipped / Total] 276 / 114 / 8 / 398:  40%|███▉      | 399/1000 [15:18<23:03,  2.30s/it][Succeeded / Failed / Skipped / Total] 277 / 114 / 8 / 399:  40%|███▉      | 399/1000 [15:18<23:03,  2.30s/it]Register a processor . --> gawk method --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[gawk]] ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 394 ---------------------------------------------
Set the processor . --> Set remote server --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > [[processorList]] = this . [[processors]] . get ( type ) ; if ( [[processorList]] != null ) { for ( ConnectionEventProcessor processor : [[processorList]] ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > [[snuggle]] = this . [[ancestral]] . get ( type ) ; if ( [[snuggle]] != null ) { for ( ConnectionEventProcessor processor : [[snuggle]] ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 395 ---------------------------------------------
Registers the default processor . --> traumas related methods --> Socre: 1.0

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[traumas]] ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 396 ---------------------------------------------
Executes the specified RunStateRecordedFutureTask . --> Run state record for RunStateRecordedFutureTask --> Socre: 1.0

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T [[computer]] = null ; if ( null != task ) { try { [[computer]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[computer]] ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 397 ---------------------------------------------
Creates a new Message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String [[message]] = format ( messageFormat , arguments ) ; return new Message ( sources , [[message]] , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message create ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String [[cleanly]] = format ( messageFormat , arguments ) ; return new Message ( sources , [[cleanly]] , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 398 ---------------------------------------------
Try to get the specified URL . --> Returns the Url for the given url . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[aho]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 399 ---------------------------------------------
Scans the connection pool . --> Scoped for expired tasks . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > [[iter]] = this . connTasks . keySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { String poolKey = [[iter]] . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { [[iter]] . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > [[aganist]] = this . connTasks . keySet ( ) . iterator ( ) ; while ( [[aganist]] . hasNext ( ) ) { String poolKey = [[aganist]] . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { [[aganist]] . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 400 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 277 / 115 / 8 / 400:  40%|████      | 400/1000 [15:19<22:59,  2.30s/it][Succeeded / Failed / Skipped / Total] 277 / 115 / 8 / 400:  40%|████      | 401/1000 [15:20<22:54,  2.29s/it][Succeeded / Failed / Skipped / Total] 278 / 115 / 8 / 401:  40%|████      | 401/1000 [15:20<22:54,  2.29s/it][Succeeded / Failed / Skipped / Total] 279 / 115 / 8 / 402:  40%|████      | 402/1000 [15:21<22:51,  2.29s/it][Succeeded / Failed / Skipped / Total] 279 / 115 / 8 / 402:  40%|████      | 403/1000 [15:24<22:49,  2.29s/it][Succeeded / Failed / Skipped / Total] 280 / 115 / 8 / 403:  40%|████      | 403/1000 [15:24<22:49,  2.29s/it][Succeeded / Failed / Skipped / Total] 281 / 115 / 8 / 404:  40%|████      | 404/1000 [15:25<22:45,  2.29s/it][Succeeded / Failed / Skipped / Total] 281 / 115 / 8 / 404:  40%|████      | 405/1000 [15:25<22:40,  2.29s/it][Succeeded / Failed / Skipped / Total] 282 / 115 / 8 / 405:  40%|████      | 405/1000 [15:25<22:40,  2.29s/it][Succeeded / Failed / Skipped / Total] 283 / 115 / 8 / 406:  41%|████      | 406/1000 [15:26<22:34,  2.28s/it][Succeeded / Failed / Skipped / Total] 283 / 115 / 8 / 406:  41%|████      | 407/1000 [15:27<22:31,  2.28s/it][Succeeded / Failed / Skipped / Total] 284 / 115 / 8 / 407:  41%|████      | 407/1000 [15:27<22:31,  2.28s/it]Pushes the given dependency to the given source . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > [[dependency]] , Object [[source]] ) { Dependency < ? > previous = this . dependency ; this . dependency = [[dependency]] ; doPushState ( [[dependency]] , [[source]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[riflemen]] ( Dependency < ? > [[hoh]] , Object [[davison]] ) { Dependency < ? > previous = this . dependency ; this . dependency = [[hoh]] ; doPushState ( [[hoh]] , [[davison]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 401 ---------------------------------------------
Add a connection event processor . --> region ConnectionEventProcessor --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[processorList]] = this . [[processors]] . get ( type ) ; if ( [[processorList]] == null ) { this . [[processors]] . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[processorList]] = this . [[processors]] . get ( type ) ; } [[processorList]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[feinstein]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[chengdu]] = this . [[toughened]] . get ( type ) ; if ( [[chengdu]] == null ) { this . [[toughened]] . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[chengdu]] = this . [[toughened]] . get ( type ) ; } [[chengdu]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 402 ---------------------------------------------
Creates a new datasource . --> Retrieve a copy of this Connection --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[asians]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 403 ---------------------------------------------
Remove a task . --> Removes the given pool . --> Socre: 1.0

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . [[connTasks]] . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . [[lynde]] . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 404 ---------------------------------------------
Create a new connection . --> Creates the given url . --> Socre: 1.0

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int [[syncCreateNumWhenNotWarmup]] ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( [[syncCreateNumWhenNotWarmup]] < 0 || [[syncCreateNumWhenNotWarmup]] > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int [[cramer]] ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( [[cramer]] < 0 || [[cramer]] > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 405 ---------------------------------------------
Create a connection andHeal if necessary . --> Bonking this Url --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[bonking]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 406 ---------------------------------------------
Decodes the protocol code . --> Reads a message . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[protocolCodeBytes]] = new byte [ protocolCodeLength ] ; in . readBytes ( [[protocolCodeBytes]] ) ; return ProtocolCode . fromBytes ( [[protocolCodeBytes]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[msg]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[backwash]] = new byte [ protocolCodeLength ] ; in . readBytes ( [[backwash]] ) ; return ProtocolCode . fromBytes ( [[backwash]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 407 ---------------------------------------------
heal if it exists --> Convenience method for subclasses . --> Socre: 1.0

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[poolKey]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[islanders]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 408 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 285 / 115 / 8 / 408:  41%|████      | 408/1000 [15:28<22:27,  2.28s/it][Succeeded / Failed / Skipped / Total] 285 / 115 / 8 / 408:  41%|████      | 409/1000 [15:29<22:22,  2.27s/it][Succeeded / Failed / Skipped / Total] 286 / 115 / 8 / 409:  41%|████      | 409/1000 [15:29<22:22,  2.27s/it][Succeeded / Failed / Skipped / Total] 286 / 115 / 9 / 410:  41%|████      | 410/1000 [15:29<22:17,  2.27s/it][Succeeded / Failed / Skipped / Total] 286 / 115 / 9 / 410:  41%|████      | 411/1000 [15:35<22:20,  2.28s/it][Succeeded / Failed / Skipped / Total] 287 / 115 / 9 / 411:  41%|████      | 411/1000 [15:35<22:20,  2.28s/it][Succeeded / Failed / Skipped / Total] 288 / 115 / 9 / 412:  41%|████      | 412/1000 [15:36<22:16,  2.27s/it][Succeeded / Failed / Skipped / Total] 288 / 115 / 9 / 412:  41%|████▏     | 413/1000 [15:37<22:12,  2.27s/it][Succeeded / Failed / Skipped / Total] 289 / 115 / 9 / 413:  41%|████▏     | 413/1000 [15:37<22:12,  2.27s/it][Succeeded / Failed / Skipped / Total] 290 / 115 / 9 / 414:  41%|████▏     | 414/1000 [15:38<22:07,  2.27s/it][Succeeded / Failed / Skipped / Total] 290 / 115 / 9 / 414:  42%|████▏     | 415/1000 [15:41<22:07,  2.27s/it]Returns all connections in the pool . --> ambulance methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[iterator]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[iterator]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[ambulance]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[overtake]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[overtake]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[overtake]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 409 ---------------------------------------------
Close connection --> Create afflictions . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[afflictions]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 410 ---------------------------------------------
Deserializes the RpcRequestCommand . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 411 ---------------------------------------------
Sets attribute value . --> Adds a value to the map --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[stefan]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 412 ---------------------------------------------
Register a UserProcessor --> Registers a UserProcessor --> Socre: 1.0

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > [[amplification]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[amplification]] . multiInterest ( ) || [[amplification]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[amplification]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[amplification]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 413 ---------------------------------------------
Pre - processes a RpcRequestCommand --> antonioni . --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[antonioni]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 414 ---------------------------------------------
Get the processor . --> Method packers --> Socre: 1.0

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode cmdCode ) { RemotingProcessor < ? > [[processor]] = this . [[cmd2processors]] . get ( cmdCode ) ; if ( [[processor]] != null ) { return [[processor]] ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[packers]] ( CommandCode cmdCode ) { RemotingProcessor < ? > [[youíre]] = this . [[mph]] . get ( cmdCode ) ; if ( [[youíre]] != null ) { return [[youíre]] ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 415 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 291 / 115 / 9 / 415:  42%|████▏     | 415/1000 [15:41<22:07,  2.27s/it][Succeeded / Failed / Skipped / Total] 292 / 115 / 9 / 416:  42%|████▏     | 416/1000 [15:44<22:05,  2.27s/it][Succeeded / Failed / Skipped / Total] 292 / 115 / 9 / 416:  42%|████▏     | 417/1000 [15:47<22:05,  2.27s/it][Succeeded / Failed / Skipped / Total] 293 / 115 / 9 / 417:  42%|████▏     | 417/1000 [15:47<22:05,  2.27s/it][Succeeded / Failed / Skipped / Total] 294 / 115 / 9 / 418:  42%|████▏     | 418/1000 [15:49<22:02,  2.27s/it][Succeeded / Failed / Skipped / Total] 294 / 115 / 9 / 418:  42%|████▏     | 419/1000 [15:50<21:57,  2.27s/it][Succeeded / Failed / Skipped / Total] 295 / 115 / 9 / 419:  42%|████▏     | 419/1000 [15:50<21:57,  2.27s/it][Succeeded / Failed / Skipped / Total] 295 / 115 / 10 / 420:  42%|████▏     | 420/1000 [15:50<21:52,  2.26s/it][Succeeded / Failed / Skipped / Total] 295 / 115 / 10 / 420:  42%|████▏     | 421/1000 [15:54<21:52,  2.27s/it]dispatch to user processor --> archaic processes --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte [[type]] = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[archaic]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte [[standby]] = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 416 ---------------------------------------------
Handle a debug log request . --> Logs auschwitz . --> Socre: 1.0

[[[[Adv]]]]: private void debugLog ( RemotingContext ctx , RpcRequestCommand [[cmd]] , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , [[cmd]] . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , [[cmd]] . getId ( ) , currentTimestamp , [[cmd]] . getArriveTime ( ) , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void debugLog ( RemotingContext ctx , RpcRequestCommand [[auschwitz]] , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , [[auschwitz]] . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , [[auschwitz]] . getId ( ) , currentTimestamp , [[auschwitz]] . getArriveTime ( ) , ( currentTimestamp - [[auschwitz]] . getArriveTime ( ) ) , [[auschwitz]] . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 417 ---------------------------------------------
Registers a UserProcessor . --> Registers a UserProcessor --> Socre: 1.0

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[preProcessor]] = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( [[preProcessor]] != null ) { String [[errMsg]] = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[errMsg]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[aloysius]] = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( [[aloysius]] != null ) { String [[alzheimer]] = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[alzheimer]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 418 ---------------------------------------------
Called when a remote address is received . --> Called when consolidating is received --> Socre: 1.0

[[[[Adv]]]]: protected void oneway ( final Connection [[conn]] , final RemotingCommand request ) { try { [[conn]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[conn]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection [[consolidating]] , final RemotingCommand request ) { try { [[consolidating]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[consolidating]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[consolidating]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[consolidating]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 419 ---------------------------------------------
Executes the remote server . --> Perform ben approolence --> Socre: 1.0

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[iter]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > [[entry]] = [[iter]] . next ( ) ; [[iter]] . remove ( ) ; InvokeFuture future = [[entry]] . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[benevolence]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[innermost]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[innermost]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > [[exploring]] = [[innermost]] . next ( ) ; [[innermost]] . remove ( ) ; InvokeFuture future = [[exploring]] . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 420 ---------------------------------------------
Stops the connection --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 421 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 296 / 115 / 10 / 421:  42%|████▏     | 421/1000 [15:54<21:52,  2.27s/it][Succeeded / Failed / Skipped / Total] 297 / 115 / 10 / 422:  42%|████▏     | 422/1000 [15:57<21:51,  2.27s/it][Succeeded / Failed / Skipped / Total] 297 / 115 / 10 / 422:  42%|████▏     | 423/1000 [15:57<21:46,  2.26s/it][Succeeded / Failed / Skipped / Total] 298 / 115 / 10 / 423:  42%|████▏     | 423/1000 [15:57<21:46,  2.26s/it][Succeeded / Failed / Skipped / Total] 299 / 115 / 10 / 424:  42%|████▏     | 424/1000 [16:00<21:44,  2.26s/it][Succeeded / Failed / Skipped / Total] 299 / 115 / 10 / 424:  42%|████▎     | 425/1000 [16:00<21:39,  2.26s/it][Succeeded / Failed / Skipped / Total] 299 / 116 / 10 / 425:  42%|████▎     | 425/1000 [16:00<21:39,  2.26s/it]timeout log . --> parse the remote server --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String [[remoteAddr]] = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[remoteAddr]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , [[remoteAddr]] , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[oddball]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String [[portraits]] = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[portraits]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , [[portraits]] , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 422 ---------------------------------------------
Adds a newly created task . --> Adds the given url to the master . --> Socre: 1.0

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask [[task]] = new ReconnectTask ( ) ; [[task]] . url = url ; tasks . add ( [[task]] ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask [[absolue]] = new ReconnectTask ( ) ; [[absolue]] . url = url ; tasks . add ( [[absolue]] ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 423 ---------------------------------------------
Converts a value to a BitSet . --> Converts an int into a bitset . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet toBitSet ( int [[value]] ) { if ( [[value]] > Byte . MAX_VALUE || [[value]] < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + [[value]] + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( [[value]] != 0 ) { if ( [[value]] % 2 != 0 ) { bs . set ( index ) ; } ++ index ; [[value]] = ( byte ) ( [[value]] >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet toBitSet ( int [[asians]] ) { if ( [[asians]] > Byte . MAX_VALUE || [[asians]] < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + [[asians]] + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( [[asians]] != 0 ) { if ( [[asians]] % 2 != 0 ) { bs . set ( index ) ; } ++ index ; [[asians]] = ( byte ) ( [[asians]] >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 424 ---------------------------------------------
Convert a bit set to a byte --> Returns the bytes of the given BitSet . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int [[value]] = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { [[value]] += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[value]] + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[value]] ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[adrienne]] ( BitSet bs ) { int [[airing]] = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { [[airing]] += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[airing]] + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[airing]] ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 425 ---------------------------------------------
Close the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "[[False]]" != "[[False]]" , "[[True]]" == "[[True]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[are]] ( ) { if ( closed . compareAndSet ( "[[Frightened]]" != "[[Frightened]]" , "[[Breslin]]" == "[[Breslin]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 426 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 300 / 116 / 10 / 426:  43%|████▎     | 426/1000 [16:01<21:35,  2.26s/it][Succeeded / Failed / Skipped / Total] 300 / 116 / 10 / 426:  43%|████▎     | 427/1000 [16:07<21:38,  2.27s/it][Succeeded / Failed / Skipped / Total] 301 / 116 / 10 / 427:  43%|████▎     | 427/1000 [16:07<21:38,  2.27s/it][Succeeded / Failed / Skipped / Total] 302 / 116 / 10 / 428:  43%|████▎     | 428/1000 [16:08<21:34,  2.26s/it][Succeeded / Failed / Skipped / Total] 302 / 116 / 10 / 428:  43%|████▎     | 429/1000 [16:08<21:29,  2.26s/it][Succeeded / Failed / Skipped / Total] 303 / 116 / 10 / 429:  43%|████▎     | 429/1000 [16:08<21:29,  2.26s/it]Filter connections . --> Filters the given connection list . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > [[serviceOnConnections]] = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { [[serviceOnConnections]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[serviceOnConnections]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > [[mulberries]] = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { [[mulberries]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[mulberries]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 427 ---------------------------------------------
Retrieve a boolean property . --> Get a boolean value . --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBool ( String [[key]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[key]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean getBool ( String [[agnès]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[agnès]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 428 ---------------------------------------------
Log the info log . --> Makes sure the admiral is created . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[admiral]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 429 ---------------------------------------------
This method is used to monitor all existing Connection instances . --> Runs the given activism . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > [[connPools]] ) { try { if ( null != [[connPools]] && ! [[connPools]] . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = [[connPools]] . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > [[activism]] ) { try { if ( null != [[activism]] && ! [[activism]] . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = [[activism]] . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 430 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 303 / 116 / 11 / 430:  43%|████▎     | 430/1000 [16:08<21:24,  2.25s/it][Succeeded / Failed / Skipped / Total] 303 / 116 / 11 / 430:  43%|████▎     | 431/1000 [16:09<21:20,  2.25s/it][Succeeded / Failed / Skipped / Total] 304 / 116 / 11 / 431:  43%|████▎     | 431/1000 [16:09<21:20,  2.25s/it][Succeeded / Failed / Skipped / Total] 305 / 116 / 11 / 432:  43%|████▎     | 432/1000 [16:11<21:17,  2.25s/it][Succeeded / Failed / Skipped / Total] 305 / 116 / 11 / 432:  43%|████▎     | 433/1000 [16:15<21:17,  2.25s/it][Succeeded / Failed / Skipped / Total] 306 / 116 / 11 / 433:  43%|████▎     | 433/1000 [16:15<21:17,  2.25s/it][Succeeded / Failed / Skipped / Total] 307 / 116 / 11 / 434:  43%|████▎     | 434/1000 [16:24<21:23,  2.27s/it][Succeeded / Failed / Skipped / Total] 307 / 116 / 11 / 434:  44%|████▎     | 435/1000 [16:26<21:21,  2.27s/it][Succeeded / Failed / Skipped / Total] 308 / 116 / 11 / 435:  44%|████▎     | 435/1000 [16:26<21:21,  2.27s/it][Succeeded / Failed / Skipped / Total] 308 / 116 / 11 / 435:  44%|████▎     | 436/1000 [16:31<21:22,  2.27s/it][Succeeded / Failed / Skipped / Total] 309 / 116 / 11 / 436:  44%|████▎     | 436/1000 [16:31<21:22,  2.27s/it][Succeeded / Failed / Skipped / Total] 310 / 116 / 11 / 437:  44%|████▎     | 437/1000 [16:31<21:17,  2.27s/it][Succeeded / Failed / Skipped / Total] 310 / 116 / 11 / 437:  44%|████▍     | 438/1000 [16:33<21:15,  2.27s/it]Returns the value of the key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 431 ---------------------------------------------
Process a task . --> Often garde method --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[process]] ( RemotingContext [[ctx]] , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[task]] = new ProcessTask ( [[ctx]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[task]] ) ; } else { defaultExecutor . execute ( [[task]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void [[garde]] ( RemotingContext [[masada]] , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[collagen]] = new ProcessTask ( [[masada]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[collagen]] ) ; } else { defaultExecutor . execute ( [[collagen]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 432 ---------------------------------------------
Create aoting command . --> Create a RpcRequestCommand --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection [[conn]] , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand [[command]] = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection [[lamps]] , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand [[beehive]] = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 433 ---------------------------------------------
Returns a random Connection . --> Returns the specified list of conns . --> Socre: 1.0

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int [[size]] = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( [[size]] ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int [[dominicans]] = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( [[dominicans]] ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 434 ---------------------------------------------
Returns the property value for the given key . --> Gets the antifreeze . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[antifreeze]] ( String [[enhancements]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[enhancements]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 435 ---------------------------------------------
Returns true if this request is timeout . --> Checks to see if the server is informed . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "[[True]]" == "[[True]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[basilio]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "[[Gum]]" == "[[Gum]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 436 ---------------------------------------------
cast a ResponseCommand to a throwable --> Get the exception from the ResponseCommand --> Socre: 1.0

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) responseCommand ; [[resp]] . deserialize ( ) ; Object [[ex]] = [[resp]] . getResponseObject ( ) ; if ( [[ex]] != null && [[ex]] instanceof Throwable ) { return ( Throwable ) [[ex]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[dubai]] = ( RpcResponseCommand ) responseCommand ; [[dubai]] . deserialize ( ) ; Object [[janie]] = [[dubai]] . getResponseObject ( ) ; if ( [[janie]] != null && [[janie]] instanceof Throwable ) { return ( Throwable ) [[janie]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 437 ---------------------------------------------
Gets detail error message . --> Formats a clientErrMsg . --> Socre: 1.0

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[resp]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , [[resp]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand [[agreement]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[agreement]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , [[agreement]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 438 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 311 / 116 / 11 / 438:  44%|████▍     | 438/1000 [16:33<21:15,  2.27s/it][Succeeded / Failed / Skipped / Total] 311 / 117 / 11 / 439:  44%|████▍     | 439/1000 [16:34<21:10,  2.27s/it][Succeeded / Failed / Skipped / Total] 311 / 117 / 11 / 439:  44%|████▍     | 440/1000 [16:35<21:06,  2.26s/it][Succeeded / Failed / Skipped / Total] 312 / 117 / 11 / 440:  44%|████▍     | 440/1000 [16:35<21:06,  2.26s/it][Succeeded / Failed / Skipped / Total] 313 / 117 / 11 / 441:  44%|████▍     | 441/1000 [16:39<21:07,  2.27s/it][Succeeded / Failed / Skipped / Total] 313 / 117 / 11 / 441:  44%|████▍     | 442/1000 [16:44<21:07,  2.27s/it][Succeeded / Failed / Skipped / Total] 314 / 117 / 11 / 442:  44%|████▍     | 442/1000 [16:44<21:07,  2.27s/it][Succeeded / Failed / Skipped / Total] 315 / 117 / 11 / 443:  44%|████▍     | 443/1000 [16:50<21:10,  2.28s/it][Succeeded / Failed / Skipped / Total] 315 / 117 / 11 / 443:  44%|████▍     | 444/1000 [16:52<21:08,  2.28s/it]Returns the response object from the ResponseCommand . --> Decrement the consistency of the ResponseCommand --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) [[responseCommand]] ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[deciduous]] ( ResponseCommand [[edges]] ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) [[edges]] ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 439 ---------------------------------------------
Gets user processor . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String className ) { return StringUtils . isBlank ( className ) ? null : this . [[userProcessors]] . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[anyplace]] ( String className ) { return StringUtils . isBlank ( className ) ? null : this . [[doug]] . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 440 ---------------------------------------------
Resolves the response object . --> Maps an invocation exception to a server --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String [[msg]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( [[msg]] ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( [[msg]] , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( [[msg]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[alliance]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String [[steely]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( [[steely]] ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( [[steely]] , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( [[steely]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 441 ---------------------------------------------
Print connection trace log --> Generate an Untral . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[ancestral]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 442 ---------------------------------------------
Closes the connection in the serviceOffManager . --> Checks if in Admin has been started . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection [[lastSelectConnect]] , List < Connection > [[serviceOffConnections]] ) throws InterruptedException { if ( null != [[lastSelectConnect]] ) { if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( [[lastSelectConnect]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( [[lastSelectConnect]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[lastSelectConnect]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[adjoins]] ( Connection [[inquired]] , List < Connection > [[kicks]] ) throws InterruptedException { if ( null != [[inquired]] ) { if ( [[inquired]] . isInvokeFutureMapFinish ( ) ) { [[kicks]] . add ( [[inquired]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[inquired]] . isInvokeFutureMapFinish ( ) ) { [[kicks]] . add ( [[inquired]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[inquired]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 443 ---------------------------------------------
Parse local IP . --> Parses a vocal --> Socre: 1.0

[[[[Adv]]]]: public static String parseLocalIP ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String parseLocalIP ( final Channel [[vocal]] ) { if ( null == [[vocal]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[vocal]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 444 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 316 / 117 / 11 / 444:  44%|████▍     | 444/1000 [16:52<21:08,  2.28s/it][Succeeded / Failed / Skipped / Total] 316 / 118 / 11 / 445:  44%|████▍     | 445/1000 [16:53<21:04,  2.28s/it][Succeeded / Failed / Skipped / Total] 316 / 118 / 11 / 445:  45%|████▍     | 446/1000 [16:55<21:00,  2.28s/it][Succeeded / Failed / Skipped / Total] 317 / 118 / 11 / 446:  45%|████▍     | 446/1000 [16:55<21:00,  2.28s/it][Succeeded / Failed / Skipped / Total] 317 / 119 / 11 / 447:  45%|████▍     | 447/1000 [16:55<20:56,  2.27s/it][Succeeded / Failed / Skipped / Total] 317 / 119 / 11 / 447:  45%|████▍     | 448/1000 [16:58<20:54,  2.27s/it]Executes a request . --> This method is called when a new request is received --> Socre: 1.0

[[[[Adv]]]]: protected void [[invokeWithCallback]] ( final Connection [[conn]] , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( [[conn]] , request , request . getInvokeContext ( ) , invokeCallback ) ; [[conn]] . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = [[conn]] . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( [[conn]] . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; [[conn]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[cf]] ) throws Exception { if ( ! [[cf]] . isSuccess ( ) ) { InvokeFuture [[f]] = [[conn]] . removeInvokeFuture ( requestId ) ; if ( [[f]] != null ) { [[f]] . cancelTimeout ( ) ; [[f]] . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , [[cf]] . cause ( ) ) ) ; [[f]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , [[cf]] . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture [[f]] = [[conn]] . removeInvokeFuture ( requestId ) ; if ( [[f]] != null ) { [[f]] . cancelTimeout ( ) ; [[f]] . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , e ) ) ; [[f]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void [[arras]] ( final Connection [[seduction]] , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( [[seduction]] , request , request . getInvokeContext ( ) , invokeCallback ) ; [[seduction]] . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = [[seduction]] . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( [[seduction]] . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; [[seduction]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[fabricating]] ) throws Exception { if ( ! [[fabricating]] . isSuccess ( ) ) { InvokeFuture [[miracles]] = [[seduction]] . removeInvokeFuture ( requestId ) ; if ( [[miracles]] != null ) { [[miracles]] . cancelTimeout ( ) ; [[miracles]] . putResponse ( commandFactory . createSendFailedResponse ( [[seduction]] . getRemoteAddress ( ) , [[fabricating]] . cause ( ) ) ) ; [[miracles]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[seduction]] . getChannel ( ) ) , [[fabricating]] . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture [[miracles]] = [[seduction]] . removeInvokeFuture ( requestId ) ; if ( [[miracles]] != null ) { [[miracles]] . cancelTimeout ( ) ; [[miracles]] . putResponse ( commandFactory . createSendFailedResponse ( [[seduction]] . getRemoteAddress ( ) , e ) ) ; [[miracles]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[seduction]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 445 ---------------------------------------------
Parse the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = channel . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[talent]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[moderately]] = channel . remoteAddress ( ) ; return doParse ( [[moderately]] != null ? [[moderately]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
Create a RpcServerException . --> Generates a RpcServerException --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable [[t]] , String [[errMsg]] ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[t]] . getClass ( ) . getName ( ) , [[t]] . getMessage ( ) , [[errMsg]] ) ; RpcServerException [[e]] = new RpcServerException ( formattedErrMsg ) ; [[e]] . setStackTrace ( [[t]] . getStackTrace ( ) ) ; return [[e]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable [[colwyn]] , String [[città]] ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[colwyn]] . getClass ( ) . getName ( ) , [[colwyn]] . getMessage ( ) , [[città]] ) ; RpcServerException [[jedediah]] = new RpcServerException ( formattedErrMsg ) ; [[jedediah]] . setStackTrace ( [[colwyn]] . getStackTrace ( ) ) ; return [[jedediah]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 447 ---------------------------------------------
Parses a local address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress local = channel . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[burping]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress local = channel . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 317 / 120 / 11 / 448:  45%|████▍     | 448/1000 [16:58<20:54,  2.27s/it][Succeeded / Failed / Skipped / Total] 317 / 121 / 11 / 449:  45%|████▍     | 449/1000 [17:03<20:55,  2.28s/it][Succeeded / Failed / Skipped / Total] 317 / 121 / 11 / 449:  45%|████▌     | 450/1000 [17:04<20:52,  2.28s/it][Succeeded / Failed / Skipped / Total] 318 / 121 / 11 / 450:  45%|████▌     | 450/1000 [17:04<20:52,  2.28s/it][Succeeded / Failed / Skipped / Total] 319 / 121 / 11 / 451:  45%|████▌     | 451/1000 [17:04<20:47,  2.27s/it][Succeeded / Failed / Skipped / Total] 319 / 121 / 11 / 451:  45%|████▌     | 452/1000 [17:09<20:48,  2.28s/it][Succeeded / Failed / Skipped / Total] 320 / 121 / 11 / 452:  45%|████▌     | 452/1000 [17:09<20:48,  2.28s/it][Succeeded / Failed / Skipped / Total] 320 / 122 / 11 / 453:  45%|████▌     | 453/1000 [17:10<20:44,  2.28s/it][Succeeded / Failed / Skipped / Total] 320 / 122 / 11 / 453:  45%|████▌     | 454/1000 [17:10<20:39,  2.27s/it][Succeeded / Failed / Skipped / Total] 320 / 122 / 12 / 454:  45%|████▌     | 454/1000 [17:10<20:39,  2.27s/it][Succeeded / Failed / Skipped / Total] 321 / 122 / 12 / 455:  46%|████▌     | 455/1000 [17:12<20:36,  2.27s/it][Succeeded / Failed / Skipped / Total] 321 / 122 / 12 / 455:  46%|████▌     | 456/1000 [17:12<20:32,  2.26s/it][Succeeded / Failed / Skipped / Total] 322 / 122 / 12 / 456:  46%|████▌     | 456/1000 [17:12<20:32,  2.26s/it]Parse remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[hygienist]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[celibate]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[celibate]] != null ) { return [[celibate]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Parses the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[materialist]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Gets the connection . --> Returns null . --> Socre: 1.0

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > [[snapshot]] = new ArrayList < Connection > ( this . conns ) ; if ( [[snapshot]] . size ( ) > 0 ) { return this . strategy . select ( [[snapshot]] ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > [[sses]] = new ArrayList < Connection > ( this . conns ) ; if ( [[sses]] . size ( ) > 0 ) { return this . strategy . select ( [[sses]] ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 451 ---------------------------------------------
New EventLoopGroup . --> super implementation of EventpollEventLoopGroup --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int [[nThreads]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[nThreads]] , threadFactory ) : new NioEventLoopGroup ( [[nThreads]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[supercharged]] ( int [[assures]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[assures]] , threadFactory ) : new NioEventLoopGroup ( [[assures]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 452 ---------------------------------------------
Parse an address to host . --> Return anxiously socketAddress --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress [[addr]] = addrs . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[anxiously]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress [[administrative]] = addrs . getAddress ( ) ; if ( null != [[administrative]] ) { return [[administrative]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 453 ---------------------------------------------
Parse remote port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[transistors]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[disse]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[disse]] != null ) { return [[disse]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 454 ---------------------------------------------
Starts the background thread . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 455 ---------------------------------------------
Removes a connection from the pool . --> zoc . --> Socre: 1.0

[[[[Adv]]]]: public void [[removeAndTryClose]] ( Connection connection ) { if ( null == connection ) { return ; } boolean [[res]] = this . conns . remove ( connection ) ; if ( [[res]] ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void [[zoc]] ( Connection connection ) { if ( null == connection ) { return ; } boolean [[patris]] = this . conns . remove ( connection ) ; if ( [[patris]] ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 456 ---------------------------------------------
Register a custom serializer --> F743 - F --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode code , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[beaners]] ( CommandCode code , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 457 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 323 / 122 / 12 / 457:  46%|████▌     | 457/1000 [17:17<20:32,  2.27s/it][Succeeded / Failed / Skipped / Total] 323 / 122 / 12 / 457:  46%|████▌     | 458/1000 [17:17<20:27,  2.26s/it][Succeeded / Failed / Skipped / Total] 323 / 123 / 12 / 458:  46%|████▌     | 458/1000 [17:17<20:27,  2.26s/it][Succeeded / Failed / Skipped / Total] 324 / 123 / 12 / 459:  46%|████▌     | 459/1000 [17:18<20:23,  2.26s/it][Succeeded / Failed / Skipped / Total] 324 / 123 / 12 / 459:  46%|████▌     | 460/1000 [17:19<20:19,  2.26s/it][Succeeded / Failed / Skipped / Total] 325 / 123 / 12 / 460:  46%|████▌     | 460/1000 [17:19<20:19,  2.26s/it][Succeeded / Failed / Skipped / Total] 325 / 124 / 12 / 461:  46%|████▌     | 461/1000 [17:20<20:16,  2.26s/it][Succeeded / Failed / Skipped / Total] 325 / 124 / 12 / 461:  46%|████▌     | 462/1000 [17:22<20:13,  2.26s/it][Succeeded / Failed / Skipped / Total] 326 / 124 / 12 / 462:  46%|████▌     | 462/1000 [17:22<20:13,  2.26s/it][Succeeded / Failed / Skipped / Total] 327 / 124 / 12 / 463:  46%|████▋     | 463/1000 [17:24<20:11,  2.26s/it][Succeeded / Failed / Skipped / Total] 327 / 124 / 12 / 463:  46%|████▋     | 464/1000 [17:24<20:06,  2.25s/it][Succeeded / Failed / Skipped / Total] 327 / 124 / 13 / 464:  46%|████▋     | 464/1000 [17:24<20:06,  2.25s/it][Succeeded / Failed / Skipped / Total] 328 / 124 / 13 / 465:  46%|████▋     | 465/1000 [17:24<20:01,  2.25s/it][Succeeded / Failed / Skipped / Total] 328 / 124 / 13 / 465:  47%|████▋     | 466/1000 [17:26<19:58,  2.25s/it]Gets the custom serializer . --> Returns a new CustomSerializer --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[possibility]] ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 458 ---------------------------------------------
Returns the port of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[benjamin]] ( final Channel [[federated]] ) { if ( null == [[federated]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[federated]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 459 ---------------------------------------------
Set the remote address . --> Parses the specified adie . --> Socre: 1.0

[[[[Adv]]]]: public boolean isConnected ( String [[remoteAddr]] ) { Url url = this . rpcRemoting . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean isConnected ( String [[adie]] ) { Url url = this . rpcRemoting . addressParser . parse ( [[adie]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 460 ---------------------------------------------
Initializes the low water mark . --> Initializes the WriteBufferWaterMark . --> Socre: 1.0

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int [[lowWaterMark]] = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( [[lowWaterMark]] > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , [[lowWaterMark]] ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , [[lowWaterMark]] , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( [[lowWaterMark]] , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int [[chaudhry]] = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( [[chaudhry]] > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , [[chaudhry]] ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , [[chaudhry]] , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( [[chaudhry]] , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 461 ---------------------------------------------
Gets the custom serializer . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[exhibits]] ( String [[vronsky]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[vronsky]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 462 ---------------------------------------------
Returns an immutable frame for the given opcode . --> Returns an array of Framedata . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 [[get]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 [[akeelah]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 463 ---------------------------------------------
Adds the given connection . --> Adds an animation . --> Socre: 1.0

[[[[Adv]]]]: public void add ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean [[res]] = this . conns . addIfAbsent ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void add ( Connection [[animation]] ) { markAccess ( ) ; if ( null == [[animation]] ) { return ; } boolean [[abridged]] = this . conns . addIfAbsent ( [[animation]] ) ; if ( [[abridged]] ) { [[animation]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 464 ---------------------------------------------
Translate a single frame checkPacket --> [[[SKIPPED]]]

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 465 ---------------------------------------------
set the value code --> Sets antonioni . --> Socre: 1.0

[[[[Adv]]]]: public void setCode ( int [[code]] ) { this . code = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void setCode ( int [[antonioni]] ) { this . code = [[antonioni]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 466 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 329 / 124 / 13 / 466:  47%|████▋     | 466/1000 [17:26<19:58,  2.25s/it][Succeeded / Failed / Skipped / Total] 330 / 124 / 13 / 467:  47%|████▋     | 467/1000 [17:26<19:54,  2.24s/it][Succeeded / Failed / Skipped / Total] 330 / 124 / 13 / 467:  47%|████▋     | 468/1000 [17:26<19:50,  2.24s/it][Succeeded / Failed / Skipped / Total] 331 / 124 / 13 / 468:  47%|████▋     | 468/1000 [17:26<19:50,  2.24s/it][Succeeded / Failed / Skipped / Total] 332 / 124 / 13 / 469:  47%|████▋     | 469/1000 [17:27<19:45,  2.23s/it][Succeeded / Failed / Skipped / Total] 332 / 124 / 13 / 469:  47%|████▋     | 470/1000 [17:28<19:41,  2.23s/it][Succeeded / Failed / Skipped / Total] 333 / 124 / 13 / 470:  47%|████▋     | 470/1000 [17:28<19:41,  2.23s/it][Succeeded / Failed / Skipped / Total] 334 / 124 / 13 / 471:  47%|████▋     | 471/1000 [17:31<19:41,  2.23s/it][Succeeded / Failed / Skipped / Total] 334 / 124 / 13 / 471:  47%|████▋     | 472/1000 [17:32<19:37,  2.23s/it][Succeeded / Failed / Skipped / Total] 335 / 124 / 13 / 472:  47%|████▋     | 472/1000 [17:32<19:37,  2.23s/it]Updates the message payload . --> Set pay . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[albi]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 467 ---------------------------------------------
Returns true if the batch is connected . --> Return true if batch is connected to remote peer --> Socre: 1.0

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl [[ws]] , ByteChannel sockchannel ) throws IOException { if ( [[ws]] == null ) { return "False" != "False" ; } ByteBuffer buffer = [[ws]] . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl [[astounded]] , ByteChannel sockchannel ) throws IOException { if ( [[astounded]] == null ) { return "False" != "False" ; } ByteBuffer buffer = [[astounded]] . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 468 ---------------------------------------------
Validate UTF - 8 --> Validates a UTF - 8 encoded UTF - 8 encoding . --> Socre: 1.0

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[payload]] , int mark ) throws InvalidDataException { try { [[payload]] . position ( [[payload]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[payload]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[payload]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[cinematographic]] , int mark ) throws InvalidDataException { try { [[cinematographic]] . position ( [[cinematographic]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[cinematographic]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[cinematographic]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 469 ---------------------------------------------
Register a custom serializer --> Method used to run the specified event listener --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[racketeering]] ( String [[onlv]] , CustomSerializer [[broccoli]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[onlv]] , [[broccoli]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[onlv]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 470 ---------------------------------------------
Check if the protocol is valid . --> Maintain handshake . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[mewing]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 471 ---------------------------------------------
Logs the websocket error . --> Logs an websocket error . --> Socre: 1.0

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl [[webSocketImpl]] , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketError ( [[webSocketImpl]] , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl [[annum]] , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; [[annum]] . getWebSocketListener ( ) . onWebsocketError ( [[annum]] , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 472 ---------------------------------------------
Translate a single frame check limit . --> Fusations . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[accusations]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 473 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 336 / 124 / 13 / 473:  47%|████▋     | 473/1000 [17:36<19:36,  2.23s/it][Succeeded / Failed / Skipped / Total] 336 / 124 / 13 / 473:  47%|████▋     | 474/1000 [17:36<19:32,  2.23s/it][Succeeded / Failed / Skipped / Total] 337 / 124 / 13 / 474:  47%|████▋     | 474/1000 [17:36<19:32,  2.23s/it][Succeeded / Failed / Skipped / Total] 338 / 124 / 13 / 475:  48%|████▊     | 475/1000 [17:38<19:29,  2.23s/it][Succeeded / Failed / Skipped / Total] 338 / 124 / 13 / 475:  48%|████▊     | 476/1000 [17:38<19:24,  2.22s/it][Succeeded / Failed / Skipped / Total] 339 / 124 / 13 / 476:  48%|████▊     | 476/1000 [17:38<19:24,  2.22s/it][Succeeded / Failed / Skipped / Total] 340 / 124 / 13 / 477:  48%|████▊     | 477/1000 [17:39<19:21,  2.22s/it][Succeeded / Failed / Skipped / Total] 340 / 124 / 13 / 477:  48%|████▊     | 478/1000 [17:43<19:21,  2.23s/it][Succeeded / Failed / Skipped / Total] 341 / 124 / 13 / 478:  48%|████▊     | 478/1000 [17:43<19:21,  2.23s/it]Process the frame . --> Puronioni . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[antonioni]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 474 ---------------------------------------------
Process the currentContinuous frame --> azari Method . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[azari]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 475 ---------------------------------------------
Process the binary frame --> Performs anything . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl [[webSocketImpl]] , Framedata frame ) { try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[anything]] ( WebSocketImpl [[cantor]] , Framedata frame ) { try { [[cantor]] . getWebSocketListener ( ) . onWebsocketMessage ( [[cantor]] , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[cantor]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 476 ---------------------------------------------
Process the Close frame . --> buford Method . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[buford]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 477 ---------------------------------------------
Process the frame text . --> Send antsy message --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[frame]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[antsy]] ( WebSocketImpl webSocketImpl , Framedata [[apace]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[apace]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 478 ---------------------------------------------
Returns the total number of bytes in the buffer . --> Balsa . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[balsa]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 479 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 342 / 124 / 13 / 479:  48%|████▊     | 479/1000 [17:45<19:18,  2.22s/it][Succeeded / Failed / Skipped / Total] 342 / 124 / 13 / 479:  48%|████▊     | 480/1000 [17:46<19:15,  2.22s/it][Succeeded / Failed / Skipped / Total] 343 / 124 / 13 / 480:  48%|████▊     | 480/1000 [17:46<19:15,  2.22s/it][Succeeded / Failed / Skipped / Total] 344 / 124 / 13 / 481:  48%|████▊     | 481/1000 [17:49<19:14,  2.22s/it][Succeeded / Failed / Skipped / Total] 344 / 124 / 13 / 481:  48%|████▊     | 482/1000 [17:50<19:10,  2.22s/it][Succeeded / Failed / Skipped / Total] 345 / 124 / 13 / 482:  48%|████▊     | 482/1000 [17:50<19:10,  2.22s/it][Succeeded / Failed / Skipped / Total] 345 / 124 / 14 / 483:  48%|████▊     | 483/1000 [17:50<19:06,  2.22s/it][Succeeded / Failed / Skipped / Total] 345 / 124 / 14 / 483:  48%|████▊     | 484/1000 [17:51<19:02,  2.21s/it][Succeeded / Failed / Skipped / Total] 346 / 124 / 14 / 484:  48%|████▊     | 484/1000 [17:51<19:02,  2.21s/it][Succeeded / Failed / Skipped / Total] 347 / 124 / 14 / 485:  48%|████▊     | 485/1000 [17:56<19:02,  2.22s/it][Succeeded / Failed / Skipped / Total] 347 / 124 / 14 / 485:  49%|████▊     | 486/1000 [17:56<18:58,  2.22s/it]translate handshake --> translateHandshake HTTP request --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] [[firstLineTokens]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] [[acquired]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 480 ---------------------------------------------
Process a Close frame . --> processFrameContinuousAndNonFin . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl [[webSocketImpl]] , Framedata [[frame]] , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[frame]] ) ; } else if ( [[frame]] . isFin ( ) ) { processFrameIsFin ( [[webSocketImpl]] , [[frame]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl [[bludgeoning]] , Framedata [[lethal]] , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[lethal]] ) ; } else if ( [[lethal]] . isFin ( ) ) { processFrameIsFin ( [[bludgeoning]] , [[lethal]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 481 ---------------------------------------------
Decodes the socket buffer . --> Begins a socket buffer . --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[bambam]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 482 ---------------------------------------------
Validates the buffer limit . --> For testing only . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[airbrush]] ( ) throws LimitExceededException { long [[memorizing]] = getByteBufferListSize ( ) ; if ( [[memorizing]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[memorizing]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 483 ---------------------------------------------
Resets the state of the websocket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 484 ---------------------------------------------
Close closing the connection stream . --> Write connectionDueToWrongHandshake . --> Socre: 1.0

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException [[exception]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[exception]] . getCloseCode ( ) , [[exception]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException [[dungarees]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[dungarees]] . getCloseCode ( ) , [[dungarees]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 485 ---------------------------------------------
Starts the connect connection . --> grievously connect --> Socre: 1.0

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[grievously]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 486 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 348 / 124 / 14 / 486:  49%|████▊     | 486/1000 [17:56<18:58,  2.22s/it][Succeeded / Failed / Skipped / Total] 349 / 124 / 14 / 487:  49%|████▊     | 487/1000 [17:58<18:56,  2.22s/it][Succeeded / Failed / Skipped / Total] 349 / 124 / 14 / 487:  49%|████▉     | 488/1000 [18:00<18:53,  2.21s/it][Succeeded / Failed / Skipped / Total] 350 / 124 / 14 / 488:  49%|████▉     | 488/1000 [18:00<18:53,  2.21s/it][Succeeded / Failed / Skipped / Total] 351 / 124 / 14 / 489:  49%|████▉     | 489/1000 [18:00<18:49,  2.21s/it][Succeeded / Failed / Skipped / Total] 351 / 124 / 14 / 489:  49%|████▉     | 490/1000 [18:01<18:45,  2.21s/it][Succeeded / Failed / Skipped / Total] 351 / 124 / 15 / 490:  49%|████▉     | 490/1000 [18:01<18:45,  2.21s/it][Succeeded / Failed / Skipped / Total] 352 / 124 / 15 / 491:  49%|████▉     | 491/1000 [18:01<18:41,  2.20s/it][Succeeded / Failed / Skipped / Total] 352 / 124 / 15 / 491:  49%|████▉     | 492/1000 [18:04<18:39,  2.20s/it][Succeeded / Failed / Skipped / Total] 353 / 124 / 15 / 492:  49%|████▉     | 492/1000 [18:04<18:39,  2.20s/it]Sends a text string . --> Sends a new connection --> Socre: 1.0

[[[[Adv]]]]: @ Override public void send ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void send ( String [[akeelah]] ) { if ( [[akeelah]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( [[akeelah]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 487 ---------------------------------------------
Translate the first lineTokens to the server . --> Sets administrative . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] [[firstLineTokens]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[administrative]] ( String [ ] [[codebook]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 488 ---------------------------------------------
Close the server . --> Write certificates to internal icons . --> Socre: 1.0

[[[[Adv]]]]: private void closeConnectionDueToInternalServerError ( RuntimeException [[exception]] ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , [[exception]] . getMessage ( ) , "[[False]]" != "[[False]]" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void closeConnectionDueToInternalServerError ( RuntimeException [[confederation]] ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , [[confederation]] . getMessage ( ) , "[[Immaculata]]" != "[[Immaculata]]" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 489 ---------------------------------------------
Utility method to generate the WebSocket Failure message . --> Get antifreeze --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int [[errorCode]] ) { String errorCodeDescription ; switch ( [[errorCode]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[antifreeze]] ( int [[cometh]] ) { String errorCodeDescription ; switch ( [[cometh]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 490 ---------------------------------------------
restart connectionLostTimer --> [[[SKIPPED]]]

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 491 ---------------------------------------------
Send the handshake address . --> SendHandshake Method . --> Socre: 1.0

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > [[kv]] : headers . entrySet ( ) ) { handshake . put ( [[kv]] . getKey ( ) , [[kv]] . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > [[rainbird]] : headers . entrySet ( ) ) { handshake . put ( [[rainbird]] . getKey ( ) , [[rainbird]] . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 492 ---------------------------------------------
Sets connection lost timeout . --> Close timer . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[accusations]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 493 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 354 / 124 / 15 / 493:  49%|████▉     | 493/1000 [18:06<18:37,  2.20s/it][Succeeded / Failed / Skipped / Total] 354 / 124 / 15 / 493:  49%|████▉     | 494/1000 [18:07<18:33,  2.20s/it][Succeeded / Failed / Skipped / Total] 355 / 124 / 15 / 494:  49%|████▉     | 494/1000 [18:07<18:33,  2.20s/it][Succeeded / Failed / Skipped / Total] 356 / 124 / 15 / 495:  50%|████▉     | 495/1000 [18:12<18:34,  2.21s/it][Succeeded / Failed / Skipped / Total] 356 / 124 / 15 / 495:  50%|████▉     | 496/1000 [18:12<18:30,  2.20s/it][Succeeded / Failed / Skipped / Total] 357 / 124 / 15 / 496:  50%|████▉     | 496/1000 [18:12<18:30,  2.20s/it][Succeeded / Failed / Skipped / Total] 358 / 124 / 15 / 497:  50%|████▉     | 497/1000 [18:13<18:26,  2.20s/it][Succeeded / Failed / Skipped / Total] 358 / 124 / 15 / 497:  50%|████▉     | 498/1000 [18:13<18:22,  2.20s/it][Succeeded / Failed / Skipped / Total] 359 / 124 / 15 / 498:  50%|████▉     | 498/1000 [18:13<18:22,  2.20s/it][Succeeded / Failed / Skipped / Total] 360 / 124 / 15 / 499:  50%|████▉     | 499/1000 [18:15<18:20,  2.20s/it][Succeeded / Failed / Skipped / Total] 360 / 124 / 15 / 499:  50%|█████     | 500/1000 [18:19<18:19,  2.20s/it][Succeeded / Failed / Skipped / Total] 361 / 124 / 15 / 500:  50%|█████     | 500/1000 [18:19<18:19,  2.20s/it]Stop the connection lost timer . --> Cancels websocket . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[blares]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 494 ---------------------------------------------
Start connection lost timer . --> Method can mark . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[canopy]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 495 ---------------------------------------------
This function is called when the server is received . --> region Client handshake handshake --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket conn , Draft draft , ClientHandshake [[request]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket conn , Draft draft , ClientHandshake [[grinned]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 496 ---------------------------------------------
Get the port . --> Gets theelligentsia . --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String [[scheme]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[scheme]] ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[intelligentsia]] ( ) { int [[cuchi]] = uri . getPort ( ) ; if ( [[cuchi]] == - 1 ) { String [[nerve]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[nerve]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[nerve]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[nerve]] ) ; } } return [[cuchi]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 497 ---------------------------------------------
Stop this queue . --> Stop this admonished --> Socre: 1.0

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[admonished]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 498 ---------------------------------------------
Cancel connection lost timer . --> duchess . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[duchess]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 499 ---------------------------------------------
Get a copy of the current list . --> Get desserts --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long [[totalSize]] = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[totalSize]] += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) [[totalSize]] ) ; for ( ByteBuffer buffer : byteBufferList ) { [[resultingByteBuffer]] . put ( buffer ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[melman]] ( ) throws LimitExceededException { long [[consolidating]] = 0 ; ByteBuffer [[desserts]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[consolidating]] += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[desserts]] = ByteBuffer . allocate ( ( int ) [[consolidating]] ) ; for ( ByteBuffer buffer : byteBufferList ) { [[desserts]] . put ( buffer ) ; } } [[desserts]] . flip ( ) ; return [[desserts]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 500 ---------------------------------------------
Set the ping frame --> Must be called --> Socre: 1.0

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket [[conn]] , Framedata [[f]] ) { [[conn]] . sendFrame ( new PongFrame ( ( PingFrame ) [[f]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket [[uchida]] , Framedata [[bathrooms]] ) { [[uchida]] . sendFrame ( new PongFrame ( ( PingFrame ) [[bathrooms]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 501 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 362 / 124 / 15 / 501:  50%|█████     | 501/1000 [18:19<18:15,  2.20s/it][Succeeded / Failed / Skipped / Total] 362 / 124 / 15 / 501:  50%|█████     | 502/1000 [18:19<18:11,  2.19s/it][Succeeded / Failed / Skipped / Total] 362 / 124 / 16 / 502:  50%|█████     | 502/1000 [18:19<18:11,  2.19s/it][Succeeded / Failed / Skipped / Total] 362 / 124 / 17 / 503:  50%|█████     | 503/1000 [18:20<18:06,  2.19s/it][Succeeded / Failed / Skipped / Total] 362 / 124 / 17 / 503:  50%|█████     | 504/1000 [18:20<18:02,  2.18s/it][Succeeded / Failed / Skipped / Total] 363 / 124 / 17 / 504:  50%|█████     | 504/1000 [18:20<18:02,  2.18s/it][Succeeded / Failed / Skipped / Total] 364 / 124 / 17 / 505:  50%|█████     | 505/1000 [18:22<18:00,  2.18s/it][Succeeded / Failed / Skipped / Total] 364 / 124 / 17 / 505:  51%|█████     | 506/1000 [18:22<17:56,  2.18s/it][Succeeded / Failed / Skipped / Total] 365 / 124 / 17 / 506:  51%|█████     | 506/1000 [18:22<17:56,  2.18s/it]Perform a channel . --> berlin method . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[berlin]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 502 ---------------------------------------------
Handles a single thread . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 503 ---------------------------------------------
Close the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 504 ---------------------------------------------
Read data from the socket . --> Reads data from the socket . --> Socre: 1.0

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel [[c]] = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , [[c]] ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel [[amicably]] = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , [[amicably]] ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 505 ---------------------------------------------
Perform write . --> Executes the given key . --> Socre: 1.0

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl [[conn]] = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( [[conn]] , [[conn]] . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl [[antifreeze]] = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( [[antifreeze]] , [[antifreeze]] . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 506 ---------------------------------------------
Read a socket . --> Returns true if the key has been seen . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doRead]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean [[anselmo]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 507 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 365 / 124 / 18 / 507:  51%|█████     | 507/1000 [18:22<17:51,  2.17s/it][Succeeded / Failed / Skipped / Total] 365 / 124 / 18 / 507:  51%|█████     | 508/1000 [18:23<17:48,  2.17s/it][Succeeded / Failed / Skipped / Total] 366 / 124 / 18 / 508:  51%|█████     | 508/1000 [18:23<17:48,  2.17s/it][Succeeded / Failed / Skipped / Total] 366 / 125 / 18 / 509:  51%|█████     | 509/1000 [18:24<17:45,  2.17s/it][Succeeded / Failed / Skipped / Total] 366 / 125 / 18 / 509:  51%|█████     | 510/1000 [18:27<17:43,  2.17s/it][Succeeded / Failed / Skipped / Total] 367 / 125 / 18 / 510:  51%|█████     | 510/1000 [18:27<17:43,  2.17s/it][Succeeded / Failed / Skipped / Total] 368 / 125 / 18 / 511:  51%|█████     | 511/1000 [18:28<17:40,  2.17s/it][Succeeded / Failed / Skipped / Total] 368 / 125 / 18 / 511:  51%|█████     | 512/1000 [18:28<17:36,  2.16s/it][Succeeded / Failed / Skipped / Total] 369 / 125 / 18 / 512:  51%|█████     | 512/1000 [18:28<17:36,  2.16s/it][Succeeded / Failed / Skipped / Total] 370 / 125 / 18 / 513:  51%|█████▏    | 513/1000 [18:29<17:32,  2.16s/it][Succeeded / Failed / Skipped / Total] 370 / 125 / 18 / 513:  51%|█████▏    | 514/1000 [18:29<17:29,  2.16s/it][Succeeded / Failed / Skipped / Total] 371 / 125 / 18 / 514:  51%|█████▏    | 514/1000 [18:29<17:29,  2.16s/it]Performs a broadcast operation . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 508 ---------------------------------------------
Generate final key . --> Get the SHA - 1 . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String [[acc]] = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( [[acc]] . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[apu]] ( String in ) { String seckey = in . trim ( ) ; String [[anniversaries]] = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( [[anniversaries]] . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 509 ---------------------------------------------
Get the port . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[crucifixions]] ( ) { int [[airbrush]] = getAddress ( ) . getPort ( ) ; if ( [[airbrush]] == 0 && server != null ) { [[airbrush]] = server . socket ( ) . getLocalPort ( ) ; } return [[airbrush]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 510 ---------------------------------------------
Gets the socket . --> Deays a WebSocket . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[lays]] ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 511 ---------------------------------------------
Open the connection to the server . --> DoSetupSelectorAndServerThread . --> Socre: 1.0

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "[[False]]" != "[[False]]" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "[[Ohhh]]" != "[[Ohhh]]" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "[[Ohhh]]" != "[[Ohhh]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 512 ---------------------------------------------
Broadcast the given data to the given clients . --> Broadcasts the babbage asynchronously . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( byte [ ] [[data]] , Collection < WebSocket > clients ) { if ( [[data]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( [[data]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( byte [ ] [[babbage]] , Collection < WebSocket > clients ) { if ( [[babbage]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( [[babbage]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 513 ---------------------------------------------
Fills the frames with the specified draft . --> Fill a draft . --> Socre: 1.0

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String [[sData]] , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( [[sData]] != null ) { frames = draft . createFrames ( [[sData]] , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String [[aloof]] , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( [[aloof]] != null ) { frames = draft . createFrames ( [[aloof]] , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 514 ---------------------------------------------
Broadcasts a list of clients . --> Broadcasts the specified clients . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( String [[text]] , Collection < WebSocket > clients ) { if ( [[text]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( String [[alerting]] , Collection < WebSocket > clients ) { if ( [[alerting]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[alerting]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 515 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 371 / 126 / 18 / 515:  52%|█████▏    | 515/1000 [18:31<17:26,  2.16s/it][Succeeded / Failed / Skipped / Total] 371 / 126 / 18 / 515:  52%|█████▏    | 516/1000 [18:32<17:23,  2.16s/it][Succeeded / Failed / Skipped / Total] 372 / 126 / 18 / 516:  52%|█████▏    | 516/1000 [18:32<17:23,  2.16s/it][Succeeded / Failed / Skipped / Total] 373 / 126 / 18 / 517:  52%|█████▏    | 517/1000 [18:35<17:21,  2.16s/it][Succeeded / Failed / Skipped / Total] 373 / 126 / 18 / 517:  52%|█████▏    | 518/1000 [18:35<17:18,  2.15s/it][Succeeded / Failed / Skipped / Total] 374 / 126 / 18 / 518:  52%|█████▏    | 518/1000 [18:35<17:18,  2.15s/it][Succeeded / Failed / Skipped / Total] 375 / 126 / 18 / 519:  52%|█████▏    | 519/1000 [18:38<17:16,  2.16s/it][Succeeded / Failed / Skipped / Total] 375 / 126 / 18 / 519:  52%|█████▏    | 520/1000 [18:39<17:13,  2.15s/it][Succeeded / Failed / Skipped / Total] 376 / 126 / 18 / 520:  52%|█████▏    | 520/1000 [18:39<17:13,  2.15s/it][Succeeded / Failed / Skipped / Total] 377 / 126 / 18 / 521:  52%|█████▏    | 521/1000 [18:40<17:10,  2.15s/it][Succeeded / Failed / Skipped / Total] 377 / 126 / 18 / 521:  52%|█████▏    | 522/1000 [18:42<17:07,  2.15s/it][Succeeded / Failed / Skipped / Total] 378 / 126 / 18 / 522:  52%|█████▏    | 522/1000 [18:42<17:07,  2.15s/it]Start persistence unit . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[grandma]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 516 ---------------------------------------------
Executes the given connection . --> bonking this WebSocket --> Socre: 1.0

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket [[webSocket]] , long minimumPongTime ) { if ( ! ( [[webSocket]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[webSocket]] ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[bonking]] ( WebSocket [[adie]] , long minimumPongTime ) { if ( ! ( [[adie]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[adie]] ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 517 ---------------------------------------------
Convert arguments to verifya buffer . --> cup function . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[cup]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 518 ---------------------------------------------
Gets a value . --> Gets the result --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String [[key]] , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[key]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String [[alliance]] , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[alliance]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 519 ---------------------------------------------
Gets a list of arguments . --> Get a list of dungarees --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... [[args]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... [[dungarees]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[dungarees]] ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 520 ---------------------------------------------
Transfer a source buffer to another buffer . --> Copy overdrawn into dest . --> Socre: 1.0

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer [[source]] , ByteBuffer dest ) { if ( [[source]] == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = [[source]] . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int [[limit]] = Math . min ( fremain , toremain ) ; [[source]] . limit ( [[limit]] ) ; dest . put ( [[source]] ) ; return [[limit]] ; } else { dest . put ( [[source]] ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer [[overdrawn]] , ByteBuffer dest ) { if ( [[overdrawn]] == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = [[overdrawn]] . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int [[arl]] = Math . min ( fremain , toremain ) ; [[overdrawn]] . limit ( [[arl]] ) ; dest . put ( [[overdrawn]] ) ; return [[arl]] ; } else { dest . put ( [[overdrawn]] ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 521 ---------------------------------------------
Checks if the key isDefinedAt . --> duller --> Socre: 1.0

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang lang , String key ) { return messages . isDefinedAt ( key , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[duller]] ( play . api . i18n . Lang lang , String key ) { return messages . isDefinedAt ( key , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 522 ---------------------------------------------
Gets an EntityManagerFactory with the given name . --> Returns null if not found --> Socre: 1.0

[[[[Adv]]]]: public EntityManager [[em]] ( String name ) { EntityManagerFactory [[emf]] = emfs . get ( name ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[cabs]] ( String name ) { EntityManagerFactory [[engagements]] = emfs . get ( name ) ; if ( [[engagements]] == null ) { return null ; } return [[engagements]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 523 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 378 / 126 / 19 / 523:  52%|█████▏    | 523/1000 [18:42<17:03,  2.15s/it][Succeeded / Failed / Skipped / Total] 378 / 126 / 19 / 523:  52%|█████▏    | 524/1000 [18:43<17:00,  2.14s/it][Succeeded / Failed / Skipped / Total] 379 / 126 / 19 / 524:  52%|█████▏    | 524/1000 [18:43<17:00,  2.14s/it][Succeeded / Failed / Skipped / Total] 380 / 126 / 19 / 525:  52%|█████▎    | 525/1000 [18:47<16:59,  2.15s/it][Succeeded / Failed / Skipped / Total] 380 / 126 / 19 / 525:  53%|█████▎    | 526/1000 [18:47<16:56,  2.14s/it][Succeeded / Failed / Skipped / Total] 381 / 126 / 19 / 526:  53%|█████▎    | 526/1000 [18:47<16:56,  2.14s/it][Succeeded / Failed / Skipped / Total] 382 / 126 / 19 / 527:  53%|█████▎    | 527/1000 [18:50<16:54,  2.14s/it][Succeeded / Failed / Skipped / Total] 382 / 126 / 19 / 527:  53%|█████▎    | 528/1000 [18:50<16:50,  2.14s/it][Succeeded / Failed / Skipped / Total] 383 / 126 / 19 / 528:  53%|█████▎    | 528/1000 [18:50<16:50,  2.14s/it][Succeeded / Failed / Skipped / Total] 384 / 126 / 19 / 529:  53%|█████▎    | 529/1000 [18:53<16:48,  2.14s/it][Succeeded / Failed / Skipped / Total] 384 / 126 / 19 / 529:  53%|█████▎    | 530/1000 [18:53<16:45,  2.14s/it][Succeeded / Failed / Skipped / Total] 385 / 126 / 19 / 530:  53%|█████▎    | 530/1000 [18:53<16:45,  2.14s/it][Succeeded / Failed / Skipped / Total] 386 / 126 / 19 / 531:  53%|█████▎    | 531/1000 [18:54<16:42,  2.14s/it][Succeeded / Failed / Skipped / Total] 386 / 126 / 19 / 531:  53%|█████▎    | 532/1000 [18:57<16:40,  2.14s/it][Succeeded / Failed / Skipped / Total] 386 / 127 / 19 / 532:  53%|█████▎    | 532/1000 [18:57<16:40,  2.14s/it][Succeeded / Failed / Skipped / Total] 387 / 127 / 19 / 533:  53%|█████▎    | 533/1000 [19:00<16:39,  2.14s/it][Succeeded / Failed / Skipped / Total] 387 / 127 / 19 / 533:  53%|█████▎    | 534/1000 [19:00<16:35,  2.14s/it][Succeeded / Failed / Skipped / Total] 387 / 128 / 19 / 534:  53%|█████▎    | 534/1000 [19:00<16:35,  2.14s/it][Succeeded / Failed / Skipped / Total] 388 / 128 / 19 / 535:  54%|█████▎    | 535/1000 [19:02<16:32,  2.14s/it][Succeeded / Failed / Skipped / Total] 388 / 128 / 19 / 535:  54%|█████▎    | 536/1000 [19:04<16:30,  2.13s/it]Returns the implementation of the given REPLACEME0 --> [[[SKIPPED]]]

[[[[Adv]]]]: public final Self REPLACEME0 ( play . api . inject . Binding < ? > ... REPLACEME0 ) { return REPLACEME0 ( Guiceable . bindings ( REPLACEME0 ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 524 ---------------------------------------------
Creates a copy of this managed connection . --> d Capability kolkhoz --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[darek]] ( Consumer < EntityManager > [[kolkhoz]] ) { [[darek]] ( em -> { [[kolkhoz]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 525 ---------------------------------------------
Returns the bindings for the given modules . --> Returns the gatherers --> Socre: 1.0

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[modules]] ) { return bindings ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[gatherers]] ) { return bindings ( Guiceable . [[gatherers]] ( [[gatherers]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 526 ---------------------------------------------
Returns the delegate bindings for the given module . --> Create a GuiceableModule for the given adonai --> Socre: 1.0

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... [[adonai]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[adonai]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 527 ---------------------------------------------
overrides the given modules --> Create a new overrides --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[modules]] ) { return overrides ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[ades]] ) { return overrides ( Guiceable . [[ades]] ( [[ades]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 528 ---------------------------------------------
Returns the overrides for the specified modules . --> Returns the overrides for the given chairman --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[chairman]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[chairman]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 529 ---------------------------------------------
Sets the lang . --> Create hatim messages --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result [[result]] , Lang lang ) { return messages . setLang ( [[result]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[hatim]] ( Result [[calamari]] , Lang lang ) { return messages . setLang ( [[calamari]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 530 ---------------------------------------------
Returns the overrides for the given bindings . --> Create a Self albertson --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... bindings ) { return [[overrides]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[albertson]] ( play . api . inject . Binding < ? > ... bindings ) { return [[albertson]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 531 ---------------------------------------------
Disables a module . --> Disables the given macadam --> Socre: 1.0

[[[[Adv]]]]: public final Self disable ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self disable ( Class < ? > ... [[macadamia]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[macadamia]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 532 ---------------------------------------------
Returns a Messages object with the specified request header . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader request ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[illustration]] ( Http . RequestHeader request ) { play . api . i18n . Messages [[kata]] = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( [[kata]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 533 ---------------------------------------------
Wraps a list of arguments . --> Wrap abridged in reverse order --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... [[args]] ) { List < T > [[out]] ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { [[out]] = ( List < T > ) [[args]] [ 0 ] ; } else { [[out]] = Arrays . asList ( [[args]] ) ; } return [[out]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... [[abridged]] ) { List < T > [[axles]] ; if ( [[abridged]] != null && [[abridged]] . length == 1 && [[abridged]] [ 0 ] instanceof List ) { [[axles]] = ( List < T > ) [[abridged]] [ 0 ] ; } else { [[axles]] = Arrays . asList ( [[abridged]] ) ; } return [[axles]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 534 ---------------------------------------------
Returns the field in the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[outpatient]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 535 ---------------------------------------------
Returns a tuple with b . --> Gets the Bovs . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B b ) { return new [[Tuple]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[Bovs]] < A , B > [[Bovs]] ( A a , B b ) { return new [[Bovs]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
[Succeeded / Failed / Skipped / Total] 389 / 128 / 19 / 536:  54%|█████▎    | 536/1000 [19:04<16:30,  2.13s/it][Succeeded / Failed / Skipped / Total] 389 / 129 / 19 / 537:  54%|█████▎    | 537/1000 [19:05<16:27,  2.13s/it][Succeeded / Failed / Skipped / Total] 389 / 129 / 19 / 537:  54%|█████▍    | 538/1000 [19:06<16:24,  2.13s/it][Succeeded / Failed / Skipped / Total] 389 / 130 / 19 / 538:  54%|█████▍    | 538/1000 [19:06<16:24,  2.13s/it][Succeeded / Failed / Skipped / Total] 390 / 130 / 19 / 539:  54%|█████▍    | 539/1000 [19:07<16:21,  2.13s/it][Succeeded / Failed / Skipped / Total] 390 / 130 / 19 / 539:  54%|█████▍    | 540/1000 [19:15<16:24,  2.14s/it][Succeeded / Failed / Skipped / Total] 391 / 130 / 19 / 540:  54%|█████▍    | 540/1000 [19:15<16:24,  2.14s/it][Succeeded / Failed / Skipped / Total] 392 / 130 / 19 / 541:  54%|█████▍    | 541/1000 [19:15<16:20,  2.14s/it][Succeeded / Failed / Skipped / Total] 392 / 130 / 19 / 541:  54%|█████▍    | 542/1000 [19:17<16:18,  2.14s/it][Succeeded / Failed / Skipped / Total] 393 / 130 / 19 / 542:  54%|█████▍    | 542/1000 [19:17<16:18,  2.14s/it][Succeeded / Failed / Skipped / Total] 393 / 131 / 19 / 543:  54%|█████▍    | 543/1000 [19:19<16:15,  2.13s/it][Succeeded / Failed / Skipped / Total] 393 / 131 / 19 / 543:  54%|█████▍    | 544/1000 [19:24<16:16,  2.14s/it][Succeeded / Failed / Skipped / Total] 393 / 132 / 19 / 544:  54%|█████▍    | 544/1000 [19:25<16:16,  2.14s/it][Succeeded / Failed / Skipped / Total] 394 / 132 / 19 / 545:  55%|█████▍    | 545/1000 [19:29<16:16,  2.15s/it][Succeeded / Failed / Skipped / Total] 394 / 132 / 19 / 545:  55%|█████▍    | 546/1000 [19:37<16:19,  2.16s/it]--------------------------------------------- Result 536 ---------------------------------------------
Returns a tuple with three arguments . --> Tuple5 function . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] , B , C , D , E > Tuple5 < [[A]] , B , C , D , E > Tuple5 ( [[A]] a , B b , C c , D d , E e ) { return new Tuple5 < [[A]] , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < [[carillon]] , B , C , D , E > Tuple5 < [[carillon]] , B , C , D , E > Tuple5 ( [[carillon]] a , B b , C c , D d , E e ) { return new Tuple5 < [[carillon]] , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 537 ---------------------------------------------
Returns a Messages object of the given candidates . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[msgs]] = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[deletion]] ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[insults]] = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( [[insults]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 538 ---------------------------------------------
Returns theExisting file . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[aldrich]] ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 539 ---------------------------------------------
Calls the provided request . --> dawes --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[dawes]] ( Request [[hut]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 540 ---------------------------------------------
Returns the executor . --> kalahari functions --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext [[ec]] ) { ExecutionContext prepared = [[ec]] . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[kalahari]] ( ExecutionContext [[lacquered]] ) { ExecutionContext prepared = [[lacquered]] . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 541 ---------------------------------------------
Create a new instance of the given key . --> Create a new instance of a constraint --> Socre: 1.0

[[[[Adv]]]]: private < [[T]] extends ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[angier]] extends ConstraintValidator < ? , ? > > [[angier]] newInstance ( Class < [[angier]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 542 ---------------------------------------------
Build a string for a given name --> Ecma script --> Socre: 1.0

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[billows]] ( String [[yoji]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[yoji]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 543 ---------------------------------------------
Helper function to convert json into json --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[apprised]] ( String [[ben]] ) { return Flow . of ( JsonNode . class ) . map ( [[apprised]] -> { return ByteString . fromString ( Json . stringify ( [[apprised]] ) ) ; } ) . via ( flow ( [[ben]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 544 ---------------------------------------------
Adds a new constraint validator . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > [[MappedConstraintValidatorFactory]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[layla]] ConstraintValidator < ? , ? > > [[skelly]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 545 ---------------------------------------------
Creates a JPAConfig instance . --> DefaultJPA config --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[name]] , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[impartially]] ( String [[aganist]] , String [[sookie]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[aganist]] , [[sookie]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 546 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 394 / 133 / 19 / 546:  55%|█████▍    | 546/1000 [19:37<16:19,  2.16s/it][Succeeded / Failed / Skipped / Total] 394 / 133 / 19 / 546:  55%|█████▍    | 547/1000 [19:40<16:17,  2.16s/it][Succeeded / Failed / Skipped / Total] 394 / 134 / 19 / 547:  55%|█████▍    | 547/1000 [19:40<16:17,  2.16s/it][Succeeded / Failed / Skipped / Total] 394 / 134 / 19 / 547:  55%|█████▍    | 548/1000 [19:42<16:15,  2.16s/it][Succeeded / Failed / Skipped / Total] 395 / 134 / 19 / 548:  55%|█████▍    | 548/1000 [19:42<16:15,  2.16s/it][Succeeded / Failed / Skipped / Total] 395 / 134 / 19 / 548:  55%|█████▍    | 549/1000 [19:42<16:11,  2.15s/it][Succeeded / Failed / Skipped / Total] 396 / 134 / 19 / 549:  55%|█████▍    | 549/1000 [19:42<16:11,  2.15s/it][Succeeded / Failed / Skipped / Total] 396 / 134 / 19 / 549:  55%|█████▌    | 550/1000 [19:43<16:08,  2.15s/it][Succeeded / Failed / Skipped / Total] 397 / 134 / 19 / 550:  55%|█████▌    | 550/1000 [19:43<16:08,  2.15s/it][Succeeded / Failed / Skipped / Total] 397 / 135 / 19 / 551:  55%|█████▌    | 551/1000 [19:43<16:04,  2.15s/it][Succeeded / Failed / Skipped / Total] 397 / 135 / 19 / 551:  55%|█████▌    | 552/1000 [19:51<16:06,  2.16s/it][Succeeded / Failed / Skipped / Total] 398 / 135 / 19 / 552:  55%|█████▌    | 552/1000 [19:51<16:06,  2.16s/it]Create a new JPAConfig instance from the map . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[entry]] : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[violently]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[cata]] : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( [[cata]] . getKey ( ) , [[cata]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 547 ---------------------------------------------
Executes the request asynchronously . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[echoed]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 548 ---------------------------------------------
On not used . --> Handles an action --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[request]] , String [[message]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[request]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[request]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[salamander]] , String [[balder]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[salamander]] . method ( ) , [[salamander]] . uri ( ) , [[salamander]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[salamander]] . method ( ) , [[salamander]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[salamander]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 549 ---------------------------------------------
Creates a JPAConfig . --> Convenience method for ackerman --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[n1]] , String u1 , String n2 , String [[u2]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[n1]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , [[u2]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[ackerman]] ( String [[bombings]] , String u1 , String n2 , String [[pasó]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[bombings]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , [[pasó]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 550 ---------------------------------------------
Logs a request . --> Log a brumby --> Socre: 1.0

[[[[Adv]]]]: protected void logServerError ( RequestHeader [[request]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void logServerError ( RequestHeader [[brumby]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[brumby]] . method ( ) , [[brumby]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 551 ---------------------------------------------
Starts the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[disney]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 552 ---------------------------------------------
Creates a BuildDocHandler from the given files . --> Build doc - related destinations --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[dredging]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 553 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 399 / 135 / 19 / 553:  55%|█████▌    | 553/1000 [19:52<16:03,  2.16s/it][Succeeded / Failed / Skipped / Total] 399 / 135 / 19 / 553:  55%|█████▌    | 554/1000 [19:55<16:02,  2.16s/it][Succeeded / Failed / Skipped / Total] 399 / 136 / 19 / 554:  55%|█████▌    | 554/1000 [19:55<16:02,  2.16s/it][Succeeded / Failed / Skipped / Total] 400 / 136 / 19 / 555:  56%|█████▌    | 555/1000 [19:56<15:59,  2.16s/it][Succeeded / Failed / Skipped / Total] 400 / 136 / 19 / 555:  56%|█████▌    | 556/1000 [19:58<15:56,  2.16s/it][Succeeded / Failed / Skipped / Total] 401 / 136 / 19 / 556:  56%|█████▌    | 556/1000 [19:58<15:56,  2.16s/it][Succeeded / Failed / Skipped / Total] 401 / 137 / 19 / 557:  56%|█████▌    | 557/1000 [20:03<15:56,  2.16s/it][Succeeded / Failed / Skipped / Total] 401 / 137 / 19 / 557:  56%|█████▌    | 558/1000 [20:03<15:53,  2.16s/it][Succeeded / Failed / Skipped / Total] 401 / 138 / 19 / 558:  56%|█████▌    | 558/1000 [20:03<15:53,  2.16s/it][Succeeded / Failed / Skipped / Total] 401 / 139 / 19 / 559:  56%|█████▌    | 559/1000 [20:06<15:51,  2.16s/it][Succeeded / Failed / Skipped / Total] 401 / 139 / 19 / 559:  56%|█████▌    | 560/1000 [20:08<15:49,  2.16s/it]This method is called on an HTTP response --> clamped request --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String [[message]] ) { if ( statusCode == 400 ) { return onBadRequest ( request , [[message]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , [[message]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , [[message]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , [[message]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[message]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[clamped]] ( RequestHeader request , int statusCode , String [[disa]] ) { if ( statusCode == 400 ) { return onBadRequest ( request , [[disa]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , [[disa]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , [[disa]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , [[disa]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[disa]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 554 ---------------------------------------------
Gets the first accessible method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String [[methodName]] , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( [[methodName]] , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[duchess]] ( final Class < ? > cls , final String [[euphemism]] , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( [[euphemism]] , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 555 ---------------------------------------------
Get the throwableToUsefulException . --> Print a throwable --> Socre: 1.0

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[printouts]] ( final Throwable [[bugger]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[bugger]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 556 ---------------------------------------------
Creates the BuildDoc handler for the given directory . --> Get the Build docRepository --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File [[directory]] ) { FileRepository repo = new FilesystemRepository ( [[directory]] ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[cadres]] ( File [[franklyn]] ) { FileRepository repo = new FilesystemRepository ( [[franklyn]] ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 557 ---------------------------------------------
Processes the given exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader [[request]] , Throwable [[exception]] ) { try { UsefulException usefulException = throwableToUsefulException ( [[exception]] ) ; logServerError ( [[request]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , usefulException ) ; default : return onDevServerError ( [[request]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[halley]] ( RequestHeader [[jovi]] , Throwable [[marklar]] ) { try { UsefulException usefulException = throwableToUsefulException ( [[marklar]] ) ; logServerError ( [[jovi]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[jovi]] , usefulException ) ; default : return onDevServerError ( [[jovi]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 558 ---------------------------------------------
Invoked when a user has logged in . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[crossings]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 559 ---------------------------------------------
OnProdServerError . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 560 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 402 / 139 / 19 / 560:  56%|█████▌    | 560/1000 [20:08<15:49,  2.16s/it][Succeeded / Failed / Skipped / Total] 403 / 139 / 19 / 561:  56%|█████▌    | 561/1000 [20:11<15:47,  2.16s/it][Succeeded / Failed / Skipped / Total] 403 / 139 / 19 / 561:  56%|█████▌    | 562/1000 [20:13<15:45,  2.16s/it][Succeeded / Failed / Skipped / Total] 404 / 139 / 19 / 562:  56%|█████▌    | 562/1000 [20:13<15:45,  2.16s/it][Succeeded / Failed / Skipped / Total] 405 / 139 / 19 / 563:  56%|█████▋    | 563/1000 [20:14<15:42,  2.16s/it][Succeeded / Failed / Skipped / Total] 405 / 139 / 19 / 563:  56%|█████▋    | 564/1000 [20:16<15:40,  2.16s/it][Succeeded / Failed / Skipped / Total] 406 / 139 / 19 / 564:  56%|█████▋    | 564/1000 [20:16<15:40,  2.16s/it][Succeeded / Failed / Skipped / Total] 406 / 139 / 20 / 565:  56%|█████▋    | 565/1000 [20:16<15:36,  2.15s/it][Succeeded / Failed / Skipped / Total] 406 / 139 / 20 / 565:  57%|█████▋    | 566/1000 [20:22<15:37,  2.16s/it][Succeeded / Failed / Skipped / Total] 407 / 139 / 20 / 566:  57%|█████▋    | 566/1000 [20:22<15:37,  2.16s/it][Succeeded / Failed / Skipped / Total] 407 / 140 / 20 / 567:  57%|█████▋    | 567/1000 [20:24<15:35,  2.16s/it][Succeeded / Failed / Skipped / Total] 407 / 140 / 20 / 567:  57%|█████▋    | 568/1000 [20:24<15:31,  2.16s/it][Succeeded / Failed / Skipped / Total] 407 / 141 / 20 / 568:  57%|█████▋    | 568/1000 [20:24<15:31,  2.16s/it][Succeeded / Failed / Skipped / Total] 407 / 142 / 20 / 569:  57%|█████▋    | 569/1000 [20:25<15:28,  2.15s/it][Succeeded / Failed / Skipped / Total] 407 / 142 / 20 / 569:  57%|█████▋    | 570/1000 [20:28<15:27,  2.16s/it][Succeeded / Failed / Skipped / Total] 408 / 142 / 20 / 570:  57%|█████▋    | 570/1000 [20:28<15:27,  2.16s/it][Succeeded / Failed / Skipped / Total] 409 / 142 / 20 / 571:  57%|█████▋    | 571/1000 [20:30<15:24,  2.16s/it][Succeeded / Failed / Skipped / Total] 409 / 142 / 20 / 571:  57%|█████▋    | 572/1000 [20:31<15:21,  2.15s/it]Create a BuildDoc Handler from a directory and a JAR file . --> Build doc handler . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile [[jarFile]] , String base ) { return [[fromDirectoryAndJar]] ( directory , [[jarFile]] , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[agnès]] ( File directory , JarFile [[carrot]] , String base ) { return [[agnès]] ( directory , [[carrot]] , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 561 ---------------------------------------------
Converts the string content to a HttpEntity . --> Convenience function for creating a new charset --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String content , String charset ) { return new Strict ( ByteString . fromString ( content , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[dhabi]] ( String content , String charset ) { return new Strict ( ByteString . fromString ( content , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 562 ---------------------------------------------
Consume data . --> Retrieve a pactStage --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer [[mat]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[mat]] ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[pawnshop]] ( Materializer [[anthea]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[anthea]] ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 563 ---------------------------------------------
Returns the status code for the given content . --> Get the status of the operation --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , JsonNode content ) { return status ( status , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result status ( int [[moya]] , JsonNode content ) { return status ( status , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 564 ---------------------------------------------
Send JSON status code to a JSON response --> send the response to the response --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , JsonNode content , JsonEncoding encoding ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( content , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result status ( int [[farmhands]] , JsonNode content , JsonEncoding encoding ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( content , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 565 ---------------------------------------------
Finds a user . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 566 ---------------------------------------------
Create a new content status . --> Returns the icis for the given content --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , File content ) { return [[status]] ( [[status]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[icis]] ( int status , File content ) { return [[icis]] ( [[icis]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 567 ---------------------------------------------
Create HttpEntity chunked . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity chunked ( Source < ByteString , ? > [[data]] , Optional < String > contentType ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity chunked ( Source < ByteString , ? > [[glassy]] , Optional < String > contentType ) { return new Chunked ( [[glassy]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 568 ---------------------------------------------
Build doc handler from jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String base ) { FileRepository [[repo]] = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[banana]] ( JarFile [[knowwhat]] , String base ) { FileRepository [[conjugate]] = new JarRepository ( [[knowwhat]] , Option . apply ( base ) ) ; return new DocumentationHandler ( [[conjugate]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 569 ---------------------------------------------
Returns the HttpEntity from content . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content content , String charset ) { String [[body]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[benefited]] ( Content content , String charset ) { String [[internationals]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 570 ---------------------------------------------
Return a copy of this table . --> Call gola method --> Socre: 1.0

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[gola]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 571 ---------------------------------------------
Sends a response message to the given stream . --> Get the stream of cautionary --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , InputStream content , long contentLength ) { return [[status]] ( [[status]] ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result [[cautionary]] ( int [[gwendolyn]] , InputStream content , long contentLength ) { return [[cautionary]] ( [[cautionary]] ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .
[Succeeded / Failed / Skipped / Total] 410 / 142 / 20 / 572:  57%|█████▋    | 572/1000 [20:31<15:21,  2.15s/it][Succeeded / Failed / Skipped / Total] 411 / 142 / 20 / 573:  57%|█████▋    | 573/1000 [20:31<15:17,  2.15s/it][Succeeded / Failed / Skipped / Total] 411 / 142 / 20 / 573:  57%|█████▋    | 574/1000 [20:33<15:15,  2.15s/it][Succeeded / Failed / Skipped / Total] 412 / 142 / 20 / 574:  57%|█████▋    | 574/1000 [20:33<15:15,  2.15s/it][Succeeded / Failed / Skipped / Total] 413 / 142 / 20 / 575:  57%|█████▊    | 575/1000 [20:36<15:14,  2.15s/it][Succeeded / Failed / Skipped / Total] 413 / 142 / 20 / 575:  58%|█████▊    | 576/1000 [20:37<15:11,  2.15s/it][Succeeded / Failed / Skipped / Total] 414 / 142 / 20 / 576:  58%|█████▊    | 576/1000 [20:37<15:11,  2.15s/it][Succeeded / Failed / Skipped / Total] 415 / 142 / 20 / 577:  58%|█████▊    | 577/1000 [20:39<15:08,  2.15s/it][Succeeded / Failed / Skipped / Total] 415 / 142 / 20 / 577:  58%|█████▊    | 578/1000 [20:42<15:07,  2.15s/it][Succeeded / Failed / Skipped / Total] 416 / 142 / 20 / 578:  58%|█████▊    | 578/1000 [20:42<15:07,  2.15s/it][Succeeded / Failed / Skipped / Total] 416 / 143 / 20 / 579:  58%|█████▊    | 579/1000 [20:43<15:04,  2.15s/it][Succeeded / Failed / Skipped / Total] 416 / 143 / 20 / 579:  58%|█████▊    | 580/1000 [20:43<15:00,  2.14s/it][Succeeded / Failed / Skipped / Total] 417 / 143 / 20 / 580:  58%|█████▊    | 580/1000 [20:43<15:00,  2.14s/it][Succeeded / Failed / Skipped / Total] 418 / 143 / 20 / 581:  58%|█████▊    | 581/1000 [20:44<14:57,  2.14s/it][Succeeded / Failed / Skipped / Total] 418 / 143 / 20 / 581:  58%|█████▊    | 582/1000 [20:49<14:57,  2.15s/it]--------------------------------------------- Result 572 ---------------------------------------------
Call a fragment --> dreamboat --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String fragment ) { return new play . api . mvc . Call ( method ( ) , url ( ) , fragment ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[dreamboat]] ( String fragment ) { return new play . api . mvc . Call ( method ( ) , url ( ) , fragment ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 573 ---------------------------------------------
Gets the absolute url . --> Return the babbage of the given request --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[babbage]] ( Http . Request request ) { return [[babbage]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 574 ---------------------------------------------
Gets the response status . --> returns null --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[basted]] ( int status , byte [ ] [[brûlée]] ) { if ( [[brûlée]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[basted]] , new HttpEntity . Strict ( ByteString . fromArray ( [[brûlée]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 575 ---------------------------------------------
Create a new Lang object . --> Get Lang vancomycin --> Socre: 1.0

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[vancomycin]] ( Collection < Lang > [[heathrow]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[heathrow]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 576 ---------------------------------------------
Parses the given directory and jar file . --> Build doc handler for skelly --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base , boolean [[fallbackToJar]] ) { FileRepository [[fileRepo]] = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository [[manualRepo]] ; if ( [[fallbackToJar]] ) { [[manualRepo]] = new AggregateFileRepository ( new FileRepository [ ] { [[fileRepo]] , jarRepo } ) ; } else { [[manualRepo]] = [[fileRepo]] ; } return new DocumentationHandler ( [[manualRepo]] , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[skelly]] ( File directory , JarFile jarFile , String base , boolean [[nihon]] ) { FileRepository [[jist]] = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository [[albertina]] ; if ( [[nihon]] ) { [[albertina]] = new AggregateFileRepository ( new FileRepository [ ] { [[jist]] , jarRepo } ) ; } else { [[albertina]] = [[jist]] ; } return new DocumentationHandler ( [[albertina]] , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 577 ---------------------------------------------
Gets the socket URL . --> get the blighters for the CLI --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request [[request]] ) { return [[webSocketURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[blighters]] ( Http . Request [[teller]] ) { return [[blighters]] ( [[teller]] . secure ( ) , [[teller]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 578 ---------------------------------------------
Creates a new instance of the given class . --> Creates an instance of the specified havelock class . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[havelock]] > [[havelock]] fromJson ( JsonNode json , Class < [[havelock]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 579 ---------------------------------------------
Returns a new connection function . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return block . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[arapaho]] ) { try { return block . call ( [[arapaho]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 580 ---------------------------------------------
Parses a string into a JsonNode --> Parse asterix --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode parse ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( String [[asterix]] ) { try { return mapper ( ) . readTree ( [[asterix]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 581 ---------------------------------------------
Convert a data object to a JsonNode --> Get the cup node --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[cup]] ( final Object [[delicto]] ) { try { return mapper ( ) . valueToTree ( [[delicto]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
[Succeeded / Failed / Skipped / Total] 419 / 143 / 20 / 582:  58%|█████▊    | 582/1000 [20:49<14:57,  2.15s/it][Succeeded / Failed / Skipped / Total] 420 / 143 / 20 / 583:  58%|█████▊    | 583/1000 [20:53<14:56,  2.15s/it][Succeeded / Failed / Skipped / Total] 420 / 143 / 20 / 583:  58%|█████▊    | 584/1000 [20:54<14:53,  2.15s/it][Succeeded / Failed / Skipped / Total] 420 / 144 / 20 / 584:  58%|█████▊    | 584/1000 [20:54<14:53,  2.15s/it][Succeeded / Failed / Skipped / Total] 420 / 145 / 20 / 585:  58%|█████▊    | 585/1000 [20:59<14:53,  2.15s/it][Succeeded / Failed / Skipped / Total] 420 / 145 / 20 / 585:  59%|█████▊    | 586/1000 [21:00<14:50,  2.15s/it][Succeeded / Failed / Skipped / Total] 421 / 145 / 20 / 586:  59%|█████▊    | 586/1000 [21:00<14:50,  2.15s/it][Succeeded / Failed / Skipped / Total] 422 / 145 / 20 / 587:  59%|█████▊    | 587/1000 [21:02<14:48,  2.15s/it][Succeeded / Failed / Skipped / Total] 422 / 145 / 20 / 587:  59%|█████▉    | 588/1000 [21:08<14:48,  2.16s/it][Succeeded / Failed / Skipped / Total] 423 / 145 / 20 / 588:  59%|█████▉    | 588/1000 [21:08<14:48,  2.16s/it]--------------------------------------------- Result 582 ---------------------------------------------
Returns the canonical for the given URL . --> Returns the brimstone of the given url --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[brimstone]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[brimstone]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[brimstone]] . empty ( ) && [[brimstone]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[brimstone]] . push ( comp ) ; else [[brimstone]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[brimstone]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 583 ---------------------------------------------
Gets a connection function . --> Computes the homey connection --> Socre: 1.0

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable [[block]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[connection]] ) { try { [[block]] . run ( [[connection]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[homey]] ( final ConnectionRunnable [[abandoned]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[lapdog]] ) { try { [[abandoned]] . run ( [[lapdog]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 584 ---------------------------------------------
Parses a java . io . InputStream --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[libs]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 585 ---------------------------------------------
Displayable constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 586 ---------------------------------------------
Returns cron interval . --> Create cron expression --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String [[cron]] , Date date ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String [[coleen]] , Date date ) { try { return new CronExpression ( [[coleen]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[coleen]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 587 ---------------------------------------------
Returns the relative path . --> dictates --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String startPath , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[dictates]] ( String startPath , String [[thomas]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 588 ---------------------------------------------
Parse CRON expression . --> Returns the salih value --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[aymara]] ( String [[salih]] ) { try { return new CronExpression ( [[salih]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[salih]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 589 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 423 / 146 / 20 / 589:  59%|█████▉    | 589/1000 [21:08<14:45,  2.15s/it][Succeeded / Failed / Skipped / Total] 423 / 146 / 20 / 589:  59%|█████▉    | 590/1000 [21:09<14:42,  2.15s/it][Succeeded / Failed / Skipped / Total] 424 / 146 / 20 / 590:  59%|█████▉    | 590/1000 [21:09<14:42,  2.15s/it][Succeeded / Failed / Skipped / Total] 425 / 146 / 20 / 591:  59%|█████▉    | 591/1000 [21:11<14:39,  2.15s/it][Succeeded / Failed / Skipped / Total] 425 / 146 / 20 / 591:  59%|█████▉    | 592/1000 [21:12<14:36,  2.15s/it][Succeeded / Failed / Skipped / Total] 426 / 146 / 20 / 592:  59%|█████▉    | 592/1000 [21:12<14:36,  2.15s/it][Succeeded / Failed / Skipped / Total] 426 / 147 / 20 / 593:  59%|█████▉    | 593/1000 [21:13<14:33,  2.15s/it][Succeeded / Failed / Skipped / Total] 426 / 147 / 20 / 593:  59%|█████▉    | 594/1000 [21:16<14:32,  2.15s/it][Succeeded / Failed / Skipped / Total] 426 / 148 / 20 / 594:  59%|█████▉    | 594/1000 [21:16<14:32,  2.15s/it][Succeeded / Failed / Skipped / Total] 426 / 149 / 20 / 595:  60%|█████▉    | 595/1000 [21:18<14:29,  2.15s/it][Succeeded / Failed / Skipped / Total] 426 / 149 / 20 / 595:  60%|█████▉    | 596/1000 [21:23<14:29,  2.15s/it][Succeeded / Failed / Skipped / Total] 427 / 149 / 20 / 596:  60%|█████▉    | 596/1000 [21:23<14:29,  2.15s/it][Succeeded / Failed / Skipped / Total] 427 / 150 / 20 / 597:  60%|█████▉    | 597/1000 [21:27<14:28,  2.16s/it][Succeeded / Failed / Skipped / Total] 427 / 150 / 20 / 597:  60%|█████▉    | 598/1000 [21:28<14:26,  2.15s/it][Succeeded / Failed / Skipped / Total] 428 / 150 / 20 / 598:  60%|█████▉    | 598/1000 [21:28<14:26,  2.15s/it]Displays displayable constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[constraint]] ) { final Display [[displayAnnotation]] = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[apu]] ) { final Display [[snapper]] = [[apu]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[snapper]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[snapper]] . attributes ( ) ) . map ( attr -> [[apu]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 590 ---------------------------------------------
Creates a new AhcWSClient . --> Get AhcWSClient perse --> Socre: 1.0

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[persephone]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 591 ---------------------------------------------
Retrieves the results of the request . --> RUMOR method --> Socre: 1.0

[[[[Adv]]]]: public static Result [[TODO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[RUMOR]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 592 ---------------------------------------------
Load the application builder --> Create an ApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[englander]] ( ApplicationLoader . Context [[voicemail]] ) { return initialBuilder . in ( [[voicemail]] . environment ( ) ) . loadConfig ( [[voicemail]] . initialConfig ( ) ) . overrides ( overrides ( [[voicemail]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 593 ---------------------------------------------
Create a Server for the given mode and port . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode [[mode]] , int port , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . [[mode]] ( [[mode]] ) . http ( port ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[assassinations]] ( Mode [[kingfisher]] , int port , Function < BuiltInComponents , Router > [[fauntleroy]] ) { return new Builder ( ) . [[kingfisher]] ( [[kingfisher]] ) . http ( port ) . build ( [[fauntleroy]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 594 ---------------------------------------------
Returns an annotation with the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[rah]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 595 ---------------------------------------------
Returns a qualified key with the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[fundamentals]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 596 ---------------------------------------------
Convert a supplier to a Binding --> Create a Java supplier --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[inequities]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 597 ---------------------------------------------
Convert an implementation to a Binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[hammers]] ( final Class < ? extends T > [[rally]] ) { return underlying . to ( [[rally]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 598 ---------------------------------------------
Convert the provider to a Binding . --> demilitarized method for heisenberg --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[demilitarized]] ( final Provider < ? extends T > [[heisenberg]] ) { return underlying . to ( [[heisenberg]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 599 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 429 / 150 / 20 / 599:  60%|█████▉    | 599/1000 [21:29<14:23,  2.15s/it][Succeeded / Failed / Skipped / Total] 429 / 150 / 20 / 599:  60%|██████    | 600/1000 [21:30<14:20,  2.15s/it][Succeeded / Failed / Skipped / Total] 430 / 150 / 20 / 600:  60%|██████    | 600/1000 [21:30<14:20,  2.15s/it][Succeeded / Failed / Skipped / Total] 431 / 150 / 20 / 601:  60%|██████    | 601/1000 [21:32<14:18,  2.15s/it][Succeeded / Failed / Skipped / Total] 431 / 150 / 20 / 601:  60%|██████    | 602/1000 [21:33<14:15,  2.15s/it][Succeeded / Failed / Skipped / Total] 432 / 150 / 20 / 602:  60%|██████    | 602/1000 [21:33<14:15,  2.15s/it][Succeeded / Failed / Skipped / Total] 433 / 150 / 20 / 603:  60%|██████    | 603/1000 [21:35<14:12,  2.15s/it][Succeeded / Failed / Skipped / Total] 433 / 150 / 20 / 603:  60%|██████    | 604/1000 [21:37<14:10,  2.15s/it][Succeeded / Failed / Skipped / Total] 434 / 150 / 20 / 604:  60%|██████    | 604/1000 [21:37<14:10,  2.15s/it][Succeeded / Failed / Skipped / Total] 435 / 150 / 20 / 605:  60%|██████    | 605/1000 [21:38<14:07,  2.15s/it][Succeeded / Failed / Skipped / Total] 435 / 150 / 20 / 605:  61%|██████    | 606/1000 [21:40<14:05,  2.15s/it][Succeeded / Failed / Skipped / Total] 436 / 150 / 20 / 606:  61%|██████    | 606/1000 [21:40<14:05,  2.15s/it][Succeeded / Failed / Skipped / Total] 436 / 150 / 21 / 607:  61%|██████    | 607/1000 [21:40<14:01,  2.14s/it][Succeeded / Failed / Skipped / Total] 436 / 150 / 21 / 607:  61%|██████    | 608/1000 [21:41<13:59,  2.14s/it]Adds a session . --> Set bakas property --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String [[key]] , String [[value]] ) { [[session]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[bakas]] ( String [[georgia]] , String [[omega]] ) { [[bakas]] ( ) . put ( [[georgia]] , [[omega]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 600 ---------------------------------------------
Returns a new CompletionStage with the given timeout . --> region > apprised --> Socre: 1.0

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > stage , final long amount , final TimeUnit [[unit]] ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( [[unit]] , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , [[unit]] ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[apprised]] ( final CompletionStage < A > stage , final long amount , final TimeUnit [[loco]] ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( [[loco]] , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , [[loco]] ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 601 ---------------------------------------------
Converts the given key to a Binding . --> Returns the value of a BindingKey --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[spells]] ( final BindingKey < ? extends T > [[olympic]] ) { return underlying . to ( [[olympic]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 602 ---------------------------------------------
Allows to flash a string . --> region Overrides implementation --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String [[key]] , String [[value]] ) { [[flash]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[gola]] ( String [[irretrievably]] , String [[edges]] ) { [[gola]] ( ) . put ( [[irretrievably]] , [[edges]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 603 ---------------------------------------------
Return list of availables from application --> Returns a list of all global languages --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[abuela]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 604 ---------------------------------------------
Convert a provider to a Java Binding . --> A null - safe manner --> Socre: 1.0

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[nihon]] Provider < ? extends T > > Binding < T > [[puncture]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 605 ---------------------------------------------
Checks if the specified class array is assignable to the specified class array . --> joker a class --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] [[classArray]] , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( [[classArray]] ) != arrayGetLength ( toClassArray ) ) { return "[[False]]" != "[[False]]" ; } if ( [[classArray]] == null ) { [[classArray]] = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int [[i]] = 0 ; [[i]] < [[classArray]] . length ; [[i]] ++ ) { if ( [[isAssignable]] ( [[classArray]] [ [[i]] ] , toClassArray [ [[i]] ] , autoboxing ) == "[[False]]" != "[[False]]" ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[joker]] ( Class < ? > [ ] [[celine]] , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( [[celine]] ) != arrayGetLength ( toClassArray ) ) { return "[[Crestview]]" != "[[Crestview]]" ; } if ( [[celine]] == null ) { [[celine]] = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int [[chatterjee]] = 0 ; [[chatterjee]] < [[celine]] . length ; [[chatterjee]] ++ ) { if ( [[joker]] ( [[celine]] [ [[chatterjee]] ] , toClassArray [ [[chatterjee]] ] , autoboxing ) == "[[Crestview]]" != "[[Crestview]]" ) { return "[[Crestview]]" != "[[Crestview]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 606 ---------------------------------------------
Load the configLoader . --> Creates a GuiceApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment [[env]] ) -> new play . api . Configuration ( load . apply ( new Environment ( [[env]] ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment [[boarder]] ) -> new play . api . Configuration ( load . apply ( new Environment ( [[boarder]] ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 607 ---------------------------------------------
Loads a Guice application --> [[[SKIPPED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... modules ) { return load ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 608 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 437 / 150 / 21 / 608:  61%|██████    | 608/1000 [21:41<13:59,  2.14s/it][Succeeded / Failed / Skipped / Total] 437 / 150 / 22 / 609:  61%|██████    | 609/1000 [21:42<13:55,  2.14s/it][Succeeded / Failed / Skipped / Total] 437 / 150 / 22 / 609:  61%|██████    | 610/1000 [21:44<13:54,  2.14s/it][Succeeded / Failed / Skipped / Total] 438 / 150 / 22 / 610:  61%|██████    | 610/1000 [21:44<13:54,  2.14s/it][Succeeded / Failed / Skipped / Total] 439 / 150 / 22 / 611:  61%|██████    | 611/1000 [21:44<13:50,  2.14s/it][Succeeded / Failed / Skipped / Total] 439 / 150 / 22 / 611:  61%|██████    | 612/1000 [21:44<13:47,  2.13s/it][Succeeded / Failed / Skipped / Total] 440 / 150 / 22 / 612:  61%|██████    | 612/1000 [21:44<13:47,  2.13s/it][Succeeded / Failed / Skipped / Total] 441 / 150 / 22 / 613:  61%|██████▏   | 613/1000 [21:46<13:44,  2.13s/it][Succeeded / Failed / Skipped / Total] 441 / 150 / 22 / 613:  61%|██████▏   | 614/1000 [21:47<13:41,  2.13s/it][Succeeded / Failed / Skipped / Total] 442 / 150 / 22 / 614:  61%|██████▏   | 614/1000 [21:47<13:41,  2.13s/it][Succeeded / Failed / Skipped / Total] 443 / 150 / 22 / 615:  62%|██████▏   | 615/1000 [21:57<13:44,  2.14s/it][Succeeded / Failed / Skipped / Total] 443 / 150 / 22 / 615:  62%|██████▏   | 616/1000 [21:58<13:41,  2.14s/it][Succeeded / Failed / Skipped / Total] 444 / 150 / 22 / 616:  62%|██████▏   | 616/1000 [21:58<13:41,  2.14s/it][Succeeded / Failed / Skipped / Total] 444 / 150 / 22 / 616:  62%|██████▏   | 617/1000 [21:58<13:38,  2.14s/it]Returns a GuiceApplicationBuilder for the given loader . --> Creates a new Guice ApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment [[env]] , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( [[env]] ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment [[barker]] , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( [[barker]] ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 609 ---------------------------------------------
Create a new Guice application builder --> [[[SKIPPED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 610 ---------------------------------------------
Load a Guiceable module --> Loads a GuiceApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[akash]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[akash]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 611 ---------------------------------------------
Computes global preferred . --> Get global language --> Socre: 1.0

[[[[Adv]]]]: public static Lang [[preferred]] ( Application [[app]] , List < Lang > availableLangs ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[alessandro]] ( Application [[soupçon]] , List < Lang > availableLangs ) { play . api . i18n . Langs langs = [[soupçon]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 612 ---------------------------------------------
Load a Guice application . --> Load an agent --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[annum]] ) { return load ( Guiceable . [[annum]] ( [[annum]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 613 ---------------------------------------------
Creates a new evolutions reader . --> bindle operations --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[bindle]] . EvolutionsReader [[benighted]] ( Map < String , List < Evolution > > [[bindle]] ) { return new SimpleEvolutionsReader ( [[bindle]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 614 ---------------------------------------------
Load the bindings . --> Create a franklyn --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... bindings ) { return [[load]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[franklyn]] ( play . api . inject . Binding < ? > ... bindings ) { return [[franklyn]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 615 ---------------------------------------------
Cleans up evolutions . --> diphther --> Socre: 1.0

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[constellations]] ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions [[diphtheria]] = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; [[diphtheria]] . evolve ( [[diphtheria]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 616 ---------------------------------------------
Creates a Evolutions reader for the given evolutions . --> Evoj method --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[manoj]] . EvolutionsReader [[chaudhry]] ( Evolution ... [[manoj]] ) { Map < String , List < Evolution > > [[callow]] = new HashMap < String , List < Evolution > > ( ) ; [[callow]] . put ( "default" , Arrays . asList ( [[manoj]] ) ) ; return fromMap ( [[callow]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 617 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 445 / 150 / 22 / 617:  62%|██████▏   | 617/1000 [21:58<13:38,  2.14s/it][Succeeded / Failed / Skipped / Total] 445 / 150 / 22 / 617:  62%|██████▏   | 618/1000 [22:03<13:38,  2.14s/it][Succeeded / Failed / Skipped / Total] 445 / 151 / 22 / 618:  62%|██████▏   | 618/1000 [22:03<13:38,  2.14s/it][Succeeded / Failed / Skipped / Total] 445 / 151 / 22 / 618:  62%|██████▏   | 619/1000 [22:04<13:35,  2.14s/it][Succeeded / Failed / Skipped / Total] 445 / 152 / 22 / 619:  62%|██████▏   | 619/1000 [22:04<13:35,  2.14s/it][Succeeded / Failed / Skipped / Total] 445 / 152 / 22 / 619:  62%|██████▏   | 620/1000 [22:11<13:36,  2.15s/it][Succeeded / Failed / Skipped / Total] 445 / 153 / 22 / 620:  62%|██████▏   | 620/1000 [22:11<13:36,  2.15s/it][Succeeded / Failed / Skipped / Total] 445 / 153 / 22 / 620:  62%|██████▏   | 621/1000 [22:13<13:33,  2.15s/it][Succeeded / Failed / Skipped / Total] 446 / 153 / 22 / 621:  62%|██████▏   | 621/1000 [22:13<13:33,  2.15s/it][Succeeded / Failed / Skipped / Total] 446 / 153 / 22 / 621:  62%|██████▏   | 622/1000 [22:15<13:31,  2.15s/it][Succeeded / Failed / Skipped / Total] 447 / 153 / 22 / 622:  62%|██████▏   | 622/1000 [22:15<13:31,  2.15s/it][Succeeded / Failed / Skipped / Total] 447 / 153 / 22 / 622:  62%|██████▏   | 623/1000 [22:15<13:28,  2.14s/it][Succeeded / Failed / Skipped / Total] 448 / 153 / 22 / 623:  62%|██████▏   | 623/1000 [22:15<13:28,  2.14s/it][Succeeded / Failed / Skipped / Total] 448 / 153 / 22 / 623:  62%|██████▏   | 624/1000 [22:16<13:25,  2.14s/it]Gets the emStack . --> Returns a new Deque instance --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[emsObject]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[emsObject]] != null ) { return ( Deque < EntityManager > ) [[emsObject]] ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[mostly]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[trainin]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[trainin]] != null ) { return ( Deque < EntityManager > ) [[trainin]] ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 618 ---------------------------------------------
Returns the EntityManager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > [[ems]] = this . emStack ( "True" == "True" ) ; if ( [[ems]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ems]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > [[bracey]] = this . emStack ( "True" == "True" ) ; if ( [[bracey]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[bracey]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 619 ---------------------------------------------
Encodes the given cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , [[cookie]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie [[kingfisher]] ) { if ( [[kingfisher]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , [[kingfisher]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 620 ---------------------------------------------
Returns the error list . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[acute]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 621 ---------------------------------------------
Applies a flow to each argument . --> find Emphysema list --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , [[FlowIn]] , Out > Flow < [[In]] , Out , ? > bypassWith ( Function < [[In]] , F . Either < [[FlowIn]] , Out > > splitter , Flow < [[FlowIn]] , Out , ? > flow ) { return bypassWith ( Flow . < [[In]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < [[Emphysema]] , [[unprofessional]] , Out > Flow < [[Emphysema]] , Out , ? > bypassWith ( Function < [[Emphysema]] , F . Either < [[unprofessional]] , Out > > splitter , Flow < [[unprofessional]] , Out , ? > flow ) { return bypassWith ( Flow . < [[Emphysema]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 622 ---------------------------------------------
Convert a list of error arguments . --> Converts an array of exceptions to a list of exceptions --> Socre: 1.0

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] [[them]] ) { if ( [[them]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[deviate]] = Arrays . stream ( [[them]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[deviate]] ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 623 ---------------------------------------------
fill a form . --> Specialized version of horoscope --> Socre: 1.0

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[horoscope]] ( T [[smokestack]] ) { if ( [[smokestack]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[smokestack]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 624 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 448 / 154 / 22 / 624:  62%|██████▏   | 624/1000 [22:16<13:25,  2.14s/it][Succeeded / Failed / Skipped / Total] 448 / 154 / 22 / 624:  62%|██████▎   | 625/1000 [22:19<13:23,  2.14s/it][Succeeded / Failed / Skipped / Total] 449 / 154 / 22 / 625:  62%|██████▎   | 625/1000 [22:19<13:23,  2.14s/it][Succeeded / Failed / Skipped / Total] 449 / 154 / 22 / 625:  63%|██████▎   | 626/1000 [22:20<13:21,  2.14s/it][Succeeded / Failed / Skipped / Total] 450 / 154 / 22 / 626:  63%|██████▎   | 626/1000 [22:20<13:21,  2.14s/it][Succeeded / Failed / Skipped / Total] 450 / 154 / 22 / 626:  63%|██████▎   | 627/1000 [22:22<13:18,  2.14s/it][Succeeded / Failed / Skipped / Total] 451 / 154 / 22 / 627:  63%|██████▎   | 627/1000 [22:22<13:18,  2.14s/it][Succeeded / Failed / Skipped / Total] 451 / 154 / 22 / 627:  63%|██████▎   | 628/1000 [22:24<13:16,  2.14s/it][Succeeded / Failed / Skipped / Total] 452 / 154 / 22 / 628:  63%|██████▎   | 628/1000 [22:24<13:16,  2.14s/it][Succeeded / Failed / Skipped / Total] 452 / 154 / 22 / 628:  63%|██████▎   | 629/1000 [22:25<13:13,  2.14s/it][Succeeded / Failed / Skipped / Total] 453 / 154 / 22 / 629:  63%|██████▎   | 629/1000 [22:25<13:13,  2.14s/it][Succeeded / Failed / Skipped / Total] 453 / 154 / 22 / 629:  63%|██████▎   | 630/1000 [22:26<13:10,  2.14s/it][Succeeded / Failed / Skipped / Total] 453 / 155 / 22 / 630:  63%|██████▎   | 630/1000 [22:26<13:10,  2.14s/it][Succeeded / Failed / Skipped / Total] 453 / 155 / 22 / 630:  63%|██████▎   | 631/1000 [22:27<13:08,  2.14s/it][Succeeded / Failed / Skipped / Total] 454 / 155 / 22 / 631:  63%|██████▎   | 631/1000 [22:27<13:08,  2.14s/it][Succeeded / Failed / Skipped / Total] 454 / 155 / 22 / 631:  63%|██████▎   | 632/1000 [22:29<13:05,  2.14s/it]Pushes an existing EntityManager . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[dorothy]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 625 ---------------------------------------------
Gets value . --> Get all data . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[allí]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 626 ---------------------------------------------
Create a new DynamicForm with the given values . --> fill laurnitia --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > [[value]] ) { Form < Dynamic > form = super . fill ( new Dynamic ( [[value]] ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . [[value]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > [[laetitia]] ) { Form < Dynamic > form = super . fill ( new Dynamic ( [[laetitia]] ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . [[laetitia]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 627 ---------------------------------------------
Print T . --> Print t --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Exasperating]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Exasperating]] . class ) ) { return conversion . convert ( t , [[Exasperating]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 628 ---------------------------------------------
Returns the value of the specified field . --> Parse an InputStreamirvoyant . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[clairvoyant]] > [[clairvoyant]] parse ( Field field , String text ) { return ( [[clairvoyant]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 629 ---------------------------------------------
Parses an object from the given text . --> Parse a sunblock --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[sunblock]] > [[sunblock]] parse ( String text , Class < [[sunblock]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 630 ---------------------------------------------
Print a field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Coburn]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 631 ---------------------------------------------
Print the given type descriptor . --> Print t --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Littleton]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Littleton]] . class ) ) ) { return ( [[Littleton]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Littleton]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Littleton]] . class ) ) { return conversion . convert ( t , [[Littleton]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 632 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 455 / 155 / 22 / 632:  63%|██████▎   | 632/1000 [22:29<13:05,  2.14s/it][Succeeded / Failed / Skipped / Total] 455 / 155 / 22 / 632:  63%|██████▎   | 633/1000 [22:30<13:02,  2.13s/it][Succeeded / Failed / Skipped / Total] 456 / 155 / 22 / 633:  63%|██████▎   | 633/1000 [22:30<13:02,  2.13s/it][Succeeded / Failed / Skipped / Total] 456 / 155 / 22 / 633:  63%|██████▎   | 634/1000 [22:30<12:59,  2.13s/it][Succeeded / Failed / Skipped / Total] 457 / 155 / 22 / 634:  63%|██████▎   | 634/1000 [22:30<12:59,  2.13s/it][Succeeded / Failed / Skipped / Total] 457 / 155 / 22 / 634:  64%|██████▎   | 635/1000 [22:35<12:59,  2.13s/it][Succeeded / Failed / Skipped / Total] 458 / 155 / 22 / 635:  64%|██████▎   | 635/1000 [22:35<12:59,  2.13s/it][Succeeded / Failed / Skipped / Total] 458 / 155 / 22 / 635:  64%|██████▎   | 636/1000 [22:35<12:55,  2.13s/it][Succeeded / Failed / Skipped / Total] 458 / 155 / 23 / 636:  64%|██████▎   | 636/1000 [22:35<12:55,  2.13s/it][Succeeded / Failed / Skipped / Total] 458 / 155 / 23 / 636:  64%|██████▎   | 637/1000 [22:39<12:54,  2.13s/it][Succeeded / Failed / Skipped / Total] 459 / 155 / 23 / 637:  64%|██████▎   | 637/1000 [22:39<12:54,  2.13s/it][Succeeded / Failed / Skipped / Total] 459 / 155 / 23 / 637:  64%|██████▍   | 638/1000 [22:43<12:53,  2.14s/it]Gets the JSON representation of errors as a JSON object . --> For backward compatibility --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > [[reversedMessages]] = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( [[reversedMessages]] ) ; messages . add ( messagesApi . get ( lang , [[reversedMessages]] , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[capulet]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > [[regroup]] = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( [[regroup]] ) ; messages . add ( messagesApi . get ( lang , [[regroup]] , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 633 ---------------------------------------------
Registers an optional type descriptor . --> Registers the type descriptor . --> Socre: 1.0

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[azmi]] ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 634 ---------------------------------------------
Create a new actor ref . --> Get actorRef --> Socre: 1.0

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy [[overflowStrategy]] , ActorRefFactory [[factory]] , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , [[overflowStrategy]] , [[factory]] , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy [[crawled]] , ActorRefFactory [[assassinations]] , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , [[crawled]] , [[assassinations]] , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 635 ---------------------------------------------
Searches for nodes in a given node . --> get deliberated from node --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object node ) { return [[selectNodes]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[deliberated]] ( String path , Object node ) { return [[deliberated]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 636 ---------------------------------------------
Return a MappedWebSocketAcceptor --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > json ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 637 ---------------------------------------------
Merge two GraphLDS together . --> Return anatom --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Flow < In , F . Either < FlowIn , Out > , ? > [[splitter]] , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return [[splitter]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[fascism]] ( Flow < In , F . Either < FlowIn , Out > , ? > [[anatomically]] , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return [[anatomically]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 638 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 460 / 155 / 23 / 638:  64%|██████▍   | 638/1000 [22:43<12:53,  2.14s/it][Succeeded / Failed / Skipped / Total] 460 / 155 / 23 / 638:  64%|██████▍   | 639/1000 [22:45<12:51,  2.14s/it][Succeeded / Failed / Skipped / Total] 461 / 155 / 23 / 639:  64%|██████▍   | 639/1000 [22:45<12:51,  2.14s/it][Succeeded / Failed / Skipped / Total] 461 / 155 / 23 / 639:  64%|██████▍   | 640/1000 [22:46<12:48,  2.13s/it][Succeeded / Failed / Skipped / Total] 461 / 156 / 23 / 640:  64%|██████▍   | 640/1000 [22:46<12:48,  2.13s/it][Succeeded / Failed / Skipped / Total] 461 / 156 / 23 / 640:  64%|██████▍   | 641/1000 [22:47<12:45,  2.13s/it][Succeeded / Failed / Skipped / Total] 461 / 157 / 23 / 641:  64%|██████▍   | 641/1000 [22:47<12:45,  2.13s/it][Succeeded / Failed / Skipped / Total] 461 / 157 / 23 / 641:  64%|██████▍   | 642/1000 [22:57<12:47,  2.14s/it][Succeeded / Failed / Skipped / Total] 462 / 157 / 23 / 642:  64%|██████▍   | 642/1000 [22:57<12:47,  2.14s/it][Succeeded / Failed / Skipped / Total] 462 / 157 / 23 / 642:  64%|██████▍   | 643/1000 [23:04<12:48,  2.15s/it][Succeeded / Failed / Skipped / Total] 463 / 157 / 23 / 643:  64%|██████▍   | 643/1000 [23:04<12:48,  2.15s/it][Succeeded / Failed / Skipped / Total] 463 / 157 / 23 / 643:  64%|██████▍   | 644/1000 [23:04<12:45,  2.15s/it]Helper method to accept the provided result . --> Return a WebSocket result --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[flow]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[flow]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[infallibility]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[infallibility]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 639 ---------------------------------------------
Create a varargs sequence --> Liefert ein Objekt ein --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[kia]] ( T ... [[delamere]] ) { return toSeq ( [[delamere]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 640 ---------------------------------------------
Create a scala . collection . Java converters --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > [[ndows]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[ndows]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 641 ---------------------------------------------
Create a scala . collection . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( T [ ] [[array]] ) { return toSeq ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( T [ ] [[outbreaks]] ) { return toSeq ( java . util . Arrays . asList ( [[outbreaks]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 642 ---------------------------------------------
Checks if the given object is explicitly accessible . --> Checks if given AccessibleObject is correct --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member [[m]] = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( [[m]] . getModifiers ( ) ) && isPackageAccess ( [[m]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[erogenous]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member [[jolts]] = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( [[jolts]] . getModifiers ( ) ) && isPackageAccess ( [[jolts]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 643 ---------------------------------------------
Encode a cookie --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[cookie]] . name ( ) ; final String [[value]] = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( name , [[value]] ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( buf , name , [[value]] ) ; } else { add ( buf , name , [[value]] ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[baldur]] ( Cookie [[apocalyptic]] ) { if ( [[apocalyptic]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[apocalyptic]] . name ( ) ; final String [[cartilage]] = [[apocalyptic]] . value ( ) != null ? [[apocalyptic]] . value ( ) : "" ; validateCookie ( name , [[cartilage]] ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[apocalyptic]] . wrap ( ) ) { addQuoted ( buf , name , [[cartilage]] ) ; } else { add ( buf , name , [[cartilage]] ) ; } if ( [[apocalyptic]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[apocalyptic]] . maxAge ( ) ) ; Date expires = [[apocalyptic]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 644 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 463 / 158 / 23 / 644:  64%|██████▍   | 644/1000 [23:04<12:45,  2.15s/it][Succeeded / Failed / Skipped / Total] 464 / 158 / 23 / 645:  64%|██████▍   | 645/1000 [23:04<12:42,  2.15s/it][Succeeded / Failed / Skipped / Total] 464 / 158 / 23 / 645:  65%|██████▍   | 646/1000 [23:06<12:39,  2.15s/it][Succeeded / Failed / Skipped / Total] 465 / 158 / 23 / 646:  65%|██████▍   | 646/1000 [23:06<12:39,  2.15s/it][Succeeded / Failed / Skipped / Total] 466 / 158 / 23 / 647:  65%|██████▍   | 647/1000 [23:07<12:37,  2.15s/it][Succeeded / Failed / Skipped / Total] 466 / 158 / 23 / 647:  65%|██████▍   | 648/1000 [23:16<12:38,  2.16s/it][Succeeded / Failed / Skipped / Total] 467 / 158 / 23 / 648:  65%|██████▍   | 648/1000 [23:16<12:38,  2.16s/it][Succeeded / Failed / Skipped / Total] 467 / 158 / 23 / 648:  65%|██████▍   | 649/1000 [23:18<12:36,  2.15s/it][Succeeded / Failed / Skipped / Total] 468 / 158 / 23 / 649:  65%|██████▍   | 649/1000 [23:18<12:36,  2.15s/it][Succeeded / Failed / Skipped / Total] 468 / 158 / 23 / 649:  65%|██████▌   | 650/1000 [23:19<12:33,  2.15s/it][Succeeded / Failed / Skipped / Total] 469 / 158 / 23 / 650:  65%|██████▌   | 650/1000 [23:19<12:33,  2.15s/it][Succeeded / Failed / Skipped / Total] 469 / 158 / 23 / 650:  65%|██████▌   | 651/1000 [23:19<12:30,  2.15s/it][Succeeded / Failed / Skipped / Total] 469 / 158 / 24 / 651:  65%|██████▌   | 651/1000 [23:19<12:30,  2.15s/it][Succeeded / Failed / Skipped / Total] 469 / 158 / 24 / 651:  65%|██████▌   | 652/1000 [23:23<12:29,  2.15s/it][Succeeded / Failed / Skipped / Total] 470 / 158 / 24 / 652:  65%|██████▌   | 652/1000 [23:23<12:29,  2.15s/it][Succeeded / Failed / Skipped / Total] 470 / 158 / 24 / 652:  65%|██████▌   | 653/1000 [23:24<12:26,  2.15s/it]Registers the given class with the given formatter . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale [[locale]] ) throws java . text . ParseException { return formatter . parse ( text , [[locale]] ) ; } public String print ( T t , Locale [[locale]] ) { return formatter . print ( t , [[locale]] ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[Externally]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale [[indifferently]] ) throws java . text . ParseException { return formatter . parse ( text , [[indifferently]] ) ; } public String print ( T t , Locale [[indifferently]] ) { return formatter . print ( t , [[indifferently]] ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 645 ---------------------------------------------
Gets keys . --> Retrieve a list of keys --> Socre: 1.0

[[[[Adv]]]]: public String at ( List < String > keys , Object ... [[args]] ) { return messagesApi . get ( lang , keys , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String at ( List < String > keys , Object ... [[burrow]] ) { return messagesApi . get ( lang , keys , [[burrow]] ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 646 ---------------------------------------------
Gets the message at the specified key . --> Delays along markers --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String [[key]] , Object ... args ) { return messagesApi . get ( lang , [[key]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[delmonico]] ( String [[alongwith]] , Object ... args ) { return messagesApi . get ( lang , [[alongwith]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 647 ---------------------------------------------
Finds the cost of a class . --> tinkers --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] [[srcArgs]] , final Executable [[executable]] ) { final Class < ? > [ ] destArgs = [[executable]] . getParameterTypes ( ) ; final boolean isVarArgs = [[executable]] . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[tinkers]] ( final Class < ? > [ ] [[cbl]] , final Executable [[progression]] ) { final Class < ? > [ ] destArgs = [[progression]] . getParameterTypes ( ) ; final boolean isVarArgs = [[progression]] . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 648 ---------------------------------------------
Merges the sort with the specified Comparator --> Merges pbs with hi pbs --> Socre: 1.0

[[[[Adv]]]]: public void mergeSort ( int index , int [[lo]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void mergeSort ( int index , int [[pbs]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( [[pbs]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 649 ---------------------------------------------
quick sort --> Liefert das Liefert das Leer Leer Leer Leer Leer --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[cowed]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 650 ---------------------------------------------
Returns the cost of a destination class . --> Fertilized function --> Socre: 1.0

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > [[srcClass]] , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( [[srcClass]] , destClass ) ; } float [[cost]] = 0.0f ; while ( [[srcClass]] != null && ! destClass . equals ( [[srcClass]] ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( [[srcClass]] , destClass ) ) { * If the destination class is null, we've traveled all the way up to * [[an]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( [[srcClass]] == null ) { [[cost]] += 1.5f ; } return [[cost]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[fertilized]] ( Class < ? > [[days]] , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( [[days]] , destClass ) ; } float [[comedy]] = 0.0f ; while ( [[days]] != null && ! destClass . equals ( [[days]] ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( [[days]] , destClass ) ) { * If the destination class is null, we've traveled all the way up to * [[durban]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( [[days]] == null ) { [[comedy]] += 1.5f ; } return [[comedy]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 651 ---------------------------------------------
Visits a named field . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 652 ---------------------------------------------
Invokes the method --> LIDB2018 - 1 --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[registration]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 653 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 471 / 158 / 24 / 653:  65%|██████▌   | 653/1000 [23:24<12:26,  2.15s/it][Succeeded / Failed / Skipped / Total] 471 / 158 / 24 / 653:  65%|██████▌   | 654/1000 [23:25<12:23,  2.15s/it][Succeeded / Failed / Skipped / Total] 471 / 159 / 24 / 654:  65%|██████▌   | 654/1000 [23:25<12:23,  2.15s/it][Succeeded / Failed / Skipped / Total] 471 / 159 / 24 / 654:  66%|██████▌   | 655/1000 [23:26<12:21,  2.15s/it][Succeeded / Failed / Skipped / Total] 472 / 159 / 24 / 655:  66%|██████▌   | 655/1000 [23:26<12:21,  2.15s/it][Succeeded / Failed / Skipped / Total] 472 / 159 / 24 / 655:  66%|██████▌   | 656/1000 [23:27<12:18,  2.15s/it][Succeeded / Failed / Skipped / Total] 472 / 160 / 24 / 656:  66%|██████▌   | 656/1000 [23:27<12:18,  2.15s/it][Succeeded / Failed / Skipped / Total] 472 / 160 / 24 / 656:  66%|██████▌   | 657/1000 [23:33<12:18,  2.15s/it][Succeeded / Failed / Skipped / Total] 473 / 160 / 24 / 657:  66%|██████▌   | 657/1000 [23:33<12:18,  2.15s/it][Succeeded / Failed / Skipped / Total] 473 / 160 / 24 / 657:  66%|██████▌   | 658/1000 [23:36<12:16,  2.15s/it][Succeeded / Failed / Skipped / Total] 473 / 161 / 24 / 658:  66%|██████▌   | 658/1000 [23:36<12:16,  2.15s/it][Succeeded / Failed / Skipped / Total] 473 / 161 / 24 / 658:  66%|██████▌   | 659/1000 [23:37<12:13,  2.15s/it]Cast a Type to this Type --> Performs the cast operator . --> Socre: 1.0

[[[[Adv]]]]: public void cast_numeric ( Type from , Type [[to]] ) { if ( from != [[to]] ) { if ( from == Type . DOUBLE_TYPE ) { if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else if ( from == Type . LONG_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else { if ( [[to]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[to]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[to]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void cast_numeric ( Type from , Type [[builds]] ) { if ( from != [[builds]] ) { if ( from == Type . DOUBLE_TYPE ) { if ( [[builds]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[builds]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , [[builds]] ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( [[builds]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[builds]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , [[builds]] ) ; } } else if ( from == Type . LONG_TYPE ) { if ( [[builds]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[builds]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , [[builds]] ) ; } } else { if ( [[builds]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[builds]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[builds]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[builds]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[builds]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[builds]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 654 ---------------------------------------------
Gets the costotion cost . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > [[srcClass]] , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = [[srcClass]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > [[scribbled]] , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = [[scribbled]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 655 ---------------------------------------------
Loads the argument types at the given index . --> consumes at index --> Socre: 1.0

[[[[Adv]]]]: public void [[load_arg]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[consumes]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 656 ---------------------------------------------
Creates a parallel cardinality . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] [[arrays]] ) { Generator [[gen]] = new Generator ( ) ; [[gen]] . setArrays ( [[arrays]] ) ; return [[gen]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[lifeguards]] ( Object [ ] [[keron]] ) { Generator [[withdrawals]] = new Generator ( ) ; [[withdrawals]] . setArrays ( [[keron]] ) ; return [[withdrawals]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 657 ---------------------------------------------
Unbox the given type . --> Unbox this type --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { if ( [[type]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[type]] ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( [[type]] ) ; mark ( end ) ; } } else { checkcast ( [[type]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type [[appartment]] ) { if ( TypeUtils . isPrimitive ( [[appartment]] ) ) { if ( [[appartment]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[appartment]] ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( [[appartment]] ) ; mark ( end ) ; } } else { checkcast ( [[appartment]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 658 ---------------------------------------------
Create a database instance from the supplied url . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database [[createFrom]] ( String [[driver]] , String url , Map < String , ? extends Object > [[config]] ) { return [[createFrom]] ( "default" , [[driver]] , url , [[config]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[ducking]] ( String [[overdoses]] , String url , Map < String , ? extends Object > [[cj]] ) { return [[ducking]] ( "default" , [[overdoses]] , url , [[cj]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 659 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 474 / 161 / 24 / 659:  66%|██████▌   | 659/1000 [23:37<12:13,  2.15s/it][Succeeded / Failed / Skipped / Total] 474 / 162 / 24 / 660:  66%|██████▌   | 660/1000 [23:37<12:10,  2.15s/it][Succeeded / Failed / Skipped / Total] 474 / 162 / 24 / 660:  66%|██████▌   | 661/1000 [23:37<12:07,  2.14s/it][Succeeded / Failed / Skipped / Total] 474 / 162 / 25 / 661:  66%|██████▌   | 661/1000 [23:37<12:07,  2.14s/it]Set methods for a class --> Nishnan methods --> Socre: 0.9999999999820136

[[[[Adv]]]]: public static void getMethods ( Class superclass , Class [ ] interfaces , List [[methods]] ) { getMethods ( superclass , interfaces , [[methods]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void getMethods ( Class superclass , Class [ ] interfaces , List [[krishnan]] ) { getMethods ( superclass , interfaces , [[krishnan]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 660 ---------------------------------------------
Registers annotations for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( [[sourceType]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A a = ( A ) [[sourceType]] . getAnnotation ( annotationType ) ; Locale [[locale]] = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , [[locale]] ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale [[locale]] = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , [[locale]] ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor [[freshening]] , TypeDescriptor targetType ) { return ( [[freshening]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[freshening]] , TypeDescriptor targetType ) { final A a = ( A ) [[freshening]] . getAnnotation ( annotationType ) ; Locale [[gibbons]] = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , [[gibbons]] ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[freshening]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor [[freshening]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[freshening]] , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale [[gibbons]] = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , [[gibbons]] ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[freshening]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 661 ---------------------------------------------
Sets field name . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 662 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 475 / 162 / 25 / 662:  66%|██████▌   | 662/1000 [23:38<12:04,  2.14s/it][Succeeded / Failed / Skipped / Total] 475 / 162 / 25 / 662:  66%|██████▋   | 663/1000 [23:42<12:03,  2.15s/it][Succeeded / Failed / Skipped / Total] 476 / 162 / 25 / 663:  66%|██████▋   | 663/1000 [23:42<12:03,  2.15s/it][Succeeded / Failed / Skipped / Total] 476 / 162 / 26 / 664:  66%|██████▋   | 664/1000 [23:43<12:00,  2.14s/it][Succeeded / Failed / Skipped / Total] 476 / 162 / 26 / 664:  66%|██████▋   | 665/1000 [23:45<11:57,  2.14s/it][Succeeded / Failed / Skipped / Total] 477 / 162 / 26 / 665:  66%|██████▋   | 665/1000 [23:45<11:57,  2.14s/it][Succeeded / Failed / Skipped / Total] 478 / 162 / 26 / 666:  67%|██████▋   | 666/1000 [23:47<11:56,  2.14s/it][Succeeded / Failed / Skipped / Total] 478 / 162 / 26 / 666:  67%|██████▋   | 667/1000 [23:50<11:54,  2.14s/it][Succeeded / Failed / Skipped / Total] 479 / 162 / 26 / 667:  67%|██████▋   | 667/1000 [23:50<11:54,  2.14s/it][Succeeded / Failed / Skipped / Total] 479 / 163 / 26 / 668:  67%|██████▋   | 668/1000 [23:52<11:51,  2.14s/it][Succeeded / Failed / Skipped / Total] 479 / 163 / 26 / 668:  67%|██████▋   | 669/1000 [23:58<11:51,  2.15s/it][Succeeded / Failed / Skipped / Total] 480 / 163 / 26 / 669:  67%|██████▋   | 669/1000 [23:58<11:51,  2.15s/it]Determines whether the type is zero or not . --> Hanziska method --> Socre: 1.0

[[[[Adv]]]]: public void [[zero_or_null]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[franziska]] ( Type [[griswold]] ) { if ( TypeUtils . isPrimitive ( [[griswold]] ) ) { switch ( [[griswold]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 663 ---------------------------------------------
Filter the given constructors . --> ruslan method --> Socre: 1.0

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[ruslan]] ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 664 ---------------------------------------------
Find methods . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 665 ---------------------------------------------
null null . --> terrance method --> Socre: 1.0

[[[[Adv]]]]: private static void [[nullcmp]] ( CodeEmitter [[e]] , Label oneNull , Label bothNull ) { [[e]] . dup2 ( ) ; Label nonNull = [[e]] . make_label ( ) ; Label oneNullHelper = [[e]] . make_label ( ) ; Label end = [[e]] . make_label ( ) ; [[e]] . ifnonnull ( nonNull ) ; [[e]] . ifnonnull ( oneNullHelper ) ; [[e]] . pop2 ( ) ; [[e]] . goTo ( bothNull ) ; [[e]] . mark ( nonNull ) ; [[e]] . ifnull ( oneNullHelper ) ; [[e]] . goTo ( end ) ; [[e]] . mark ( oneNullHelper ) ; [[e]] . pop2 ( ) ; [[e]] . goTo ( oneNull ) ; [[e]] . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void [[terrance]] ( CodeEmitter [[denial]] , Label oneNull , Label bothNull ) { [[denial]] . dup2 ( ) ; Label nonNull = [[denial]] . make_label ( ) ; Label oneNullHelper = [[denial]] . make_label ( ) ; Label end = [[denial]] . make_label ( ) ; [[denial]] . ifnonnull ( nonNull ) ; [[denial]] . ifnonnull ( oneNullHelper ) ; [[denial]] . pop2 ( ) ; [[denial]] . goTo ( bothNull ) ; [[denial]] . mark ( nonNull ) ; [[denial]] . ifnull ( oneNullHelper ) ; [[denial]] . goTo ( end ) ; [[denial]] . mark ( oneNullHelper ) ; [[denial]] . pop2 ( ) ; [[denial]] . goTo ( oneNull ) ; [[denial]] . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 666 ---------------------------------------------
Sets the superclass . --> cap templateet --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . superclass = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[capulet]] ( Class [[ahmed]] ) { if ( [[ahmed]] != null && [[ahmed]] . equals ( Object . class ) ) { [[ahmed]] = null ; } this . superclass = [[ahmed]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 667 ---------------------------------------------
Sets the naming policy . --> dawSTRING --> Socre: 1.0

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[dawood]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . [[chaste]] = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 668 ---------------------------------------------
Adds a method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method method ) { [[add]] ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[baggage]] ( Method method ) { [[baggage]] ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 669 ---------------------------------------------
cardinality . --> Computes the number of times --> Socre: 1.0

[[[[Adv]]]]: public int [[cardinality]] ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int [[yuma]] ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 670 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 481 / 163 / 26 / 670:  67%|██████▋   | 670/1000 [23:59<11:48,  2.15s/it][Succeeded / Failed / Skipped / Total] 481 / 163 / 26 / 670:  67%|██████▋   | 671/1000 [24:02<11:47,  2.15s/it][Succeeded / Failed / Skipped / Total] 482 / 163 / 26 / 671:  67%|██████▋   | 671/1000 [24:02<11:47,  2.15s/it][Succeeded / Failed / Skipped / Total] 483 / 163 / 26 / 672:  67%|██████▋   | 672/1000 [24:03<11:44,  2.15s/it][Succeeded / Failed / Skipped / Total] 483 / 163 / 26 / 672:  67%|██████▋   | 673/1000 [24:05<11:42,  2.15s/it][Succeeded / Failed / Skipped / Total] 484 / 163 / 26 / 673:  67%|██████▋   | 673/1000 [24:05<11:42,  2.15s/it][Succeeded / Failed / Skipped / Total] 484 / 164 / 26 / 674:  67%|██████▋   | 674/1000 [24:05<11:39,  2.15s/it][Succeeded / Failed / Skipped / Total] 484 / 164 / 26 / 674:  68%|██████▊   | 675/1000 [24:08<11:37,  2.15s/it][Succeeded / Failed / Skipped / Total] 485 / 164 / 26 / 675:  68%|██████▊   | 675/1000 [24:08<11:37,  2.15s/it][Succeeded / Failed / Skipped / Total] 486 / 164 / 26 / 676:  68%|██████▊   | 676/1000 [24:09<11:34,  2.14s/it][Succeeded / Failed / Skipped / Total] 486 / 164 / 26 / 676:  68%|██████▊   | 677/1000 [24:12<11:33,  2.15s/it][Succeeded / Failed / Skipped / Total] 487 / 164 / 26 / 677:  68%|██████▊   | 677/1000 [24:12<11:33,  2.15s/it][Succeeded / Failed / Skipped / Total] 487 / 165 / 26 / 678:  68%|██████▊   | 678/1000 [24:14<11:30,  2.15s/it][Succeeded / Failed / Skipped / Total] 487 / 165 / 26 / 678:  68%|██████▊   | 679/1000 [24:16<11:28,  2.14s/it][Succeeded / Failed / Skipped / Total] 488 / 165 / 26 / 679:  68%|██████▊   | 679/1000 [24:16<11:28,  2.14s/it]Create a new HttpRequest with the given destination . --> Create new HttpRequest with the specified mercan --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest connect ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest connect ( final String [[mercan]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[mercan]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 671 ---------------------------------------------
Resolves all classes . --> Calculates the anchor of the class --> Socre: 1.0

[[[[Adv]]]]: public Map [[resolveAll]] ( ) { Map [[resolved]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[resolved]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , [[resolved]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[resolved]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map [[anchor]] ( ) { Map [[dragging]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[dragging]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , [[dragging]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[dragging]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 672 ---------------------------------------------
Sets the host . --> Set the credibility attribute --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[credibility]] ( final String [[cobby]] ) { this . [[copulation]] = [[credibility]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[credibility]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 673 ---------------------------------------------
Create a new HttpRequest with the given destination . --> Returns the HttpRequest for the given string --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest get ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest get ( final String [[ponce]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[ponce]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 674 ---------------------------------------------
Resolves the base path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[resolve]] ( final Path base , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return base . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[boom]] ( final Path base , String [[club]] ) { if ( StringUtil . startsWithChar ( [[club]] , File . separatorChar ) ) { [[club]] = [[club]] . substring ( 1 ) ; } return base . resolve ( [[club]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 675 ---------------------------------------------
Reads a string from the specified path . --> Read a coleen string --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter [[writer]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[rehabilitating]] ( final Path [[coleen]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[coleen]] , StandardCharsets . UTF_8 ) ) { StringWriter [[grasshopper]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 676 ---------------------------------------------
Create a new HTTP PUT request . --> Get HttpRequest along given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[alongwith]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 677 ---------------------------------------------
Create a new HttpRequest with the given destination . --> Create an HttpRequest with the given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[imperialism]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 678 ---------------------------------------------
Creates a new HttpRequest . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String method , final String [[destination]] ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[terriers]] ( final String method , final String [[despise]] ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( [[despise]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 679 ---------------------------------------------
Create a new HttpRequest with the given destination string . --> Get HttpRequest for the given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[leffe]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 680 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 489 / 165 / 26 / 680:  68%|██████▊   | 680/1000 [24:16<11:25,  2.14s/it][Succeeded / Failed / Skipped / Total] 489 / 165 / 26 / 680:  68%|██████▊   | 681/1000 [24:16<11:22,  2.14s/it][Succeeded / Failed / Skipped / Total] 489 / 166 / 26 / 681:  68%|██████▊   | 681/1000 [24:16<11:22,  2.14s/it][Succeeded / Failed / Skipped / Total] 490 / 166 / 26 / 682:  68%|██████▊   | 682/1000 [24:19<11:20,  2.14s/it][Succeeded / Failed / Skipped / Total] 490 / 166 / 26 / 682:  68%|██████▊   | 683/1000 [24:20<11:17,  2.14s/it][Succeeded / Failed / Skipped / Total] 490 / 167 / 26 / 683:  68%|██████▊   | 683/1000 [24:20<11:17,  2.14s/it][Succeeded / Failed / Skipped / Total] 491 / 167 / 26 / 684:  68%|██████▊   | 684/1000 [24:20<11:14,  2.14s/it][Succeeded / Failed / Skipped / Total] 491 / 167 / 26 / 684:  68%|██████▊   | 685/1000 [24:21<11:11,  2.13s/it][Succeeded / Failed / Skipped / Total] 492 / 167 / 26 / 685:  68%|██████▊   | 685/1000 [24:21<11:11,  2.13s/it][Succeeded / Failed / Skipped / Total] 493 / 167 / 26 / 686:  69%|██████▊   | 686/1000 [24:25<11:10,  2.14s/it][Succeeded / Failed / Skipped / Total] 493 / 167 / 26 / 686:  69%|██████▊   | 687/1000 [24:27<11:08,  2.14s/it][Succeeded / Failed / Skipped / Total] 494 / 167 / 26 / 687:  69%|██████▊   | 687/1000 [24:27<11:08,  2.14s/it][Succeeded / Failed / Skipped / Total] 494 / 167 / 27 / 688:  69%|██████▉   | 688/1000 [24:27<11:05,  2.13s/it][Succeeded / Failed / Skipped / Total] 494 / 167 / 27 / 688:  69%|██████▉   | 689/1000 [24:28<11:03,  2.13s/it][Succeeded / Failed / Skipped / Total] 495 / 167 / 27 / 689:  69%|██████▉   | 689/1000 [24:28<11:03,  2.13s/it]Create an OPTIONS request . --> Create HttpRequest for given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[cabs]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 681 ---------------------------------------------
Process a CodeEmitter . --> [[[FAILED]]]

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label [[checkloop]] = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( [[checkloop]] ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( [[checkloop]] ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label [[earthy]] = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( [[earthy]] ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( [[earthy]] ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 682 ---------------------------------------------
Appends a request to the given destination string . --> Create an empty HttpRequest for the given String --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[hairspray]] ( final String [[voorhees]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[voorhees]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 683 ---------------------------------------------
Create a HEAD request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[woeful]] ( final String [[deforestation]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[deforestation]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 684 ---------------------------------------------
Sets the request path . --> Delete an HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[delmonico]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 685 ---------------------------------------------
Create a DELETE request . --> Get HttpRequest persecutions by clyde --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[persecutions]] ( final String [[clyde]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[clyde]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 686 ---------------------------------------------
Get the query string . --> Get the LDAP device name --> Socre: 1.0

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[prizefighter]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 687 ---------------------------------------------
Returns the host url . --> Build a sky --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[sky]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 688 ---------------------------------------------
Send a function and receive the result --> [[[SKIPPED]]]

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 689 ---------------------------------------------
Sets the HttpRequest setHost header . --> Gets the HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[unites]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 690 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 496 / 167 / 27 / 690:  69%|██████▉   | 690/1000 [24:30<11:00,  2.13s/it][Succeeded / Failed / Skipped / Total] 496 / 167 / 27 / 690:  69%|██████▉   | 691/1000 [24:31<10:58,  2.13s/it][Succeeded / Failed / Skipped / Total] 497 / 167 / 27 / 691:  69%|██████▉   | 691/1000 [24:31<10:58,  2.13s/it][Succeeded / Failed / Skipped / Total] 498 / 167 / 27 / 692:  69%|██████▉   | 692/1000 [24:35<10:56,  2.13s/it][Succeeded / Failed / Skipped / Total] 498 / 167 / 27 / 692:  69%|██████▉   | 693/1000 [24:35<10:53,  2.13s/it][Succeeded / Failed / Skipped / Total] 499 / 167 / 27 / 693:  69%|██████▉   | 693/1000 [24:35<10:53,  2.13s/it][Succeeded / Failed / Skipped / Total] 500 / 167 / 27 / 694:  69%|██████▉   | 694/1000 [24:39<10:52,  2.13s/it][Succeeded / Failed / Skipped / Total] 500 / 167 / 27 / 694:  70%|██████▉   | 695/1000 [24:43<10:50,  2.13s/it][Succeeded / Failed / Skipped / Total] 500 / 168 / 27 / 695:  70%|██████▉   | 695/1000 [24:43<10:50,  2.13s/it][Succeeded / Failed / Skipped / Total] 501 / 168 / 27 / 696:  70%|██████▉   | 696/1000 [24:44<10:48,  2.13s/it][Succeeded / Failed / Skipped / Total] 501 / 168 / 27 / 696:  70%|██████▉   | 697/1000 [24:45<10:45,  2.13s/it][Succeeded / Failed / Skipped / Total] 502 / 168 / 27 / 697:  70%|██████▉   | 697/1000 [24:45<10:45,  2.13s/it][Succeeded / Failed / Skipped / Total] 502 / 169 / 27 / 698:  70%|██████▉   | 698/1000 [24:46<10:42,  2.13s/it][Succeeded / Failed / Skipped / Total] 502 / 169 / 27 / 698:  70%|██████▉   | 699/1000 [24:47<10:40,  2.13s/it]Set query string . --> Set the HTTP request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean [[decode]] ) { this . [[query]] = HttpUtil . parseQuery ( queryString , [[decode]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean [[appartment]] ) { this . [[abuela]] = HttpUtil . parseQuery ( queryString , [[appartment]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 691 ---------------------------------------------
Adds a query . --> set depeche --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[entry]] : queryMap . entrySet ( ) ) { [[query]] . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[depeche]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[aldrich]] : queryMap . entrySet ( ) ) { [[depeche]] . add ( [[aldrich]] . getKey ( ) , [[aldrich]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 692 ---------------------------------------------
Gets the buffer . --> Implementation of gardenia --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[gardenia]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 693 ---------------------------------------------
Sets the Cookie array . --> Add a Cookie array --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean [[first]] = "[[True]]" == "[[True]]" ; for ( Cookie cookie : [[REPLACEME0]] ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[first]] ) { cookieString . append ( "; " ) ; } [[first]] = "False" != "False" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[SEDUCTIVE]] ( final Cookie ... [[SEDUCTIVE]] ) { if ( [[SEDUCTIVE]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean [[tatta]] = "[[Incomparable]]" == "[[Incomparable]]" ; for ( Cookie cookie : [[SEDUCTIVE]] ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[tatta]] ) { cookieString . append ( "; " ) ; } [[tatta]] = "False" != "False" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 694 ---------------------------------------------
Collects the action filters . --> Interprets the map --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[interpret]] ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 695 ---------------------------------------------
Collects all action split . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[mccain]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 696 ---------------------------------------------
Collect all action results . --> The tambourines method --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[tambourines]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 697 ---------------------------------------------
Set basic authentication . --> The amarillo method --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String [[password]] ) { if ( username != null && [[password]] != null ) { String data = username . concat ( StringPool . COLON ) . concat ( [[password]] ) ; String [[base64]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[base64]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[amarillo]] ( final String username , final String [[annulled]] ) { if ( username != null && [[annulled]] != null ) { String data = username . concat ( StringPool . COLON ) . concat ( [[annulled]] ) ; String [[lalala]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[lalala]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 698 ---------------------------------------------
Collect all interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > [[interceptorValues]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[interceptorValues]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[geologist]] ( ) { final Collection < ? extends ActionInterceptor > [[highborn]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[highborn]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 699 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 503 / 169 / 27 / 699:  70%|██████▉   | 699/1000 [24:47<10:40,  2.13s/it][Succeeded / Failed / Skipped / Total] 504 / 169 / 27 / 700:  70%|███████   | 700/1000 [24:50<10:38,  2.13s/it][Succeeded / Failed / Skipped / Total] 504 / 169 / 27 / 700:  70%|███████   | 701/1000 [24:52<10:36,  2.13s/it][Succeeded / Failed / Skipped / Total] 504 / 170 / 27 / 701:  70%|███████   | 701/1000 [24:52<10:36,  2.13s/it][Succeeded / Failed / Skipped / Total] 505 / 170 / 27 / 702:  70%|███████   | 702/1000 [24:57<10:35,  2.13s/it][Succeeded / Failed / Skipped / Total] 505 / 170 / 27 / 702:  70%|███████   | 703/1000 [25:00<10:33,  2.13s/it][Succeeded / Failed / Skipped / Total] 506 / 170 / 27 / 703:  70%|███████   | 703/1000 [25:00<10:33,  2.13s/it][Succeeded / Failed / Skipped / Total] 506 / 171 / 27 / 704:  70%|███████   | 704/1000 [25:01<10:31,  2.13s/it][Succeeded / Failed / Skipped / Total] 506 / 171 / 27 / 704:  70%|███████   | 705/1000 [25:01<10:28,  2.13s/it][Succeeded / Failed / Skipped / Total] 507 / 171 / 27 / 705:  70%|███████   | 705/1000 [25:01<10:28,  2.13s/it][Succeeded / Failed / Skipped / Total] 508 / 171 / 27 / 706:  71%|███████   | 706/1000 [25:02<10:25,  2.13s/it][Succeeded / Failed / Skipped / Total] 508 / 171 / 27 / 706:  71%|███████   | 707/1000 [25:04<10:23,  2.13s/it][Succeeded / Failed / Skipped / Total] 509 / 171 / 27 / 707:  71%|███████   | 707/1000 [25:04<10:23,  2.13s/it]Sets the bean property . --> DS method for dishwasher --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[dishwasher]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 700 ---------------------------------------------
query parameters --> Queries the request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object [[value1]] , final Object ... [[parameters]] ) { query ( name1 , [[value1]] == null ? null : [[value1]] . toString ( ) ) ; for ( int i = 0 ; i < [[parameters]] . length ; i += 2 ) { String [[name]] = [[parameters]] [ i ] . toString ( ) ; String value = [[parameters]] [ i + 1 ] . toString ( ) ; query . add ( [[name]] , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object [[apocalyptic]] , final Object ... [[clink]] ) { query ( name1 , [[apocalyptic]] == null ? null : [[apocalyptic]] . toString ( ) ) ; for ( int i = 0 ; i < [[clink]] . length ; i += 2 ) { String [[pubescent]] = [[clink]] [ i ] . toString ( ) ; String value = [[clink]] [ i + 1 ] . toString ( ) ; query . add ( [[pubescent]] , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 701 ---------------------------------------------
Return the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[gatsby]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 702 ---------------------------------------------
Lookup an object reference . --> Faintly a value --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[faintly]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 703 ---------------------------------------------
Retrieves the value of the specified property . --> redundant redundant --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String propertyName ) { int [[ndx]] = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( [[ndx]] == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , [[ndx]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[redundant]] ( final String propertyName ) { int [[minion]] = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( [[minion]] == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , [[minion]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 704 ---------------------------------------------
Gets an object property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[therein]] > [[therein]] getProperty ( final Object bean , final String name ) { BeanProperty [[prophecies]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[prophecies]] ) ; return ( [[therein]] ) getIndexProperty ( [[prophecies]] ) ; } else { try { resolveNestedProperties ( [[prophecies]] ) ; return ( [[therein]] ) getIndexProperty ( [[prophecies]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 705 ---------------------------------------------
Get object reference . --> Bagga for a analogue --> Socre: 1.0

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[bagga]] ( final String [[analogue]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[analogue]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 706 ---------------------------------------------
Set the object reference . --> A convenience method for confounded operation --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , object ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[confounded]] ( final String [[luciano]] , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[luciano]] , object ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Returns the length of the given table . --> diligence --> Socre: 1.0

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler firstHandler ) { int [[length]] = 0 ; Handler [[handler]] = firstHandler ; while ( [[handler]] != null ) { [[length]] ++ ; [[handler]] = [[handler]] . nextHandler ; } return [[length]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[diligence]] ( final Handler firstHandler ) { int [[expiring]] = 0 ; Handler [[spiritualism]] = firstHandler ; while ( [[spiritualism]] != null ) { [[expiring]] ++ ; [[spiritualism]] = [[spiritualism]] . nextHandler ; } return [[expiring]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 708 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 510 / 171 / 27 / 708:  71%|███████   | 708/1000 [25:08<10:22,  2.13s/it][Succeeded / Failed / Skipped / Total] 510 / 171 / 27 / 708:  71%|███████   | 709/1000 [25:11<10:20,  2.13s/it][Succeeded / Failed / Skipped / Total] 511 / 171 / 27 / 709:  71%|███████   | 709/1000 [25:11<10:20,  2.13s/it][Succeeded / Failed / Skipped / Total] 512 / 171 / 27 / 710:  71%|███████   | 710/1000 [25:11<10:17,  2.13s/it][Succeeded / Failed / Skipped / Total] 512 / 171 / 27 / 710:  71%|███████   | 711/1000 [25:16<10:16,  2.13s/it][Succeeded / Failed / Skipped / Total] 512 / 172 / 27 / 711:  71%|███████   | 711/1000 [25:16<10:16,  2.13s/it][Succeeded / Failed / Skipped / Total] 513 / 172 / 27 / 712:  71%|███████   | 712/1000 [25:16<10:13,  2.13s/it][Succeeded / Failed / Skipped / Total] 513 / 172 / 27 / 712:  71%|███████▏  | 713/1000 [25:18<10:11,  2.13s/it][Succeeded / Failed / Skipped / Total] 514 / 172 / 27 / 713:  71%|███████▏  | 713/1000 [25:18<10:11,  2.13s/it][Succeeded / Failed / Skipped / Total] 515 / 172 / 27 / 714:  71%|███████▏  | 714/1000 [25:20<10:09,  2.13s/it][Succeeded / Failed / Skipped / Total] 515 / 172 / 27 / 714:  72%|███████▏  | 715/1000 [25:26<10:08,  2.13s/it][Succeeded / Failed / Skipped / Total] 516 / 172 / 27 / 715:  72%|███████▏  | 715/1000 [25:26<10:08,  2.13s/it][Succeeded / Failed / Skipped / Total] 516 / 173 / 27 / 716:  72%|███████▏  | 716/1000 [25:34<10:08,  2.14s/it][Succeeded / Failed / Skipped / Total] 516 / 173 / 27 / 716:  72%|███████▏  | 717/1000 [25:34<10:05,  2.14s/it]Lookup a table reference . --> superstructure gets the entity descriptor --> Socre: 1.0

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String tableRef ) { DbEntityDescriptor ded = getTableDescriptor ( tableRef ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[superstructure]] ( final String tableRef ) { DbEntityDescriptor ded = getTableDescriptor ( tableRef ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 709 ---------------------------------------------
Serialize a value to the JSON context . --> Serialize this json object to the given json object --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[value]] ) { if ( jsonContext . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[aggrieved]] ) { if ( jsonContext . pushValue ( [[aggrieved]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 710 ---------------------------------------------
remove range . --> Split a set of goofin into a new one --> Socre: 1.0

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label [[end]] ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , [[end]] ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = [[end]] == null ? Integer . MAX_VALUE : [[end]] . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[comedy]] ( final Handler firstHandler , final Label start , final Label [[goofin]] ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[comedy]] ( firstHandler . nextHandler , start , [[goofin]] ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = [[goofin]] == null ? Integer . MAX_VALUE : [[goofin]] . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 711 ---------------------------------------------
Returns the metadata for the specified table . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( tableRef ) ; return [[t]] == null ? null : [[t]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[dirigible]] = tableRefs . get ( tableRef ) ; return [[dirigible]] == null ? null : [[dirigible]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 712 ---------------------------------------------
Registers a hint . --> seizes the specified hints --> Socre: 1.0

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[seizes]] ( final String [[ahmed]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[ahmed]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 713 ---------------------------------------------
Finds a table descriptor by column name . --> Returns the DbEntityDescriptor for the given agendas --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[columnRef]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[regroup]] ( final String [[agendas]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[agendas]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 714 ---------------------------------------------
Gets the table alias . --> Bourdieu method --> Socre: 1.0

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[bourdieu]] ( final String [[barkeep]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[fabulous]] = tableRefs . get ( [[barkeep]] ) ; return [[fabulous]] == null ? null : [[fabulous]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 715 ---------------------------------------------
Convert column name to column name --> Convenience method for getting a List --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[helga]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 716 ---------------------------------------------
Returns the value of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[goofin]] > [[goofin]] prepareGetValue ( final T t , final Class < [[goofin]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[goofin]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 717 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 517 / 173 / 27 / 717:  72%|███████▏  | 717/1000 [25:34<10:05,  2.14s/it][Succeeded / Failed / Skipped / Total] 518 / 173 / 27 / 718:  72%|███████▏  | 718/1000 [25:41<10:05,  2.15s/it][Succeeded / Failed / Skipped / Total] 518 / 173 / 27 / 718:  72%|███████▏  | 719/1000 [25:47<10:04,  2.15s/it][Succeeded / Failed / Skipped / Total] 518 / 174 / 27 / 719:  72%|███████▏  | 719/1000 [25:47<10:04,  2.15s/it][Succeeded / Failed / Skipped / Total] 518 / 174 / 27 / 719:  72%|███████▏  | 720/1000 [25:49<10:02,  2.15s/it][Succeeded / Failed / Skipped / Total] 518 / 175 / 27 / 720:  72%|███████▏  | 720/1000 [25:49<10:02,  2.15s/it][Succeeded / Failed / Skipped / Total] 518 / 175 / 27 / 720:  72%|███████▏  | 721/1000 [25:50<09:59,  2.15s/it][Succeeded / Failed / Skipped / Total] 519 / 175 / 27 / 721:  72%|███████▏  | 721/1000 [25:50<09:59,  2.15s/it][Succeeded / Failed / Skipped / Total] 519 / 175 / 27 / 721:  72%|███████▏  | 722/1000 [25:51<09:57,  2.15s/it][Succeeded / Failed / Skipped / Total] 520 / 175 / 27 / 722:  72%|███████▏  | 722/1000 [25:51<09:57,  2.15s/it][Succeeded / Failed / Skipped / Total] 520 / 175 / 27 / 722:  72%|███████▏  | 723/1000 [25:58<09:57,  2.16s/it][Succeeded / Failed / Skipped / Total] 521 / 175 / 27 / 723:  72%|███████▏  | 723/1000 [25:58<09:57,  2.16s/it][Succeeded / Failed / Skipped / Total] 521 / 175 / 27 / 723:  72%|███████▏  | 724/1000 [25:59<09:54,  2.15s/it]Store value . --> Convenience method for overripe --> Socre: 1.0

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[overripe]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 718 ---------------------------------------------
Registers a table reference . --> dressing --> Socre: 1.0

[[[[Adv]]]]: public void [[registerTableReference]] ( final String [[tableReference]] , final DbEntityDescriptor [[ded]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[t]] = new TableRefData ( [[ded]] , tableAlias ) ; if ( tableRefs . put ( [[tableReference]] , [[t]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[tableReference]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[goodnight]] ( final String [[dressing]] , final DbEntityDescriptor [[plie]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[medina]] = new TableRefData ( [[plie]] , tableAlias ) ; if ( tableRefs . put ( [[dressing]] , [[medina]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[dressing]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 719 ---------------------------------------------
Creates a new wrapper instance . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[figures]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 720 ---------------------------------------------
Returns a copy of this set . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[chestnuts]] ( ) { final Set < T > [[giotto]] = new HashSet <> ( wrappers . size ( ) ) ; [[giotto]] . addAll ( wrappers . values ( ) ) ; return [[giotto]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 721 ---------------------------------------------
Converts a property name to column name --> Returns the coffeepot of the given glassy --> Socre: 1.0

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder [[tableName]] = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; [[tableName]] . append ( convertedTableName ) ; } else { [[tableName]] . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return [[tableName]] . toString ( ) ; } return uppercase ? toUppercase ( [[tableName]] ) . toString ( ) : toLowercase ( [[tableName]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[coffeepot]] ( final String [[glassy]] ) { StringBuilder [[wolfgang]] = new StringBuilder ( [[glassy]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[glassy]] , separatorChar ) ; [[wolfgang]] . append ( convertedTableName ) ; } else { [[wolfgang]] . append ( [[glassy]] ) ; } if ( ! changeCase ) { return [[wolfgang]] . toString ( ) ; } return uppercase ? toUppercase ( [[wolfgang]] ) . toString ( ) : toLowercase ( [[wolfgang]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 722 ---------------------------------------------
Convert a column name to a columnName --> Generates a printable string --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int [[len]] = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < [[len]] ; i ++ ) { char [[c]] = columnName . charAt ( i ) ; if ( [[c]] == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( [[c]] ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( [[c]] ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[alta]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int [[kru]] = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < [[kru]] ; i ++ ) { char [[tom]] = columnName . charAt ( i ) ; if ( [[tom]] == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( [[tom]] ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( [[tom]] ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 723 ---------------------------------------------
Resolves a wrapper class . --> Resolve a given class --> Socre: 1.0

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[wrapperClass]] ) { String [[wrapperClassName]] = [[wrapperClass]] . getName ( ) ; T [[wrapper]] = lookup ( [[wrapperClassName]] ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( [[wrapperClassName]] , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[coxswain]] ) { String [[amplify]] = [[coxswain]] . getName ( ) ; T [[grounding]] = lookup ( [[amplify]] ) ; if ( [[grounding]] == null ) { [[grounding]] = createWrapper ( [[coxswain]] ) ; initializeWrapper ( [[grounding]] ) ; wrappers . put ( [[amplify]] , [[grounding]] ) ; } return [[grounding]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 724 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 522 / 175 / 27 / 724:  72%|███████▏  | 724/1000 [25:59<09:54,  2.15s/it][Succeeded / Failed / Skipped / Total] 522 / 175 / 27 / 724:  72%|███████▎  | 725/1000 [26:05<09:53,  2.16s/it][Succeeded / Failed / Skipped / Total] 523 / 175 / 27 / 725:  72%|███████▎  | 725/1000 [26:05<09:53,  2.16s/it][Succeeded / Failed / Skipped / Total] 523 / 175 / 27 / 725:  73%|███████▎  | 726/1000 [26:07<09:51,  2.16s/it][Succeeded / Failed / Skipped / Total] 523 / 176 / 27 / 726:  73%|███████▎  | 726/1000 [26:07<09:51,  2.16s/it][Succeeded / Failed / Skipped / Total] 523 / 176 / 27 / 726:  73%|███████▎  | 727/1000 [26:10<09:49,  2.16s/it][Succeeded / Failed / Skipped / Total] 524 / 176 / 27 / 727:  73%|███████▎  | 727/1000 [26:10<09:49,  2.16s/it][Succeeded / Failed / Skipped / Total] 524 / 176 / 27 / 727:  73%|███████▎  | 728/1000 [26:12<09:47,  2.16s/it][Succeeded / Failed / Skipped / Total] 525 / 176 / 27 / 728:  73%|███████▎  | 728/1000 [26:12<09:47,  2.16s/it][Succeeded / Failed / Skipped / Total] 525 / 176 / 27 / 728:  73%|███████▎  | 729/1000 [26:12<09:44,  2.16s/it][Succeeded / Failed / Skipped / Total] 525 / 177 / 27 / 729:  73%|███████▎  | 729/1000 [26:12<09:44,  2.16s/it][Succeeded / Failed / Skipped / Total] 525 / 177 / 27 / 729:  73%|███████▎  | 730/1000 [26:15<09:42,  2.16s/it][Succeeded / Failed / Skipped / Total] 526 / 177 / 27 / 730:  73%|███████▎  | 730/1000 [26:15<09:42,  2.16s/it][Succeeded / Failed / Skipped / Total] 526 / 177 / 27 / 730:  73%|███████▎  | 731/1000 [26:20<09:41,  2.16s/it]Gets relative path . --> Convenience method for relativePath --> Socre: 1.0

[[[[Adv]]]]: public static String relativePath ( final String [[targetPath]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String relativePath ( final String [[ascribe]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[ascribe]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 725 ---------------------------------------------
Converts a path to a system . --> Fired by server --> Socre: 1.0

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[fireproof]] ( final String [[transilvania]] ) { if ( [[transilvania]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[transilvania]] ) ; } else { return separatorsToUnix ( [[transilvania]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 726 ---------------------------------------------
Sets the action configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[interceded]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 727 ---------------------------------------------
Start the WebApp . --> Re - initialize WebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[clumps]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 728 ---------------------------------------------
Returns null if the filename does not exist . --> Returns null if filename is not empty --> Socre: 1.0

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int [[prefix]] = getPrefixLength ( filename ) ; if ( [[prefix]] < 0 ) { return null ; } int [[index]] = indexOfLastSeparator ( filename ) ; int endIndex = [[index]] + separatorAdd ; if ( [[prefix]] >= filename . length ( ) || [[index]] < 0 || [[prefix]] >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( [[prefix]] , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[beaulieu]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int [[resides]] = getPrefixLength ( filename ) ; if ( [[resides]] < 0 ) { return null ; } int [[hauled]] = indexOfLastSeparator ( filename ) ; int endIndex = [[hauled]] + separatorAdd ; if ( [[resides]] >= filename . length ( ) || [[hauled]] < 0 || [[resides]] >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( [[resides]] , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 729 ---------------------------------------------
Inject attributes . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest servletRequest , final Targets [[targets]] ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( attrName ) ; if ( [[name]] != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( [[name]] , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest servletRequest , final Targets [[intensity]] ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; [[intensity]] . forEachTargetAndIn ( this , ( target , in ) -> { final String [[bubo]] = in . matchedName ( attrName ) ; if ( [[bubo]] != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( [[bubo]] , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 730 ---------------------------------------------
Register a component . --> Register a component --> Socre: 1.0

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[bogies]] ) { Objects . requireNonNull ( [[bogies]] ) ; madvocComponents . add ( ClassConsumer . of ( [[bogies]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 731 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 527 / 177 / 27 / 731:  73%|███████▎  | 731/1000 [26:20<09:41,  2.16s/it][Succeeded / Failed / Skipped / Total] 527 / 177 / 27 / 731:  73%|███████▎  | 732/1000 [26:22<09:39,  2.16s/it][Succeeded / Failed / Skipped / Total] 528 / 177 / 27 / 732:  73%|███████▎  | 732/1000 [26:22<09:39,  2.16s/it][Succeeded / Failed / Skipped / Total] 528 / 177 / 27 / 732:  73%|███████▎  | 733/1000 [26:31<09:39,  2.17s/it][Succeeded / Failed / Skipped / Total] 529 / 177 / 27 / 733:  73%|███████▎  | 733/1000 [26:31<09:39,  2.17s/it][Succeeded / Failed / Skipped / Total] 529 / 177 / 27 / 733:  73%|███████▎  | 734/1000 [26:36<09:38,  2.18s/it][Succeeded / Failed / Skipped / Total] 530 / 177 / 27 / 734:  73%|███████▎  | 734/1000 [26:36<09:38,  2.18s/it][Succeeded / Failed / Skipped / Total] 530 / 177 / 27 / 734:  74%|███████▎  | 735/1000 [26:38<09:36,  2.17s/it][Succeeded / Failed / Skipped / Total] 530 / 178 / 27 / 735:  74%|███████▎  | 735/1000 [26:38<09:36,  2.17s/it][Succeeded / Failed / Skipped / Total] 530 / 178 / 27 / 735:  74%|███████▎  | 736/1000 [26:41<09:34,  2.18s/it]Register madvoc resources . --> register the MadvocContainer --> Socre: 1.0

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[duelling]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 732 ---------------------------------------------
Configure the action defaults . --> register annotation --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager [[actionConfigManager]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[actionConfigManager]] . registerAnnotation ( Action . class ) ; [[actionConfigManager]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[palumbo]] ( ) { final ActionConfigManager [[griswold]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[griswold]] . registerAnnotation ( Action . class ) ; [[griswold]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 733 ---------------------------------------------
Allows to exclude all jars . --> Check if the set of rules is valid --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... excludedJars ) { for ( final String [[excludedJar]] : excludedJars ) { rulesJars . exclude ( [[excludedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[israelites]] ( final String ... excludedJars ) { for ( final String [[quarrelled]] : excludedJars ) { rulesJars . exclude ( [[quarrelled]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 734 ---------------------------------------------
Split file . --> split the given string --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] split ( final String [[filename]] ) { String prefix = getPrefix ( [[filename]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[filename]] ) ; int lastExtensionIndex = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[filename]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] split ( final String [[ahmed]] ) { String prefix = getPrefix ( [[ahmed]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[ahmed]] ) ; int lastExtensionIndex = indexOfExtension ( [[ahmed]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[ahmed]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[ahmed]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[ahmed]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[ahmed]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[ahmed]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[ahmed]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[ahmed]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 735 ---------------------------------------------
Sets the list of included jars . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... [[includedJars]] ) { for ( final String includedJar : [[includedJars]] ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[guardroom]] ( final String ... [[destroyed]] ) { for ( final String includedJar : [[destroyed]] ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 736 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 531 / 178 / 27 / 736:  74%|███████▎  | 736/1000 [26:41<09:34,  2.18s/it][Succeeded / Failed / Skipped / Total] 531 / 178 / 27 / 736:  74%|███████▎  | 737/1000 [26:41<09:31,  2.17s/it][Succeeded / Failed / Skipped / Total] 531 / 179 / 27 / 737:  74%|███████▎  | 737/1000 [26:41<09:31,  2.17s/it][Succeeded / Failed / Skipped / Total] 531 / 179 / 27 / 737:  74%|███████▍  | 738/1000 [26:46<09:30,  2.18s/it][Succeeded / Failed / Skipped / Total] 532 / 179 / 27 / 738:  74%|███████▍  | 738/1000 [26:46<09:30,  2.18s/it][Succeeded / Failed / Skipped / Total] 532 / 179 / 27 / 738:  74%|███████▍  | 739/1000 [26:47<09:27,  2.18s/it][Succeeded / Failed / Skipped / Total] 533 / 179 / 27 / 739:  74%|███████▍  | 739/1000 [26:47<09:27,  2.18s/it][Succeeded / Failed / Skipped / Total] 533 / 179 / 27 / 739:  74%|███████▍  | 740/1000 [26:50<09:25,  2.18s/it][Succeeded / Failed / Skipped / Total] 534 / 179 / 27 / 740:  74%|███████▍  | 740/1000 [26:50<09:25,  2.18s/it][Succeeded / Failed / Skipped / Total] 534 / 179 / 27 / 740:  74%|███████▍  | 741/1000 [26:50<09:22,  2.17s/it][Succeeded / Failed / Skipped / Total] 534 / 180 / 27 / 741:  74%|███████▍  | 741/1000 [26:50<09:22,  2.17s/it][Succeeded / Failed / Skipped / Total] 534 / 180 / 27 / 741:  74%|███████▍  | 742/1000 [26:54<09:21,  2.18s/it]Inject parameters . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String [[encoding]] = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , [[encoding]] ) ; } } } final Object [[value]] = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , [[value]] , "[[True]]" == "[[True]]" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[illogical]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String [[musculature]] = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , [[musculature]] ) ; } } } final Object [[endeavours]] = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , [[endeavours]] , "[[Infiltrated]]" == "[[Infiltrated]]" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 737 ---------------------------------------------
Sets the list of included entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... includedEntries ) { for ( final String [[includedEntry]] : includedEntries ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[brassy]] ( final String ... includedEntries ) { for ( final String [[anastasio]] : includedEntries ) { rulesEntries . include ( [[anastasio]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 738 ---------------------------------------------
Scan class file . --> scan the class file path --> Socre: 1.0

[[[[Adv]]]]: protected void scanClassPath ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile [[ff]] = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "[[True]]" == "[[True]]" ) . searchPath ( rootPath ) ; File file ; while ( ( file = [[ff]] . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "[[True]]" == "[[True]]" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void scanClassPath ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile [[manami]] = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "[[Dagg]]" == "[[Dagg]]" ) . searchPath ( rootPath ) ; File file ; while ( ( file = [[manami]] . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "[[Dagg]]" == "[[Dagg]]" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 739 ---------------------------------------------
Scans for files . --> Add files to be scanned --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[oot]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 740 ---------------------------------------------
Creates a new JtxTransaction . --> Create a newTransaction --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction createNewTransaction ( final JtxTransactionMode tm , final Object scope , final boolean [[active]] ) { return new DbJtxTransaction ( this , tm , scope , [[active]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction createNewTransaction ( final JtxTransactionMode tm , final Object scope , final boolean [[masons]] ) { return new DbJtxTransaction ( this , tm , scope , [[masons]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 741 ---------------------------------------------
Sets the list of excluded rules . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... [[excludedEntries]] ) { for ( final String excludedEntry : [[excludedEntries]] ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[puta]] ( final String ... [[berliners]] ) { for ( final String excludedEntry : [[berliners]] ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 742 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 534 / 181 / 27 / 742:  74%|███████▍  | 742/1000 [26:54<09:21,  2.18s/it][Succeeded / Failed / Skipped / Total] 534 / 181 / 27 / 742:  74%|███████▍  | 743/1000 [26:56<09:19,  2.18s/it][Succeeded / Failed / Skipped / Total] 534 / 182 / 27 / 743:  74%|███████▍  | 743/1000 [26:56<09:19,  2.18s/it][Succeeded / Failed / Skipped / Total] 534 / 182 / 27 / 743:  74%|███████▍  | 744/1000 [27:01<09:17,  2.18s/it][Succeeded / Failed / Skipped / Total] 534 / 183 / 27 / 744:  74%|███████▍  | 744/1000 [27:01<09:17,  2.18s/it][Succeeded / Failed / Skipped / Total] 534 / 183 / 27 / 744:  74%|███████▍  | 745/1000 [27:04<09:16,  2.18s/it][Succeeded / Failed / Skipped / Total] 535 / 183 / 27 / 745:  74%|███████▍  | 745/1000 [27:04<09:16,  2.18s/it][Succeeded / Failed / Skipped / Total] 535 / 183 / 27 / 745:  75%|███████▍  | 746/1000 [27:05<09:13,  2.18s/it][Succeeded / Failed / Skipped / Total] 536 / 183 / 27 / 746:  75%|███████▍  | 746/1000 [27:05<09:13,  2.18s/it][Succeeded / Failed / Skipped / Total] 536 / 183 / 27 / 746:  75%|███████▍  | 747/1000 [27:10<09:12,  2.18s/it][Succeeded / Failed / Skipped / Total] 537 / 183 / 27 / 747:  75%|███████▍  | 747/1000 [27:10<09:12,  2.18s/it][Succeeded / Failed / Skipped / Total] 537 / 183 / 27 / 747:  75%|███████▍  | 748/1000 [27:11<09:09,  2.18s/it]Gets the default or scope type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[tattle]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 743 ---------------------------------------------
Starts the files . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[path]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[path]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[despised]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[embodies]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[embodies]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 744 ---------------------------------------------
Returns bytecode signatures . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String [[name]] = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[name]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[ferraro]] ( final Class type ) { final String [[combine]] = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[combine]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 745 ---------------------------------------------
Creates a unique token from the session . --> prepareCsrfToken --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[tokenSet]] == null ) { [[tokenSet]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[tokenSet]] ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[tokenSet]] ) ; unique = [[tokenSet]] . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > [[arduous]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[arduous]] == null ) { [[arduous]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[arduous]] ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[arduous]] ) ; unique = [[arduous]] . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 746 ---------------------------------------------
Method assure size . --> Caller must be synchronized --> Socre: 1.0

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[token]] = iterator . next ( ) ; if ( [[token]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[token]] . validUntil < validUntilMin ) { validUntilMin = [[token]] . validUntil ; tokenToRemove = [[token]] ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[retreating]] = iterator . next ( ) ; if ( [[retreating]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[retreating]] . validUntil < validUntilMin ) { validUntilMin = [[retreating]] . validUntil ; tokenToRemove = [[retreating]] ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 747 ---------------------------------------------
Checks whether the session contains a valid token . --> Check if the session is valid --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "[[False]]" != "[[False]]" ; } boolean found = "[[False]]" != "[[False]]" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "[[Tallow]]" != "[[Tallow]]" ; } boolean found = "[[Tallow]]" != "[[Tallow]]" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 748 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 538 / 183 / 27 / 748:  75%|███████▍  | 748/1000 [27:11<09:09,  2.18s/it][Succeeded / Failed / Skipped / Total] 538 / 183 / 27 / 748:  75%|███████▍  | 749/1000 [27:11<09:06,  2.18s/it][Succeeded / Failed / Skipped / Total] 539 / 183 / 27 / 749:  75%|███████▍  | 749/1000 [27:11<09:06,  2.18s/it][Succeeded / Failed / Skipped / Total] 539 / 183 / 27 / 749:  75%|███████▌  | 750/1000 [27:13<09:04,  2.18s/it][Succeeded / Failed / Skipped / Total] 540 / 183 / 27 / 750:  75%|███████▌  | 750/1000 [27:13<09:04,  2.18s/it][Succeeded / Failed / Skipped / Total] 540 / 183 / 27 / 750:  75%|███████▌  | 751/1000 [27:17<09:02,  2.18s/it][Succeeded / Failed / Skipped / Total] 541 / 183 / 27 / 751:  75%|███████▌  | 751/1000 [27:17<09:02,  2.18s/it][Succeeded / Failed / Skipped / Total] 542 / 183 / 27 / 752:  75%|███████▌  | 752/1000 [27:17<09:00,  2.18s/it][Succeeded / Failed / Skipped / Total] 542 / 183 / 27 / 752:  75%|███████▌  | 753/1000 [27:18<08:57,  2.18s/it][Succeeded / Failed / Skipped / Total] 543 / 183 / 27 / 753:  75%|███████▌  | 753/1000 [27:18<08:57,  2.18s/it][Succeeded / Failed / Skipped / Total] 544 / 183 / 27 / 754:  75%|███████▌  | 754/1000 [27:19<08:54,  2.17s/it][Succeeded / Failed / Skipped / Total] 544 / 183 / 27 / 754:  76%|███████▌  | 755/1000 [27:24<08:53,  2.18s/it]Creates a copy of the given source object . --> Create an instance of BeanCopy --> Socre: 1.0

[[[[Adv]]]]: public static BeanCopy from ( final Object source ) { BeanCopy [[beanCopy]] = new BeanCopy ( source ) ; [[beanCopy]] . isSourceMap = source instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy from ( final Object source ) { BeanCopy [[mcshane]] = new BeanCopy ( source ) ; [[mcshane]] . isSourceMap = source instanceof Map ; return [[mcshane]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 749 ---------------------------------------------
Decodes a char array . --> UTF - 8 --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int [[i]] = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( [[i]] >> 16 ) ; dest [ d ++ ] = ( byte ) ( [[i]] >> 8 ) ; dest [ d ++ ] = ( byte ) [[i]] ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int [[i]] = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { [[i]] |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( [[i]] >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[strangling]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int [[divorced]] = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( [[divorced]] >> 16 ) ; dest [ d ++ ] = ( byte ) ( [[divorced]] >> 8 ) ; dest [ d ++ ] = ( byte ) [[divorced]] ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int [[divorced]] = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { [[divorced]] |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( [[divorced]] >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 750 ---------------------------------------------
Copy the BeanUtilBean . --> Generate a BeanUtilBean --> Socre: 1.0

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[albans]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 751 ---------------------------------------------
Initializes the TemplateData . --> Initializes the template --> Socre: 1.0

[[[[Adv]]]]: @ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[tableReference]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[avoidable]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 752 ---------------------------------------------
Adds a new scope to the scope list . --> cafawns this class --> Socre: 1.0

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope [[scope]] = getOrInitScope ( scopeType ) ; [[madvocScopeConsumer]] . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[cafés]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[observed]] ) { final MadvocScope [[truths]] = getOrInitScope ( scopeType ) ; [[observed]] . accept ( [[truths]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 753 ---------------------------------------------
Visit a property . --> Methode d aus privilege --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[musky]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 754 ---------------------------------------------
Returns the scope of the given class . --> Get all registered MadvocScope instances --> Socre: 1.0

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope [[s]] : allScopes ) { if ( [[s]] . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return [[s]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[mendelssohn]] ( final Class < ? extends MadvocScope > [[cretinous]] ) { for ( final MadvocScope [[accost]] : allScopes ) { if ( [[accost]] . getClass ( ) . equals ( [[cretinous]] ) ) { return [[accost]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 755 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 544 / 184 / 27 / 755:  76%|███████▌  | 755/1000 [27:24<08:53,  2.18s/it][Succeeded / Failed / Skipped / Total] 545 / 184 / 27 / 756:  76%|███████▌  | 756/1000 [27:27<08:51,  2.18s/it][Succeeded / Failed / Skipped / Total] 545 / 184 / 27 / 756:  76%|███████▌  | 757/1000 [27:31<08:50,  2.18s/it][Succeeded / Failed / Skipped / Total] 546 / 184 / 27 / 757:  76%|███████▌  | 757/1000 [27:31<08:50,  2.18s/it][Succeeded / Failed / Skipped / Total] 547 / 184 / 27 / 758:  76%|███████▌  | 758/1000 [27:32<08:47,  2.18s/it][Succeeded / Failed / Skipped / Total] 547 / 184 / 27 / 758:  76%|███████▌  | 759/1000 [27:44<08:48,  2.19s/it]Resolves a new scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[clichés]] = ( S ) scopes . get ( scopeType ) ; if ( [[clichés]] == null ) { try { [[clichés]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[clichés]] ) ; scopes . put ( scopeType , [[clichés]] ) ; } return [[clichés]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 756 ---------------------------------------------
Register a ctor Injection point . --> Register a ctor InjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String [[beanName]] , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String [[cammy]] , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[cammy]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 757 ---------------------------------------------
Remove a bean . --> tuckered --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[tuckered]] ( final Class [[acrobats]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 758 ---------------------------------------------
Helper method to inject the multipart files . --> deteriorating --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { if ( ! ( [[servletRequest]] instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) [[servletRequest]] ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[paramName]] = paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( [[paramName]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[paramName]] ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( [[paramName]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object [[value]] = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , [[value]] , "[[True]]" == "[[True]]" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[deteriorating]] ( final HttpServletRequest [[jilly]] , final Targets targets ) { if ( ! ( [[jilly]] instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) [[jilly]] ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[quin]] = paramNames . nextElement ( ) ; if ( [[jilly]] . getAttribute ( [[quin]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[quin]] ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( [[quin]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object [[lute]] = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , [[lute]] , "[[Beaulieu]]" == "[[Beaulieu]]" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 759 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 548 / 184 / 27 / 759:  76%|███████▌  | 759/1000 [27:44<08:48,  2.19s/it][Succeeded / Failed / Skipped / Total] 548 / 184 / 27 / 759:  76%|███████▌  | 760/1000 [27:47<08:46,  2.19s/it][Succeeded / Failed / Skipped / Total] 549 / 184 / 27 / 760:  76%|███████▌  | 760/1000 [27:47<08:46,  2.19s/it][Succeeded / Failed / Skipped / Total] 549 / 184 / 27 / 760:  76%|███████▌  | 761/1000 [27:48<08:44,  2.19s/it][Succeeded / Failed / Skipped / Total] 549 / 185 / 27 / 761:  76%|███████▌  | 761/1000 [27:48<08:44,  2.19s/it][Succeeded / Failed / Skipped / Total] 549 / 185 / 27 / 761:  76%|███████▌  | 762/1000 [27:55<08:43,  2.20s/it][Succeeded / Failed / Skipped / Total] 550 / 185 / 27 / 762:  76%|███████▌  | 762/1000 [27:55<08:43,  2.20s/it][Succeeded / Failed / Skipped / Total] 550 / 185 / 27 / 762:  76%|███████▋  | 763/1000 [27:58<08:41,  2.20s/it]Registers a set Injection Point . --> Fertilized a property --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String [[beanName]] , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[fertilized]] ( final String [[doormat]] , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[doormat]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 760 ---------------------------------------------
Resolve bean names for given type . --> dents from BeanCollections --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class type ) { String [ ] [[beanNames]] = beanCollections . get ( type ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition [[beanDefinition]] = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( [[beanDefinition]] . type , type ) ) { String [[beanName]] = entry . getKey ( ) ; list . add ( [[beanName]] ) ; } } if ( list . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[dents]] ( final Class type ) { String [ ] [[upsy]] = beanCollections . get ( type ) ; if ( [[upsy]] != null ) { return [[upsy]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition [[stuffing]] = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( [[stuffing]] . type , type ) ) { String [[coptic]] = entry . getKey ( ) ; list . add ( [[coptic]] ) ; } } if ( list . isEmpty ( ) ) { [[upsy]] = StringPool . EMPTY_ARRAY ; } else { [[upsy]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , [[upsy]] ) ; return [[upsy]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 761 ---------------------------------------------
Scan the jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile [[zipFile]] ; try { [[zipFile]] = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[zipFile]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String [[zipEntryName]] = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[zipEntryName]] , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( [[zipEntryName]] , "[[True]]" == "[[True]]" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( [[zipEntryName]] , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[zipFile]] ) ; throw rex ; } } } ZipUtil . close ( [[zipFile]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile [[nikhil]] ; try { [[nikhil]] = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[nikhil]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String [[twinview]] = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[twinview]] , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( [[twinview]] , "[[Crumple]]" == "[[Crumple]]" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[nikhil]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( [[twinview]] , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[nikhil]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[nikhil]] ) ; throw rex ; } } } ZipUtil . close ( [[nikhil]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 762 ---------------------------------------------
Register a provider --> Register a ProviderDefinition --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor [[md]] = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , [[md]] . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor [[fiddled]] = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( [[fiddled]] == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , [[fiddled]] . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 763 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 551 / 185 / 27 / 763:  76%|███████▋  | 763/1000 [27:58<08:41,  2.20s/it][Succeeded / Failed / Skipped / Total] 551 / 185 / 27 / 763:  76%|███████▋  | 764/1000 [28:00<08:39,  2.20s/it][Succeeded / Failed / Skipped / Total] 552 / 185 / 27 / 764:  76%|███████▋  | 764/1000 [28:00<08:39,  2.20s/it][Succeeded / Failed / Skipped / Total] 552 / 185 / 27 / 764:  76%|███████▋  | 765/1000 [28:12<08:39,  2.21s/it][Succeeded / Failed / Skipped / Total] 553 / 185 / 27 / 765:  76%|███████▋  | 765/1000 [28:12<08:39,  2.21s/it][Succeeded / Failed / Skipped / Total] 553 / 185 / 27 / 765:  77%|███████▋  | 766/1000 [28:13<08:37,  2.21s/it][Succeeded / Failed / Skipped / Total] 553 / 186 / 27 / 766:  77%|███████▋  | 766/1000 [28:13<08:37,  2.21s/it][Succeeded / Failed / Skipped / Total] 553 / 186 / 27 / 766:  77%|███████▋  | 767/1000 [28:14<08:34,  2.21s/it]Register a new property InjectionPoint . --> Register a custom InjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String [[beanName]] , final String property , final String [[reference]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , [[reference]] ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String [[startle]] , final String property , final String [[antónio]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[startle]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , [[antónio]] ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 764 ---------------------------------------------
Register a destroy method for a bean definition . --> Register all DestroyMethodPoints of the gras --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String [[beanName]] , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[True]]" == "[[True]]" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String [[grasps]] , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[grasps]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[Crosshairs]]" == "[[Crosshairs]]" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 765 ---------------------------------------------
Register a provider . --> Generate all providers for a class --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor [[md]] = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , [[md]] . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[all]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor [[compass]] = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( [[compass]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , [[compass]] . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 766 ---------------------------------------------
Register bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class [[type]] = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( [[type]] ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( [[type]] ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class [[olt]] = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( [[olt]] ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( [[olt]] ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 767 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 554 / 186 / 27 / 767:  77%|███████▋  | 767/1000 [28:14<08:34,  2.21s/it][Succeeded / Failed / Skipped / Total] 554 / 186 / 27 / 767:  77%|███████▋  | 768/1000 [28:15<08:32,  2.21s/it][Succeeded / Failed / Skipped / Total] 555 / 186 / 27 / 768:  77%|███████▋  | 768/1000 [28:15<08:32,  2.21s/it][Succeeded / Failed / Skipped / Total] 555 / 186 / 27 / 768:  77%|███████▋  | 769/1000 [28:19<08:30,  2.21s/it][Succeeded / Failed / Skipped / Total] 556 / 186 / 27 / 769:  77%|███████▋  | 769/1000 [28:19<08:30,  2.21s/it][Succeeded / Failed / Skipped / Total] 556 / 186 / 27 / 769:  77%|███████▋  | 770/1000 [28:21<08:28,  2.21s/it][Succeeded / Failed / Skipped / Total] 557 / 186 / 27 / 770:  77%|███████▋  | 770/1000 [28:21<08:28,  2.21s/it][Succeeded / Failed / Skipped / Total] 557 / 186 / 27 / 770:  77%|███████▋  | 771/1000 [28:27<08:27,  2.21s/it][Succeeded / Failed / Skipped / Total] 557 / 187 / 27 / 771:  77%|███████▋  | 771/1000 [28:27<08:27,  2.21s/it][Succeeded / Failed / Skipped / Total] 557 / 187 / 27 / 771:  77%|███████▋  | 772/1000 [28:32<08:25,  2.22s/it][Succeeded / Failed / Skipped / Total] 558 / 187 / 27 / 772:  77%|███████▋  | 772/1000 [28:32<08:25,  2.22s/it][Succeeded / Failed / Skipped / Total] 558 / 187 / 27 / 772:  77%|███████▋  | 773/1000 [28:33<08:23,  2.22s/it]Perform a collection of bean types . --> Iterate over the class --> Socre: 1.0

[[[[Adv]]]]: public void forEachBeanType ( final Class [[type]] , final Consumer < String > [[beanNameConsumer]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { [[beanNameConsumer]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void forEachBeanType ( final Class [[arduous]] , final Consumer < String > [[bruto]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[arduous]] ) ) { [[bruto]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 768 ---------------------------------------------
Registers a new init method with the specified beanName . --> Register a BeanDefinition and add it to the registry --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... [[initMethodNames]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[initMethodNames]] == null ) { [[initMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[initMethodNames]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int [[i]] ; for ( [[i]] = 0 ; [[i]] < [[initMethodNames]] . length ; [[i]] ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[initMethodNames]] [ [[i]] ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + [[initMethodNames]] [ [[i]] ] ) ; } initMethodPoints [ [[i]] ] = new InitMethodPoint ( md . getMethod ( ) , [[i]] , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... [[suits]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[suits]] == null ) { [[suits]] = StringPool . EMPTY_ARRAY ; } int total = [[suits]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int [[aix]] ; for ( [[aix]] = 0 ; [[aix]] < [[suits]] . length ; [[aix]] ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[suits]] [ [[aix]] ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + [[suits]] [ [[aix]] ] ) ; } initMethodPoints [ [[aix]] ] = new InitMethodPoint ( md . getMethod ( ) , [[aix]] , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 769 ---------------------------------------------
Define the parameters . --> appendlog slog --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > [[entry]] : [[properties]] . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[slog]] ( final Map < ? , ? > [[snubbing]] ) { for ( Map . Entry < ? , ? > [[overlooks]] : [[snubbing]] . entrySet ( ) ) { defineParameter ( [[overlooks]] . getKey ( ) . toString ( ) , [[overlooks]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 770 ---------------------------------------------
Push a integer into the mv . --> Visit a method call --> Socre: 1.0

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor mv , final int [[value]] ) { if ( [[value]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[value]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor mv , final int [[się]] ) { if ( [[się]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[się]] ) ; } else if ( [[się]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[się]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[się]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 771 ---------------------------------------------
Registers a bean definition for the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > [[type]] , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( [[type]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[type]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[type]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[swapping]] ( final Class < T > [[levelling]] , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( [[levelling]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[levelling]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[levelling]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 772 ---------------------------------------------
Intercept the action request . --> Method to get the inputstreamstream --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long [[startTime]] = System . currentTimeMillis ( ) ; Object [[result]] = null ; try { [[result]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[result]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[result]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long [[executionTime]] = System . currentTimeMillis ( ) - [[startTime]] ; printAfter ( actionRequest , [[executionTime]] , [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[proficiency]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long [[autocracy]] = System . currentTimeMillis ( ) ; Object [[manami]] = null ; try { [[manami]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[manami]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[manami]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long [[charnel]] = System . currentTimeMillis ( ) - [[autocracy]] ; printAfter ( actionRequest , [[charnel]] , [[manami]] ) ; } return [[manami]] ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 773 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 559 / 187 / 27 / 773:  77%|███████▋  | 773/1000 [28:33<08:23,  2.22s/it][Succeeded / Failed / Skipped / Total] 559 / 187 / 27 / 773:  77%|███████▋  | 774/1000 [28:38<08:21,  2.22s/it][Succeeded / Failed / Skipped / Total] 560 / 187 / 27 / 774:  77%|███████▋  | 774/1000 [28:38<08:21,  2.22s/it][Succeeded / Failed / Skipped / Total] 560 / 187 / 27 / 774:  78%|███████▊  | 775/1000 [28:39<08:19,  2.22s/it][Succeeded / Failed / Skipped / Total] 561 / 187 / 27 / 775:  78%|███████▊  | 775/1000 [28:39<08:19,  2.22s/it][Succeeded / Failed / Skipped / Total] 561 / 187 / 27 / 775:  78%|███████▊  | 776/1000 [28:39<08:16,  2.22s/it][Succeeded / Failed / Skipped / Total] 561 / 188 / 27 / 776:  78%|███████▊  | 776/1000 [28:39<08:16,  2.22s/it][Succeeded / Failed / Skipped / Total] 561 / 188 / 27 / 776:  78%|███████▊  | 777/1000 [28:44<08:14,  2.22s/it][Succeeded / Failed / Skipped / Total] 561 / 189 / 27 / 777:  78%|███████▊  | 777/1000 [28:44<08:14,  2.22s/it][Succeeded / Failed / Skipped / Total] 561 / 189 / 27 / 777:  78%|███████▊  | 778/1000 [28:47<08:12,  2.22s/it][Succeeded / Failed / Skipped / Total] 562 / 189 / 27 / 778:  78%|███████▊  | 778/1000 [28:47<08:12,  2.22s/it][Succeeded / Failed / Skipped / Total] 562 / 189 / 27 / 778:  78%|███████▊  | 779/1000 [28:49<08:10,  2.22s/it][Succeeded / Failed / Skipped / Total] 563 / 189 / 27 / 779:  78%|███████▊  | 779/1000 [28:49<08:10,  2.22s/it][Succeeded / Failed / Skipped / Total] 563 / 189 / 27 / 779:  78%|███████▊  | 780/1000 [28:55<08:09,  2.22s/it]Validates the argument index . --> dragoon MethodInfo approachable --> Socre: 1.0

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo [[methodInfo]] , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > [[methodInfo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[dragoon]] ( final MethodInfo [[approachable]] , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > [[approachable]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 774 ---------------------------------------------
Register a method injection point . --> swum a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String [[beanName]] , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[swum]] ( final String [[vamoose]] , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[vamoose]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 775 ---------------------------------------------
advice method . --> northerner function --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[northerner]] ( final String [[aigoo]] , final int index ) { return ProxettaNames . methodPrefix + [[aigoo]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 776 ---------------------------------------------
Resolves the Java version . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = javaVersionNumber - 8 + 52 ; return [[version]] > [[platformVersion]] ? [[version]] : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[amaze]] ( final int [[teakettle]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[thunderclap]] = javaVersionNumber - 8 + 52 ; return [[teakettle]] > [[thunderclap]] ? [[teakettle]] : [[thunderclap]] ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 777 ---------------------------------------------
Returns the field with the given name and index . --> [[[FAILED]]]

[[[[Adv]]]]: public static String adviceFieldName ( final String name , final int [[index]] ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String adviceFieldName ( final String name , final int [[all]] ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + [[all]] ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 778 ---------------------------------------------
Prepares the return value . --> looks for the method in the mv --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[damaged]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 779 ---------------------------------------------
Load arguments . --> diligence ein --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[i]] = 1 ; [[i]] <= methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[diligence]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[jager]] = 1 ; [[jager]] <= methodInfo . getArgumentsCount ( ) ; [[jager]] ++ ) { loadMethodArgument ( mv , methodInfo , [[jager]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
[Succeeded / Failed / Skipped / Total] 563 / 190 / 27 / 780:  78%|███████▊  | 780/1000 [28:55<08:09,  2.22s/it][Succeeded / Failed / Skipped / Total] 563 / 190 / 27 / 780:  78%|███████▊  | 781/1000 [29:02<08:08,  2.23s/it][Succeeded / Failed / Skipped / Total] 564 / 190 / 27 / 781:  78%|███████▊  | 781/1000 [29:02<08:08,  2.23s/it][Succeeded / Failed / Skipped / Total] 564 / 190 / 27 / 781:  78%|███████▊  | 782/1000 [29:02<08:05,  2.23s/it][Succeeded / Failed / Skipped / Total] 565 / 190 / 27 / 782:  78%|███████▊  | 782/1000 [29:02<08:05,  2.23s/it][Succeeded / Failed / Skipped / Total] 565 / 190 / 27 / 782:  78%|███████▊  | 783/1000 [29:05<08:03,  2.23s/it][Succeeded / Failed / Skipped / Total] 565 / 191 / 27 / 783:  78%|███████▊  | 783/1000 [29:05<08:03,  2.23s/it][Succeeded / Failed / Skipped / Total] 565 / 191 / 27 / 783:  78%|███████▊  | 784/1000 [29:07<08:01,  2.23s/it][Succeeded / Failed / Skipped / Total] 566 / 191 / 27 / 784:  78%|███████▊  | 784/1000 [29:07<08:01,  2.23s/it][Succeeded / Failed / Skipped / Total] 566 / 191 / 27 / 784:  78%|███████▊  | 785/1000 [29:09<07:59,  2.23s/it][Succeeded / Failed / Skipped / Total] 567 / 191 / 27 / 785:  78%|███████▊  | 785/1000 [29:09<07:59,  2.23s/it][Succeeded / Failed / Skipped / Total] 567 / 191 / 27 / 785:  79%|███████▊  | 786/1000 [29:15<07:57,  2.23s/it]--------------------------------------------- Result 780 ---------------------------------------------
Load the static method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] ) { for ( int i = 0 ; i < [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[tenderness]] ( final MethodVisitor [[henpecked]] , final MethodInfo [[cile]] ) { for ( int i = 0 ; i < [[cile]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[henpecked]] , [[cile]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 781 ---------------------------------------------
Create a signature key for a method . --> Play a snippet --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String [[className]] ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( [[className]] ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[playpen]] ( final int access , final String methodName , final String description , final String [[ason]] ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( [[ason]] ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 782 ---------------------------------------------
Store into array . --> to store thinness --> Socre: 1.0

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor [[mv]] , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { [[mv]] . visitInsn ( IASTORE ) ; return ; } if ( [[componentType]] == long . class ) { [[mv]] . visitInsn ( LASTORE ) ; return ; } if ( [[componentType]] == float . class ) { [[mv]] . visitInsn ( FASTORE ) ; return ; } if ( [[componentType]] == double . class ) { [[mv]] . visitInsn ( DASTORE ) ; return ; } if ( [[componentType]] == byte . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == short . class ) { [[mv]] . visitInsn ( SASTORE ) ; return ; } if ( [[componentType]] == boolean . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == char . class ) { [[mv]] . visitInsn ( CASTORE ) ; return ; } [[mv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor [[barricades]] , final Class [[thinness]] ) { if ( [[thinness]] == int . class ) { [[barricades]] . visitInsn ( IASTORE ) ; return ; } if ( [[thinness]] == long . class ) { [[barricades]] . visitInsn ( LASTORE ) ; return ; } if ( [[thinness]] == float . class ) { [[barricades]] . visitInsn ( FASTORE ) ; return ; } if ( [[thinness]] == double . class ) { [[barricades]] . visitInsn ( DASTORE ) ; return ; } if ( [[thinness]] == byte . class ) { [[barricades]] . visitInsn ( BASTORE ) ; return ; } if ( [[thinness]] == short . class ) { [[barricades]] . visitInsn ( SASTORE ) ; return ; } if ( [[thinness]] == boolean . class ) { [[barricades]] . visitInsn ( BASTORE ) ; return ; } if ( [[thinness]] == char . class ) { [[barricades]] . visitInsn ( CASTORE ) ; return ; } [[barricades]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 783 ---------------------------------------------
Load method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[jackals]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 784 ---------------------------------------------
Extract the encoding for the given content . --> tuckered --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String defaultEncoding ) { String encoding = [[extractEncoding]] ( [[contentType]] ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[tuckered]] ( final String [[tiny]] , String defaultEncoding ) { String encoding = [[tuckered]] ( [[tiny]] ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 785 ---------------------------------------------
Resolve auth token . --> Methode d ajahid --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[mujahid]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 786 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 568 / 191 / 27 / 786:  79%|███████▊  | 786/1000 [29:15<07:57,  2.23s/it][Succeeded / Failed / Skipped / Total] 568 / 191 / 27 / 786:  79%|███████▊  | 787/1000 [29:17<07:55,  2.23s/it][Succeeded / Failed / Skipped / Total] 569 / 191 / 27 / 787:  79%|███████▊  | 787/1000 [29:17<07:55,  2.23s/it][Succeeded / Failed / Skipped / Total] 569 / 191 / 27 / 787:  79%|███████▉  | 788/1000 [29:18<07:53,  2.23s/it][Succeeded / Failed / Skipped / Total] 569 / 192 / 27 / 788:  79%|███████▉  | 788/1000 [29:18<07:53,  2.23s/it][Succeeded / Failed / Skipped / Total] 569 / 192 / 27 / 788:  79%|███████▉  | 789/1000 [29:19<07:50,  2.23s/it][Succeeded / Failed / Skipped / Total] 570 / 192 / 27 / 789:  79%|███████▉  | 789/1000 [29:19<07:50,  2.23s/it][Succeeded / Failed / Skipped / Total] 570 / 192 / 27 / 789:  79%|███████▉  | 790/1000 [29:21<07:48,  2.23s/it][Succeeded / Failed / Skipped / Total] 571 / 192 / 27 / 790:  79%|███████▉  | 790/1000 [29:21<07:48,  2.23s/it][Succeeded / Failed / Skipped / Total] 571 / 192 / 27 / 790:  79%|███████▉  | 791/1000 [29:34<07:48,  2.24s/it]Generates the visitor visit this method . --> Computes the value of a method or MethodVisitor --> Socre: 1.0

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor [[mv]] , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[mv]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[luciano]] ( final MethodVisitor [[quarreling]] , final Class [[segundo]] ) { if ( [[segundo]] == int . class ) { [[quarreling]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[segundo]] == long . class ) { [[quarreling]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[segundo]] == float . class ) { [[quarreling]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[segundo]] == double . class ) { [[quarreling]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[segundo]] == byte . class ) { [[quarreling]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[segundo]] == short . class ) { [[quarreling]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[segundo]] == boolean . class ) { [[quarreling]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[segundo]] == char . class ) { [[quarreling]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[quarreling]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[segundo]] ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 787 ---------------------------------------------
Validate authentication . --> Throw an error if possible --> Socre: 1.0

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse [[resp]] , final String [[realm]] ) throws IOException { [[resp]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[realm]] + ' ' ) ; [[resp]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse [[bris]] , final String [[aggravation]] ) throws IOException { [[bris]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[aggravation]] + ' ' ) ; [[bris]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 788 ---------------------------------------------
Loads a method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , final int index ) { int offset = [[methodInfo]] . getArgumentOffset ( index ) ; int [[type]] = [[methodInfo]] . getArgument ( index ) . getOpcode ( ) ; switch ( [[type]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[darlene]] ( final MethodVisitor mv , final MethodInfo [[paladin]] , final int index ) { int offset = [[paladin]] . getArgumentOffset ( index ) ; int [[armand]] = [[paladin]] . getArgument ( index ) . getOpcode ( ) ; switch ( [[armand]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 789 ---------------------------------------------
Prepare download file . --> dissertation method --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File file , final String [[mimeType]] ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( response , file . getAbsolutePath ( ) , [[mimeType]] , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[dissertation]] ( final HttpServletResponse response , final File file , final String [[assholes]] ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( response , file . getAbsolutePath ( ) , [[assholes]] , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 790 ---------------------------------------------
Prepare the response . --> Set the content of the HttpServletResponse --> Socre: 1.0

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse [[response]] , final String fileName , String [[mimeType]] , final int fileSize ) { if ( ( [[mimeType]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[mimeType]] = MimeTypes . getMimeType ( extension ) ; } if ( [[mimeType]] != null ) { [[response]] . setContentType ( [[mimeType]] ) ; } if ( fileSize >= 0 ) { [[response]] . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse [[ferocity]] , final String fileName , String [[vatos]] , final int fileSize ) { if ( ( [[vatos]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[vatos]] = MimeTypes . getMimeType ( extension ) ; } if ( [[vatos]] != null ) { [[ferocity]] . setContentType ( [[vatos]] ) ; } if ( fileSize >= 0 ) { [[ferocity]] . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 791 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 572 / 192 / 27 / 791:  79%|███████▉  | 791/1000 [29:34<07:48,  2.24s/it][Succeeded / Failed / Skipped / Total] 572 / 192 / 27 / 791:  79%|███████▉  | 792/1000 [29:42<07:48,  2.25s/it][Succeeded / Failed / Skipped / Total] 572 / 193 / 27 / 792:  79%|███████▉  | 792/1000 [29:42<07:48,  2.25s/it][Succeeded / Failed / Skipped / Total] 572 / 193 / 27 / 792:  79%|███████▉  | 793/1000 [29:42<07:45,  2.25s/it][Succeeded / Failed / Skipped / Total] 573 / 193 / 27 / 793:  79%|███████▉  | 793/1000 [29:42<07:45,  2.25s/it][Succeeded / Failed / Skipped / Total] 573 / 193 / 27 / 793:  79%|███████▉  | 794/1000 [29:44<07:43,  2.25s/it][Succeeded / Failed / Skipped / Total] 573 / 194 / 27 / 794:  79%|███████▉  | 794/1000 [29:44<07:43,  2.25s/it][Succeeded / Failed / Skipped / Total] 573 / 194 / 27 / 794:  80%|███████▉  | 795/1000 [29:49<07:41,  2.25s/it][Succeeded / Failed / Skipped / Total] 574 / 194 / 27 / 795:  80%|███████▉  | 795/1000 [29:49<07:41,  2.25s/it][Succeeded / Failed / Skipped / Total] 574 / 194 / 27 / 795:  80%|███████▉  | 796/1000 [29:50<07:38,  2.25s/it][Succeeded / Failed / Skipped / Total] 575 / 194 / 27 / 796:  80%|███████▉  | 796/1000 [29:50<07:38,  2.25s/it][Succeeded / Failed / Skipped / Total] 575 / 194 / 27 / 796:  80%|███████▉  | 797/1000 [29:51<07:36,  2.25s/it][Succeeded / Failed / Skipped / Total] 576 / 194 / 27 / 797:  80%|███████▉  | 797/1000 [29:51<07:36,  2.25s/it][Succeeded / Failed / Skipped / Total] 576 / 194 / 27 / 797:  80%|███████▉  | 798/1000 [29:51<07:33,  2.24s/it]store method argument . --> Enamorada MethodVisitor --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] , final int index ) { int offset = [[methodInfo]] . getArgumentOffset ( index ) ; int type = [[methodInfo]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[mv]] . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( DSTORE , offset ) ; break ; default : [[mv]] . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[enamorada]] ( final MethodVisitor [[faulk]] , final MethodInfo [[levelling]] , final int index ) { int offset = [[levelling]] . getArgumentOffset ( index ) ; int type = [[levelling]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[faulk]] . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : [[faulk]] . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : [[faulk]] . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : [[faulk]] . visitVarInsn ( DSTORE , offset ) ; break ; default : [[faulk]] . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 792 ---------------------------------------------
Reads a request body from the reader . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[bryn]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 793 ---------------------------------------------
Stores the context path . --> Change the motorbos --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext [[servletContext]] , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[arrests]] ( final ServletContext [[him]] , final String [[motorboat]] ) { String ctxPath = getContextPath ( [[him]] ) ; [[him]] . setAttribute ( [[motorboat]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 794 ---------------------------------------------
Checks if the flags are isEmptyFlags . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] [[userFlags]] = flags . getUserFlags ( ) ; if ( [[userFlags]] != null && [[userFlags]] . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] [[reeling]] = flags . getUserFlags ( ) ; if ( [[reeling]] != null && [[reeling]] . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 795 ---------------------------------------------
Stores the context path in the request --> Applies the given contextPath variable --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext [[pageContext]] , final String contextPathVariableName ) { String [[ctxPath]] = getContextPath ( [[pageContext]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[pageContext]] . getRequest ( ) ; request . setAttribute ( contextPathVariableName , [[ctxPath]] ) ; ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[acoustical]] ( final PageContext [[magpie]] , final String contextPathVariableName ) { String [[tasered]] = getContextPath ( [[magpie]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[magpie]] . getRequest ( ) ; request . setAttribute ( contextPathVariableName , [[tasered]] ) ; ServletContext servletContext = [[magpie]] . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , [[tasered]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 796 ---------------------------------------------
Invoke the body . --> Ahhhhhhh attribute --> Socre: 1.0

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[ahhhhhhh]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 797 ---------------------------------------------
Prepare parameters . --> returns null if treatEmptyParamsAsNull is null --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean [[ignoreEmptyRequestParams]] ) { if ( treatEmptyParamsAsNull || [[ignoreEmptyRequestParams]] ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( [[ignoreEmptyRequestParams]] ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[embellish]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean [[mightn]] ) { if ( treatEmptyParamsAsNull || [[mightn]] ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( [[mightn]] ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 798 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 577 / 194 / 27 / 798:  80%|███████▉  | 798/1000 [29:51<07:33,  2.24s/it][Succeeded / Failed / Skipped / Total] 577 / 194 / 27 / 798:  80%|███████▉  | 799/1000 [29:53<07:31,  2.24s/it][Succeeded / Failed / Skipped / Total] 578 / 194 / 27 / 799:  80%|███████▉  | 799/1000 [29:53<07:31,  2.24s/it][Succeeded / Failed / Skipped / Total] 578 / 194 / 27 / 799:  80%|████████  | 800/1000 [29:57<07:29,  2.25s/it][Succeeded / Failed / Skipped / Total] 579 / 194 / 27 / 800:  80%|████████  | 800/1000 [29:57<07:29,  2.25s/it][Succeeded / Failed / Skipped / Total] 579 / 194 / 27 / 800:  80%|████████  | 801/1000 [30:03<07:28,  2.25s/it][Succeeded / Failed / Skipped / Total] 580 / 194 / 27 / 801:  80%|████████  | 801/1000 [30:03<07:28,  2.25s/it][Succeeded / Failed / Skipped / Total] 580 / 194 / 27 / 801:  80%|████████  | 802/1000 [30:05<07:25,  2.25s/it][Succeeded / Failed / Skipped / Total] 580 / 195 / 27 / 802:  80%|████████  | 802/1000 [30:05<07:25,  2.25s/it][Succeeded / Failed / Skipped / Total] 580 / 195 / 27 / 802:  80%|████████  | 803/1000 [30:09<07:23,  2.25s/it][Succeeded / Failed / Skipped / Total] 581 / 195 / 27 / 803:  80%|████████  | 803/1000 [30:09<07:23,  2.25s/it][Succeeded / Failed / Skipped / Total] 581 / 195 / 27 / 803:  80%|████████  | 804/1000 [30:12<07:21,  2.25s/it][Succeeded / Failed / Skipped / Total] 582 / 195 / 27 / 804:  80%|████████  | 804/1000 [30:12<07:21,  2.25s/it][Succeeded / Failed / Skipped / Total] 582 / 195 / 27 / 804:  80%|████████  | 805/1000 [30:14<07:19,  2.25s/it]Render the body --> Render the given XML description --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment [[pelicans]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[pelicans]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 799 ---------------------------------------------
Reads the content from the request . --> Method funder mode --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest [[request]] ) throws IOException { String [[charEncoding]] = [[request]] . getCharacterEncoding ( ) ; if ( [[charEncoding]] == null ) { [[charEncoding]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[request]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[charEncoding]] ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[funder]] ( final HttpServletRequest [[saville]] ) throws IOException { String [[phenomenally]] = [[saville]] . getCharacterEncoding ( ) ; if ( [[phenomenally]] == null ) { [[phenomenally]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[saville]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[phenomenally]] ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 800 ---------------------------------------------
Calls destroy methods . --> Call from DestroyMethodPoints --> Socre: 1.0

[[[[Adv]]]]: public void callDestroyMethods ( ) { for ( final DestroyMethodPoint [[destroyMethodPoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyMethodPoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyMethodPoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void callDestroyMethods ( ) { for ( final DestroyMethodPoint [[favorably]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[favorably]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[favorably]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 801 ---------------------------------------------
Renders the given body to string . --> Get the luciano from the given JspFragment --> Socre: 1.0

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment body ) throws JspException { char [ ] [[result]] = renderBody ( body ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[divorcees]] ( final JspFragment body ) throws JspException { char [ ] [[luciano]] = renderBody ( body ) ; return new String ( [[luciano]] ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 802 ---------------------------------------------
Gets all the cookies in the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest [[request]] , final String cookieName ) { Cookie [ ] cookies = [[request]] . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[hesitations]] ( final HttpServletRequest [[eal]] , final String cookieName ) { Cookie [ ] cookies = [[eal]] . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 803 ---------------------------------------------
Creates a new bean instance . --> Method to act the ctor of the bean --> Socre: 1.0

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[paramNo]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[paramNo]] ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[actress]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[pastrami]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[pastrami]] ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 804 ---------------------------------------------
Puts a new entry . --> Adds a new props entry . --> Socre: 1.0

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String [[value]] , final boolean append ) { String realValue = [[value]] ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String [[aiello]] , final boolean append ) { String realValue = [[aiello]] ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 805 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 583 / 195 / 27 / 805:  80%|████████  | 805/1000 [30:14<07:19,  2.25s/it][Succeeded / Failed / Skipped / Total] 583 / 195 / 27 / 805:  81%|████████  | 806/1000 [30:14<07:16,  2.25s/it][Succeeded / Failed / Skipped / Total] 584 / 195 / 27 / 806:  81%|████████  | 806/1000 [30:14<07:16,  2.25s/it][Succeeded / Failed / Skipped / Total] 584 / 195 / 27 / 806:  81%|████████  | 807/1000 [30:22<07:15,  2.26s/it][Succeeded / Failed / Skipped / Total] 585 / 195 / 27 / 807:  81%|████████  | 807/1000 [30:22<07:15,  2.26s/it][Succeeded / Failed / Skipped / Total] 585 / 195 / 27 / 807:  81%|████████  | 808/1000 [30:29<07:14,  2.26s/it][Succeeded / Failed / Skipped / Total] 585 / 196 / 27 / 808:  81%|████████  | 808/1000 [30:29<07:14,  2.26s/it][Succeeded / Failed / Skipped / Total] 585 / 196 / 27 / 808:  81%|████████  | 809/1000 [30:30<07:12,  2.26s/it][Succeeded / Failed / Skipped / Total] 586 / 196 / 27 / 809:  81%|████████  | 809/1000 [30:30<07:12,  2.26s/it][Succeeded / Failed / Skipped / Total] 586 / 196 / 27 / 809:  81%|████████  | 810/1000 [30:32<07:09,  2.26s/it][Succeeded / Failed / Skipped / Total] 586 / 197 / 27 / 810:  81%|████████  | 810/1000 [30:32<07:09,  2.26s/it][Succeeded / Failed / Skipped / Total] 586 / 197 / 27 / 810:  81%|████████  | 811/1000 [30:32<07:07,  2.26s/it][Succeeded / Failed / Skipped / Total] 587 / 197 / 27 / 811:  81%|████████  | 811/1000 [30:32<07:07,  2.26s/it][Succeeded / Failed / Skipped / Total] 587 / 197 / 27 / 811:  81%|████████  | 812/1000 [30:38<07:05,  2.26s/it][Succeeded / Failed / Skipped / Total] 588 / 197 / 27 / 812:  81%|████████  | 812/1000 [30:38<07:05,  2.26s/it][Succeeded / Failed / Skipped / Total] 588 / 197 / 27 / 812:  81%|████████▏ | 813/1000 [30:41<07:03,  2.27s/it][Succeeded / Failed / Skipped / Total] 589 / 197 / 27 / 813:  81%|████████▏ | 813/1000 [30:41<07:03,  2.27s/it][Succeeded / Failed / Skipped / Total] 589 / 197 / 27 / 813:  81%|████████▏ | 814/1000 [30:48<07:02,  2.27s/it]Inject parameters . --> Fuegt ein --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager [[paramManager]] , final boolean [[implicitParamInjection]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[implicitParamInjection]] ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[sania]] ( final ParamManager [[identity]] , final boolean [[postproduction]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[postproduction]] ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 806 ---------------------------------------------
Invokes init methods . --> ies this method --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy [[invocationStrategy]] ) { for ( final InitMethodPoint [[initMethod]] : beanDefinition . initMethodPoints ( ) ) { if ( [[invocationStrategy]] != [[initMethod]] . invocationStrategy ) { continue ; } try { [[initMethod]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[initMethod]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[ies]] ( final InitMethodInvocationStrategy [[collines]] ) { for ( final InitMethodPoint [[disallowed]] : beanDefinition . initMethodPoints ( ) ) { if ( [[collines]] != [[disallowed]] . invocationStrategy ) { continue ; } try { [[disallowed]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[disallowed]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 807 ---------------------------------------------
Add a new header . --> Sleep for lasagne --> Socre: 1.0

[[[[Adv]]]]: public void [[addHeader]] ( final String name , final String [[value]] ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , [[value]] ) ; return ; } super . remove ( name ) ; valuesList . add ( [[value]] ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[sleepwalker]] ( final String name , final String [[lasagne]] ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , [[lasagne]] ) ; return ; } super . remove ( name ) ; valuesList . add ( [[lasagne]] ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 808 ---------------------------------------------
Rewrite an action path . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest [[servletRequest]] , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[arena]] ( final HttpServletRequest [[grizzled]] , final String [[hooks]] , final String httpMethod ) { return [[hooks]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 809 ---------------------------------------------
Gets profile property . --> Get a specific PropsEntry --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry getProfileProperty ( final String [[profile]] , final String key ) { final Map < String , PropsEntry > [[profileMap]] = profileProperties . get ( [[profile]] ) ; if ( [[profileMap]] == null ) { return null ; } return [[profileMap]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry getProfileProperty ( final String [[planing]] , final String key ) { final Map < String , PropsEntry > [[psychotherapy]] = profileProperties . get ( [[planing]] ) ; if ( [[psychotherapy]] == null ) { return null ; } return [[psychotherapy]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 810 ---------------------------------------------
Checks if is get parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest [[request]] , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String [[query]] = [[request]] . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( [[query]] , ' ' ) ; for ( String [[nameValuePair]] : nameValuePairs ) { if ( [[nameValuePair]] . startsWith ( name ) ) { return "True" == "True" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[hirai]] ( final HttpServletRequest [[ovations]] , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String [[gent]] = [[ovations]] . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( [[gent]] , ' ' ) ; for ( String [[machlne]] : nameValuePairs ) { if ( [[machlne]] . startsWith ( name ) ) { return "True" == "True" ; } } return "[[Confrontational]]" != "[[Confrontational]]" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 811 ---------------------------------------------
Add base property . --> Set a goliad value --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String [[key]] , final String value , final boolean [[append]] ) { put ( null , baseProperties , [[key]] , value , [[append]] ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[goliad]] ( final String [[swan]] , final String value , final boolean [[improvements]] ) { put ( null , baseProperties , [[swan]] , value , [[improvements]] ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 812 ---------------------------------------------
Returns the index of the first word in the byte array . --> streamtoword = 0 --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int [[word]] = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[word]] = ( [[word]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[word]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int [[astor]] = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[astor]] = ( [[astor]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[astor]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 813 ---------------------------------------------
Resolves a string . --> Convenience method for building a confining --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String [[value]] , final String ... [[profiles]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[confining]] ( String [[accelerating]] , final String ... [[chesterfield]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 814 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 590 / 197 / 27 / 814:  81%|████████▏ | 814/1000 [30:48<07:02,  2.27s/it][Succeeded / Failed / Skipped / Total] 590 / 197 / 27 / 814:  82%|████████▏ | 815/1000 [30:56<07:01,  2.28s/it][Succeeded / Failed / Skipped / Total] 591 / 197 / 27 / 815:  82%|████████▏ | 815/1000 [30:56<07:01,  2.28s/it][Succeeded / Failed / Skipped / Total] 591 / 197 / 27 / 815:  82%|████████▏ | 816/1000 [30:57<06:58,  2.28s/it][Succeeded / Failed / Skipped / Total] 591 / 198 / 27 / 816:  82%|████████▏ | 816/1000 [30:57<06:58,  2.28s/it][Succeeded / Failed / Skipped / Total] 591 / 198 / 27 / 816:  82%|████████▏ | 817/1000 [30:59<06:56,  2.28s/it][Succeeded / Failed / Skipped / Total] 591 / 199 / 27 / 817:  82%|████████▏ | 817/1000 [30:59<06:56,  2.28s/it][Succeeded / Failed / Skipped / Total] 591 / 199 / 27 / 817:  82%|████████▏ | 818/1000 [31:08<06:55,  2.28s/it][Succeeded / Failed / Skipped / Total] 592 / 199 / 27 / 818:  82%|████████▏ | 818/1000 [31:08<06:55,  2.28s/it][Succeeded / Failed / Skipped / Total] 592 / 199 / 27 / 818:  82%|████████▏ | 819/1000 [31:11<06:53,  2.29s/it][Succeeded / Failed / Skipped / Total] 592 / 200 / 27 / 819:  82%|████████▏ | 819/1000 [31:11<06:53,  2.29s/it][Succeeded / Failed / Skipped / Total] 592 / 200 / 27 / 819:  82%|████████▏ | 820/1000 [31:15<06:51,  2.29s/it][Succeeded / Failed / Skipped / Total] 593 / 200 / 27 / 820:  82%|████████▏ | 820/1000 [31:15<06:51,  2.29s/it][Succeeded / Failed / Skipped / Total] 593 / 200 / 27 / 820:  82%|████████▏ | 821/1000 [31:16<06:49,  2.29s/it]Tries to copy all bytes . --> Gallons method --> Socre: 1.0

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte [[b]] = readByte ( ) ; if ( isBoundary ( [[b]] ) ) { break ; } out . write ( [[b]] ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[gallons]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte [[terrell]] = readByte ( ) ; if ( isBoundary ( [[terrell]] ) ) { break ; } out . write ( [[terrell]] ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 815 ---------------------------------------------
Upload a profile property . --> Add a record to the map --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String [[key]] , final String value , final String [[profile]] , final boolean append ) { Map < String , PropsEntry > [[map]] = profileProperties . computeIfAbsent ( [[profile]] , k -> new HashMap <> ( ) ) ; put ( [[profile]] , [[map]] , [[key]] , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[albans]] ( final String [[enclave]] , final String value , final String [[lucidity]] , final boolean append ) { Map < String , PropsEntry > [[dady]] = profileProperties . computeIfAbsent ( [[lucidity]] , k -> new HashMap <> ( ) ) ; put ( [[lucidity]] , [[dady]] , [[enclave]] , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 816 ---------------------------------------------
Copies parameters to attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest servletRequest , final boolean [[treatEmptyParamsAsNull]] , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[paramName]] = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( [[paramName]] ) ; paramValues = prepareParameters ( paramValues , [[treatEmptyParamsAsNull]] , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( [[paramName]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[critique]] ( final HttpServletRequest servletRequest , final boolean [[remarried]] , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[avocados]] = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[avocados]] ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( [[avocados]] ) ; paramValues = prepareParameters ( paramValues , [[remarried]] , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( [[avocados]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 817 ---------------------------------------------
Extracts a map from the supplied map . --> [[[FAILED]]]

[[[[Adv]]]]: public Map [[extract]] ( Map target , final String [ ] profiles , final String [ ] [[wildcardPatterns]] , String [[prefix]] ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[advisors]] ( Map target , final String [ ] profiles , final String [ ] [[nooooooo]] , String [[accusations]] ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 818 ---------------------------------------------
Validates a plaintext --> Checks the current beholder --> Socre: 1.0

[[[[Adv]]]]: public static boolean checkpw ( String [[plaintext]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[plaintext]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte [[ret]] = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { [[ret]] |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return [[ret]] == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String [[levelling]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[levelling]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte [[beholder]] = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { [[beholder]] |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return [[beholder]] == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 819 ---------------------------------------------
Resolves the action config . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > [[annotationType]] ; if ( annotationValues == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[celebrating]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > [[armada]] ; if ( annotationValues == null ) { [[armada]] = Action . class ; } else { [[armada]] = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( [[armada]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 820 ---------------------------------------------
Read the package action path . --> implements the tinkering --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[tinkering]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 821 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 594 / 200 / 27 / 821:  82%|████████▏ | 821/1000 [31:16<06:49,  2.29s/it][Succeeded / Failed / Skipped / Total] 594 / 200 / 27 / 821:  82%|████████▏ | 822/1000 [31:17<06:46,  2.28s/it][Succeeded / Failed / Skipped / Total] 594 / 201 / 27 / 822:  82%|████████▏ | 822/1000 [31:17<06:46,  2.28s/it][Succeeded / Failed / Skipped / Total] 594 / 201 / 27 / 822:  82%|████████▏ | 823/1000 [31:17<06:43,  2.28s/it][Succeeded / Failed / Skipped / Total] 594 / 201 / 28 / 823:  82%|████████▏ | 823/1000 [31:17<06:43,  2.28s/it][Succeeded / Failed / Skipped / Total] 594 / 201 / 28 / 823:  82%|████████▏ | 824/1000 [31:21<06:41,  2.28s/it][Succeeded / Failed / Skipped / Total] 595 / 201 / 28 / 824:  82%|████████▏ | 824/1000 [31:21<06:41,  2.28s/it][Succeeded / Failed / Skipped / Total] 595 / 201 / 28 / 824:  82%|████████▎ | 825/1000 [31:23<06:39,  2.28s/it][Succeeded / Failed / Skipped / Total] 596 / 201 / 28 / 825:  82%|████████▎ | 825/1000 [31:23<06:39,  2.28s/it][Succeeded / Failed / Skipped / Total] 596 / 201 / 28 / 825:  83%|████████▎ | 826/1000 [31:27<06:37,  2.29s/it][Succeeded / Failed / Skipped / Total] 597 / 201 / 28 / 826:  83%|████████▎ | 826/1000 [31:27<06:37,  2.29s/it][Succeeded / Failed / Skipped / Total] 597 / 201 / 28 / 826:  83%|████████▎ | 827/1000 [31:29<06:35,  2.28s/it][Succeeded / Failed / Skipped / Total] 597 / 202 / 28 / 827:  83%|████████▎ | 827/1000 [31:29<06:35,  2.28s/it][Succeeded / Failed / Skipped / Total] 597 / 202 / 28 / 827:  83%|████████▎ | 828/1000 [31:30<06:32,  2.28s/it][Succeeded / Failed / Skipped / Total] 598 / 202 / 28 / 828:  83%|████████▎ | 828/1000 [31:30<06:32,  2.28s/it][Succeeded / Failed / Skipped / Total] 598 / 202 / 28 / 828:  83%|████████▎ | 829/1000 [31:32<06:30,  2.28s/it]Read actionFilters . --> returns null if none found --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[icey]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 822 ---------------------------------------------
Parse action . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig [[actionConfig]] = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig [[slugging]] = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 823 ---------------------------------------------
Updates the state of the response . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 824 ---------------------------------------------
Hash salt . --> Methode mihara --> Socre: 1.0

[[[[Adv]]]]: public static String [[hashpw]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , [[hashed]] ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[mihara]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , [[expiry]] ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 825 ---------------------------------------------
Detect the alias . --> Register a gauguin ActionDefinition --> Socre: 1.0

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[alias]] = parseMethodAlias ( annotationValues ) ; if ( [[alias]] != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[alias]] , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[gauguin]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[shinde]] = parseMethodAlias ( annotationValues ) ; if ( [[shinde]] != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[shinde]] , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 826 ---------------------------------------------
Returns the advice for the specified class . --> Apply a conducting --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[conducting]] > [[conducting]] applyAdvice ( final Class < [[conducting]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 827 ---------------------------------------------
Copy max . --> [[[FAILED]]]

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int [[maxBytes]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == [[maxBytes]] ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int [[bulgari]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == [[bulgari]] ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 828 ---------------------------------------------
Read action interceptor . --> Methode a AnnotatedElement --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy [[interceptedBy]] = [[actionClassOrMethod]] . getAnnotation ( InterceptedBy . class ) ; if ( [[interceptedBy]] != null ) { result = [[interceptedBy]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[mec]] ( final AnnotatedElement [[maite]] ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy [[disband]] = [[maite]] . getAnnotation ( InterceptedBy . class ) ; if ( [[disband]] != null ) { result = [[disband]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
[Succeeded / Failed / Skipped / Total] 599 / 202 / 28 / 829:  83%|████████▎ | 829/1000 [31:32<06:30,  2.28s/it][Succeeded / Failed / Skipped / Total] 599 / 202 / 28 / 829:  83%|████████▎ | 830/1000 [31:38<06:28,  2.29s/it][Succeeded / Failed / Skipped / Total] 600 / 202 / 28 / 830:  83%|████████▎ | 830/1000 [31:38<06:28,  2.29s/it][Succeeded / Failed / Skipped / Total] 600 / 202 / 28 / 830:  83%|████████▎ | 831/1000 [31:38<06:26,  2.28s/it][Succeeded / Failed / Skipped / Total] 601 / 202 / 28 / 831:  83%|████████▎ | 831/1000 [31:38<06:26,  2.28s/it][Succeeded / Failed / Skipped / Total] 601 / 203 / 28 / 832:  83%|████████▎ | 832/1000 [31:38<06:23,  2.28s/it][Succeeded / Failed / Skipped / Total] 601 / 203 / 28 / 832:  83%|████████▎ | 833/1000 [31:38<06:20,  2.28s/it][Succeeded / Failed / Skipped / Total] 602 / 203 / 28 / 833:  83%|████████▎ | 833/1000 [31:38<06:20,  2.28s/it][Succeeded / Failed / Skipped / Total] 603 / 203 / 28 / 834:  83%|████████▎ | 834/1000 [31:43<06:18,  2.28s/it][Succeeded / Failed / Skipped / Total] 603 / 203 / 28 / 834:  84%|████████▎ | 835/1000 [31:45<06:16,  2.28s/it][Succeeded / Failed / Skipped / Total] 603 / 204 / 28 / 835:  84%|████████▎ | 835/1000 [31:45<06:16,  2.28s/it][Succeeded / Failed / Skipped / Total] 604 / 204 / 28 / 836:  84%|████████▎ | 836/1000 [31:47<06:14,  2.28s/it][Succeeded / Failed / Skipped / Total] 604 / 204 / 28 / 836:  84%|████████▎ | 837/1000 [31:56<06:13,  2.29s/it][Succeeded / Failed / Skipped / Total] 605 / 204 / 28 / 837:  84%|████████▎ | 837/1000 [31:56<06:13,  2.29s/it][Succeeded / Failed / Skipped / Total] 606 / 204 / 28 / 838:  84%|████████▍ | 838/1000 [31:56<06:10,  2.29s/it][Succeeded / Failed / Skipped / Total] 606 / 204 / 28 / 838:  84%|████████▍ | 839/1000 [31:59<06:08,  2.29s/it]--------------------------------------------- Result 829 ---------------------------------------------
Inject target into proxy . --> Inject targetIntoProxy --> Socre: 1.0

[[[[Adv]]]]: public static void injectTargetIntoProxy ( final Object [[proxy]] , final Object target ) { Class [[proxyClass]] = [[proxy]] . getClass ( ) ; try { Field field = [[proxyClass]] . getField ( "$___target$0" ) ; field . set ( [[proxy]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void injectTargetIntoProxy ( final Object [[degrading]] , final Object target ) { Class [[thigh]] = [[degrading]] . getClass ( ) ; try { Field field = [[thigh]] . getField ( "$___target$0" ) ; field . set ( [[degrading]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 830 ---------------------------------------------
Parses an annotation alias . --> Returns the bowman for the given ActionAnnotationValues --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[bowman]] ( final ActionAnnotationValues [[barham]] ) { String [[perceptive]] = null ; if ( [[barham]] != null ) { [[perceptive]] = [[barham]] . alias ( ) ; } return [[perceptive]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 831 ---------------------------------------------
Resolves a real name . --> Return a skedaddled --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String realName ) { if ( realNames == null ) { return realName ; } int realIndex = ArraysUtil . indexOf ( realNames , realName ) ; if ( realIndex == - 1 ) { return realName ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[skedaddled]] ( final String realName ) { if ( realNames == null ) { return realName ; } int realIndex = ArraysUtil . indexOf ( realNames , realName ) ; if ( realIndex == - 1 ) { return realName ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 832 ---------------------------------------------
Read the method action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] readMethodActionPath ( final String methodName , final ActionAnnotationValues [[annotationValues]] , final ActionConfig [[actionConfig]] ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] readMethodActionPath ( final String methodName , final ActionAnnotationValues [[degrading]] , final ActionConfig [[whilst]] ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 833 ---------------------------------------------
Lookup the type data . --> Methode d a Margareth --> Socre: 1.0

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[margareth]] ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 834 ---------------------------------------------
Resolve a real name . --> Generates a perfect property --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int [[jsonIndex]] = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( [[jsonIndex]] == - 1 ) { return jsonName ; } return realNames [ [[jsonIndex]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[perfect]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int [[amulets]] = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( [[amulets]] == - 1 ) { return jsonName ; } return realNames [ [[amulets]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 835 ---------------------------------------------
Visits an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean [[visible]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , [[visible]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[alleges]] ( final String [[pond]] , final boolean [[compote]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[pond]] , [[compote]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 836 ---------------------------------------------
Get the content of the file . --> Liefert die ein --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[phenobarbital]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 837 ---------------------------------------------
Resolve real name . --> Get philadelphia --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String jsonName ) { TypeData [[typeData]] = lookupTypeData ( type ) ; return [[typeData]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[philadelphia]] ( final Class type , final String jsonName ) { TypeData [[cheques]] = lookupTypeData ( type ) ; return [[cheques]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 838 ---------------------------------------------
Returns the type data for the given class . --> Helper method for refinery --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[refinery]] ( final Class [[roundhead]] ) { TypeData [[contradictory]] = typeDataMap . get ( [[roundhead]] ) ; if ( [[contradictory]] == null ) { [[contradictory]] = scanClassForAnnotations ( [[roundhead]] ) ; typeDataMap . put ( [[roundhead]] , [[contradictory]] ) ; } return [[contradictory]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 839 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 606 / 205 / 28 / 839:  84%|████████▍ | 839/1000 [31:59<06:08,  2.29s/it][Succeeded / Failed / Skipped / Total] 607 / 205 / 28 / 840:  84%|████████▍ | 840/1000 [32:00<06:05,  2.29s/it][Succeeded / Failed / Skipped / Total] 607 / 205 / 28 / 840:  84%|████████▍ | 841/1000 [32:07<06:04,  2.29s/it][Succeeded / Failed / Skipped / Total] 608 / 205 / 28 / 841:  84%|████████▍ | 841/1000 [32:07<06:04,  2.29s/it][Succeeded / Failed / Skipped / Total] 609 / 205 / 28 / 842:  84%|████████▍ | 842/1000 [32:09<06:01,  2.29s/it][Succeeded / Failed / Skipped / Total] 609 / 205 / 28 / 842:  84%|████████▍ | 843/1000 [32:09<05:59,  2.29s/it][Succeeded / Failed / Skipped / Total] 610 / 205 / 28 / 843:  84%|████████▍ | 843/1000 [32:09<05:59,  2.29s/it][Succeeded / Failed / Skipped / Total] 610 / 206 / 28 / 844:  84%|████████▍ | 844/1000 [32:24<05:59,  2.30s/it][Succeeded / Failed / Skipped / Total] 610 / 206 / 28 / 844:  84%|████████▍ | 845/1000 [32:28<05:57,  2.31s/it][Succeeded / Failed / Skipped / Total] 611 / 206 / 28 / 845:  84%|████████▍ | 845/1000 [32:28<05:57,  2.31s/it][Succeeded / Failed / Skipped / Total] 611 / 206 / 28 / 845:  85%|████████▍ | 846/1000 [32:34<05:55,  2.31s/it][Succeeded / Failed / Skipped / Total] 612 / 206 / 28 / 846:  85%|████████▍ | 846/1000 [32:34<05:55,  2.31s/it][Succeeded / Failed / Skipped / Total] 612 / 206 / 28 / 846:  85%|████████▍ | 847/1000 [32:35<05:53,  2.31s/it]Puts a constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[northerner]] ( final ByteVector [[aneurysm]] ) { [[aneurysm]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 840 ---------------------------------------------
Finds the type data for a subclass . --> Return the TypeData rioters --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class [[type]] ) { final Class < ? extends Annotation > [[defaultAnnotation]] = jsonAnnotation ; if ( [[type]] . getAnnotation ( [[defaultAnnotation]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[rioters]] ( final Class [[sorrel]] ) { final Class < ? extends Annotation > [[chapped]] = jsonAnnotation ; if ( [[sorrel]] . getAnnotation ( [[chapped]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 841 ---------------------------------------------
Copy bootstrap methods . --> Simple lengthen function --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader [[classReader]] , final char [ ] [[charBuffer]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[lengthen]] ( final ClassReader [[cavalcade]] , final char [ ] [[hirai]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 842 ---------------------------------------------
Resolve a JSON name . --> Do not call this method --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class type , final String [[name]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[finished]] ( final Class type , final String [[shiho]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[shiho]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 843 ---------------------------------------------
Adds the bootstrap methods . --> hideouts Method --> Socre: 1.0

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[hideouts]] ( final ByteVector [[teething]] ) { if ( bootstrapMethods != null ) { [[teething]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 844 ---------------------------------------------
Sets the major and class name . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int [[majorVersion]] , final String className ) { this . majorVersion = [[majorVersion]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[denomination]] ( final int [[kiosk]] , final String className ) { this . majorVersion = [[kiosk]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 845 ---------------------------------------------
Adds a field to this constant . --> Get custom parameters --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String [[name]] , final String [[descriptor]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[name]] , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[briefs]] ( final String owner , final String [[teething]] , final String [[repairing]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[teething]] , [[repairing]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a constant integer to the symbol table . --> region rollers Implementation --> Socre: 1.0

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int tag , final int [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . data == [[value]] ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( tag ) . putInt ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[rollers]] ( final int tag , final int [[insulin]] ) { int hashCode = hash ( tag , [[insulin]] ) ; Entry [[today]] = get ( hashCode ) ; while ( [[today]] != null ) { if ( [[today]] . tag == tag && [[today]] . hashCode == hashCode && [[today]] . data == [[insulin]] ) { return [[today]] ; } [[today]] = [[today]] . next ; } constantPool . putByte ( tag ) . putInt ( [[insulin]] ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[insulin]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 612 / 207 / 28 / 847:  85%|████████▍ | 847/1000 [32:35<05:53,  2.31s/it][Succeeded / Failed / Skipped / Total] 612 / 207 / 28 / 847:  85%|████████▍ | 848/1000 [32:37<05:50,  2.31s/it][Succeeded / Failed / Skipped / Total] 613 / 207 / 28 / 848:  85%|████████▍ | 848/1000 [32:37<05:50,  2.31s/it][Succeeded / Failed / Skipped / Total] 613 / 207 / 28 / 848:  85%|████████▍ | 849/1000 [32:44<05:49,  2.31s/it][Succeeded / Failed / Skipped / Total] 614 / 207 / 28 / 849:  85%|████████▍ | 849/1000 [32:44<05:49,  2.31s/it][Succeeded / Failed / Skipped / Total] 614 / 207 / 28 / 849:  85%|████████▌ | 850/1000 [32:46<05:47,  2.31s/it][Succeeded / Failed / Skipped / Total] 614 / 208 / 28 / 850:  85%|████████▌ | 850/1000 [32:46<05:47,  2.31s/it][Succeeded / Failed / Skipped / Total] 614 / 208 / 28 / 850:  85%|████████▌ | 851/1000 [32:55<05:45,  2.32s/it][Succeeded / Failed / Skipped / Total] 614 / 209 / 28 / 851:  85%|████████▌ | 851/1000 [32:55<05:45,  2.32s/it][Succeeded / Failed / Skipped / Total] 614 / 209 / 28 / 851:  85%|████████▌ | 852/1000 [32:56<05:43,  2.32s/it]Create a new action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler [[actionHandler]] , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( [[actionHandler]] != null ) { return new ActionRuntime ( [[actionHandler]] , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[checkpoints]] ( final ActionHandler [[emperor]] , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( [[emperor]] != null ) { return new ActionRuntime ( [[emperor]] , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a constant . --> rennes method --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int [[index]] , final int tag , final String owner , final String name , final String [[descriptor]] ) { add ( new Entry ( [[index]] , tag , owner , name , [[descriptor]] , 0 , hash ( tag , owner , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[rennes]] ( final int [[snoops]] , final int tag , final String owner , final String name , final String [[played]] ) { add ( new Entry ( [[snoops]] , tag , owner , name , [[played]] , 0 , hash ( tag , owner , name , [[played]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a constant method . --> helder --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String [[owner]] , final String [[name]] , final String descriptor , final boolean [[isInterface]] ) { int [[tag]] = [[isInterface]] ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[tag]] , [[owner]] , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[helder]] ( final String [[tranquilliser]] , final String [[stiu]] , final String descriptor , final boolean [[chandler]] ) { int [[unh]] = [[chandler]] ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[unh]] , [[tranquilliser]] , [[stiu]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 850 ---------------------------------------------
Adds a constant to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int index , final int [[tag]] , final int value ) { add ( new Entry ( index , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[koufax]] ( final int index , final int [[headpiece]] , final int value ) { add ( new Entry ( index , [[headpiece]] , value , hash ( [[headpiece]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a constant reference . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . owner . equals ( owner ) && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[undertake]] ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry [[kikes]] = get ( hashCode ) ; while ( [[kikes]] != null ) { if ( [[kikes]] . tag == tag && [[kikes]] . hashCode == hashCode && [[kikes]] . owner . equals ( owner ) && [[kikes]] . name . equals ( name ) && [[kikes]] . value . equals ( descriptor ) ) { return [[kikes]] ; } [[kikes]] = [[kikes]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 852 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 615 / 209 / 28 / 852:  85%|████████▌ | 852/1000 [32:56<05:43,  2.32s/it][Succeeded / Failed / Skipped / Total] 615 / 209 / 28 / 852:  85%|████████▌ | 853/1000 [33:01<05:41,  2.32s/it][Succeeded / Failed / Skipped / Total] 615 / 210 / 28 / 853:  85%|████████▌ | 853/1000 [33:01<05:41,  2.32s/it][Succeeded / Failed / Skipped / Total] 615 / 210 / 28 / 853:  85%|████████▌ | 854/1000 [33:02<05:38,  2.32s/it][Succeeded / Failed / Skipped / Total] 616 / 210 / 28 / 854:  85%|████████▌ | 854/1000 [33:02<05:38,  2.32s/it][Succeeded / Failed / Skipped / Total] 616 / 210 / 28 / 854:  86%|████████▌ | 855/1000 [33:10<05:37,  2.33s/it][Succeeded / Failed / Skipped / Total] 617 / 210 / 28 / 855:  86%|████████▌ | 855/1000 [33:10<05:37,  2.33s/it][Succeeded / Failed / Skipped / Total] 617 / 210 / 28 / 855:  86%|████████▌ | 856/1000 [33:10<05:34,  2.33s/it][Succeeded / Failed / Skipped / Total] 618 / 210 / 28 / 856:  86%|████████▌ | 856/1000 [33:10<05:34,  2.33s/it][Succeeded / Failed / Skipped / Total] 618 / 210 / 28 / 856:  86%|████████▌ | 857/1000 [33:20<05:33,  2.33s/it][Succeeded / Failed / Skipped / Total] 619 / 210 / 28 / 857:  86%|████████▌ | 857/1000 [33:20<05:33,  2.33s/it][Succeeded / Failed / Skipped / Total] 619 / 210 / 28 / 857:  86%|████████▌ | 858/1000 [33:25<05:31,  2.34s/it]Adds a string to the constant pool . --> region > add operation --> Socre: 1.0

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == Symbol . CONSTANT_UTF8_TAG && [[entry]] . hashCode == hashCode && [[entry]] . value . equals ( value ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[ferraris]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[autopsies]] = get ( hashCode ) ; while ( [[autopsies]] != null ) { if ( [[autopsies]] . tag == Symbol . CONSTANT_UTF8_TAG && [[autopsies]] . hashCode == hashCode && [[autopsies]] . value . equals ( value ) ) { return [[autopsies]] . index ; } [[autopsies]] = [[autopsies]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a long or double value . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int [[index]] , final int [[tag]] , final long value ) { add ( new Entry ( [[index]] , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[bodied]] ( final int [[emo]] , final int [[formy]] , final long value ) { add ( new Entry ( [[emo]] , [[formy]] , value , hash ( [[formy]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 854 ---------------------------------------------
Add a constant in UTF - 8 . --> terrorized function --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String value ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[terrorized]] ( final int [[leonora]] , final String value ) { add ( new Entry ( [[leonora]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a constant . --> Add constantDynamic --> Socre: 1.0

[[[[Adv]]]]: Symbol addConstantDynamic ( final String [[name]] , final String descriptor , final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[bootstrapMethodHandle]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String [[clutching]] , final String descriptor , final Handle [[burman]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[burman]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[clutching]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant long or double . --> teca hash value --> Socre: 1.0

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int [[tag]] , final long value ) { int hashCode = hash ( [[tag]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int [[index]] = constantPoolCount ; constantPool . putByte ( [[tag]] ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( [[index]] , [[tag]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[teca]] ( final int [[legs]] , final long value ) { int hashCode = hash ( [[legs]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[legs]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int [[dega]] = constantPoolCount ; constantPool . putByte ( [[legs]] ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( [[dega]] , [[legs]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a new constant . --> add constantDynamic orInvoke --> Socre: 1.0

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String [[name]] , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , [[name]] , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , [[name]] , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String [[familia]] , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , [[familia]] , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , [[familia]] , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 858 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 619 / 211 / 28 / 858:  86%|████████▌ | 858/1000 [33:25<05:31,  2.34s/it][Succeeded / Failed / Skipped / Total] 619 / 211 / 28 / 858:  86%|████████▌ | 859/1000 [33:33<05:30,  2.34s/it][Succeeded / Failed / Skipped / Total] 619 / 212 / 28 / 859:  86%|████████▌ | 859/1000 [33:33<05:30,  2.34s/it][Succeeded / Failed / Skipped / Total] 619 / 212 / 28 / 859:  86%|████████▌ | 860/1000 [33:33<05:27,  2.34s/it][Succeeded / Failed / Skipped / Total] 619 / 213 / 28 / 860:  86%|████████▌ | 860/1000 [33:33<05:27,  2.34s/it][Succeeded / Failed / Skipped / Total] 619 / 213 / 28 / 860:  86%|████████▌ | 861/1000 [33:35<05:25,  2.34s/it][Succeeded / Failed / Skipped / Total] 620 / 213 / 28 / 861:  86%|████████▌ | 861/1000 [33:35<05:25,  2.34s/it][Succeeded / Failed / Skipped / Total] 620 / 213 / 28 / 861:  86%|████████▌ | 862/1000 [33:40<05:23,  2.34s/it][Succeeded / Failed / Skipped / Total] 621 / 213 / 28 / 862:  86%|████████▌ | 862/1000 [33:40<05:23,  2.34s/it][Succeeded / Failed / Skipped / Total] 621 / 213 / 28 / 862:  86%|████████▋ | 863/1000 [33:50<05:22,  2.35s/it][Succeeded / Failed / Skipped / Total] 621 / 214 / 28 / 863:  86%|████████▋ | 863/1000 [33:50<05:22,  2.35s/it][Succeeded / Failed / Skipped / Total] 621 / 214 / 28 / 863:  86%|████████▋ | 864/1000 [33:51<05:19,  2.35s/it][Succeeded / Failed / Skipped / Total] 622 / 214 / 28 / 864:  86%|████████▋ | 864/1000 [33:51<05:19,  2.35s/it][Succeeded / Failed / Skipped / Total] 622 / 214 / 28 / 864:  86%|████████▋ | 865/1000 [33:54<05:17,  2.35s/it]Adds a constant map entry . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[locality]] ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Adds a constant name to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String name , final String [[descriptor]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , [[descriptor]] , hash ( tag , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[bernardino]] ( final int index , final String name , final String [[crimp]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , [[crimp]] , hash ( tag , name , [[crimp]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a constant handle . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String [[descriptor]] , final boolean isInterface ) { final int [[tag]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[versts]] ( final int referenceKind , final String owner , final String name , final String [[impatiently]] , final boolean isInterface ) { final int [[rupees]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Helper method to add a string in a constant pool --> Bummed method --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int [[tag]] , final String value ) { add ( new Entry ( index , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[bummed]] ( final int index , final int [[codex]] , final String value ) { add ( new Entry ( index , [[codex]] , value , hash ( [[codex]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 862 ---------------------------------------------
Adds a constant handle . --> gozaimasu --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int [[index]] , final int [[referenceKind]] , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[hashCode]] = hash ( tag , owner , name , descriptor , [[referenceKind]] ) ; add ( new Entry ( [[index]] , tag , owner , name , descriptor , [[referenceKind]] , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[gozaimasu]] ( final int [[consul]] , final int [[gaunt]] , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[postproduction]] = hash ( tag , owner , name , descriptor , [[gaunt]] ) ; add ( new Entry ( [[consul]] , tag , owner , name , descriptor , [[gaunt]] , [[postproduction]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 863 ---------------------------------------------
Removes all entries . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[snowboarders]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 864 ---------------------------------------------
Adds constant bootstrap method . --> F743 --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( bootstrapMethodHandle , [[bootstrapMethodArguments]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[farewells]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... [[tallulah]] ) { Symbol [[heterosexuals]] = addBootstrapMethod ( bootstrapMethodHandle , [[tallulah]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[heterosexuals]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 865 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 622 / 215 / 28 / 865:  86%|████████▋ | 865/1000 [33:54<05:17,  2.35s/it][Succeeded / Failed / Skipped / Total] 622 / 215 / 28 / 865:  87%|████████▋ | 866/1000 [33:56<05:15,  2.35s/it][Succeeded / Failed / Skipped / Total] 623 / 215 / 28 / 866:  87%|████████▋ | 866/1000 [33:56<05:15,  2.35s/it][Succeeded / Failed / Skipped / Total] 623 / 215 / 28 / 866:  87%|████████▋ | 867/1000 [33:57<05:12,  2.35s/it][Succeeded / Failed / Skipped / Total] 623 / 216 / 28 / 867:  87%|████████▋ | 867/1000 [33:57<05:12,  2.35s/it][Succeeded / Failed / Skipped / Total] 623 / 216 / 28 / 867:  87%|████████▋ | 868/1000 [33:57<05:09,  2.35s/it][Succeeded / Failed / Skipped / Total] 624 / 216 / 28 / 868:  87%|████████▋ | 868/1000 [33:57<05:09,  2.35s/it][Succeeded / Failed / Skipped / Total] 624 / 216 / 28 / 868:  87%|████████▋ | 869/1000 [34:04<05:08,  2.35s/it][Succeeded / Failed / Skipped / Total] 625 / 216 / 28 / 869:  87%|████████▋ | 869/1000 [34:04<05:08,  2.35s/it][Succeeded / Failed / Skipped / Total] 625 / 216 / 28 / 869:  87%|████████▋ | 870/1000 [34:05<05:05,  2.35s/it][Succeeded / Failed / Skipped / Total] 626 / 216 / 28 / 870:  87%|████████▋ | 870/1000 [34:05<05:05,  2.35s/it][Succeeded / Failed / Skipped / Total] 626 / 216 / 28 / 870:  87%|████████▋ | 871/1000 [34:07<05:03,  2.35s/it][Succeeded / Failed / Skipped / Total] 627 / 216 / 28 / 871:  87%|████████▋ | 871/1000 [34:07<05:03,  2.35s/it][Succeeded / Failed / Skipped / Total] 627 / 216 / 28 / 871:  87%|████████▋ | 872/1000 [34:10<05:00,  2.35s/it]Adds the bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { ByteVector [[bootstrapMethodsAttribute]] = bootstrapMethods ; if ( [[bootstrapMethodsAttribute]] == null ) { [[bootstrapMethodsAttribute]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[survived]] ( final Handle [[strident]] , final Object ... bootstrapMethodArguments ) { ByteVector [[mikado]] = bootstrapMethods ; if ( [[mikado]] == null ) { [[mikado]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 866 ---------------------------------------------
Adds a relation type . --> Add aMergedType --> Socre: 1.0

[[[[Adv]]]]: int addMergedType ( final int [[typeTableIndex1]] , final int [[typeTableIndex2]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int addMergedType ( final int [[bruni]] , final int [[rom]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 867 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int tag , final String [[value]] ) { int [[hashCode]] = hash ( tag , [[value]] ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . value . equals ( [[value]] ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[value]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[suu]] ( final int tag , final String [[tay]] ) { int [[develop]] = hash ( tag , [[tay]] ) ; Entry entry = get ( [[develop]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[develop]] && entry . value . equals ( [[tay]] ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[tay]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[tay]] , [[develop]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 868 ---------------------------------------------
Returns the hash value for the given name . --> non - invalid --> Socre: 1.0

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int [[h]] = 0 ; for ( int [[i]] = name . length ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { char c = name . charAt ( [[i]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[h]] = 31 * [[h]] + c ; } if ( [[h]] > 0 ) { return [[h]] ; } if ( [[h]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[h]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[nonstop]] ( final String name ) { int [[wetters]] = 0 ; for ( int [[fitzroy]] = name . length ( ) - 1 ; [[fitzroy]] >= 0 ; [[fitzroy]] -- ) { char c = name . charAt ( [[fitzroy]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[wetters]] = 31 * [[wetters]] + c ; } if ( [[wetters]] > 0 ) { return [[wetters]] ; } if ( [[wetters]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[wetters]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 869 ---------------------------------------------
Visits a method annotation . --> visit annotation --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String [[desc]] , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( [[desc]] , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String [[verdun]] , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( [[verdun]] , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 870 ---------------------------------------------
Append a char buffer to the end buffer . --> region FastCharBufferVersion Double --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[append]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[chumps]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[chumps]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 871 ---------------------------------------------
Visits all the objects in the list . --> duelverses --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[dueling]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 872 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 627 / 217 / 28 / 872:  87%|████████▋ | 872/1000 [34:10<05:00,  2.35s/it][Succeeded / Failed / Skipped / Total] 627 / 217 / 28 / 872:  87%|████████▋ | 873/1000 [34:13<04:58,  2.35s/it][Succeeded / Failed / Skipped / Total] 627 / 218 / 28 / 873:  87%|████████▋ | 873/1000 [34:13<04:58,  2.35s/it][Succeeded / Failed / Skipped / Total] 627 / 218 / 28 / 873:  87%|████████▋ | 874/1000 [34:14<04:56,  2.35s/it][Succeeded / Failed / Skipped / Total] 628 / 218 / 28 / 874:  87%|████████▋ | 874/1000 [34:14<04:56,  2.35s/it][Succeeded / Failed / Skipped / Total] 628 / 218 / 28 / 874:  88%|████████▊ | 875/1000 [34:17<04:53,  2.35s/it][Succeeded / Failed / Skipped / Total] 629 / 218 / 28 / 875:  88%|████████▊ | 875/1000 [34:17<04:53,  2.35s/it][Succeeded / Failed / Skipped / Total] 629 / 218 / 28 / 875:  88%|████████▊ | 876/1000 [34:21<04:51,  2.35s/it][Succeeded / Failed / Skipped / Total] 630 / 218 / 28 / 876:  88%|████████▊ | 876/1000 [34:21<04:51,  2.35s/it][Succeeded / Failed / Skipped / Total] 630 / 218 / 28 / 876:  88%|████████▊ | 877/1000 [34:22<04:49,  2.35s/it][Succeeded / Failed / Skipped / Total] 630 / 219 / 28 / 877:  88%|████████▊ | 877/1000 [34:22<04:49,  2.35s/it][Succeeded / Failed / Skipped / Total] 630 / 219 / 28 / 877:  88%|████████▊ | 878/1000 [34:22<04:46,  2.35s/it][Succeeded / Failed / Skipped / Total] 630 / 220 / 28 / 878:  88%|████████▊ | 878/1000 [34:22<04:46,  2.35s/it][Succeeded / Failed / Skipped / Total] 630 / 220 / 28 / 878:  88%|████████▊ | 879/1000 [34:24<04:44,  2.35s/it]Adds a constant reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String descriptor , final int [[bootstrapMethodIndex]] ) { int hashCode = hash ( tag , name , descriptor , [[bootstrapMethodIndex]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . data == [[bootstrapMethodIndex]] && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , [[bootstrapMethodIndex]] , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , [[bootstrapMethodIndex]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[dram]] ( final int tag , final String name , final String descriptor , final int [[inflames]] ) { int hashCode = hash ( tag , name , descriptor , [[inflames]] ) ; Entry [[heaved]] = get ( hashCode ) ; while ( [[heaved]] != null ) { if ( [[heaved]] . tag == tag && [[heaved]] . hashCode == hashCode && [[heaved]] . data == [[inflames]] && [[heaved]] . name . equals ( name ) && [[heaved]] . value . equals ( descriptor ) ) { return [[heaved]] ; } [[heaved]] = [[heaved]] . next ; } constantPool . put122 ( tag , [[inflames]] , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , [[inflames]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 873 ---------------------------------------------
Returns a list of entries . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { [[all]] . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[babli]] ( ) { List < Map . Entry < String , V > > [[lamontagne]] = new LinkedList <> ( ) ; MapEntry < V > [[bearings]] = head . after ; while ( [[bearings]] != head ) { [[lamontagne]] . add ( [[bearings]] ) ; [[bearings]] = [[bearings]] . after ; } return [[lamontagne]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 874 ---------------------------------------------
Create the first chain start . --> A bonking implementation --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[bonking]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 875 ---------------------------------------------
Returns an iterator over the entries in this map . --> Get the phenomenally from the map --> Socre: 1.0

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[next]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[next]] = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return [[next]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[eah]] ( ) { final MapEntry [ ] [[fleeing]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[fleeing]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[phenomenally]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[phenomenally]] = [[fleeing]] [ 0 ] ; [[fleeing]] [ 0 ] = [[fleeing]] [ 0 ] . after ; return [[phenomenally]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 876 ---------------------------------------------
Executes this path . --> dahlgren --> Socre: 1.0

[[[[Adv]]]]: public Object [[execute]] ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object [[dahlgren]] ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 877 ---------------------------------------------
Returns all values with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > [[getAll]] ( final String name ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int [[h]] = hash ( name ) ; int [[i]] = index ( [[h]] ) ; MapEntry < V > [[e]] = entries [ [[i]] ] ; while ( [[e]] != null ) { if ( [[e]] . hash == [[h]] && eq ( name , [[e]] . key ) ) { [[values]] . addFirst ( [[e]] . getValue ( ) ) ; } [[e]] = [[e]] . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[rim]] ( final String name ) { LinkedList < V > [[hoffmann]] = new LinkedList <> ( ) ; int [[midland]] = hash ( name ) ; int [[immigration]] = index ( [[midland]] ) ; MapEntry < V > [[mansell]] = entries [ [[immigration]] ] ; while ( [[mansell]] != null ) { if ( [[mansell]] . hash == [[midland]] && eq ( name , [[mansell]] . key ) ) { [[hoffmann]] . addFirst ( [[mansell]] . getValue ( ) ) ; } [[mansell]] = [[mansell]] . next ; } return [[hoffmann]] ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 878 ---------------------------------------------
Parse a file path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path parse ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path parse ( final String [[bacharach]] ) { return [[bacharach]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[bacharach]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 879 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 630 / 221 / 28 / 879:  88%|████████▊ | 879/1000 [34:24<04:44,  2.35s/it][Succeeded / Failed / Skipped / Total] 631 / 221 / 28 / 880:  88%|████████▊ | 880/1000 [34:24<04:41,  2.35s/it][Succeeded / Failed / Skipped / Total] 631 / 221 / 28 / 880:  88%|████████▊ | 881/1000 [34:26<04:39,  2.35s/it][Succeeded / Failed / Skipped / Total] 632 / 221 / 28 / 881:  88%|████████▊ | 881/1000 [34:26<04:39,  2.35s/it][Succeeded / Failed / Skipped / Total] 632 / 222 / 28 / 882:  88%|████████▊ | 882/1000 [34:26<04:36,  2.34s/it][Succeeded / Failed / Skipped / Total] 632 / 222 / 28 / 882:  88%|████████▊ | 883/1000 [34:31<04:34,  2.35s/it][Succeeded / Failed / Skipped / Total] 633 / 222 / 28 / 883:  88%|████████▊ | 883/1000 [34:31<04:34,  2.35s/it][Succeeded / Failed / Skipped / Total] 634 / 222 / 28 / 884:  88%|████████▊ | 884/1000 [34:32<04:31,  2.34s/it][Succeeded / Failed / Skipped / Total] 634 / 222 / 28 / 884:  88%|████████▊ | 885/1000 [34:37<04:29,  2.35s/it][Succeeded / Failed / Skipped / Total] 635 / 222 / 28 / 885:  88%|████████▊ | 885/1000 [34:37<04:29,  2.35s/it]Adds a field . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[infallible]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 880 ---------------------------------------------
Grows the buffer at the specified capacity . --> zen zen method --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int [[minCapacity]] ) { final int oldCapacity = buffer . length ; int [[newCapacity]] = oldCapacity << 1 ; if ( [[newCapacity]] - [[minCapacity]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[zen]] ( final int [[contrive]] ) { final int oldCapacity = buffer . length ; int [[reshape]] = oldCapacity << 1 ; if ( [[reshape]] - [[contrive]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 881 ---------------------------------------------
Configure servlet context . --> DecoraServlet filter --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[filter]] = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration [[filter]] = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[excavator]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[knell]] = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[knell]] . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration [[knell]] = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[knell]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 882 ---------------------------------------------
Creates the firstChainDelegate_Continue method . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[ancora]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 883 ---------------------------------------------
Append a buffer . --> san empty version --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[sanctified]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 884 ---------------------------------------------
Adds the contents of t to this map . --> dresses --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[dresses]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 885 ---------------------------------------------
Convert Jtx transactionMode to transactionMode . --> This method initializes DbTransactionMode --> Socre: 1.0

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode [[txMode]] ) { final int isolation ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[democratic]] ( final JtxTransactionMode [[waddle]] ) { final int isolation ; switch ( [[waddle]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[waddle]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 886 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 636 / 222 / 28 / 886:  89%|████████▊ | 886/1000 [34:46<04:28,  2.36s/it][Succeeded / Failed / Skipped / Total] 636 / 222 / 28 / 886:  89%|████████▊ | 887/1000 [34:52<04:26,  2.36s/it][Succeeded / Failed / Skipped / Total] 637 / 222 / 28 / 887:  89%|████████▊ | 887/1000 [34:52<04:26,  2.36s/it][Succeeded / Failed / Skipped / Total] 637 / 222 / 28 / 887:  89%|████████▉ | 888/1000 [34:54<04:24,  2.36s/it][Succeeded / Failed / Skipped / Total] 637 / 223 / 28 / 888:  89%|████████▉ | 888/1000 [34:54<04:24,  2.36s/it][Succeeded / Failed / Skipped / Total] 637 / 223 / 28 / 888:  89%|████████▉ | 889/1000 [34:56<04:21,  2.36s/it][Succeeded / Failed / Skipped / Total] 637 / 224 / 28 / 889:  89%|████████▉ | 889/1000 [34:56<04:21,  2.36s/it][Succeeded / Failed / Skipped / Total] 637 / 224 / 28 / 889:  89%|████████▉ | 890/1000 [34:58<04:19,  2.36s/it][Succeeded / Failed / Skipped / Total] 637 / 225 / 28 / 890:  89%|████████▉ | 890/1000 [34:58<04:19,  2.36s/it][Succeeded / Failed / Skipped / Total] 637 / 225 / 28 / 890:  89%|████████▉ | 891/1000 [35:00<04:16,  2.36s/it][Succeeded / Failed / Skipped / Total] 637 / 226 / 28 / 891:  89%|████████▉ | 891/1000 [35:00<04:16,  2.36s/it][Succeeded / Failed / Skipped / Total] 637 / 226 / 28 / 891:  89%|████████▉ | 892/1000 [35:03<04:14,  2.36s/it][Succeeded / Failed / Skipped / Total] 638 / 226 / 28 / 892:  89%|████████▉ | 892/1000 [35:03<04:14,  2.36s/it][Succeeded / Failed / Skipped / Total] 638 / 226 / 28 / 892:  89%|████████▉ | 893/1000 [35:10<04:12,  2.36s/it][Succeeded / Failed / Skipped / Total] 639 / 226 / 28 / 893:  89%|████████▉ | 893/1000 [35:10<04:12,  2.36s/it][Succeeded / Failed / Skipped / Total] 639 / 226 / 28 / 893:  89%|████████▉ | 894/1000 [35:11<04:10,  2.36s/it]Write the progress listener . --> Write out homecRedirect --> Socre: 1.0

[[[[Adv]]]]: public void writeTo ( final OutputStream [[out]] , final HttpProgressListener [[progressListener]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void writeTo ( final OutputStream [[cleve]] , final HttpProgressListener [[homecoming]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 887 ---------------------------------------------
Writes the contents of this object to the given stream . --> dressers --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[out]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[uploadable]] = ( Uploadable ) o ; InputStream inputStream = [[uploadable]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[out]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[hilary]] ( final OutputStream [[dressmakers]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[dressmakers]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[para]] = ( Uploadable ) o ; InputStream inputStream = [[para]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[dressmakers]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 888 ---------------------------------------------
Reads a property . --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[readProperty]] ( final Object [[source]] , final PropertyDescriptor propertyDescriptor ) { Getter [[getter]] = propertyDescriptor . getGetter ( declared ) ; if ( [[getter]] != null ) { try { return [[getter]] . invokeGetter ( [[source]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[demonstrator]] ( final Object [[binoculars]] , final PropertyDescriptor propertyDescriptor ) { Getter [[sparkle]] = propertyDescriptor . getGetter ( declared ) ; if ( [[sparkle]] != null ) { try { return [[sparkle]] . invokeGetter ( [[binoculars]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 889 ---------------------------------------------
Gets string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String key ) { CharSequence cs = ( CharSequence ) map . get ( key ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[locality]] ( final String key ) { CharSequence cs = ( CharSequence ) map . get ( key ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 890 ---------------------------------------------
Gets the fields descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[ancora]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 891 ---------------------------------------------
Returns the integer value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getInteger]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[bio]] ( final String key ) { Number [[fabienne]] = ( Number ) map . get ( key ) ; if ( [[fabienne]] == null ) { return null ; } if ( [[fabienne]] instanceof Integer ) { return ( Integer ) [[fabienne]] ; } return [[fabienne]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
Get a Long . --> kippur a number --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[kippur]] ( final String [[gérard]] ) { Number number = ( Number ) map . get ( [[gérard]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Returns the Float associated with the key . --> Return null if ourselves --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[ourselves]] ( final String [[asimov]] ) { Number number = ( Number ) map . get ( [[asimov]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 640 / 226 / 28 / 894:  89%|████████▉ | 894/1000 [35:11<04:10,  2.36s/it][Succeeded / Failed / Skipped / Total] 640 / 226 / 28 / 894:  90%|████████▉ | 895/1000 [35:11<04:07,  2.36s/it][Succeeded / Failed / Skipped / Total] 641 / 226 / 28 / 895:  90%|████████▉ | 895/1000 [35:11<04:07,  2.36s/it][Succeeded / Failed / Skipped / Total] 641 / 226 / 28 / 895:  90%|████████▉ | 896/1000 [35:12<04:05,  2.36s/it][Succeeded / Failed / Skipped / Total] 642 / 226 / 28 / 896:  90%|████████▉ | 896/1000 [35:12<04:05,  2.36s/it][Succeeded / Failed / Skipped / Total] 642 / 226 / 28 / 896:  90%|████████▉ | 897/1000 [35:17<04:03,  2.36s/it][Succeeded / Failed / Skipped / Total] 642 / 227 / 28 / 897:  90%|████████▉ | 897/1000 [35:17<04:03,  2.36s/it][Succeeded / Failed / Skipped / Total] 642 / 227 / 28 / 897:  90%|████████▉ | 898/1000 [35:18<04:00,  2.36s/it][Succeeded / Failed / Skipped / Total] 643 / 227 / 28 / 898:  90%|████████▉ | 898/1000 [35:18<04:00,  2.36s/it][Succeeded / Failed / Skipped / Total] 643 / 227 / 28 / 898:  90%|████████▉ | 899/1000 [35:19<03:58,  2.36s/it][Succeeded / Failed / Skipped / Total] 644 / 227 / 28 / 899:  90%|████████▉ | 899/1000 [35:19<03:58,  2.36s/it][Succeeded / Failed / Skipped / Total] 644 / 227 / 28 / 899:  90%|█████████ | 900/1000 [35:23<03:55,  2.36s/it][Succeeded / Failed / Skipped / Total] 645 / 227 / 28 / 900:  90%|█████████ | 900/1000 [35:23<03:55,  2.36s/it][Succeeded / Failed / Skipped / Total] 645 / 227 / 28 / 900:  90%|█████████ | 901/1000 [35:23<03:53,  2.36s/it]Returns the value of the given key . --> Convenience method for unscientific --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] [[val]] = ( [[T]] ) map . get ( key ) ; if ( [[val]] instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) [[val]] ) ; } if ( [[val]] instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) [[val]] ) ; } return [[val]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[unscientific]] > [[unscientific]] getValue ( final String key ) { [[unscientific]] [[ser]] = ( [[unscientific]] ) map . get ( key ) ; if ( [[ser]] instanceof Map ) { return ( [[unscientific]] ) new JsonObject ( ( Map ) [[ser]] ) ; } if ( [[ser]] instanceof List ) { return ( [[unscientific]] ) new JsonArray ( ( List ) [[ser]] ) ; } return [[ser]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 895 ---------------------------------------------
Add a new value . --> Set expiry value --> Socre: 1.0

[[[[Adv]]]]: public JsonObject [[put]] ( final String [[key]] , final String value ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[maoris]] ( final String [[expiry]] , final String value ) { Objects . requireNonNull ( [[expiry]] ) ; map . put ( [[expiry]] , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 896 ---------------------------------------------
Receives messages from the EmailFilter . --> Fetch messages from EmailFilter --> Socre: 1.0

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[fetchProfile]] = new FetchProfile ( ) ; [[fetchProfile]] . add ( FetchProfile . Item . ENVELOPE ) ; [[fetchProfile]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , [[fetchProfile]] ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[dadi]] = new FetchProfile ( ) ; [[dadi]] . add ( FetchProfile . Item . ENVELOPE ) ; [[dadi]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , [[dadi]] ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 897 ---------------------------------------------
Retrieves a double value . --> [[[FAILED]]]

[[[[Adv]]]]: public Double [[getDouble]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[energized]] ( final String key ) { Number [[agains]] = ( Number ) map . get ( key ) ; if ( [[agains]] == null ) { return null ; } if ( [[agains]] instanceof Double ) { return ( Double ) [[agains]] ; } return [[agains]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 898 ---------------------------------------------
Updates the received email flags . --> Update a strengthening --> Socre: 1.0

[[[[Adv]]]]: public void updateEmailFlags ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void updateEmailFlags ( final ReceivedEmail [[strengthening]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[strengthening]] . messageNumber ( ) } , [[strengthening]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 899 ---------------------------------------------
Returns a alias for the specified target . --> Add a new item to the map --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[addictions]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 900 ---------------------------------------------
Creates a bean definition . --> Creates a new BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[originalType]] = type ; final ProxettaFactory [[builder]] = proxetta . proxy ( ) ; [[builder]] . setTarget ( type ) ; type = [[builder]] . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , [[originalType]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[guiding]] = type ; final ProxettaFactory [[killen]] = proxetta . proxy ( ) ; [[killen]] . setTarget ( type ) ; type = [[killen]] . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , [[guiding]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 901 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 646 / 227 / 28 / 901:  90%|█████████ | 901/1000 [35:23<03:53,  2.36s/it][Succeeded / Failed / Skipped / Total] 646 / 227 / 28 / 901:  90%|█████████ | 902/1000 [35:25<03:50,  2.36s/it][Succeeded / Failed / Skipped / Total] 647 / 227 / 28 / 902:  90%|█████████ | 902/1000 [35:25<03:50,  2.36s/it][Succeeded / Failed / Skipped / Total] 647 / 227 / 28 / 902:  90%|█████████ | 903/1000 [35:26<03:48,  2.36s/it][Succeeded / Failed / Skipped / Total] 648 / 227 / 28 / 903:  90%|█████████ | 903/1000 [35:26<03:48,  2.36s/it][Succeeded / Failed / Skipped / Total] 648 / 227 / 28 / 903:  90%|█████████ | 904/1000 [35:29<03:46,  2.36s/it][Succeeded / Failed / Skipped / Total] 648 / 228 / 28 / 904:  90%|█████████ | 904/1000 [35:29<03:46,  2.36s/it][Succeeded / Failed / Skipped / Total] 648 / 228 / 28 / 904:  90%|█████████ | 905/1000 [35:31<03:43,  2.36s/it][Succeeded / Failed / Skipped / Total] 648 / 229 / 28 / 905:  90%|█████████ | 905/1000 [35:31<03:43,  2.36s/it][Succeeded / Failed / Skipped / Total] 648 / 229 / 28 / 905:  91%|█████████ | 906/1000 [35:31<03:41,  2.35s/it][Succeeded / Failed / Skipped / Total] 648 / 229 / 29 / 906:  91%|█████████ | 906/1000 [35:31<03:41,  2.35s/it][Succeeded / Failed / Skipped / Total] 648 / 229 / 29 / 906:  91%|█████████ | 907/1000 [35:35<03:38,  2.35s/it][Succeeded / Failed / Skipped / Total] 649 / 229 / 29 / 907:  91%|█████████ | 907/1000 [35:35<03:38,  2.35s/it][Succeeded / Failed / Skipped / Total] 649 / 229 / 29 / 907:  91%|█████████ | 908/1000 [35:37<03:36,  2.35s/it][Succeeded / Failed / Skipped / Total] 649 / 230 / 29 / 908:  91%|█████████ | 908/1000 [35:37<03:36,  2.35s/it][Succeeded / Failed / Skipped / Total] 649 / 230 / 29 / 908:  91%|█████████ | 909/1000 [35:38<03:34,  2.35s/it]Writes the contents of this object to the specified writer . --> F743 - 5 --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final Writer writer ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; byte [ ] [[array]] = fastByteBuffer . toArray ( ) ; writer . write ( new String ( [[array]] , StringPool . ISO_8859_1 ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable [[uploadable]] = ( Uploadable ) [[o]] ; InputStream [[inputStream]] = [[uploadable]] . openInputStream ( ) ; try { StreamUtil . copy ( [[inputStream]] , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[inputStream]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[strictest]] ( final Writer writer ) throws IOException { for ( Object [[teodoro]] : list ) { if ( [[teodoro]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[teodoro]] ; byte [ ] [[asn]] = fastByteBuffer . toArray ( ) ; writer . write ( new String ( [[asn]] , StringPool . ISO_8859_1 ) ) ; } else if ( [[teodoro]] instanceof Uploadable ) { Uploadable [[cheeses]] = ( Uploadable ) [[teodoro]] ; InputStream [[blair]] = [[cheeses]] . openInputStream ( ) ; try { StreamUtil . copy ( [[blair]] , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[blair]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 902 ---------------------------------------------
Add a violation . --> Add a canonical violations --> Socre: 1.0

[[[[Adv]]]]: protected void addViolation ( final String name , final Object [[invalidValue]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , [[invalidValue]] ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void addViolation ( final String name , final Object [[raided]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , [[raided]] ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 903 ---------------------------------------------
Sets the mime data as a property . --> Sets accumulator data . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[mimeOrExtension]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String [[accumulator]] ) { if ( [[accumulator]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[accumulator]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[accumulator]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 904 ---------------------------------------------
Attempts to the specified folder . --> [[[FAILED]]]

[[[[Adv]]]]: public void useFolder ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . [[folder]] = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void useFolder ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . [[augie]] = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 905 ---------------------------------------------
Closes the folder . --> [[[FAILED]]]

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "[[True]]" == "[[True]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "[[Actions]]" == "[[Actions]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 906 ---------------------------------------------
Create the proxy --> [[[SKIPPED]]]

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 907 ---------------------------------------------
Lookup a named parameter . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String name ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( name ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[rafters]] ( final String name ) { DbQueryNamedParameter [[tay]] = rootNP ; while ( [[tay]] != null ) { if ( [[tay]] . equalsName ( name ) ) { return [[tay]] ; } [[tay]] = [[tay]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 908 ---------------------------------------------
Gets the target instance . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[talus]] ( final InputStream [[marti]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[marti]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 909 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 649 / 231 / 29 / 909:  91%|█████████ | 909/1000 [35:38<03:34,  2.35s/it][Succeeded / Failed / Skipped / Total] 649 / 231 / 29 / 909:  91%|█████████ | 910/1000 [35:38<03:31,  2.35s/it][Succeeded / Failed / Skipped / Total] 649 / 231 / 30 / 910:  91%|█████████ | 910/1000 [35:38<03:31,  2.35s/it][Succeeded / Failed / Skipped / Total] 649 / 231 / 30 / 910:  91%|█████████ | 911/1000 [35:38<03:28,  2.35s/it][Succeeded / Failed / Skipped / Total] 650 / 231 / 30 / 911:  91%|█████████ | 911/1000 [35:38<03:28,  2.35s/it][Succeeded / Failed / Skipped / Total] 650 / 231 / 30 / 911:  91%|█████████ | 912/1000 [35:38<03:26,  2.34s/it][Succeeded / Failed / Skipped / Total] 650 / 231 / 31 / 912:  91%|█████████ | 912/1000 [35:38<03:26,  2.34s/it][Succeeded / Failed / Skipped / Total] 650 / 231 / 31 / 912:  91%|█████████▏| 913/1000 [35:40<03:24,  2.34s/it][Succeeded / Failed / Skipped / Total] 650 / 232 / 31 / 913:  91%|█████████▏| 913/1000 [35:40<03:24,  2.34s/it][Succeeded / Failed / Skipped / Total] 650 / 232 / 31 / 913:  91%|█████████▏| 914/1000 [35:42<03:21,  2.34s/it][Succeeded / Failed / Skipped / Total] 650 / 233 / 31 / 914:  91%|█████████▏| 914/1000 [35:42<03:21,  2.34s/it][Succeeded / Failed / Skipped / Total] 650 / 233 / 31 / 914:  92%|█████████▏| 915/1000 [35:44<03:19,  2.34s/it][Succeeded / Failed / Skipped / Total] 651 / 233 / 31 / 915:  92%|█████████▏| 915/1000 [35:44<03:19,  2.34s/it][Succeeded / Failed / Skipped / Total] 651 / 233 / 31 / 915:  92%|█████████▏| 916/1000 [35:44<03:16,  2.34s/it][Succeeded / Failed / Skipped / Total] 652 / 233 / 31 / 916:  92%|█████████▏| 916/1000 [35:44<03:16,  2.34s/it][Succeeded / Failed / Skipped / Total] 652 / 233 / 31 / 916:  92%|█████████▏| 917/1000 [35:46<03:14,  2.34s/it][Succeeded / Failed / Skipped / Total] 653 / 233 / 31 / 917:  92%|█████████▏| 917/1000 [35:46<03:14,  2.34s/it][Succeeded / Failed / Skipped / Total] 653 / 233 / 31 / 917:  92%|█████████▏| 918/1000 [35:48<03:11,  2.34s/it]Get target object by name . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[readily]] ( final String [[asunder]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[asunder]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[asunder]] ) ; } targetClassName = [[asunder]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[asunder]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 910 ---------------------------------------------
Create a new EmailAddress --> [[[SKIPPED]]]

[[[[Adv]]]]: public T from ( final String personalName , final String from ) { return from ( new EmailAddress ( personalName , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 911 ---------------------------------------------
Process the target class . --> Boludo --> Socre: 1.0

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[boludo]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 912 ---------------------------------------------
Create a EmailAddress --> [[[SKIPPED]]]

[[[[Adv]]]]: public T to ( final String personalName , final String to ) { return to ( new EmailAddress ( personalName , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 913 ---------------------------------------------
Validate action . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[violations]] = vtor . getViolations ( ) ; return [[violations]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[meir]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[synthetic]] = vtor . getViolations ( ) ; return [[synthetic]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 914 ---------------------------------------------
Returns the target class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[masturbator]] ( final Class [[caden]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[caden]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[caden]] . getName ( ) ) ; } targetClass = [[caden]] ; targetClassName = [[caden]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[caden]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 915 ---------------------------------------------
Dumps the debug folder . --> impl of debugFolder --> Socre: 1.0

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] [[bytes]] ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , [[bytes]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] [[pogo]] ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , [[pogo]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 916 ---------------------------------------------
Downloads the given download file . --> Configure banker --> Socre: 1.0

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String [[downloadFileName]] ) { this . [[downloadFileName]] = [[downloadFileName]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[heifetz]] ( final String [[banker]] ) { this . [[apothecary]] = [[banker]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[banker]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 917 ---------------------------------------------
Sets the given REPLACEME0 . --> Sets AID of --> Socre: 1.0

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . replyTo = ArraysUtil . join ( this . replyTo , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[AIDA]] ( final EmailAddress ... [[AIDA]] ) { this . replyTo = ArraysUtil . join ( this . replyTo , valueOrEmptyArray ( [[AIDA]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 918 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 654 / 233 / 31 / 918:  92%|█████████▏| 918/1000 [35:48<03:11,  2.34s/it][Succeeded / Failed / Skipped / Total] 654 / 233 / 31 / 918:  92%|█████████▏| 919/1000 [35:49<03:09,  2.34s/it][Succeeded / Failed / Skipped / Total] 655 / 233 / 31 / 919:  92%|█████████▏| 919/1000 [35:49<03:09,  2.34s/it][Succeeded / Failed / Skipped / Total] 655 / 233 / 31 / 919:  92%|█████████▏| 920/1000 [35:52<03:07,  2.34s/it][Succeeded / Failed / Skipped / Total] 655 / 234 / 31 / 920:  92%|█████████▏| 920/1000 [35:52<03:07,  2.34s/it][Succeeded / Failed / Skipped / Total] 655 / 234 / 31 / 920:  92%|█████████▏| 921/1000 [35:53<03:04,  2.34s/it][Succeeded / Failed / Skipped / Total] 656 / 234 / 31 / 921:  92%|█████████▏| 921/1000 [35:53<03:04,  2.34s/it][Succeeded / Failed / Skipped / Total] 656 / 234 / 31 / 921:  92%|█████████▏| 922/1000 [35:57<03:02,  2.34s/it][Succeeded / Failed / Skipped / Total] 657 / 234 / 31 / 922:  92%|█████████▏| 922/1000 [35:57<03:02,  2.34s/it][Succeeded / Failed / Skipped / Total] 657 / 234 / 31 / 922:  92%|█████████▏| 923/1000 [36:00<03:00,  2.34s/it][Succeeded / Failed / Skipped / Total] 658 / 234 / 31 / 923:  92%|█████████▏| 923/1000 [36:00<03:00,  2.34s/it][Succeeded / Failed / Skipped / Total] 659 / 234 / 31 / 924:  92%|█████████▏| 924/1000 [36:00<02:57,  2.34s/it][Succeeded / Failed / Skipped / Total] 659 / 234 / 31 / 924:  92%|█████████▎| 925/1000 [36:00<02:55,  2.34s/it][Succeeded / Failed / Skipped / Total] 659 / 235 / 31 / 925:  92%|█████████▎| 925/1000 [36:00<02:55,  2.34s/it][Succeeded / Failed / Skipped / Total] 660 / 235 / 31 / 926:  93%|█████████▎| 926/1000 [36:03<02:52,  2.34s/it][Succeeded / Failed / Skipped / Total] 660 / 235 / 31 / 926:  93%|█████████▎| 927/1000 [36:08<02:50,  2.34s/it]Add a cc . --> Set a single address --> Socre: 1.0

[[[[Adv]]]]: public T cc ( final EmailAddress ... ccs ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T cc ( final EmailAddress ... ccs ) { this . [[flem]] = ArraysUtil . join ( this . [[flem]] , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 919 ---------------------------------------------
Create a new instance of the class . --> Create a Proxetta object --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class [[type]] = define ( ) ; try { return ClassUtil . newInstance ( [[type]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[ativan]] ( ) { Class [[brion]] = define ( ) ; try { return ClassUtil . newInstance ( [[brion]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 920 ---------------------------------------------
Initialize the proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[classLoader]] = proxetta . getClassLoader ( ) ; if ( [[classLoader]] == null ) { [[classLoader]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[classLoader]] == null ) && ( targetClass != null ) ) { [[classLoader]] = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , [[classLoader]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[canaveral]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[ecumenical]] = proxetta . getClassLoader ( ) ; if ( [[ecumenical]] == null ) { [[ecumenical]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[ecumenical]] == null ) && ( targetClass != null ) ) { [[ecumenical]] = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , [[ecumenical]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 921 ---------------------------------------------
Appends to the given EmailAddress . --> Get aroomsmen --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final EmailAddress [[to]] ) { this . to = ArraysUtil . append ( this . to , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[groomsmen]] ( final EmailAddress [[polygraph]] ) { this . to = ArraysUtil . append ( this . to , [[groomsmen]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 922 ---------------------------------------------
Adds an html message . --> Add a EmailMessage --> Socre: 1.0

[[[[Adv]]]]: public T htmlMessage ( final String [[html]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T htmlMessage ( final String [[lindquist]] , final String [[phony]] ) { return message ( new EmailMessage ( [[lindquist]] , MimeTypes . MIME_TEXT_HTML , [[phony]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 923 ---------------------------------------------
Gets the long value . --> Get a long from a String --> Socre: 1.0

[[[[Adv]]]]: public static long getInt ( final String [[name]] , final int defaultValue ) { String value = get ( [[name]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String [[dalia]] , final int defaultValue ) { String value = get ( [[dalia]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 924 ---------------------------------------------
Sets a header . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String value ) { headers . put ( [[name]] , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[augsburg]] ( final String [[oceanic]] , final String value ) { headers . put ( [[oceanic]] , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 925 ---------------------------------------------
Gets resolved parameters . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[tintin]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 926 ---------------------------------------------
Set text message . --> Add a EmailMessage --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[howitzer]] ( final String [[fernanda]] , final String [[uma]] ) { return message ( new EmailMessage ( [[fernanda]] , MimeTypes . MIME_TEXT_PLAIN , [[uma]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 927 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 661 / 235 / 31 / 927:  93%|█████████▎| 927/1000 [36:08<02:50,  2.34s/it][Succeeded / Failed / Skipped / Total] 662 / 235 / 31 / 928:  93%|█████████▎| 928/1000 [36:17<02:48,  2.35s/it][Succeeded / Failed / Skipped / Total] 662 / 235 / 31 / 928:  93%|█████████▎| 929/1000 [36:19<02:46,  2.35s/it][Succeeded / Failed / Skipped / Total] 663 / 235 / 31 / 929:  93%|█████████▎| 929/1000 [36:19<02:46,  2.35s/it][Succeeded / Failed / Skipped / Total] 663 / 235 / 31 / 929:  93%|█████████▎| 930/1000 [36:23<02:44,  2.35s/it][Succeeded / Failed / Skipped / Total] 664 / 235 / 31 / 930:  93%|█████████▎| 930/1000 [36:23<02:44,  2.35s/it][Succeeded / Failed / Skipped / Total] 664 / 235 / 31 / 930:  93%|█████████▎| 931/1000 [36:24<02:41,  2.35s/it][Succeeded / Failed / Skipped / Total] 664 / 236 / 31 / 931:  93%|█████████▎| 931/1000 [36:24<02:41,  2.35s/it][Succeeded / Failed / Skipped / Total] 664 / 236 / 31 / 931:  93%|█████████▎| 932/1000 [36:24<02:39,  2.34s/it][Succeeded / Failed / Skipped / Total] 665 / 236 / 31 / 932:  93%|█████████▎| 932/1000 [36:24<02:39,  2.34s/it][Succeeded / Failed / Skipped / Total] 665 / 237 / 31 / 933:  93%|█████████▎| 933/1000 [36:24<02:36,  2.34s/it][Succeeded / Failed / Skipped / Total] 665 / 237 / 31 / 933:  93%|█████████▎| 934/1000 [36:31<02:34,  2.35s/it][Succeeded / Failed / Skipped / Total] 666 / 237 / 31 / 934:  93%|█████████▎| 934/1000 [36:31<02:34,  2.35s/it][Succeeded / Failed / Skipped / Total] 667 / 237 / 31 / 935:  94%|█████████▎| 935/1000 [36:32<02:32,  2.34s/it][Succeeded / Failed / Skipped / Total] 667 / 237 / 31 / 935:  94%|█████████▎| 936/1000 [36:38<02:30,  2.35s/it]Gets the value of a property . --> Get cleve as a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[get]] ( final String [[name]] , final String defaultValue ) { Objects . requireNonNull ( [[name]] ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( [[name]] ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return defaultValue ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[crummy]] ( final String [[cleve]] , final String defaultValue ) { Objects . requireNonNull ( [[cleve]] ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( [[cleve]] ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[cleve]] ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return defaultValue ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 928 ---------------------------------------------
Serialize a key value pair . --> Serialize caff to currentPath --> Socre: 1.0

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext jsonContext , final Path currentPath , final Object [[key]] , final Object value , int [[count]] ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return [[count]] ; } if ( [[key]] != null ) { currentPath . push ( [[key]] . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext jsonContext , final Path currentPath , final Object [[caff]] , final Object value , int [[comitted]] ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return [[comitted]] ; } if ( [[caff]] != null ) { currentPath . push ( [[caff]] . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 929 ---------------------------------------------
Returns the result path . --> Get the hershey value --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String [[path]] , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[hershey]] ( String [[bovine]] , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 930 ---------------------------------------------
Get the absolute slash of the string . --> turntable of a string --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int [[dotNdx]] = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( [[dotNdx]] == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { [[dotNdx]] = slashNdx ; } else { [[dotNdx]] = - 1 ; } } return [[dotNdx]] ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[turntable]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int [[cancellations]] = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( [[cancellations]] == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { [[cancellations]] = slashNdx ; } else { [[cancellations]] = - 1 ; } } return [[cancellations]] ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 931 ---------------------------------------------
Lookup alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String alias ) { String [[value]] = actionsManager . lookupPathAlias ( alias ) ; if ( [[value]] == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { [[value]] = cfg . getActionPath ( ) ; } } return [[value]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[dorkus]] ( final String alias ) { String [[chic]] = actionsManager . lookupPathAlias ( alias ) ; if ( [[chic]] == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { [[chic]] = cfg . getActionPath ( ) ; } } return [[chic]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 932 ---------------------------------------------
Gets the index of the last slash in the specified string . --> Bowles a string --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[bowles]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 933 ---------------------------------------------
Get a long value . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLong]] ( final String [[name]] , final long [[defaultValue]] ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[moral]] ( final String [[inordinate]] , final long [[bourdieu]] ) { String [[dearth]] = get ( [[inordinate]] ) ; if ( [[dearth]] == null ) { return [[bourdieu]] ; } [[dearth]] = [[dearth]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[dearth]] ) ; } catch ( NumberFormatException nfex ) { return [[bourdieu]] ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 934 ---------------------------------------------
Initializes the map . --> region > wittenberg --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final long [ ] key , final long [ ] tweak ) { final int newNw = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[wittenberg]] ( final long [ ] key , final long [ ] tweak ) { final int newNw = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 935 ---------------------------------------------
Strip the last camel date --> Return the name of the first word that is a valid word . --> Socre: 1.0

[[[[Adv]]]]: public static String stripLastCamelWord ( String name ) { int [[ndx]] = name . length ( ) - 1 ; while ( [[ndx]] >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( [[ndx]] ) ) ) { break ; } [[ndx]] -- ; } if ( [[ndx]] >= 0 ) { name = name . substring ( 0 , [[ndx]] ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String stripLastCamelWord ( String name ) { int [[apologising]] = name . length ( ) - 1 ; while ( [[apologising]] >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( [[apologising]] ) ) ) { break ; } [[apologising]] -- ; } if ( [[apologising]] >= 0 ) { name = name . substring ( 0 , [[apologising]] ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 936 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 668 / 237 / 31 / 936:  94%|█████████▎| 936/1000 [36:38<02:30,  2.35s/it][Succeeded / Failed / Skipped / Total] 669 / 237 / 31 / 937:  94%|█████████▎| 937/1000 [36:40<02:27,  2.35s/it][Succeeded / Failed / Skipped / Total] 669 / 237 / 31 / 937:  94%|█████████▍| 938/1000 [36:42<02:25,  2.35s/it][Succeeded / Failed / Skipped / Total] 670 / 237 / 31 / 938:  94%|█████████▍| 938/1000 [36:42<02:25,  2.35s/it][Succeeded / Failed / Skipped / Total] 671 / 237 / 31 / 939:  94%|█████████▍| 939/1000 [36:42<02:23,  2.35s/it][Succeeded / Failed / Skipped / Total] 671 / 237 / 31 / 939:  94%|█████████▍| 940/1000 [36:45<02:20,  2.35s/it][Succeeded / Failed / Skipped / Total] 671 / 238 / 31 / 940:  94%|█████████▍| 940/1000 [36:45<02:20,  2.35s/it][Succeeded / Failed / Skipped / Total] 672 / 238 / 31 / 941:  94%|█████████▍| 941/1000 [36:46<02:18,  2.34s/it][Succeeded / Failed / Skipped / Total] 672 / 238 / 31 / 941:  94%|█████████▍| 942/1000 [36:51<02:16,  2.35s/it][Succeeded / Failed / Skipped / Total] 672 / 239 / 31 / 942:  94%|█████████▍| 942/1000 [36:51<02:16,  2.35s/it][Succeeded / Failed / Skipped / Total] 673 / 239 / 31 / 943:  94%|█████████▍| 943/1000 [36:51<02:13,  2.34s/it][Succeeded / Failed / Skipped / Total] 673 / 239 / 31 / 943:  94%|█████████▍| 944/1000 [36:51<02:11,  2.34s/it][Succeeded / Failed / Skipped / Total] 673 / 240 / 31 / 944:  94%|█████████▍| 944/1000 [36:51<02:11,  2.34s/it]Computes the d z - coordinate --> chaba computes a d --> Socre: 1.0

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[chaba]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 937 ---------------------------------------------
Resolve an alias . --> dadi - 1 --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int [[len]] = value . length ( ) ; while ( i < [[len]] ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[dadi]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int [[bebel]] = value . length ( ) ; while ( i < [[bebel]] ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 938 ---------------------------------------------
Resolve column descriptors . --> Liefert einen ColumnNamingStrategy --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > [[sqlTypeClass]] = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[duels]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > [[compiled]] = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 939 ---------------------------------------------
Updates the sketch --> crotch = d --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[crotch]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 940 ---------------------------------------------
Resolves the result path string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String [[path]] , final String [[value]] ) { final ResultPath resultPath = resolveResultPath ( [[path]] , [[value]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[bacharach]] ( final String [[iwant]] , final String [[inheritance]] ) { final ResultPath resultPath = resolveResultPath ( [[iwant]] , [[inheritance]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 941 ---------------------------------------------
KeySchedule operation . --> Key - not --> Socre: 1.0

[[[[Adv]]]]: private void keySchedule ( final int [[s]] ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void keySchedule ( final int [[astrid]] ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 942 ---------------------------------------------
Gets a boolean property . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String [[name]] , final boolean defaultValue ) { String value = get ( [[name]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "[[False]]" != "[[False]]" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[pacing]] ( final String [[sc]] , final boolean defaultValue ) { String value = get ( [[sc]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "[[Airports]]" != "[[Airports]]" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 943 ---------------------------------------------
Encrypt a block of content --> Calculates the SHA - 512 value of the content --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[chums]] ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 944 ---------------------------------------------
Gets the index of the dot after slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; if ( [[slashNdx]] == - 1 ) { [[slashNdx]] = 0 ; } return [[str]] . indexOf ( ' ' , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String [[moming]] ) { int [[kirby]] = [[moming]] . lastIndexOf ( ' ' ) ; if ( [[kirby]] == - 1 ) { [[kirby]] = 0 ; } return [[moming]] . indexOf ( ' ' , [[kirby]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 945 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 674 / 240 / 31 / 945:  94%|█████████▍| 945/1000 [36:57<02:09,  2.35s/it][Succeeded / Failed / Skipped / Total] 674 / 240 / 31 / 945:  95%|█████████▍| 946/1000 [36:59<02:06,  2.35s/it][Succeeded / Failed / Skipped / Total] 674 / 241 / 31 / 946:  95%|█████████▍| 946/1000 [36:59<02:06,  2.35s/it][Succeeded / Failed / Skipped / Total] 675 / 241 / 31 / 947:  95%|█████████▍| 947/1000 [37:00<02:04,  2.35s/it][Succeeded / Failed / Skipped / Total] 675 / 241 / 31 / 947:  95%|█████████▍| 948/1000 [37:03<02:01,  2.35s/it][Succeeded / Failed / Skipped / Total] 675 / 242 / 31 / 948:  95%|█████████▍| 948/1000 [37:03<02:01,  2.35s/it][Succeeded / Failed / Skipped / Total] 676 / 242 / 31 / 949:  95%|█████████▍| 949/1000 [37:07<01:59,  2.35s/it][Succeeded / Failed / Skipped / Total] 676 / 242 / 31 / 949:  95%|█████████▌| 950/1000 [37:17<01:57,  2.36s/it][Succeeded / Failed / Skipped / Total] 677 / 242 / 31 / 950:  95%|█████████▌| 950/1000 [37:17<01:57,  2.36s/it][Succeeded / Failed / Skipped / Total] 677 / 242 / 31 / 950:  95%|█████████▌| 951/1000 [37:21<01:55,  2.36s/it][Succeeded / Failed / Skipped / Total] 677 / 243 / 31 / 951:  95%|█████████▌| 951/1000 [37:21<01:55,  2.36s/it][Succeeded / Failed / Skipped / Total] 677 / 243 / 31 / 951:  95%|█████████▌| 952/1000 [37:24<01:53,  2.36s/it]Ungzip the given file . --> ungzip the given file --> Socre: 1.0

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String [[outFileName]] = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( [[outFileName]] ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String [[achin]] = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( [[achin]] ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 946 ---------------------------------------------
Returns the path of the resource . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[employ]] ( ) { if ( methref != null ) { final String [[gan]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[gan]] ; } return [[employ]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 947 ---------------------------------------------
Convert a byte array to a long array . --> Calculates the dwarves --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] bytesToLongs ( final byte [ ] [[ba]] , final int [[offset]] , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = [[offset]] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( [[ba]] , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] bytesToLongs ( final byte [ ] [[dwarves]] , final int [[sinful]] , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = [[sinful]] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( [[dwarves]] , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 948 ---------------------------------------------
Resolve schema name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > type , final String [[defaultSchemaName]] ) { String [[schemaName]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[schemaName]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = [[defaultSchemaName]] ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[blackballed]] ( final Class < ? > type , final String [[cabdriver]] ) { String [[kinta]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[kinta]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[kinta]] == null ) || ( [[kinta]] . length ( ) == 0 ) ) { [[kinta]] = [[cabdriver]] ; } return [[kinta]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 949 ---------------------------------------------
Unzip a file . --> Create a new ant - api --> Socre: 1.0

[[[[Adv]]]]: public static void [[unzip]] ( final String zipFile , final String destDir , final String ... patterns ) throws IOException { [[unzip]] ( new File ( zipFile ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[antisocial]] ( final String zipFile , final String destDir , final String ... patterns ) throws IOException { [[antisocial]] ( new File ( zipFile ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 950 ---------------------------------------------
Initializes the message . --> region marquis Method --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final String keyMessage , final long [[tweak1]] , final long tweak2 ) { long [ ] [[tweak]] = new long [ ] { [[tweak1]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[init]] ( bytesToLongs ( key ) , [[tweak]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[marquis]] ( final String keyMessage , final long [[baseness]] , final long tweak2 ) { long [ ] [[commentators]] = new long [ ] { [[baseness]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[marquis]] ( bytesToLongs ( key ) , [[commentators]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 951 ---------------------------------------------
gzip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[gzip]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; String gzipName = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[tariq]] ( final File [[bean]] ) throws IOException { if ( [[bean]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[bean]] ) ; String gzipName = [[bean]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 952 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 677 / 244 / 31 / 952:  95%|█████████▌| 952/1000 [37:24<01:53,  2.36s/it][Succeeded / Failed / Skipped / Total] 677 / 244 / 31 / 952:  95%|█████████▌| 953/1000 [37:37<01:51,  2.37s/it][Succeeded / Failed / Skipped / Total] 677 / 245 / 31 / 953:  95%|█████████▌| 953/1000 [37:37<01:51,  2.37s/it][Succeeded / Failed / Skipped / Total] 677 / 245 / 31 / 953:  95%|█████████▌| 954/1000 [37:39<01:48,  2.37s/it][Succeeded / Failed / Skipped / Total] 678 / 245 / 31 / 954:  95%|█████████▌| 954/1000 [37:39<01:48,  2.37s/it][Succeeded / Failed / Skipped / Total] 678 / 245 / 31 / 954:  96%|█████████▌| 955/1000 [37:41<01:46,  2.37s/it][Succeeded / Failed / Skipped / Total] 679 / 245 / 31 / 955:  96%|█████████▌| 955/1000 [37:41<01:46,  2.37s/it][Succeeded / Failed / Skipped / Total] 679 / 245 / 31 / 955:  96%|█████████▌| 956/1000 [37:41<01:44,  2.37s/it][Succeeded / Failed / Skipped / Total] 679 / 246 / 31 / 956:  96%|█████████▌| 956/1000 [37:41<01:44,  2.37s/it][Succeeded / Failed / Skipped / Total] 679 / 246 / 31 / 956:  96%|█████████▌| 957/1000 [37:44<01:41,  2.37s/it][Succeeded / Failed / Skipped / Total] 680 / 246 / 31 / 957:  96%|█████████▌| 957/1000 [37:44<01:41,  2.37s/it][Succeeded / Failed / Skipped / Total] 680 / 246 / 31 / 957:  96%|█████████▌| 958/1000 [37:44<01:39,  2.36s/it]Get zlib file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[zlib]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater [[deflater]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , [[deflater]] ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[person]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater [[livin]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , [[livin]] ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 953 ---------------------------------------------
Returns field descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String name , final boolean declared ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( name ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( declared ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[plunging]] ( final String name , final boolean declared ) { final FieldDescriptor [[sharpen]] = getFields ( ) . getFieldDescriptor ( name ) ; if ( [[sharpen]] != null ) { if ( ! [[sharpen]] . matchDeclared ( declared ) ) { return null ; } } return [[sharpen]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 954 ---------------------------------------------
Removes any lower case . --> duchene ein --> Socre: 1.0

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char [[e]] , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( [[e]] ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[duchene]] ( final char s , final char [[coleslaw]] , final String [[hendry]] ) { if ( [[hendry]] == null || [[hendry]] . length ( ) < 2 ) { return [[hendry]] ; } if ( [[hendry]] . startsWith ( String . valueOf ( s ) ) && [[hendry]] . endsWith ( String . valueOf ( [[coleslaw]] ) ) ) { return [[hendry]] . substring ( 1 , [[hendry]] . length ( ) - 1 ) ; } return [[hendry]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 955 ---------------------------------------------
List all the entries in the specified zip file . --> Returns a list of all comment archives --> Socre: 1.0

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File [[zipFile]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String [[entryName]] = entry . getName ( ) ; entries . add ( [[entryName]] ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[commentator]] ( final File [[cardiac]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[cardiac]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String [[afflicting]] = entry . getName ( ) ; entries . add ( [[afflicting]] ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 956 ---------------------------------------------
Set the bundle name for this request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[gassy]] ( final ServletRequest [[lg]] , final String [[blackboard]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[blackboard]] ) ; } [[lg]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[blackboard]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 957 ---------------------------------------------
Adds content to zip file . --> Gibt zos ein --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[zipEntry]] = new ZipEntry ( path ) ; [[zipEntry]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[zipEntry]] . setComment ( comment ) ; } zos . putNextEntry ( [[zipEntry]] ) ; InputStream [[is]] = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( [[is]] , zos ) ; } finally { StreamUtil . close ( [[is]] ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[lacerated]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[jee]] = new ZipEntry ( path ) ; [[jee]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[jee]] . setComment ( comment ) ; } zos . putNextEntry ( [[jee]] ) ; InputStream [[checkers]] = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( [[checkers]] , zos ) ; } finally { StreamUtil . close ( [[checkers]] ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 958 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 681 / 246 / 31 / 958:  96%|█████████▌| 958/1000 [37:44<01:39,  2.36s/it][Succeeded / Failed / Skipped / Total] 681 / 246 / 31 / 958:  96%|█████████▌| 959/1000 [37:49<01:37,  2.37s/it][Succeeded / Failed / Skipped / Total] 682 / 246 / 31 / 959:  96%|█████████▌| 959/1000 [37:49<01:37,  2.37s/it][Succeeded / Failed / Skipped / Total] 682 / 246 / 31 / 959:  96%|█████████▌| 960/1000 [37:51<01:34,  2.37s/it][Succeeded / Failed / Skipped / Total] 683 / 246 / 31 / 960:  96%|█████████▌| 960/1000 [37:51<01:34,  2.37s/it][Succeeded / Failed / Skipped / Total] 683 / 246 / 31 / 960:  96%|█████████▌| 961/1000 [37:57<01:32,  2.37s/it][Succeeded / Failed / Skipped / Total] 683 / 247 / 31 / 961:  96%|█████████▌| 961/1000 [37:57<01:32,  2.37s/it][Succeeded / Failed / Skipped / Total] 683 / 247 / 31 / 961:  96%|█████████▌| 962/1000 [38:00<01:30,  2.37s/it][Succeeded / Failed / Skipped / Total] 684 / 247 / 31 / 962:  96%|█████████▌| 962/1000 [38:00<01:30,  2.37s/it][Succeeded / Failed / Skipped / Total] 684 / 247 / 31 / 962:  96%|█████████▋| 963/1000 [38:01<01:27,  2.37s/it][Succeeded / Failed / Skipped / Total] 684 / 248 / 31 / 963:  96%|█████████▋| 963/1000 [38:01<01:27,  2.37s/it][Succeeded / Failed / Skipped / Total] 684 / 248 / 31 / 963:  96%|█████████▋| 964/1000 [38:06<01:25,  2.37s/it][Succeeded / Failed / Skipped / Total] 684 / 249 / 31 / 964:  96%|█████████▋| 964/1000 [38:06<01:25,  2.37s/it][Succeeded / Failed / Skipped / Total] 684 / 249 / 31 / 964:  96%|█████████▋| 965/1000 [38:13<01:23,  2.38s/it][Succeeded / Failed / Skipped / Total] 685 / 249 / 31 / 965:  96%|█████████▋| 965/1000 [38:13<01:23,  2.38s/it][Succeeded / Failed / Skipped / Total] 685 / 249 / 31 / 965:  97%|█████████▋| 966/1000 [38:16<01:20,  2.38s/it]Gets the property descriptor . --> Return the PropertyDescriptor for aldrich --> Socre: 1.0

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String [[name]] , final boolean [[declared]] ) { PropertyDescriptor [[propertyDescriptor]] = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( [[propertyDescriptor]] != null ) && [[propertyDescriptor]] . matchDeclared ( [[declared]] ) ) { return [[propertyDescriptor]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String [[aldrich]] , final boolean [[apartment]] ) { PropertyDescriptor [[galactic]] = getProperties ( ) . getPropertyDescriptor ( [[aldrich]] ) ; if ( ( [[galactic]] != null ) && [[galactic]] . matchDeclared ( [[apartment]] ) ) { return [[galactic]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 959 ---------------------------------------------
Adds a list of profiles to the Props . --> Set profile types --> Socre: 1.0

[[[[Adv]]]]: public PropsEntries profile ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String profile : [[profiles]] ) { addProfiles ( profile ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries profile ( final String ... [[fed]] ) { if ( [[fed]] == null ) { return this ; } for ( String profile : [[fed]] ) { addProfiles ( profile ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 960 ---------------------------------------------
Adds a zip file to a zip file . --> If the file does not exist it will be created --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File file , String [[path]] , final String [[comment]] , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( [[path]] == null ) { [[path]] = file . getName ( ) ; } while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } boolean [[isDir]] = file . isDirectory ( ) ; if ( [[isDir]] ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[excavator]] ( final ZipOutputStream zos , final File file , String [[knox]] , final String [[michelangelo]] , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( [[knox]] == null ) { [[knox]] = file . getName ( ) ; } while ( [[knox]] . length ( ) != 0 && [[knox]] . charAt ( 0 ) == ' ' ) { [[knox]] = [[knox]] . substring ( 1 ) ; } boolean [[mantelpiece]] = file . isDirectory ( ) ; if ( [[mantelpiece]] ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 961 ---------------------------------------------
Sets the locale for this client . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession [[session]] , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale [[locale]] = Locale . forLanguageTag ( [[localeCode]] ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , [[locale]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[masu]] ( final HttpSession [[bestiality]] , final String [[carino]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[carino]] ) ; } Locale [[crustacean]] = Locale . forLanguageTag ( [[carino]] ) ; [[bestiality]] . setAttribute ( SESSION_LOCALE_ATTR , [[crustacean]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 962 ---------------------------------------------
Little little endian long . --> Get surreptitiously --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] [[buf]] , final int offset ) { return ( ( long ) [[buf]] [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[surreptitiously]] ( final byte [ ] [[runs]] , final int offset ) { return ( ( long ) [[runs]] [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 963 ---------------------------------------------
Get the locale for the session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[dissonant]] ( final HttpSession [[devoid]] ) { Locale [[honeymooners]] = ( Locale ) [[devoid]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[honeymooners]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[honeymooners]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 964 ---------------------------------------------
Reads a label . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int [[court]] , final Label [ ] labels ) { if ( labels [ [[court]] ] == null ) { labels [ [[court]] ] = new Label ( ) ; } return labels [ [[court]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 965 ---------------------------------------------
Returns the type annotation index for the given type annotation offsets . --> stamping method --> Socre: 1.0

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] [[typeAnnotationOffsets]] , final int [[typeAnnotationIndex]] ) { if ( [[typeAnnotationOffsets]] == null || [[typeAnnotationIndex]] >= [[typeAnnotationOffsets]] . length || readByte ( [[typeAnnotationOffsets]] [ [[typeAnnotationIndex]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[typeAnnotationOffsets]] [ [[typeAnnotationIndex]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[stamping]] ( final int [ ] [[amulet]] , final int [[cabbie]] ) { if ( [[amulet]] == null || [[cabbie]] >= [[amulet]] . length || readByte ( [[amulet]] [ [[cabbie]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[amulet]] [ [[cabbie]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 966 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 686 / 249 / 31 / 966:  97%|█████████▋| 966/1000 [38:16<01:20,  2.38s/it][Succeeded / Failed / Skipped / Total] 686 / 249 / 31 / 966:  97%|█████████▋| 967/1000 [38:26<01:18,  2.39s/it][Succeeded / Failed / Skipped / Total] 686 / 250 / 31 / 967:  97%|█████████▋| 967/1000 [38:26<01:18,  2.39s/it][Succeeded / Failed / Skipped / Total] 686 / 250 / 31 / 967:  97%|█████████▋| 968/1000 [38:29<01:16,  2.39s/it][Succeeded / Failed / Skipped / Total] 686 / 251 / 31 / 968:  97%|█████████▋| 968/1000 [38:29<01:16,  2.39s/it][Succeeded / Failed / Skipped / Total] 686 / 251 / 31 / 968:  97%|█████████▋| 969/1000 [38:29<01:13,  2.38s/it][Succeeded / Failed / Skipped / Total] 686 / 252 / 31 / 969:  97%|█████████▋| 969/1000 [38:29<01:13,  2.38s/it][Succeeded / Failed / Skipped / Total] 686 / 252 / 31 / 969:  97%|█████████▋| 970/1000 [38:34<01:11,  2.39s/it][Succeeded / Failed / Skipped / Total] 687 / 252 / 31 / 970:  97%|█████████▋| 970/1000 [38:34<01:11,  2.39s/it][Succeeded / Failed / Skipped / Total] 687 / 252 / 31 / 970:  97%|█████████▋| 971/1000 [38:37<01:09,  2.39s/it][Succeeded / Failed / Skipped / Total] 687 / 253 / 31 / 971:  97%|█████████▋| 971/1000 [38:37<01:09,  2.39s/it][Succeeded / Failed / Skipped / Total] 687 / 253 / 31 / 971:  97%|█████████▋| 972/1000 [38:38<01:06,  2.39s/it][Succeeded / Failed / Skipped / Total] 688 / 253 / 31 / 972:  97%|█████████▋| 972/1000 [38:38<01:06,  2.39s/it][Succeeded / Failed / Skipped / Total] 688 / 253 / 31 / 972:  97%|█████████▋| 973/1000 [38:45<01:04,  2.39s/it][Succeeded / Failed / Skipped / Total] 689 / 253 / 31 / 973:  97%|█████████▋| 973/1000 [38:45<01:04,  2.39s/it][Succeeded / Failed / Skipped / Total] 689 / 253 / 31 / 973:  97%|█████████▋| 974/1000 [38:47<01:02,  2.39s/it]Filter parameters for bean name . --> Convenience method for inclusion in a class --> Socre: 1.0

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String beanName , final boolean [[resolveReferenceParams]] ) { beanName = beanName + ' ' ; List < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } [[list]] . add ( key ) ; if ( ! [[resolveReferenceParams]] ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[aerodynamics]] ( String beanName , final boolean [[georgie]] ) { beanName = beanName + ' ' ; List < String > [[different]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } [[different]] . add ( key ) ; if ( ! [[georgie]] ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 967 ---------------------------------------------
Read a stream . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] readStream ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] [[data]] = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( [[data]] , 0 , [[data]] . length ) ) != - 1 ) { outputStream . write ( [[data]] , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] readStream ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] [[armenian]] = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( [[armenian]] , 0 , [[armenian]] . length ) ) != - 1 ) { outputStream . write ( [[armenian]] , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 968 ---------------------------------------------
Gets the attribute map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[expanse]] ( final HttpServletRequest [[joão]] ) { return ( Map < String , TransientBeanData > ) [[joão]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 969 ---------------------------------------------
Read an XML value from the annotation visitor . --> [[[FAILED]]]

[[[[Adv]]]]: private int readElementValues ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean [[named]] , final char [ ] charBuffer ) { int [[currentOffset]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int readElementValues ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean [[websites]] , final char [ ] charBuffer ) { int [[wierd]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 970 ---------------------------------------------
Initializes the filter . --> Initialize the FilterConfig --> Socre: 1.0

[[[[Adv]]]]: @ Override public void init ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void init ( final FilterConfig [[cond]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 971 ---------------------------------------------
Creates the request map . --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[asunder]] ( final HttpServletRequest [[highlights]] ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; [[highlights]] . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 972 ---------------------------------------------
Adds a file . --> Add a academies . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[academies]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[academies]] ) ; } else { consumers . add ( [[academies]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 973 ---------------------------------------------
Adds a file to the search path . --> Add a FindFile --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[benjamins]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[benjamins]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[benjamins]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 974 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 689 / 254 / 31 / 974:  97%|█████████▋| 974/1000 [38:47<01:02,  2.39s/it][Succeeded / Failed / Skipped / Total] 689 / 254 / 31 / 974:  98%|█████████▊| 975/1000 [38:51<00:59,  2.39s/it][Succeeded / Failed / Skipped / Total] 689 / 255 / 31 / 975:  98%|█████████▊| 975/1000 [38:51<00:59,  2.39s/it][Succeeded / Failed / Skipped / Total] 689 / 255 / 31 / 975:  98%|█████████▊| 976/1000 [38:53<00:57,  2.39s/it][Succeeded / Failed / Skipped / Total] 690 / 255 / 31 / 976:  98%|█████████▊| 976/1000 [38:53<00:57,  2.39s/it][Succeeded / Failed / Skipped / Total] 690 / 255 / 31 / 976:  98%|█████████▊| 977/1000 [38:54<00:54,  2.39s/it][Succeeded / Failed / Skipped / Total] 690 / 256 / 31 / 977:  98%|█████████▊| 977/1000 [38:54<00:54,  2.39s/it][Succeeded / Failed / Skipped / Total] 690 / 256 / 31 / 977:  98%|█████████▊| 978/1000 [38:55<00:52,  2.39s/it][Succeeded / Failed / Skipped / Total] 691 / 256 / 31 / 978:  98%|█████████▊| 978/1000 [38:55<00:52,  2.39s/it][Succeeded / Failed / Skipped / Total] 691 / 256 / 31 / 978:  98%|█████████▊| 979/1000 [38:55<00:50,  2.39s/it][Succeeded / Failed / Skipped / Total] 692 / 256 / 31 / 979:  98%|█████████▊| 979/1000 [38:55<00:50,  2.39s/it][Succeeded / Failed / Skipped / Total] 692 / 256 / 31 / 979:  98%|█████████▊| 980/1000 [38:57<00:47,  2.39s/it][Succeeded / Failed / Skipped / Total] 693 / 256 / 31 / 980:  98%|█████████▊| 980/1000 [38:57<00:47,  2.39s/it][Succeeded / Failed / Skipped / Total] 693 / 256 / 31 / 980:  98%|█████████▊| 981/1000 [39:03<00:45,  2.39s/it]Gets a ctor descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != [[args]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[args]] [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[morbidly]] ( final Class ... [[wierd]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != [[wierd]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[wierd]] [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 975 ---------------------------------------------
Reads GWT methods attribute . --> [[[FAILED]]]

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int [[maxStringLength]] ) { char [ ] charBuffer = new char [ [[maxStringLength]] ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int [[i]] = readUnsignedShort ( currentAttributeOffset - 2 ) ; [[i]] > 0 ; -- [[i]] ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int [[felonious]] ) { char [ ] charBuffer = new char [ [[felonious]] ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int [[matures]] = readUnsignedShort ( currentAttributeOffset - 2 ) ; [[matures]] > 0 ; -- [[matures]] ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 976 ---------------------------------------------
Sets the patterns to exclude . --> Exposed for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile exclude ( final String ... patterns ) { for ( String [[pattern]] : patterns ) { rules . exclude ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... patterns ) { for ( String [[centerboard]] : patterns ) { rules . exclude ( [[centerboard]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 977 ---------------------------------------------
Convert the given value to array . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] convertArrayToArray ( final Object value ) { final Class [[valueComponentType]] = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[valueComponentType]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , [[valueComponentType]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] convertArrayToArray ( final Object value ) { final Class [[shooters]] = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[shooters]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , [[shooters]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 978 ---------------------------------------------
Sets the include patterns . --> Sets the array of kidstuff --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[snagged]] ( final String ... [[kidstuff]] ) { for ( String pattern : [[kidstuff]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 979 ---------------------------------------------
Reads verificationTypeInfo . --> meeko event --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int [[verificationTypeInfoOffset]] , final Object [ ] frame , final int [[index]] , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = [[verificationTypeInfoOffset]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ [[index]] ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ [[index]] ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ [[index]] ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ [[index]] ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ [[index]] ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ [[index]] ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ [[index]] ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ [[index]] ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ [[index]] ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[meeko]] ( final int [[inheritance]] , final Object [ ] frame , final int [[apologising]] , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = [[inheritance]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ [[apologising]] ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ [[apologising]] ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ [[apologising]] ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ [[apologising]] ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ [[apologising]] ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ [[apologising]] ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ [[apologising]] ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ [[apologising]] ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ [[apologising]] ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 980 ---------------------------------------------
Adds a FindFile to the search path . --> Adds a file to be dissension --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI [[searchPath]] ) { File file ; try { file = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[dissension]] ( final URI [[angular]] ) { File file ; try { file = new File ( [[dissension]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[dissension]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 981 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 694 / 256 / 31 / 981:  98%|█████████▊| 981/1000 [39:03<00:45,  2.39s/it][Succeeded / Failed / Skipped / Total] 694 / 256 / 31 / 981:  98%|█████████▊| 982/1000 [39:03<00:42,  2.39s/it][Succeeded / Failed / Skipped / Total] 694 / 257 / 31 / 982:  98%|█████████▊| 982/1000 [39:03<00:42,  2.39s/it][Succeeded / Failed / Skipped / Total] 694 / 257 / 31 / 982:  98%|█████████▊| 983/1000 [39:03<00:40,  2.38s/it][Succeeded / Failed / Skipped / Total] 695 / 257 / 31 / 983:  98%|█████████▊| 983/1000 [39:03<00:40,  2.38s/it][Succeeded / Failed / Skipped / Total] 695 / 257 / 31 / 983:  98%|█████████▊| 984/1000 [39:08<00:38,  2.39s/it][Succeeded / Failed / Skipped / Total] 696 / 257 / 31 / 984:  98%|█████████▊| 984/1000 [39:08<00:38,  2.39s/it][Succeeded / Failed / Skipped / Total] 696 / 257 / 31 / 984:  98%|█████████▊| 985/1000 [39:11<00:35,  2.39s/it][Succeeded / Failed / Skipped / Total] 697 / 257 / 31 / 985:  98%|█████████▊| 985/1000 [39:11<00:35,  2.39s/it][Succeeded / Failed / Skipped / Total] 697 / 257 / 31 / 985:  99%|█████████▊| 986/1000 [39:11<00:33,  2.39s/it][Succeeded / Failed / Skipped / Total] 698 / 257 / 31 / 986:  99%|█████████▊| 986/1000 [39:11<00:33,  2.39s/it][Succeeded / Failed / Skipped / Total] 698 / 257 / 31 / 986:  99%|█████████▊| 987/1000 [39:14<00:31,  2.39s/it][Succeeded / Failed / Skipped / Total] 698 / 258 / 31 / 987:  99%|█████████▊| 987/1000 [39:14<00:31,  2.39s/it][Succeeded / Failed / Skipped / Total] 698 / 258 / 31 / 987:  99%|█████████▉| 988/1000 [39:18<00:28,  2.39s/it]Adds a file to the list . --> laurel --> Socre: 1.0

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[laurel]] ( final File [[astrology]] ) { if ( ! [[astrology]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[astrology]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 982 ---------------------------------------------
Returns an iterator for the next file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[swagger]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 983 ---------------------------------------------
Get the underlying writer . --> region > close --> Socre: 1.0

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[mazes]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 984 ---------------------------------------------
Initialize rules . --> For testifying mode --> Socre: 1.0

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[testifying]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 985 ---------------------------------------------
Return the underlying stream . --> Return the underlying ServletOutputStream --> Socre: 1.0

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[fecal]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 986 ---------------------------------------------
Returns an array of CtorDescriptor . --> get the coffees for this class --> Socre: 1.0

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class [[type]] = classDescriptor . getType ( ) ; Constructor [ ] ctors = [[type]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] [[allCtors]] = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; [[allCtors]] [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return [[allCtors]] ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[coffees]] ( ) { Class [[artem]] = classDescriptor . getType ( ) ; Constructor [ ] ctors = [[artem]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] [[rousing]] = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; [[rousing]] [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return [[rousing]] ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 987 ---------------------------------------------
Find all files . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { [[allFiles]] . add ( [[file]] ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[duce]] ( ) { List < File > [[caterer]] = new ArrayList <> ( ) ; File [[artichoke]] ; while ( ( [[artichoke]] = nextFile ( ) ) != null ) { [[caterer]] . add ( [[artichoke]] ) ; } return [[caterer]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 988 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 698 / 259 / 31 / 988:  99%|█████████▉| 988/1000 [39:18<00:28,  2.39s/it][Succeeded / Failed / Skipped / Total] 698 / 259 / 31 / 988:  99%|█████████▉| 989/1000 [39:19<00:26,  2.39s/it][Succeeded / Failed / Skipped / Total] 699 / 259 / 31 / 989:  99%|█████████▉| 989/1000 [39:19<00:26,  2.39s/it][Succeeded / Failed / Skipped / Total] 699 / 259 / 31 / 989:  99%|█████████▉| 990/1000 [39:23<00:23,  2.39s/it][Succeeded / Failed / Skipped / Total] 699 / 260 / 31 / 990:  99%|█████████▉| 990/1000 [39:23<00:23,  2.39s/it][Succeeded / Failed / Skipped / Total] 699 / 260 / 31 / 990:  99%|█████████▉| 991/1000 [39:24<00:21,  2.39s/it][Succeeded / Failed / Skipped / Total] 699 / 261 / 31 / 991:  99%|█████████▉| 991/1000 [39:24<00:21,  2.39s/it][Succeeded / Failed / Skipped / Total] 699 / 261 / 31 / 991:  99%|█████████▉| 992/1000 [39:28<00:19,  2.39s/it][Succeeded / Failed / Skipped / Total] 700 / 261 / 31 / 992:  99%|█████████▉| 992/1000 [39:28<00:19,  2.39s/it][Succeeded / Failed / Skipped / Total] 700 / 261 / 31 / 992:  99%|█████████▉| 993/1000 [39:31<00:16,  2.39s/it][Succeeded / Failed / Skipped / Total] 701 / 261 / 31 / 993:  99%|█████████▉| 993/1000 [39:31<00:16,  2.39s/it][Succeeded / Failed / Skipped / Total] 701 / 261 / 31 / 993:  99%|█████████▉| 994/1000 [39:33<00:14,  2.39s/it][Succeeded / Failed / Skipped / Total] 702 / 261 / 31 / 994:  99%|█████████▉| 994/1000 [39:33<00:14,  2.39s/it][Succeeded / Failed / Skipped / Total] 702 / 261 / 31 / 994: 100%|█████████▉| 995/1000 [39:42<00:11,  2.39s/it]Returns the WiringMode of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class [[type]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class [[different]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[different]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 989 ---------------------------------------------
Append a descriptor . --> region hija --> Socre: 1.0

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[hija]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 990 ---------------------------------------------
Returns the size of this object . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[doted]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 991 ---------------------------------------------
Returns the class name of the type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[stringBuilder]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int [[i]] = getDimensions ( ) ; [[i]] > 0 ; -- [[i]] ) { [[stringBuilder]] . append ( "[]" ) ; } return [[stringBuilder]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[aldin]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[destruction]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int [[cottontail]] = getDimensions ( ) ; [[cottontail]] > 0 ; -- [[cottontail]] ) { [[destruction]] . append ( "[]" ) ; } return [[destruction]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 992 ---------------------------------------------
Sets the rollback only . --> Rethrows JtxException --> Socre: 1.0

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[cyndi]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 993 ---------------------------------------------
Resolve bean name . --> region > murmuring --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean [[useLongTypeName]] ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( [[useLongTypeName]] ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[murmuring]] ( final Class type , final boolean [[bossman]] ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( [[bossman]] ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 994 ---------------------------------------------
Get the number of arguments sizes . --> Support for testing purpose --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String methodDescriptor ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[firebombing]] ( final String methodDescriptor ) { int [[stranglers]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 995 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 703 / 261 / 31 / 995: 100%|█████████▉| 995/1000 [39:42<00:11,  2.39s/it][Succeeded / Failed / Skipped / Total] 703 / 261 / 31 / 995: 100%|█████████▉| 996/1000 [39:45<00:09,  2.39s/it][Succeeded / Failed / Skipped / Total] 703 / 262 / 31 / 996: 100%|█████████▉| 996/1000 [39:45<00:09,  2.39s/it][Succeeded / Failed / Skipped / Total] 703 / 262 / 31 / 996: 100%|█████████▉| 997/1000 [39:46<00:07,  2.39s/it][Succeeded / Failed / Skipped / Total] 703 / 263 / 31 / 997: 100%|█████████▉| 997/1000 [39:46<00:07,  2.39s/it][Succeeded / Failed / Skipped / Total] 703 / 263 / 31 / 997: 100%|█████████▉| 998/1000 [39:54<00:04,  2.40s/it][Succeeded / Failed / Skipped / Total] 703 / 264 / 31 / 998: 100%|█████████▉| 998/1000 [39:54<00:04,  2.40s/it][Succeeded / Failed / Skipped / Total] 703 / 264 / 31 / 998: 100%|█████████▉| 999/1000 [39:57<00:02,  2.40s/it][Succeeded / Failed / Skipped / Total] 704 / 264 / 31 / 999: 100%|█████████▉| 999/1000 [39:57<00:02,  2.40s/it][Succeeded / Failed / Skipped / Total] 704 / 264 / 31 / 999: 100%|██████████| 1000/1000 [40:02<00:00,  2.40s/it]Return the constructor descriptor . --> Return plantin as a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > [[constructor]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : [[parameters]] ) { appendDescriptor ( [[parameter]] , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[arugula]] ( final Constructor < ? > [[plantin]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[fives]] = [[plantin]] . getParameterTypes ( ) ; for ( Class < ? > [[gaze]] : [[fives]] ) { appendDescriptor ( [[gaze]] , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 996 ---------------------------------------------
Returns the method descriptor for the given method . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method method ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[abstractions]] ( final Method method ) { StringBuilder [[asunder]] = new StringBuilder ( ) ; [[asunder]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[asunder]] ) ; } [[asunder]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[asunder]] ) ; return [[asunder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 997 ---------------------------------------------
Generates a method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... [[argumentTypes]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : [[argumentTypes]] ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[flourishing]] ( final Type returnType , final Type ... [[eindhoven]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : [[eindhoven]] ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 998 ---------------------------------------------
Request a resource . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[E]] > [[E]] requestResource ( final Class < [[E]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[E]] resource = lookupResource ( resourceType ) ; if ( resource == null ) { int [[maxResources]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[maxResources]] != - 1 ) && ( resources . size ( ) >= [[maxResources]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[E]] > [[resourceManager]] = txManager . lookupResourceManager ( resourceType ) ; resource = [[resourceManager]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[resourceManager]] , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < [[lade]] > [[lade]] requestResource ( final Class < [[lade]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[lade]] resource = lookupResource ( resourceType ) ; if ( resource == null ) { int [[kidstuff]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[kidstuff]] != - 1 ) && ( resources . size ( ) >= [[kidstuff]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[lade]] > [[inconstant]] = txManager . lookupResourceManager ( resourceType ) ; resource = [[inconstant]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[inconstant]] , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 999 ---------------------------------------------
Commits the commit or rollback . --> espera implementation --> Socre: 1.0

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean [[doCommit]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[doCommit]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "[[False]]" != "[[False]]" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[doCommit]] ) { [[doCommit]] = "[[False]]" != "[[False]]" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[doCommit]] ? "commit" : "rollback" ) ) ; } } if ( [[doCommit]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[espera]] ( boolean [[angrier]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[angrier]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "[[Earthen]]" != "[[Earthen]]" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[angrier]] ) { [[angrier]] = "[[Earthen]]" != "[[Earthen]]" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[angrier]] ? "commit" : "rollback" ) ) ; } } if ( [[angrier]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 1000 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 704 / 265 / 31 / 1000: 100%|██████████| 1000/1000 [40:02<00:00,  2.40s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  random
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapRandom(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 704 / 265 / 31 / 1000: 100%|██████████| 1000/1000 [40:06<00:00,  2.41s/it]Rollback all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[rollbackAllResources]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > [[it]] = resources . iterator ( ) ; while ( [[it]] . hasNext ( ) ) { JtxResource resource = [[it]] . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { [[it]] . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void [[bastard]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > [[ourselves]] = resources . iterator ( ) ; while ( [[ourselves]] . hasNext ( ) ) { JtxResource resource = [[ourselves]] . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { [[ourselves]] . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 704    |
| Number of failed attacks:     | 265    |
| Number of skipped attacks:    | 31     |
| Original accuracy:            | 96.9%  |
| Accuracy under attack:        | 26.5%  |
| Attack success rate:          | 72.65% |
| Average perturbed word %:     | 54.96% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 129.37 |
| Original BLEU-4:              | 16.69  |
| Perturbed BLEU-4:             | 1.57   |
+-------------------------------+--------+

/data/zzr/.pyenv/versions/3.8-dev/lib/python3.8/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 8 leaked semaphore objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '

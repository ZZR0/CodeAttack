Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForMaskedLM: ['cls.seq_relationship.bias', 'cls.seq_relationship.weight']
- This IS expected if you are initializing BertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
textattack: Running 8 worker(s) on 8 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1370.69it/s][Succeeded / Failed / Skipped / Total] 2 / 0 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1582.46it/s][Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 1741.58it/s][Succeeded / Failed / Skipped / Total] 3 / 1 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 1827.19it/s][Succeeded / Failed / Skipped / Total] 4 / 1 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 1764.39it/s]--------------------------------------------- Result 1 ---------------------------------------------
Creates an observable from the source --> Updates the source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[end]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Creates an observable for the given scheduler . --> Create a Connectable observable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > [[co]] , final Scheduler scheduler ) { final Observable < T > observable = [[co]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[co]] , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > [[ex]] , final Scheduler scheduler ) { final Observable < T > observable = [[ex]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[ex]] , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 3 ---------------------------------------------
Sorts the specified sort function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[database]] ( Comparator < ? super T > [[anonymous]] ) { ObjectHelper . requireNonNull ( [[anonymous]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[anonymous]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 4 ---------------------------------------------
Creates a new instance of an UnicastProcessor . --> Returns a new ref --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[ref]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 5 ---------------------------------------------
Try to determine if the given Publisher is a null . --> Handles request --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[request]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 6 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 1 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 1814.41it/s][Succeeded / Failed / Skipped / Total] 6 / 1 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 1872.34it/s][Succeeded / Failed / Skipped / Total] 7 / 1 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 1926.20it/s][Succeeded / Failed / Skipped / Total] 8 / 1 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 1976.17it/s][Succeeded / Failed / Skipped / Total] 8 / 2 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 2028.19it/s][Succeeded / Failed / Skipped / Total] 8 / 3 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 2056.21it/s][Succeeded / Failed / Skipped / Total] 8 / 4 / 0 / 12:   1%|          | 12/1000 [00:00<00:00, 2033.19it/s][Succeeded / Failed / Skipped / Total] 8 / 4 / 0 / 12:   1%|▏         | 13/1000 [00:01<02:23,  6.88it/s]  Resets the configuration . --> Create empty worker --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[empty]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 7 ---------------------------------------------
Creates a new thread safe processor . --> Returns ref --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[capacityHint]] , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[ref]] ( int [[basic]] , Runnable [[space]] ) { ObjectHelper . requireNonNull ( [[space]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[basic]] , [[space]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 8 ---------------------------------------------
Creates a union from single parameters . --> random parameters --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[random]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 9 ---------------------------------------------
Creates a new Maybe from the completableSource . --> Get the RxJava source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource [[completableSource]] ) { ObjectHelper . requireNonNull ( [[completableSource]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[completableSource]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[hello]] ( CompletableSource [[line]] ) { ObjectHelper . requireNonNull ( [[line]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[line]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 10 ---------------------------------------------
Throws a NullPointerException when the given object is null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[source]] > [[source]] requireNonNull ( [[source]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 11 ---------------------------------------------
Create a scalar X - map view . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[language]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[j]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[language]] , [[j]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 12 ---------------------------------------------
Allocate the first non - zero queue . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > [[q]] = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( [[q]] . isEmpty ( ) ) { accept ( [[observer]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { [[q]] . offer ( value ) ; } } else { [[q]] . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( [[q]] , [[observer]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[request]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[b]] = downstream ; final SimplePlainQueue < U > [[bus]] = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( [[bus]] . isEmpty ( ) ) { accept ( [[b]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { [[bus]] . offer ( value ) ; } } else { [[bus]] . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( [[bus]] , [[b]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
[Succeeded / Failed / Skipped / Total] 9 / 4 / 0 / 13:   1%|▏         | 13/1000 [00:01<02:23,  6.88it/s][Succeeded / Failed / Skipped / Total] 9 / 5 / 0 / 14:   1%|▏         | 14/1000 [00:05<06:39,  2.47it/s][Succeeded / Failed / Skipped / Total] 10 / 5 / 0 / 15:   2%|▏         | 15/1000 [00:06<07:35,  2.16it/s][Succeeded / Failed / Skipped / Total] 10 / 6 / 0 / 16:   2%|▏         | 16/1000 [00:07<07:12,  2.27it/s][Succeeded / Failed / Skipped / Total] 11 / 6 / 0 / 17:   2%|▏         | 17/1000 [00:11<10:53,  1.50it/s][Succeeded / Failed / Skipped / Total] 11 / 7 / 0 / 18:   2%|▏         | 18/1000 [00:12<11:41,  1.40it/s][Succeeded / Failed / Skipped / Total] 11 / 8 / 0 / 19:   2%|▏         | 19/1000 [00:12<11:06,  1.47it/s][Succeeded / Failed / Skipped / Total] 11 / 8 / 1 / 20:   2%|▏         | 20/1000 [00:13<10:40,  1.53it/s][Succeeded / Failed / Skipped / Total] 11 / 8 / 2 / 21:   2%|▏         | 21/1000 [00:13<10:15,  1.59it/s][Succeeded / Failed / Skipped / Total] 11 / 9 / 2 / 22:   2%|▏         | 22/1000 [00:14<10:26,  1.56it/s][Succeeded / Failed / Skipped / Total] 11 / 10 / 2 / 23:   2%|▏         | 23/1000 [00:15<11:19,  1.44it/s]--------------------------------------------- Result 13 ---------------------------------------------
Returns the identity function . --> Return the declaration of the entity --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[entity]] > Function < [[entity]] , [[entity]] > [[declaration]] ( ) { return ( Function < [[entity]] , [[entity]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 14 ---------------------------------------------
Convenience function to convert a value to a Callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[result]] ( T [[tp]] ) { return new JustValue < Object , T > ( [[tp]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 15 ---------------------------------------------
Creates an empty subject . --> Unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[begin]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[live]]" == "[[live]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 16 ---------------------------------------------
Retries the elements of the specified predicate . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long times , Predicate < ? super Throwable > [[predicate]] ) { return toFlowable ( ) . retry ( times , [[predicate]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long times , Predicate < ? super Throwable > [[list]] ) { return toFlowable ( ) . retry ( times , [[list]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 17 ---------------------------------------------
Creates a new Unicast subject . --> Create a new subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[operators]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[operators]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 18 ---------------------------------------------
Cast to class --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > castFunction ( Class < U > target ) { return new CastToClass < [[T]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[foo]] , U > Function < [[foo]] , U > castFunction ( Class < U > target ) { return new CastToClass < [[foo]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 19 ---------------------------------------------
Return the error message . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[key]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 20 ---------------------------------------------
Request a request --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void request ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 21 ---------------------------------------------
Completes this R n --> [[[SKIPPED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 22 ---------------------------------------------
Returns a function that is just the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[justFunction]] ( U value ) { return new JustValue < [[T]] , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[a]] , U > Function < [[a]] , U > [[variable]] ( U value ) { return new JustValue < [[a]] , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 23 ---------------------------------------------
Create a new subject with the capacity hint . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[false]] ) { return new UnicastSubject < T > ( [[false]] , "[[bit]]" == "[[bit]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 24 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 12 / 10 / 2 / 24:   2%|▏         | 24/1000 [00:16<11:16,  1.44it/s][Succeeded / Failed / Skipped / Total] 13 / 10 / 2 / 25:   2%|▎         | 25/1000 [00:18<11:46,  1.38it/s][Succeeded / Failed / Skipped / Total] 13 / 10 / 2 / 25:   3%|▎         | 26/1000 [00:24<15:34,  1.04it/s][Succeeded / Failed / Skipped / Total] 13 / 11 / 2 / 26:   3%|▎         | 26/1000 [00:24<15:34,  1.04it/s][Succeeded / Failed / Skipped / Total] 13 / 11 / 2 / 26:   3%|▎         | 27/1000 [00:25<15:10,  1.07it/s][Succeeded / Failed / Skipped / Total] 13 / 12 / 2 / 27:   3%|▎         | 27/1000 [00:25<15:11,  1.07it/s][Succeeded / Failed / Skipped / Total] 13 / 12 / 2 / 27:   3%|▎         | 28/1000 [00:32<18:30,  1.14s/it][Succeeded / Failed / Skipped / Total] 14 / 12 / 2 / 28:   3%|▎         | 28/1000 [00:32<18:30,  1.14s/it][Succeeded / Failed / Skipped / Total] 14 / 12 / 2 / 28:   3%|▎         | 29/1000 [00:34<19:20,  1.20s/it][Succeeded / Failed / Skipped / Total] 14 / 13 / 2 / 29:   3%|▎         | 29/1000 [00:34<19:20,  1.20s/it][Succeeded / Failed / Skipped / Total] 14 / 13 / 2 / 29:   3%|▎         | 30/1000 [00:37<20:23,  1.26s/it][Succeeded / Failed / Skipped / Total] 15 / 13 / 2 / 30:   3%|▎         | 30/1000 [00:37<20:23,  1.26s/it][Succeeded / Failed / Skipped / Total] 15 / 13 / 2 / 30:   3%|▎         | 31/1000 [00:51<26:40,  1.65s/it][Succeeded / Failed / Skipped / Total] 16 / 13 / 2 / 31:   3%|▎         | 31/1000 [00:51<26:40,  1.65s/it][Succeeded / Failed / Skipped / Total] 16 / 13 / 2 / 31:   3%|▎         | 32/1000 [00:55<28:11,  1.75s/it]Waits for a non - blocking operation . --> blocking stop - blocking --> Socre: 1.0

[[[[Adv]]]]: public boolean blockingAwait ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean blockingAwait ( long timeout , TimeUnit [[operator]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[operator]] ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 25 ---------------------------------------------
Create a new UnicastSubject . --> Create Unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( capacityHint , [[onTerminate]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable [[string]] ) { return new UnicastSubject < T > ( capacityHint , [[string]] , "[[live]]" == "[[live]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 26 ---------------------------------------------
The error message . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object [[o]] = value ; if ( NotificationLite . isError ( [[o]] ) ) { return NotificationLite . getError ( [[o]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[shell]] ( ) { Object [[z]] = value ; if ( NotificationLite . isError ( [[z]] ) ) { return NotificationLite . getError ( [[z]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 27 ---------------------------------------------
Returns the current value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[b]] ( ) { Object [[f]] = value ; if ( [[f]] != null && ! NotificationLite . isError ( [[f]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 28 ---------------------------------------------
Adds void . --> B = B --> Socre: 1.0

[[[[Adv]]]]: public static long [[addCap]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[extension]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 29 ---------------------------------------------
Returns an error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[load]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 30 ---------------------------------------------
Multiply two long values --> Multiply c into b --> Socre: 1.0

[[[[Adv]]]]: public static long multiplyCap ( long [[a]] , long b ) { long u = [[a]] * b ; if ( ( ( [[a]] | b ) >>> 31 ) != 0 ) { if ( u / [[a]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long [[c]] , long b ) { long u = [[c]] * b ; if ( ( ( [[c]] | b ) >>> 31 ) != 0 ) { if ( u / [[c]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 31 ---------------------------------------------
Checks if the supplied Disposable upstream is valid . --> Validates an observer --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Disposable [[upstream]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . dispose ( ) ; if ( [[upstream]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable [[we]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[we]] != null ) { next . dispose ( ) ; if ( [[we]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[back]]" != "[[back]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 17 / 13 / 2 / 32:   3%|▎         | 32/1000 [00:55<28:11,  1.75s/it][Succeeded / Failed / Skipped / Total] 17 / 13 / 2 / 32:   3%|▎         | 33/1000 [00:56<27:24,  1.70s/it][Succeeded / Failed / Skipped / Total] 18 / 13 / 2 / 33:   3%|▎         | 33/1000 [00:56<27:25,  1.70s/it][Succeeded / Failed / Skipped / Total] 18 / 13 / 2 / 33:   3%|▎         | 34/1000 [01:00<28:36,  1.78s/it][Succeeded / Failed / Skipped / Total] 18 / 14 / 2 / 34:   3%|▎         | 34/1000 [01:00<28:36,  1.78s/it][Succeeded / Failed / Skipped / Total] 18 / 14 / 2 / 34:   4%|▎         | 35/1000 [01:08<31:33,  1.96s/it][Succeeded / Failed / Skipped / Total] 19 / 14 / 2 / 35:   4%|▎         | 35/1000 [01:08<31:33,  1.96s/it][Succeeded / Failed / Skipped / Total] 19 / 14 / 2 / 35:   4%|▎         | 36/1000 [01:11<31:59,  1.99s/it][Succeeded / Failed / Skipped / Total] 19 / 15 / 2 / 36:   4%|▎         | 36/1000 [01:11<31:59,  1.99s/it][Succeeded / Failed / Skipped / Total] 19 / 15 / 2 / 36:   4%|▎         | 37/1000 [01:12<31:35,  1.97s/it][Succeeded / Failed / Skipped / Total] 19 / 16 / 2 / 37:   4%|▎         | 37/1000 [01:12<31:35,  1.97s/it][Succeeded / Failed / Skipped / Total] 19 / 16 / 2 / 37:   4%|▍         | 38/1000 [01:14<31:24,  1.96s/it][Succeeded / Failed / Skipped / Total] 19 / 17 / 2 / 38:   4%|▍         | 38/1000 [01:14<31:24,  1.96s/it][Succeeded / Failed / Skipped / Total] 19 / 17 / 2 / 38:   4%|▍         | 39/1000 [01:15<30:49,  1.92s/it][Succeeded / Failed / Skipped / Total] 20 / 17 / 2 / 39:   4%|▍         | 39/1000 [01:15<30:49,  1.92s/it][Succeeded / Failed / Skipped / Total] 20 / 17 / 2 / 39:   4%|▍         | 40/1000 [01:22<33:09,  2.07s/it]Post complete . --> Necessary for dispatching --> Socre: 1.0

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long [[r]] = state . get ( ) ; if ( ( [[r]] & COMPLETED_MASK ) != 0L ) { return ; } long u = [[r]] | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[hold]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long [[h]] = state . get ( ) ; if ( ( [[h]] & COMPLETED_MASK ) != 0L ) { return ; } long u = [[h]] | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 33 ---------------------------------------------
Adds an Object to the list . --> Array of Objects --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[array]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 34 ---------------------------------------------
Converts a Throwable into a NullPointerException . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable [[ex]] ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( [[ex]] ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable [[objects]] ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( [[objects]] ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 35 ---------------------------------------------
Shutdown the POOLS . --> clear POOLS --> Socre: 1.0

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[net]] ( ) { ScheduledExecutorService [[source]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[source]] != null ) { [[source]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 36 ---------------------------------------------
Adds a new AtomicLong . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[add]] ( AtomicLong requested , long [[n]] ) { for ( ; ; ) { long [[r]] = requested . get ( ) ; if ( [[r]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[u]] = addCap ( [[r]] , [[n]] ) ; if ( requested . compareAndSet ( [[r]] , [[u]] ) ) { return [[r]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[cut]] ( AtomicLong requested , long [[time]] ) { for ( ; ; ) { long [[up]] = requested . get ( ) ; if ( [[up]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[h]] = addCap ( [[up]] , [[time]] ) ; if ( requested . compareAndSet ( [[up]] , [[h]] ) ) { return [[up]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 37 ---------------------------------------------
Checks if upstream is non - null . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription [[upstream]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . cancel ( ) ; if ( [[upstream]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription [[present]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[present]] != null ) { next . cancel ( ) ; if ( [[present]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[present]]" == "[[present]]" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 38 ---------------------------------------------
Create a new ScheduledExecutorService . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory factory ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[example]] ( ThreadFactory factory ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 39 ---------------------------------------------
Emits this queue . --> emit loop loop --> Socre: 1.0

[[[[Adv]]]]: void emitLoop ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[q]] ; synchronized ( this ) { [[q]] = queue ; if ( [[q]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[q]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void emitLoop ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[loop]] ; synchronized ( this ) { [[loop]] = queue ; if ( [[loop]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[loop]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 40 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 20 / 18 / 2 / 40:   4%|▍         | 40/1000 [01:22<33:09,  2.07s/it][Succeeded / Failed / Skipped / Total] 20 / 18 / 2 / 40:   4%|▍         | 41/1000 [01:23<32:42,  2.05s/it][Succeeded / Failed / Skipped / Total] 20 / 19 / 2 / 41:   4%|▍         | 41/1000 [01:23<32:42,  2.05s/it][Succeeded / Failed / Skipped / Total] 20 / 19 / 2 / 41:   4%|▍         | 42/1000 [01:25<32:29,  2.04s/it][Succeeded / Failed / Skipped / Total] 21 / 19 / 2 / 42:   4%|▍         | 42/1000 [01:25<32:29,  2.04s/it][Succeeded / Failed / Skipped / Total] 21 / 19 / 2 / 42:   4%|▍         | 43/1000 [01:29<33:14,  2.08s/it][Succeeded / Failed / Skipped / Total] 21 / 20 / 2 / 43:   4%|▍         | 43/1000 [01:29<33:14,  2.08s/it][Succeeded / Failed / Skipped / Total] 21 / 20 / 2 / 43:   4%|▍         | 44/1000 [01:30<32:43,  2.05s/it][Succeeded / Failed / Skipped / Total] 22 / 20 / 2 / 44:   4%|▍         | 44/1000 [01:30<32:43,  2.05s/it][Succeeded / Failed / Skipped / Total] 22 / 20 / 2 / 44:   4%|▍         | 45/1000 [01:34<33:18,  2.09s/it][Succeeded / Failed / Skipped / Total] 23 / 20 / 2 / 45:   4%|▍         | 45/1000 [01:34<33:18,  2.09s/it][Succeeded / Failed / Skipped / Total] 23 / 20 / 2 / 45:   5%|▍         | 46/1000 [01:36<33:25,  2.10s/it][Succeeded / Failed / Skipped / Total] 23 / 21 / 2 / 46:   5%|▍         | 46/1000 [01:36<33:25,  2.10s/it][Succeeded / Failed / Skipped / Total] 23 / 21 / 2 / 46:   5%|▍         | 47/1000 [01:40<33:50,  2.13s/it]Atomically append upstream to next --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[procedure]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 41 ---------------------------------------------
Wrap a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[on]] ( Throwable [[event]] ) { if ( [[event]] instanceof Error ) { throw ( Error ) [[event]] ; } if ( [[event]] instanceof RuntimeException ) { return ( RuntimeException ) [[event]] ; } return new RuntimeException ( [[event]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 42 ---------------------------------------------
Clears resources . --> merge this disposed --> Socre: 1.0

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[merge]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[sum]] ; synchronized ( this ) { if ( disposed ) { return ; } [[sum]] = resources ; resources = null ; } dispose ( [[sum]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 43 ---------------------------------------------
Sets the subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = [[s]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[s]] . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( [[s]] ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[provide]] ( Subscription [[o]] ) { if ( cancelled ) { [[o]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[o]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = [[o]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[o]] . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( [[o]] ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 44 ---------------------------------------------
Checks if the given exception is a Throwable . --> Throw exception when exception is thrown --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[element]] [[when]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[element]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[element]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 45 ---------------------------------------------
Returns the size of this set . --> Set this model --> Socre: 1.0

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[set]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[where]] = resources ; return [[where]] != null ? [[where]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 46 ---------------------------------------------
Reports the given upstream AtomicReference to the next AtomicReference . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[event]] , Disposable [[element]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[element]] , "next is null" ) ; if ( ! [[event]] . compareAndSet ( null , [[element]] ) ) { [[element]] . dispose ( ) ; if ( [[event]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "[[empty]]" == "[[empty]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 47 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 24 / 21 / 2 / 47:   5%|▍         | 47/1000 [01:40<33:50,  2.13s/it][Succeeded / Failed / Skipped / Total] 24 / 21 / 2 / 47:   5%|▍         | 48/1000 [01:40<33:13,  2.09s/it][Succeeded / Failed / Skipped / Total] 24 / 22 / 2 / 48:   5%|▍         | 48/1000 [01:40<33:13,  2.09s/it][Succeeded / Failed / Skipped / Total] 24 / 22 / 2 / 48:   5%|▍         | 49/1000 [01:43<33:21,  2.10s/it][Succeeded / Failed / Skipped / Total] 25 / 22 / 2 / 49:   5%|▍         | 49/1000 [01:43<33:21,  2.10s/it][Succeeded / Failed / Skipped / Total] 25 / 22 / 2 / 49:   5%|▌         | 50/1000 [01:43<32:43,  2.07s/it][Succeeded / Failed / Skipped / Total] 26 / 22 / 2 / 50:   5%|▌         | 50/1000 [01:43<32:43,  2.07s/it][Succeeded / Failed / Skipped / Total] 26 / 22 / 2 / 50:   5%|▌         | 51/1000 [01:46<33:06,  2.09s/it][Succeeded / Failed / Skipped / Total] 27 / 22 / 2 / 51:   5%|▌         | 51/1000 [01:46<33:06,  2.09s/it][Succeeded / Failed / Skipped / Total] 27 / 22 / 2 / 51:   5%|▌         | 52/1000 [01:49<33:24,  2.11s/it][Succeeded / Failed / Skipped / Total] 28 / 22 / 2 / 52:   5%|▌         | 52/1000 [01:49<33:24,  2.11s/it][Succeeded / Failed / Skipped / Total] 28 / 22 / 2 / 52:   5%|▌         | 53/1000 [01:51<33:06,  2.10s/it][Succeeded / Failed / Skipped / Total] 28 / 23 / 2 / 53:   5%|▌         | 53/1000 [01:51<33:06,  2.10s/it][Succeeded / Failed / Skipped / Total] 28 / 23 / 2 / 53:   5%|▌         | 54/1000 [01:53<33:05,  2.10s/it][Succeeded / Failed / Skipped / Total] 29 / 23 / 2 / 54:   5%|▌         | 54/1000 [01:53<33:05,  2.10s/it]Accepts a subscriber . --> Methode permettantTIMESTAMP --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[subscriber]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[u]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[u]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 48 ---------------------------------------------
Start the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[filter]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 49 ---------------------------------------------
Start unbounded the queue . --> Handles connection --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[connection]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 50 ---------------------------------------------
Returns an observable that maps the supplied value to the supplied observable . --> Set the mapper for the given itself --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[set]] ( T [[itself]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[itself]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 51 ---------------------------------------------
Inserts the given element into the queue . --> Offers a new pc --> Socre: 1.0

[[[[Adv]]]]: public boolean offer ( T [[t]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean offer ( T [[pc]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[pc]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[pc]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 52 ---------------------------------------------
Logs an error . --> Called after a Throwable --> Socre: 1.0

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[after]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 53 ---------------------------------------------
Returns the current Disposable . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[dispose]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 54 ---------------------------------------------
Flatten the given exception into a list of exceptions . --> Check the given exception --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable t ) { List < Throwable > [[list]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > [[exceptions]] = ce . getExceptions ( ) ; for ( int i = [[exceptions]] . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( [[exceptions]] . get ( i ) ) ; } } else { [[list]] . add ( e ) ; } } return [[list]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[check]] ( Throwable t ) { List < Throwable > [[reference]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > [[counter]] = ce . getExceptions ( ) ; for ( int i = [[counter]] . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( [[counter]] . get ( i ) ) ; } } else { [[reference]] . add ( e ) ; } } return [[reference]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
[Succeeded / Failed / Skipped / Total] 30 / 23 / 2 / 55:   6%|▌         | 55/1000 [01:53<32:27,  2.06s/it][Succeeded / Failed / Skipped / Total] 30 / 23 / 2 / 55:   6%|▌         | 56/1000 [01:54<32:12,  2.05s/it][Succeeded / Failed / Skipped / Total] 31 / 23 / 2 / 56:   6%|▌         | 56/1000 [01:54<32:12,  2.05s/it][Succeeded / Failed / Skipped / Total] 32 / 23 / 2 / 57:   6%|▌         | 57/1000 [01:57<32:24,  2.06s/it][Succeeded / Failed / Skipped / Total] 32 / 23 / 2 / 57:   6%|▌         | 58/1000 [02:01<32:58,  2.10s/it][Succeeded / Failed / Skipped / Total] 33 / 23 / 2 / 58:   6%|▌         | 58/1000 [02:01<32:58,  2.10s/it][Succeeded / Failed / Skipped / Total] 33 / 24 / 2 / 59:   6%|▌         | 59/1000 [02:04<33:09,  2.11s/it][Succeeded / Failed / Skipped / Total] 33 / 24 / 2 / 59:   6%|▌         | 60/1000 [02:09<33:46,  2.16s/it][Succeeded / Failed / Skipped / Total] 34 / 24 / 2 / 60:   6%|▌         | 60/1000 [02:09<33:46,  2.16s/it][Succeeded / Failed / Skipped / Total] 34 / 25 / 2 / 61:   6%|▌         | 61/1000 [02:09<33:17,  2.13s/it][Succeeded / Failed / Skipped / Total] 34 / 25 / 2 / 61:   6%|▌         | 62/1000 [02:10<32:57,  2.11s/it]--------------------------------------------- Result 55 ---------------------------------------------
Drains the given queue into the queue . --> Synchronously executes a QueueDrain --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long [[r]] = qd . requested ( ) ; if ( [[r]] != 0L ) { if ( qd . accept ( a , v ) ) { if ( [[r]] != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[foo]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long [[a]] = qd . requested ( ) ; if ( [[a]] != 0L ) { if ( qd . accept ( a , v ) ) { if ( [[a]] != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 56 ---------------------------------------------
Complete execution . --> Stops this FUSED --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[after]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 57 ---------------------------------------------
Called when a value is complete . --> called from interface --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[a]] = downstream ; if ( state == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; [[a]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[a]] . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { [[a]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[got]] ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[end]] = downstream ; if ( state == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; [[end]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[end]] . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { [[end]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 58 ---------------------------------------------
Request a long . --> Request a request --> Socre: 1.0

[[[[Adv]]]]: protected final void request ( long [[n]] ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( [[n]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void request ( long [[branch]] ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( [[branch]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 59 ---------------------------------------------
Returns the concat map iterable for the given mapper . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return concatMapIterable ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > [[e]] ) { return concatMapIterable ( [[e]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 60 ---------------------------------------------
Waits for the specified number of events . --> This method is used to catch async consumer --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[on]] ( int [[i]] ) { if ( [[i]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[on]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 61 ---------------------------------------------
Creates a new RMapDelayError instance --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return concatMapDelayError ( mapper , 2 , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return concatMapDelayError ( mapper , 2 , "[[empty]]" == "[[empty]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 62 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 35 / 25 / 2 / 62:   6%|▌         | 62/1000 [02:10<32:57,  2.11s/it][Succeeded / Failed / Skipped / Total] 35 / 26 / 2 / 63:   6%|▋         | 63/1000 [02:10<32:27,  2.08s/it][Succeeded / Failed / Skipped / Total] 35 / 26 / 2 / 63:   6%|▋         | 64/1000 [02:19<33:53,  2.17s/it][Succeeded / Failed / Skipped / Total] 36 / 26 / 2 / 64:   6%|▋         | 64/1000 [02:19<33:53,  2.17s/it][Succeeded / Failed / Skipped / Total] 36 / 26 / 3 / 65:   6%|▋         | 65/1000 [02:19<33:21,  2.14s/it][Succeeded / Failed / Skipped / Total] 36 / 26 / 3 / 65:   7%|▋         | 66/1000 [02:21<33:20,  2.14s/it][Succeeded / Failed / Skipped / Total] 36 / 27 / 3 / 66:   7%|▋         | 66/1000 [02:21<33:20,  2.14s/it][Succeeded / Failed / Skipped / Total] 37 / 27 / 3 / 67:   7%|▋         | 67/1000 [02:24<33:26,  2.15s/it][Succeeded / Failed / Skipped / Total] 37 / 27 / 3 / 67:   7%|▋         | 68/1000 [02:25<33:20,  2.15s/it][Succeeded / Failed / Skipped / Total] 38 / 27 / 3 / 68:   7%|▋         | 68/1000 [02:25<33:20,  2.15s/it]Accept an observer . --> Methode accept Number --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[observer]] ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[observer]] ) ) { return "True" == "True" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[value]] ) { Object [ ] [[box]] = head ; final int c = capacity ; while ( [[box]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[box]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[value]] ) ) { return "True" == "True" ; } } [[box]] = ( Object [ ] ) [[box]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 63 ---------------------------------------------
Sort the specified sort function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[template]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 64 ---------------------------------------------
Returns a ConnectableFlowable . --> Convenience method for building a flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler [[scheduler]] ) { final Flowable < T > flowable = cf . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler [[statement]] ) { final Flowable < T > flowable = cf . observeOn ( [[statement]] ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 65 ---------------------------------------------
Create sample data --> [[[SKIPPED]]]

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 66 ---------------------------------------------
Creates the error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > [[call]] ; try { [[call]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[call]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[call]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[call]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[receive]] ( ) { Response < ? > [[end]] ; try { [[end]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[end]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[end]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[end]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 67 ---------------------------------------------
Adds this PublishDisposable to the subscribers . --> Does this PublishDisposable operator? --> Socre: 1.0

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED ) { return "False" != "False" ; } int n = [[a]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( [[a]] , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( [[a]] , b ) ) { return "[[True]]" == "[[True]]" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[operator]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[g]] = subscribers . get ( ) ; if ( [[g]] == TERMINATED ) { return "False" != "False" ; } int n = [[g]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( [[g]] , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( [[g]] , b ) ) { return "[[x]]" == "[[x]]" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 68 ---------------------------------------------
Set delay amount . --> assume a positive value --> Socre: 1.0

[[[[Adv]]]]: public void [[setDelay]] ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[delayMs]] = unit . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[assume]] ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[p]] = unit . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 69 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 39 / 27 / 3 / 69:   7%|▋         | 69/1000 [02:28<33:23,  2.15s/it][Succeeded / Failed / Skipped / Total] 39 / 27 / 3 / 69:   7%|▋         | 70/1000 [02:29<33:02,  2.13s/it][Succeeded / Failed / Skipped / Total] 39 / 28 / 3 / 70:   7%|▋         | 70/1000 [02:29<33:02,  2.13s/it][Succeeded / Failed / Skipped / Total] 39 / 29 / 3 / 71:   7%|▋         | 71/1000 [02:32<33:15,  2.15s/it][Succeeded / Failed / Skipped / Total] 39 / 29 / 3 / 71:   7%|▋         | 72/1000 [02:34<33:13,  2.15s/it][Succeeded / Failed / Skipped / Total] 40 / 29 / 3 / 72:   7%|▋         | 72/1000 [02:34<33:13,  2.15s/it][Succeeded / Failed / Skipped / Total] 41 / 29 / 3 / 73:   7%|▋         | 73/1000 [02:35<32:52,  2.13s/it][Succeeded / Failed / Skipped / Total] 41 / 29 / 3 / 73:   7%|▋         | 74/1000 [02:41<33:42,  2.18s/it][Succeeded / Failed / Skipped / Total] 42 / 29 / 3 / 74:   7%|▋         | 74/1000 [02:41<33:42,  2.18s/it][Succeeded / Failed / Skipped / Total] 43 / 29 / 3 / 75:   8%|▊         | 75/1000 [02:41<33:15,  2.16s/it][Succeeded / Failed / Skipped / Total] 43 / 29 / 3 / 75:   8%|▊         | 76/1000 [02:42<32:55,  2.14s/it][Succeeded / Failed / Skipped / Total] 44 / 29 / 3 / 76:   8%|▊         | 76/1000 [02:42<32:55,  2.14s/it]Search the user by username . --> Search for a template . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[template]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[template]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[template]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[template]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 70 ---------------------------------------------
Returns the method --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[user]] ( String [[hello]] ) { try { return HttpMethod . valueOf ( [[hello]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 71 ---------------------------------------------
Calculates the current time in seconds . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit [[unit]] ) { float [[delta]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[run]] ( TimeUnit [[time]] ) { float [[queue]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 72 ---------------------------------------------
Validates the version name . --> Sets the minSpringVersion --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[assume]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 73 ---------------------------------------------
Removes the given subscribers . --> from interface PublishDisposable --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == [[ps]] ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] [[b]] ; if ( n == 1 ) { [[b]] = EMPTY ; } else { [[b]] = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , [[b]] , 0 , j ) ; System . arraycopy ( a , j + 1 , [[b]] , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , [[b]] ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[hold]] ( PublishDisposable < T > [[name]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == [[name]] ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] [[a]] ; if ( n == 1 ) { [[a]] = EMPTY ; } else { [[a]] = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , [[a]] , 0 , j ) ; System . arraycopy ( a , j + 1 , [[a]] , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , [[a]] ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 74 ---------------------------------------------
Encode the salt user . --> Convenience method for command --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( CharSequence rawPassword ) { String [[salt]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[command]] ( CharSequence rawPassword ) { String [[password]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[password]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 75 ---------------------------------------------
Returns AttributeExchangeConfig . --> end AttributeExchangeConfigurer --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer [[attributeExchange]] ( String identifierPattern ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer [[end]] ( String identifierPattern ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 76 ---------------------------------------------
Checks if the encoded password matches the raw password --> Quick fix . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence rawPassword , String [[encodedPassword]] ) { String salt = extractSalt ( [[encodedPassword]] ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[fix]] ( CharSequence rawPassword , String [[digest]] ) { String salt = extractSalt ( [[digest]] ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( [[digest]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 77 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 44 / 30 / 3 / 77:   8%|▊         | 77/1000 [02:43<32:43,  2.13s/it][Succeeded / Failed / Skipped / Total] 44 / 30 / 3 / 77:   8%|▊         | 78/1000 [02:51<33:50,  2.20s/it][Succeeded / Failed / Skipped / Total] 45 / 30 / 3 / 78:   8%|▊         | 78/1000 [02:51<33:50,  2.20s/it][Succeeded / Failed / Skipped / Total] 46 / 30 / 3 / 79:   8%|▊         | 79/1000 [02:54<33:54,  2.21s/it][Succeeded / Failed / Skipped / Total] 46 / 30 / 3 / 79:   8%|▊         | 80/1000 [02:57<34:06,  2.22s/it][Succeeded / Failed / Skipped / Total] 46 / 31 / 3 / 80:   8%|▊         | 80/1000 [02:57<34:06,  2.22s/it][Succeeded / Failed / Skipped / Total] 47 / 31 / 3 / 81:   8%|▊         | 81/1000 [02:58<33:41,  2.20s/it][Succeeded / Failed / Skipped / Total] 47 / 31 / 3 / 81:   8%|▊         | 82/1000 [02:58<33:15,  2.17s/it][Succeeded / Failed / Skipped / Total] 47 / 31 / 4 / 82:   8%|▊         | 82/1000 [02:58<33:15,  2.17s/it][Succeeded / Failed / Skipped / Total] 48 / 31 / 4 / 83:   8%|▊         | 83/1000 [03:02<33:41,  2.20s/it][Succeeded / Failed / Skipped / Total] 48 / 31 / 4 / 83:   8%|▊         | 84/1000 [03:09<34:22,  2.25s/it]Get the SpringSecurity core version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[foo]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 78 ---------------------------------------------
Disables the specified spring version . --> set springs --> Socre: 1.0

[[[[Adv]]]]: private static boolean disableChecks ( String [[springVersion]] , String [[springSecurityVersion]] ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( [[springSecurityVersion]] ) ) { return "[[True]]" == "[[True]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String [[springs]] , String [[validation]] ) { if ( [[springs]] == null || [[springs]] . equals ( [[validation]] ) ) { return "[[max]]" == "[[max]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 79 ---------------------------------------------
Retrieve the configuration settings . --> Perform an OAuth2ResourceServerConfigurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[exit]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[error]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[error]] ) ; return [[error]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 80 ---------------------------------------------
Returns a new ChannelSecurityConfigurer for this registry . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[context]] ( ) throws Exception { ApplicationContext [[profile]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[profile]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 81 ---------------------------------------------
Parses the annotations . --> end of response --> Socre: 1.0

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[parseAnnotations]] ( Retrofit retrofit , Method method , RequestFactory [[requestFactory]] ) { boolean isKotlinSuspendFunction = [[requestFactory]] . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] [[annotations]] = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] [[parameterTypes]] = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) [[parameterTypes]] [ [[parameterTypes]] . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[end]] ( Retrofit retrofit , Method method , RequestFactory [[array]] ) { boolean isKotlinSuspendFunction = [[array]] . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] [[location]] = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] [[http]] = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) [[http]] [ [[http]] . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 82 ---------------------------------------------
Build a searchControls --> [[[SKIPPED]]]

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 83 ---------------------------------------------
Returns the oauth2 client . --> DefaultAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuthAuth --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[exception]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[exception]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[exception]] ) ; return [[exception]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 84 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 49 / 31 / 4 / 84:   8%|▊         | 84/1000 [03:09<34:22,  2.25s/it][Succeeded / Failed / Skipped / Total] 49 / 31 / 4 / 84:   8%|▊         | 85/1000 [03:09<34:02,  2.23s/it][Succeeded / Failed / Skipped / Total] 50 / 31 / 4 / 85:   8%|▊         | 85/1000 [03:09<34:02,  2.23s/it][Succeeded / Failed / Skipped / Total] 50 / 31 / 4 / 85:   9%|▊         | 86/1000 [03:15<34:36,  2.27s/it][Succeeded / Failed / Skipped / Total] 51 / 31 / 4 / 86:   9%|▊         | 86/1000 [03:15<34:36,  2.27s/it][Succeeded / Failed / Skipped / Total] 51 / 31 / 4 / 86:   9%|▊         | 87/1000 [03:15<34:15,  2.25s/it]Compares the specified string with the specified value . --> Returns true if dn contains matching --> Socre: 1.0

[[[[Adv]]]]: public boolean [[compare]] ( final String dn , final String [[attributeName]] , final Object value ) { final String comparisonFilter = "(" + [[attributeName]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext [[ctx]] ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = [[ctx]] . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean [[exchange]] ( final String dn , final String [[matching]] , final Object value ) { final String comparisonFilter = "(" + [[matching]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext [[name]] ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = [[name]] . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 85 ---------------------------------------------
Searches for an entry in a single - entry query . --> Searches for a single entry under DN --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter [[dca]] = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( [[dca]] , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + [[dca]] . getDn ( ) ) ; } results . add ( [[dca]] ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter [[i]] = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( [[i]] , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + [[i]] . getDn ( ) ) ; } results . add ( [[i]] ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 86 ---------------------------------------------
Create the servlet api filter . --> CreateServletApiFilter --> Socre: 1.0

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String [[ATT_SERVLET_API_PROVISION]] = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( [[ATT_SERVLET_API_PROVISION]] ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String [[status]] = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( [[status]] ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 87 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 52 / 31 / 4 / 87:   9%|▊         | 87/1000 [03:15<34:15,  2.25s/it][Succeeded / Failed / Skipped / Total] 52 / 31 / 4 / 87:   9%|▉         | 88/1000 [03:17<34:11,  2.25s/it][Succeeded / Failed / Skipped / Total] 52 / 32 / 4 / 88:   9%|▉         | 88/1000 [03:17<34:11,  2.25s/it][Succeeded / Failed / Skipped / Total] 52 / 32 / 4 / 88:   9%|▉         | 89/1000 [03:19<34:01,  2.24s/it]Create an embedded server definition . --> Create an embedded server --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element [[element]] , ParserContext parserContext ) { Object source = parserContext . extractSource ( [[element]] ) ; String suffix = [[element]] . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = [[element]] . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = [[element]] . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , [[element]] ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element [[net]] , ParserContext parserContext ) { Object source = parserContext . extractSource ( [[net]] ) ; String suffix = [[net]] . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = [[net]] . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = [[net]] . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , [[net]] ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 88 ---------------------------------------------
Tries to locate an observer from the source stream . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > [[observer]] , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( [[observer]] ) ; return "True" == "True" ; } ObservableSource < ? extends R > [[r]] ; try { [[r]] = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "True" == "True" ; } if ( [[r]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[r]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( [[observer]] ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[observer]] , u ) ; [[observer]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { [[r]] . subscribe ( [[observer]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[method]] ( ObservableSource < T > source , Observer < ? super R > [[body]] , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[body]] ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( [[body]] ) ; return "True" == "True" ; } ObservableSource < ? extends R > [[s]] ; try { [[s]] = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[body]] ) ; return "True" == "True" ; } if ( [[s]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[s]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[body]] ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( [[body]] ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[body]] , u ) ; [[body]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { [[s]] . subscribe ( [[body]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 89 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 53 / 32 / 4 / 89:   9%|▉         | 89/1000 [03:19<34:01,  2.24s/it][Succeeded / Failed / Skipped / Total] 53 / 32 / 4 / 89:   9%|▉         | 90/1000 [03:21<34:01,  2.24s/it][Succeeded / Failed / Skipped / Total] 54 / 32 / 4 / 90:   9%|▉         | 90/1000 [03:21<34:01,  2.24s/it][Succeeded / Failed / Skipped / Total] 54 / 32 / 4 / 90:   9%|▉         | 91/1000 [03:22<33:46,  2.23s/it][Succeeded / Failed / Skipped / Total] 55 / 32 / 4 / 91:   9%|▉         | 91/1000 [03:22<33:46,  2.23s/it][Succeeded / Failed / Skipped / Total] 55 / 32 / 4 / 91:   9%|▉         | 92/1000 [03:24<33:39,  2.22s/it][Succeeded / Failed / Skipped / Total] 56 / 32 / 4 / 92:   9%|▉         | 92/1000 [03:24<33:39,  2.22s/it][Succeeded / Failed / Skipped / Total] 56 / 32 / 4 / 92:   9%|▉         | 93/1000 [03:27<33:43,  2.23s/it][Succeeded / Failed / Skipped / Total] 57 / 32 / 4 / 93:   9%|▉         | 93/1000 [03:27<33:43,  2.23s/it][Succeeded / Failed / Skipped / Total] 57 / 32 / 4 / 93:   9%|▉         | 94/1000 [03:28<33:28,  2.22s/it]Build the authentication details . --> Returns a new PreAuthenticatedGrantedAuthorities --> Socre: 1.0

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest [[context]] ) { Collection < String > j2eeUserRoles = getUserRoles ( [[context]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[context]] , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[after]] ( HttpServletRequest [[na]] ) { Collection < String > j2eeUserRoles = getUserRoles ( [[na]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[na]] , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 90 ---------------------------------------------
Creates the Jaas API filter . --> Create jaasApiFilter . --> Socre: 1.0

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String [[provideJaasApi]] = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[provideJaasApi]] ) ) { [[provideJaasApi]] = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( [[provideJaasApi]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String [[example]] = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[example]] ) ) { [[example]] = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( [[example]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 91 ---------------------------------------------
Retrieve an entry from a LDAP server . --> Execute a specific DirContextOperations --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String [[dn]] , final String [ ] [[attributesToRetrieve]] ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[dn]] , [[attributesToRetrieve]] ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[execution]] ( final String [[id]] , final String [ ] [[type]] ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[id]] , [[type]] ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 92 ---------------------------------------------
Registers the spring security filter --> Insert Spring SecurityFilter proxy . --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String [[filterName]] = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( [[filterName]] ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , [[filterName]] , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String [[bucket]] = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( [[bucket]] ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , [[bucket]] , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 93 ---------------------------------------------
Gets a token for a series id . --> Returns a PersistentRememberMeToken --> Socre: 1.0

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[f]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 94 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 57 / 33 / 4 / 94:   9%|▉         | 94/1000 [03:28<33:28,  2.22s/it][Succeeded / Failed / Skipped / Total] 57 / 33 / 4 / 94:  10%|▉         | 95/1000 [03:28<33:07,  2.20s/it][Succeeded / Failed / Skipped / Total] 57 / 34 / 4 / 95:  10%|▉         | 95/1000 [03:28<33:07,  2.20s/it][Succeeded / Failed / Skipped / Total] 57 / 34 / 4 / 95:  10%|▉         | 96/1000 [03:31<33:08,  2.20s/it][Succeeded / Failed / Skipped / Total] 57 / 35 / 4 / 96:  10%|▉         | 96/1000 [03:31<33:08,  2.20s/it][Succeeded / Failed / Skipped / Total] 57 / 35 / 4 / 96:  10%|▉         | 97/1000 [03:34<33:19,  2.21s/it][Succeeded / Failed / Skipped / Total] 57 / 36 / 4 / 97:  10%|▉         | 97/1000 [03:34<33:19,  2.21s/it][Succeeded / Failed / Skipped / Total] 57 / 36 / 4 / 97:  10%|▉         | 98/1000 [03:37<33:19,  2.22s/it][Succeeded / Failed / Skipped / Total] 58 / 36 / 4 / 98:  10%|▉         | 98/1000 [03:37<33:19,  2.22s/it][Succeeded / Failed / Skipped / Total] 58 / 36 / 4 / 98:  10%|▉         | 99/1000 [03:49<34:49,  2.32s/it][Succeeded / Failed / Skipped / Total] 58 / 37 / 4 / 99:  10%|▉         | 99/1000 [03:49<34:49,  2.32s/it][Succeeded / Failed / Skipped / Total] 58 / 37 / 4 / 99:  10%|█         | 100/1000 [03:55<35:15,  2.35s/it][Succeeded / Failed / Skipped / Total] 59 / 37 / 4 / 100:  10%|█         | 100/1000 [03:55<35:15,  2.35s/it][Succeeded / Failed / Skipped / Total] 59 / 37 / 4 / 100:  10%|█         | 101/1000 [03:55<34:54,  2.33s/it]Search for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[array]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 95 ---------------------------------------------
Create a new instance of type resolver . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[format]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[format]] = [[format]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[format]] = [[format]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[format]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 96 ---------------------------------------------
Checks whether this component is set . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[var]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 97 ---------------------------------------------
Creates a new Cipher . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[chase]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 98 ---------------------------------------------
Check if the principal has changed . --> Is principalChanged? --> Socre: 1.0

[[[[Adv]]]]: protected boolean principalChanged ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean principalChanged ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "[[confidence]]" == "[[confidence]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 99 ---------------------------------------------
Returns the list of authorities associated with the given attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String attribute : attributes ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[hold]] ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String attribute : attributes ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 100 ---------------------------------------------
Check content length . --> check content length --> Socre: 1.0

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . [[contentWritten]] += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . [[contentWritten]] >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . [[contentWritten]] >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . [[g]] += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . [[g]] >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . [[g]] >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 101 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 59 / 38 / 4 / 101:  10%|█         | 101/1000 [03:55<34:54,  2.33s/it][Succeeded / Failed / Skipped / Total] 59 / 38 / 4 / 101:  10%|█         | 102/1000 [03:56<34:38,  2.31s/it][Succeeded / Failed / Skipped / Total] 60 / 38 / 4 / 102:  10%|█         | 102/1000 [03:56<34:38,  2.31s/it][Succeeded / Failed / Skipped / Total] 60 / 38 / 4 / 102:  10%|█         | 103/1000 [03:57<34:24,  2.30s/it][Succeeded / Failed / Skipped / Total] 61 / 38 / 4 / 103:  10%|█         | 103/1000 [03:57<34:24,  2.30s/it][Succeeded / Failed / Skipped / Total] 61 / 38 / 4 / 103:  10%|█         | 104/1000 [04:02<34:52,  2.34s/it][Succeeded / Failed / Skipped / Total] 62 / 38 / 4 / 104:  10%|█         | 104/1000 [04:02<34:52,  2.34s/it][Succeeded / Failed / Skipped / Total] 62 / 38 / 4 / 104:  10%|█         | 105/1000 [04:03<34:33,  2.32s/it][Succeeded / Failed / Skipped / Total] 62 / 39 / 4 / 105:  10%|█         | 105/1000 [04:03<34:33,  2.32s/it][Succeeded / Failed / Skipped / Total] 62 / 39 / 4 / 105:  11%|█         | 106/1000 [04:03<34:12,  2.30s/it]Perform a filter . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest [[request]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[request]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[request]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[request]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest [[alert]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[alert]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[alert]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[alert]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 102 ---------------------------------------------
Sets the loginProcessingUrl . --> Return a new access token --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String loginProcessingUrl ) { this . [[loginProcessingUrl]] = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[pf]] ( String loginProcessingUrl ) { this . [[client]] = [[pf]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[pf]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 103 ---------------------------------------------
Lookup all primary keys in the database . --> Generates a template --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > [[sids]] ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , [[sids]] ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[template]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > [[i]] ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , [[i]] ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 104 ---------------------------------------------
Encodes cookieTokens . --> Encode a cookie --> Socre: 1.0

[[[[Adv]]]]: protected String encodeCookie ( String [ ] [[cookieTokens]] ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < [[cookieTokens]] . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( [[cookieTokens]] [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < [[cookieTokens]] . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String encodeCookie ( String [ ] [[t]] ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < [[t]] . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( [[t]] [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < [[t]] . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 105 ---------------------------------------------
Returns all authorities contained in the given collection of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { [[mapped]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[access]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { [[access]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[access]] . add ( defaultAuthority ) ; } return [[access]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 106 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 40 / 4 / 106:  11%|█         | 106/1000 [04:03<34:12,  2.30s/it][Succeeded / Failed / Skipped / Total] 62 / 40 / 4 / 106:  11%|█         | 107/1000 [04:05<34:10,  2.30s/it][Succeeded / Failed / Skipped / Total] 63 / 40 / 4 / 107:  11%|█         | 107/1000 [04:05<34:10,  2.30s/it][Succeeded / Failed / Skipped / Total] 63 / 40 / 4 / 107:  11%|█         | 108/1000 [04:08<34:11,  2.30s/it][Succeeded / Failed / Skipped / Total] 63 / 41 / 4 / 108:  11%|█         | 108/1000 [04:08<34:11,  2.30s/it][Succeeded / Failed / Skipped / Total] 63 / 41 / 4 / 108:  11%|█         | 109/1000 [04:09<33:58,  2.29s/it][Succeeded / Failed / Skipped / Total] 63 / 42 / 4 / 109:  11%|█         | 109/1000 [04:09<33:58,  2.29s/it][Succeeded / Failed / Skipped / Total] 63 / 42 / 4 / 109:  11%|█         | 110/1000 [04:11<33:57,  2.29s/it][Succeeded / Failed / Skipped / Total] 63 / 43 / 4 / 110:  11%|█         | 110/1000 [04:11<33:57,  2.29s/it][Succeeded / Failed / Skipped / Total] 63 / 43 / 4 / 110:  11%|█         | 111/1000 [04:15<34:06,  2.30s/it][Succeeded / Failed / Skipped / Total] 64 / 43 / 4 / 111:  11%|█         | 111/1000 [04:15<34:06,  2.30s/it][Succeeded / Failed / Skipped / Total] 64 / 43 / 4 / 111:  11%|█         | 112/1000 [04:16<33:57,  2.29s/it]Update the default level settings . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[exploit]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[foo]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[foo]] != null && ! [[foo]] . isCustomLogoutSuccess ( ) ) { [[foo]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 107 ---------------------------------------------
Map password . --> Ends a string --> Socre: 1.0

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[end]] ( Object [[foo]] ) { if ( ! ( [[foo]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 108 ---------------------------------------------
Perform authentication authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest [[request]] , HttpServletResponse [[response]] ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[request]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken [[authRequest]] = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; authResult = authenticationManager . authenticate ( [[authRequest]] ) ; successfulAuthentication ( [[request]] , [[response]] , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[request]] , [[response]] , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest [[e]] , HttpServletResponse [[ii]] ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[e]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[e]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken [[challenge]] = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; [[challenge]] . setDetails ( authenticationDetailsSource . buildDetails ( [[e]] ) ) ; authResult = authenticationManager . authenticate ( [[challenge]] ) ; successfulAuthentication ( [[e]] , [[ii]] , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[e]] , [[ii]] , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 109 ---------------------------------------------
Search for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] [[attributeNames]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > [[multipleAttributeValues]] = searchForMultipleAttributeValues ( base , filter , params , [[attributeNames]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : [[multipleAttributeValues]] ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[draw]] ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] [[cause]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > [[condition]] = searchForMultipleAttributeValues ( base , filter , params , [[cause]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : [[condition]] ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 110 ---------------------------------------------
Update the access defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[like]] ( B [[gb]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[gb]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 111 ---------------------------------------------
Returns the query string . --> Helper method for answer --> Socre: 1.0

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern [[artifactPattern]] ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = [[artifactPattern]] . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[answer]] ( final HttpServletRequest request , final Pattern [[command]] ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = [[command]] . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 112 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 65 / 43 / 4 / 112:  11%|█         | 112/1000 [04:16<33:57,  2.29s/it][Succeeded / Failed / Skipped / Total] 65 / 43 / 4 / 112:  11%|█▏        | 113/1000 [04:22<34:23,  2.33s/it][Succeeded / Failed / Skipped / Total] 65 / 44 / 4 / 113:  11%|█▏        | 113/1000 [04:22<34:23,  2.33s/it][Succeeded / Failed / Skipped / Total] 65 / 44 / 4 / 113:  11%|█▏        | 114/1000 [04:22<34:03,  2.31s/it][Succeeded / Failed / Skipped / Total] 65 / 45 / 4 / 114:  11%|█▏        | 114/1000 [04:22<34:03,  2.31s/it][Succeeded / Failed / Skipped / Total] 65 / 45 / 4 / 114:  12%|█▏        | 115/1000 [04:27<34:22,  2.33s/it][Succeeded / Failed / Skipped / Total] 66 / 45 / 4 / 115:  12%|█▏        | 115/1000 [04:27<34:22,  2.33s/it][Succeeded / Failed / Skipped / Total] 66 / 45 / 4 / 115:  12%|█▏        | 116/1000 [04:28<34:06,  2.32s/it][Succeeded / Failed / Skipped / Total] 66 / 46 / 4 / 116:  12%|█▏        | 116/1000 [04:28<34:06,  2.32s/it][Succeeded / Failed / Skipped / Total] 66 / 46 / 4 / 116:  12%|█▏        | 117/1000 [04:28<33:49,  2.30s/it][Succeeded / Failed / Skipped / Total] 66 / 47 / 4 / 117:  12%|█▏        | 117/1000 [04:28<33:49,  2.30s/it][Succeeded / Failed / Skipped / Total] 66 / 47 / 4 / 117:  12%|█▏        | 118/1000 [04:33<34:00,  2.31s/it][Succeeded / Failed / Skipped / Total] 66 / 48 / 4 / 118:  12%|█▏        | 118/1000 [04:33<34:00,  2.31s/it][Succeeded / Failed / Skipped / Total] 66 / 48 / 4 / 118:  12%|█▏        | 119/1000 [04:33<33:43,  2.30s/it]Lookup the authentication . --> Authenticate . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[request]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[group]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 113 ---------------------------------------------
Get the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL [[casServiceUrl]] ) { int port = [[casServiceUrl]] . getPort ( ) ; if ( port == - 1 ) { port = [[casServiceUrl]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[destination]] ( URL [[address]] ) { int port = [[address]] . getPort ( ) ; if ( port == - 1 ) { port = [[address]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 114 ---------------------------------------------
Returns the cookie name from the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[accept]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 115 ---------------------------------------------
Sets cookie . --> Convenience method to get an object --> Socre: 1.0

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String [[cookieValue]] = encodeCookie ( tokens ) ; Cookie [[cookie]] = new Cookie ( cookieName , [[cookieValue]] ) ; [[cookie]] . setMaxAge ( maxAge ) ; [[cookie]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[cookie]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[cookie]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[cookie]] . setSecure ( request . isSecure ( ) ) ; } else { [[cookie]] . setSecure ( useSecureCookie ) ; } [[cookie]] . setHttpOnly ( "True" == "True" ) ; response . addCookie ( [[cookie]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[object]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String [[i]] = encodeCookie ( tokens ) ; Cookie [[foo]] = new Cookie ( cookieName , [[i]] ) ; [[foo]] . setMaxAge ( maxAge ) ; [[foo]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[foo]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[foo]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[foo]] . setSecure ( request . isSecure ( ) ) ; } else { [[foo]] . setSecure ( useSecureCookie ) ; } [[foo]] . setHttpOnly ( "True" == "True" ) ; response . addCookie ( [[foo]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 116 ---------------------------------------------
Render the tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[draw]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 117 ---------------------------------------------
Gets the full URL for the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[filter]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 118 ---------------------------------------------
Gets the principal . --> [[[FAILED]]]

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[authentication]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[metadata]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[metadata]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[metadata]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( [[metadata]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 119 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 48 / 4 / 119:  12%|█▏        | 119/1000 [04:33<33:43,  2.30s/it][Succeeded / Failed / Skipped / Total] 67 / 48 / 4 / 119:  12%|█▏        | 120/1000 [04:33<33:24,  2.28s/it][Succeeded / Failed / Skipped / Total] 68 / 48 / 4 / 120:  12%|█▏        | 120/1000 [04:33<33:24,  2.28s/it][Succeeded / Failed / Skipped / Total] 68 / 48 / 4 / 120:  12%|█▏        | 121/1000 [04:35<33:18,  2.27s/it][Succeeded / Failed / Skipped / Total] 69 / 48 / 4 / 121:  12%|█▏        | 121/1000 [04:35<33:18,  2.27s/it][Succeeded / Failed / Skipped / Total] 69 / 48 / 4 / 121:  12%|█▏        | 122/1000 [04:35<33:03,  2.26s/it][Succeeded / Failed / Skipped / Total] 70 / 48 / 4 / 122:  12%|█▏        | 122/1000 [04:35<33:03,  2.26s/it][Succeeded / Failed / Skipped / Total] 70 / 48 / 4 / 122:  12%|█▏        | 123/1000 [04:42<33:36,  2.30s/it][Succeeded / Failed / Skipped / Total] 71 / 48 / 4 / 123:  12%|█▏        | 123/1000 [04:42<33:36,  2.30s/it][Succeeded / Failed / Skipped / Total] 71 / 48 / 4 / 123:  12%|█▏        | 124/1000 [04:46<33:44,  2.31s/it][Succeeded / Failed / Skipped / Total] 71 / 49 / 4 / 124:  12%|█▏        | 124/1000 [04:46<33:44,  2.31s/it][Succeeded / Failed / Skipped / Total] 71 / 49 / 4 / 124:  12%|█▎        | 125/1000 [04:51<34:03,  2.34s/it]Sets the context environment properties . --> Computes the transformation --> Socre: 1.0

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > [[environment]] ) { Assert . notEmpty ( [[environment]] , "environment must not be empty" ) ; this . [[contextEnvironmentProperties]] = new Hashtable <> ( [[environment]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[transformation]] ( Map < String , Object > [[vector]] ) { Assert . notEmpty ( [[vector]] , "environment must not be empty" ) ; this . [[array]] = new Hashtable <> ( [[vector]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 120 ---------------------------------------------
initialize the user s list --> Get user s credentials --> Socre: 1.0

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[assignment]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 121 ---------------------------------------------
Adds additional parameters . --> generate code from attributes --> Socre: 1.0

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[fore]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 122 ---------------------------------------------
Returns the UserDetailsService . --> Get UserDetailsService data --> Socre: 1.0

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[data]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 123 ---------------------------------------------
Determines whether the authenticated authentication token is authenticated . --> mask the authentication --> Socre: 1.0

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[mask]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 124 ---------------------------------------------
Handle logout . --> [[[FAILED]]]

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 125 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 72 / 49 / 4 / 125:  12%|█▎        | 125/1000 [04:51<34:03,  2.34s/it][Succeeded / Failed / Skipped / Total] 72 / 49 / 4 / 125:  13%|█▎        | 126/1000 [04:57<34:21,  2.36s/it][Succeeded / Failed / Skipped / Total] 72 / 50 / 4 / 126:  13%|█▎        | 126/1000 [04:57<34:21,  2.36s/it][Succeeded / Failed / Skipped / Total] 72 / 50 / 4 / 126:  13%|█▎        | 127/1000 [04:57<34:04,  2.34s/it][Succeeded / Failed / Skipped / Total] 73 / 50 / 4 / 127:  13%|█▎        | 127/1000 [04:57<34:04,  2.34s/it][Succeeded / Failed / Skipped / Total] 73 / 50 / 4 / 127:  13%|█▎        | 128/1000 [04:57<33:48,  2.33s/it][Succeeded / Failed / Skipped / Total] 74 / 50 / 4 / 128:  13%|█▎        | 128/1000 [04:57<33:48,  2.33s/it][Succeeded / Failed / Skipped / Total] 74 / 50 / 4 / 128:  13%|█▎        | 129/1000 [04:59<33:44,  2.32s/it][Succeeded / Failed / Skipped / Total] 74 / 51 / 4 / 129:  13%|█▎        | 129/1000 [04:59<33:44,  2.32s/it][Succeeded / Failed / Skipped / Total] 74 / 52 / 4 / 130:  13%|█▎        | 130/1000 [04:59<33:27,  2.31s/it][Succeeded / Failed / Skipped / Total] 74 / 52 / 4 / 130:  13%|█▎        | 131/1000 [05:01<33:20,  2.30s/it]Create a MethodSecurityExpressionRoot . --> Create a MethodSecurityExpressionRoot --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication authentication , MethodInvocation [[invocation]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( [[invocation]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication authentication , MethodInvocation [[attacker]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( [[attacker]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 126 ---------------------------------------------
Builds the provider url . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String [[trimmedBaseDn]] = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( [[trimmedBaseDn]] ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String [[path]] = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( [[path]] ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 127 ---------------------------------------------
Returns the cached JWKSet . --> Query jwkSet --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[cachedJWKSet]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[query]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[look]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 128 ---------------------------------------------
URL - encode a string --> Adds a new string . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[add]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 129 ---------------------------------------------
Process ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest [[request]] , final HttpServletResponse [[response]] ) { boolean result = super . requiresAuthentication ( [[request]] , [[response]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest [[test]] , final HttpServletResponse [[call]] ) { boolean result = super . requiresAuthentication ( [[test]] , [[call]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 130 ---------------------------------------------
Resolves an argument . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange [[exchange]] ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object [[p]] = resolveSecurityContext ( parameter , a ) ; Mono < Object > [[o]] = Mono . justOrEmpty ( [[p]] ) ; return adapter == null ? [[o]] : Mono . just ( adapter . fromPublisher ( [[o]] ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange [[model]] ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object [[request]] = resolveSecurityContext ( parameter , a ) ; Mono < Object > [[value]] = Mono . justOrEmpty ( [[request]] ) ; return adapter == null ? [[value]] : Mono . just ( adapter . fromPublisher ( [[value]] ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 131 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 74 / 53 / 4 / 131:  13%|█▎        | 131/1000 [05:01<33:20,  2.30s/it][Succeeded / Failed / Skipped / Total] 74 / 54 / 4 / 132:  13%|█▎        | 132/1000 [05:09<33:56,  2.35s/it][Succeeded / Failed / Skipped / Total] 74 / 54 / 4 / 132:  13%|█▎        | 133/1000 [05:13<34:04,  2.36s/it][Succeeded / Failed / Skipped / Total] 75 / 54 / 4 / 133:  13%|█▎        | 133/1000 [05:13<34:04,  2.36s/it][Succeeded / Failed / Skipped / Total] 75 / 54 / 4 / 133:  13%|█▎        | 134/1000 [05:13<33:48,  2.34s/it][Succeeded / Failed / Skipped / Total] 75 / 54 / 5 / 134:  13%|█▎        | 134/1000 [05:13<33:48,  2.34s/it][Succeeded / Failed / Skipped / Total] 75 / 54 / 5 / 134:  14%|█▎        | 135/1000 [05:14<33:34,  2.33s/it][Succeeded / Failed / Skipped / Total] 75 / 55 / 5 / 135:  14%|█▎        | 135/1000 [05:14<33:34,  2.33s/it][Succeeded / Failed / Skipped / Total] 75 / 55 / 5 / 135:  14%|█▎        | 136/1000 [05:15<33:21,  2.32s/it][Succeeded / Failed / Skipped / Total] 76 / 55 / 5 / 136:  14%|█▎        | 136/1000 [05:15<33:21,  2.32s/it][Succeeded / Failed / Skipped / Total] 76 / 55 / 5 / 136:  14%|█▎        | 137/1000 [05:18<33:23,  2.32s/it][Succeeded / Failed / Skipped / Total] 76 / 56 / 5 / 137:  14%|█▎        | 137/1000 [05:18<33:23,  2.32s/it][Succeeded / Failed / Skipped / Total] 76 / 56 / 5 / 137:  14%|█▍        | 138/1000 [05:21<33:25,  2.33s/it][Succeeded / Failed / Skipped / Total] 76 / 57 / 5 / 138:  14%|█▍        | 138/1000 [05:21<33:25,  2.33s/it][Succeeded / Failed / Skipped / Total] 76 / 57 / 5 / 138:  14%|█▍        | 139/1000 [05:26<33:39,  2.35s/it]Returns true if the proxy is enabled . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[trigger]] ( final HttpServletRequest [[er]] ) { final boolean [[authentication]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[er]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[authentication]] ) ; } return [[authentication]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 132 ---------------------------------------------
Do proxy ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "[[False]]" != "[[False]]" ; } final boolean [[result]] = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[edit]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "[[error]]" != "[[error]]" ; } final boolean [[version]] = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[version]] ) ; } return [[version]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 133 ---------------------------------------------
load user by assertion --> Create a new authentication token --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion [[assertion]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[assertion]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[statement]] ( final Assertion [[nan]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[nan]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 134 ---------------------------------------------
GetAuthorityCollection . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 135 ---------------------------------------------
Determine authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[request]] , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( [[request]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[request]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest [[first]] , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[first]] , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( [[first]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[first]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 136 ---------------------------------------------
Create a subarray of the specified range . --> query method --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int beginIndex , int endIndex ) { int [[length]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[length]] ] ; System . arraycopy ( array , beginIndex , subarray , 0 , [[length]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[query]] ( byte [ ] array , int beginIndex , int endIndex ) { int [[value]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[value]] ] ; System . arraycopy ( array , beginIndex , subarray , 0 , [[value]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 137 ---------------------------------------------
Gets the WebSphere principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest [[ri]] ) { Object [[bus]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[bus]] ) ; } return [[bus]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 138 ---------------------------------------------
Get the active Granted authorities . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[query]] ( ) { List < String > [[item]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[context]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[item]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[item]] + " mapped to Granted Authorities: " + [[context]] ) ; } return [[context]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 139 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 76 / 58 / 5 / 139:  14%|█▍        | 139/1000 [05:26<33:39,  2.35s/it][Succeeded / Failed / Skipped / Total] 76 / 58 / 5 / 139:  14%|█▍        | 140/1000 [05:28<33:39,  2.35s/it][Succeeded / Failed / Skipped / Total] 77 / 58 / 5 / 140:  14%|█▍        | 140/1000 [05:28<33:39,  2.35s/it][Succeeded / Failed / Skipped / Total] 77 / 58 / 5 / 140:  14%|█▍        | 141/1000 [05:33<33:50,  2.36s/it][Succeeded / Failed / Skipped / Total] 78 / 58 / 5 / 141:  14%|█▍        | 141/1000 [05:33<33:50,  2.36s/it][Succeeded / Failed / Skipped / Total] 78 / 58 / 5 / 141:  14%|█▍        | 142/1000 [05:33<33:37,  2.35s/it][Succeeded / Failed / Skipped / Total] 78 / 59 / 5 / 142:  14%|█▍        | 142/1000 [05:33<33:37,  2.35s/it][Succeeded / Failed / Skipped / Total] 78 / 59 / 5 / 142:  14%|█▍        | 143/1000 [05:34<33:26,  2.34s/it][Succeeded / Failed / Skipped / Total] 78 / 60 / 5 / 143:  14%|█▍        | 143/1000 [05:34<33:26,  2.34s/it][Succeeded / Failed / Skipped / Total] 78 / 60 / 5 / 143:  14%|█▍        | 144/1000 [05:37<33:23,  2.34s/it][Succeeded / Failed / Skipped / Total] 78 / 61 / 5 / 144:  14%|█▍        | 144/1000 [05:37<33:23,  2.34s/it][Succeeded / Failed / Skipped / Total] 78 / 61 / 5 / 144:  14%|█▍        | 145/1000 [05:37<33:11,  2.33s/it][Succeeded / Failed / Skipped / Total] 78 / 62 / 5 / 145:  14%|█▍        | 145/1000 [05:37<33:11,  2.33s/it]Gets the shared object . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[view]] > [[view]] getSharedObject ( Class < [[view]] > sharedType ) { return ( [[view]] ) this . [[net]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 140 ---------------------------------------------
Invokes a method invocation . --> Executes the given advisorProceed --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint [[jp]] , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( [[jp]] ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint [[client]] , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( [[client]] ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 141 ---------------------------------------------
Preload map . --> Pre - publicKey method . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[result]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[result]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[address]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[address]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[address]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 142 ---------------------------------------------
Get the user principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = [[httpRequest]] . getUserPrincipal ( ) == null ? null : [[httpRequest]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[loop]] ( HttpServletRequest [[ra]] ) { Object [[null]] = [[ra]] . getUserPrincipal ( ) == null ? null : [[ra]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[null]] ) ; } return [[null]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 143 ---------------------------------------------
Concatenate arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] array : arrays ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[row]] ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] array : arrays ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 144 ---------------------------------------------
Adds the value to the authority collection . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > result , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( result , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( result , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( result , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[on]] ( Collection < GrantedAuthority > result , Object [[title]] ) { if ( [[title]] == null ) { return ; } if ( [[title]] instanceof Collection < ? > ) { [[on]] ( result , ( Collection < ? > ) [[title]] ) ; } else if ( [[title]] instanceof Object [ ] ) { [[on]] ( result , ( Object [ ] ) [[title]] ) ; } else if ( [[title]] instanceof String ) { [[on]] ( result , ( String ) [[title]] ) ; } else if ( [[title]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[title]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[title]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 145 ---------------------------------------------
Gets the list of OGNL roles . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String [[attribute]] : [[attributes]] ) { Collection < GrantedAuthority > [[c]] = attributes2grantedAuthoritiesMap . get ( [[attribute]] ) ; if ( [[c]] != null ) { gaList . addAll ( [[c]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[query]] ( Collection < String > [[p]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String [[q]] : [[p]] ) { Collection < GrantedAuthority > [[z]] = attributes2grantedAuthoritiesMap . get ( [[q]] ) ; if ( [[z]] != null ) { gaList . addAll ( [[z]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 146 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 79 / 62 / 5 / 146:  15%|█▍        | 146/1000 [05:37<32:55,  2.31s/it][Succeeded / Failed / Skipped / Total] 79 / 62 / 5 / 146:  15%|█▍        | 147/1000 [05:42<33:09,  2.33s/it][Succeeded / Failed / Skipped / Total] 79 / 63 / 5 / 147:  15%|█▍        | 147/1000 [05:42<33:09,  2.33s/it][Succeeded / Failed / Skipped / Total] 80 / 63 / 5 / 148:  15%|█▍        | 148/1000 [05:43<32:56,  2.32s/it][Succeeded / Failed / Skipped / Total] 80 / 63 / 5 / 148:  15%|█▍        | 149/1000 [05:44<32:45,  2.31s/it][Succeeded / Failed / Skipped / Total] 81 / 63 / 5 / 149:  15%|█▍        | 149/1000 [05:44<32:45,  2.31s/it][Succeeded / Failed / Skipped / Total] 82 / 63 / 5 / 150:  15%|█▌        | 150/1000 [05:44<32:31,  2.30s/it][Succeeded / Failed / Skipped / Total] 82 / 63 / 5 / 150:  15%|█▌        | 151/1000 [05:47<32:36,  2.30s/it][Succeeded / Failed / Skipped / Total] 83 / 63 / 5 / 151:  15%|█▌        | 151/1000 [05:47<32:36,  2.30s/it][Succeeded / Failed / Skipped / Total] 83 / 63 / 6 / 152:  15%|█▌        | 152/1000 [05:48<32:21,  2.29s/it][Succeeded / Failed / Skipped / Total] 83 / 63 / 6 / 152:  15%|█▌        | 153/1000 [05:54<32:43,  2.32s/it][Succeeded / Failed / Skipped / Total] 84 / 63 / 6 / 153:  15%|█▌        | 153/1000 [05:54<32:43,  2.32s/it][Succeeded / Failed / Skipped / Total] 84 / 64 / 6 / 154:  15%|█▌        | 154/1000 [05:55<32:33,  2.31s/it][Succeeded / Failed / Skipped / Total] 84 / 64 / 6 / 154:  16%|█▌        | 155/1000 [06:05<33:10,  2.36s/it]Returns the value of the specified role . --> include the given example --> Socre: 1.0

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[include]] ( String [[example]] ) { Assert . isTrue ( ! [[example]] . startsWith ( "ROLE_" ) , ( ) -> [[example]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[example]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 147 ---------------------------------------------
Builds the redirect url for the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[ip]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 148 ---------------------------------------------
Display a public page index --> Gets time zone --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[generator]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 149 ---------------------------------------------
Sets the exit user url . --> Find by exitUserUrl --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[find]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 150 ---------------------------------------------
Returns the array of roles . --> Return the method --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int [[i]] = 0 ; [[i]] < [[roles]] . length ; [[i]] ++ ) { [[roles]] [ [[i]] ] = "ROLE_" + [[roles]] [ [[i]] ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[method]] ( String ... [[bit]] ) { for ( int [[v]] = 0 ; [[v]] < [[bit]] . length ; [[v]] ++ ) { [[bit]] [ [[v]] ] = "ROLE_" + [[bit]] [ [[v]] ] ; } return [[bit]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 151 ---------------------------------------------
Filter springSecurityFilterChain Method . --> Adds a WebSecurity config . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter springSecurityFilterChain ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter [[adapter]] = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( [[adapter]] ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter springSecurityFilterChain ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter [[c]] = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( [[c]] ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 152 ---------------------------------------------
Returns a collection of active roles . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 153 ---------------------------------------------
Generates a CSRF token . --> Gets the login command . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[command]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 154 ---------------------------------------------
Attempts to determine if the given request is a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptExitUser ( HttpServletRequest [[request]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication attemptExitUser ( HttpServletRequest [[manager]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
[Succeeded / Failed / Skipped / Total] 84 / 65 / 6 / 155:  16%|█▌        | 155/1000 [06:05<33:10,  2.36s/it][Succeeded / Failed / Skipped / Total] 84 / 65 / 6 / 155:  16%|█▌        | 156/1000 [06:08<33:11,  2.36s/it][Succeeded / Failed / Skipped / Total] 84 / 66 / 6 / 156:  16%|█▌        | 156/1000 [06:08<33:11,  2.36s/it][Succeeded / Failed / Skipped / Total] 84 / 66 / 6 / 156:  16%|█▌        | 157/1000 [06:08<32:57,  2.35s/it][Succeeded / Failed / Skipped / Total] 85 / 66 / 6 / 157:  16%|█▌        | 157/1000 [06:08<32:57,  2.35s/it][Succeeded / Failed / Skipped / Total] 85 / 66 / 6 / 157:  16%|█▌        | 158/1000 [06:09<32:47,  2.34s/it][Succeeded / Failed / Skipped / Total] 86 / 66 / 6 / 158:  16%|█▌        | 158/1000 [06:09<32:47,  2.34s/it][Succeeded / Failed / Skipped / Total] 86 / 66 / 6 / 158:  16%|█▌        | 159/1000 [06:10<32:40,  2.33s/it][Succeeded / Failed / Skipped / Total] 86 / 67 / 6 / 159:  16%|█▌        | 159/1000 [06:10<32:40,  2.33s/it][Succeeded / Failed / Skipped / Total] 86 / 67 / 6 / 159:  16%|█▌        | 160/1000 [06:13<32:42,  2.34s/it]--------------------------------------------- Result 155 ---------------------------------------------
Decodes a JWT . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Jwt decode ( String [[token]] ) throws JwtException { JWT jwt = parse ( [[token]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[token]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String [[a]] ) throws JwtException { JWT jwt = parse ( [[a]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[a]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 156 ---------------------------------------------
Checks if the current url is using the current context . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[object]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 157 ---------------------------------------------
Process autoLogin cookie . --> Convert cookieTokens to UserDetails --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] cookieTokens , HttpServletRequest [[request]] , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[group]] ( String [ ] cookieTokens , HttpServletRequest [[ioned]] , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 158 ---------------------------------------------
Display a contact . --> ModelAndView - registers --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact [[contact]] = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl [[acl]] = aclService . readAclById ( new ObjectIdentityImpl ( [[contact]] ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[contact]] ) ; model . put ( "acl" , [[acl]] ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[s]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact [[red]] = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl [[context]] = aclService . readAclById ( new ObjectIdentityImpl ( [[red]] ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[red]] ) ; model . put ( "acl" , [[context]] ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 159 ---------------------------------------------
Process the login success token . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , [[request]] , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest [[attack]] , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , [[attack]] , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 160 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 86 / 68 / 6 / 160:  16%|█▌        | 160/1000 [06:13<32:42,  2.34s/it][Succeeded / Failed / Skipped / Total] 86 / 68 / 6 / 160:  16%|█▌        | 161/1000 [06:14<32:29,  2.32s/it][Succeeded / Failed / Skipped / Total] 87 / 68 / 6 / 161:  16%|█▌        | 161/1000 [06:14<32:29,  2.32s/it][Succeeded / Failed / Skipped / Total] 87 / 68 / 6 / 161:  16%|█▌        | 162/1000 [06:16<32:27,  2.32s/it][Succeeded / Failed / Skipped / Total] 88 / 68 / 6 / 162:  16%|█▌        | 162/1000 [06:16<32:27,  2.32s/it][Succeeded / Failed / Skipped / Total] 88 / 68 / 6 / 162:  16%|█▋        | 163/1000 [06:17<32:17,  2.32s/it][Succeeded / Failed / Skipped / Total] 89 / 68 / 6 / 163:  16%|█▋        | 163/1000 [06:17<32:17,  2.32s/it][Succeeded / Failed / Skipped / Total] 89 / 68 / 6 / 163:  16%|█▋        | 164/1000 [06:20<32:19,  2.32s/it][Succeeded / Failed / Skipped / Total] 90 / 68 / 6 / 164:  16%|█▋        | 164/1000 [06:20<32:19,  2.32s/it]Check if access expression is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "[[False]]" != "[[False]]" ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression [[accessExpression]] ; try { [[accessExpression]] = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[accessExpression]] , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[loop]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "[[filters]]" != "[[filters]]" ; } SecurityExpressionHandler < FilterInvocation > [[style]] = getExpressionHandler ( ) ; Expression [[null]] ; try { [[null]] = [[style]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[null]] , createExpressionEvaluationContext ( [[style]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 161 ---------------------------------------------
Delete a permission --> Replies the user s permissions . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[a]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 162 ---------------------------------------------
Gets attribute values . --> Call attributes . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[call]] ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 163 ---------------------------------------------
Get the default role prefix . --> Return the default value for the support --> Socre: 1.0

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String defaultRolePrefix , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( defaultRolePrefix ) ) { return [[role]] ; } return defaultRolePrefix + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String defaultRolePrefix , String [[support]] ) { if ( [[support]] == null ) { return [[support]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[support]] ; } if ( [[support]] . startsWith ( defaultRolePrefix ) ) { return [[support]] ; } return defaultRolePrefix + [[support]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 164 ---------------------------------------------
Displays a contact --> Connect to contactManager --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact [[contact]] = contactManager . getById ( contactId ) ; AddPermission [[addPermission]] = new AddPermission ( ) ; [[addPermission]] . setContact ( [[contact]] ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "addPermission" , [[addPermission]] ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[model]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[connect]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact [[da]] = contactManager . getById ( contactId ) ; AddPermission [[edge]] = new AddPermission ( ) ; [[edge]] . setContact ( [[da]] ) ; Map < String , Object > [[bridge]] = new HashMap <> ( ) ; [[bridge]] . put ( "addPermission" , [[edge]] ) ; [[bridge]] . put ( "recipients" , listRecipients ( ) ) ; [[bridge]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[bridge]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 165 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 91 / 68 / 6 / 165:  16%|█▋        | 165/1000 [06:20<32:05,  2.31s/it][Succeeded / Failed / Skipped / Total] 91 / 68 / 6 / 165:  17%|█▋        | 166/1000 [06:21<31:58,  2.30s/it][Succeeded / Failed / Skipped / Total] 92 / 68 / 6 / 166:  17%|█▋        | 166/1000 [06:21<31:58,  2.30s/it][Succeeded / Failed / Skipped / Total] 92 / 69 / 6 / 167:  17%|█▋        | 167/1000 [06:25<32:05,  2.31s/it][Succeeded / Failed / Skipped / Total] 92 / 69 / 6 / 167:  17%|█▋        | 168/1000 [06:26<31:52,  2.30s/it][Succeeded / Failed / Skipped / Total] 93 / 69 / 6 / 168:  17%|█▋        | 168/1000 [06:26<31:52,  2.30s/it][Succeeded / Failed / Skipped / Total] 94 / 69 / 6 / 169:  17%|█▋        | 169/1000 [06:27<31:46,  2.29s/it][Succeeded / Failed / Skipped / Total] 94 / 69 / 6 / 169:  17%|█▋        | 170/1000 [06:27<31:34,  2.28s/it][Succeeded / Failed / Skipped / Total] 94 / 70 / 6 / 170:  17%|█▋        | 170/1000 [06:27<31:34,  2.28s/it]Encodes the given string . --> Encode a CharSequence --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[string]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[b]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[b]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 166 ---------------------------------------------
Decodes an array of bytes . --> Decodes bits --> Socre: 1.0

[[[[Adv]]]]: public static String decode ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String decode ( byte [ ] [[bits]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bits]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 167 ---------------------------------------------
Attempt to switch to a user --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails [[targetUser]] = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( [[targetUser]] ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[password]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails [[point]] = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( [[point]] ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 168 ---------------------------------------------
Add a permission --> Execute a AddPermission --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission addPermission , BindingResult result , ModelMap [[model]] ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid [[sid]] = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[addPermission]] . getContact ( ) , [[sid]] , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[execute]] ( AddPermission addPermission , BindingResult result , ModelMap [[event]] ) { addPermissionValidator . validate ( [[execute]] , result ) ; if ( result . hasErrors ( ) ) { [[event]] . put ( "recipients" , listRecipients ( ) ) ; [[event]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid [[da]] = new PrincipalSid ( [[execute]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[execute]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[execute]] . getContact ( ) , [[da]] , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[event]] . put ( "recipients" , listRecipients ( ) ) ; [[event]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 169 ---------------------------------------------
Returns the first attribute with the given name . --> Adds an integer . --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > result = getAttributeValues ( [[name]] ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[add]] ( String [[integer]] ) { List < String > result = getAttributeValues ( [[integer]] ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 170 ---------------------------------------------
Returns the InMemoryResource for the given users string . --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String users ) { InMemoryResource [[resource]] = new InMemoryResource ( users ) ; return fromResource ( [[resource]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String users ) { InMemoryResource [[max]] = new InMemoryResource ( users ) ; return fromResource ( [[max]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 171 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 94 / 71 / 6 / 171:  17%|█▋        | 171/1000 [06:38<32:12,  2.33s/it][Succeeded / Failed / Skipped / Total] 94 / 71 / 6 / 171:  17%|█▋        | 172/1000 [06:39<32:05,  2.33s/it][Succeeded / Failed / Skipped / Total] 94 / 72 / 6 / 172:  17%|█▋        | 172/1000 [06:39<32:05,  2.33s/it][Succeeded / Failed / Skipped / Total] 94 / 72 / 6 / 172:  17%|█▋        | 173/1000 [06:42<32:02,  2.32s/it][Succeeded / Failed / Skipped / Total] 95 / 72 / 6 / 173:  17%|█▋        | 173/1000 [06:42<32:02,  2.32s/it][Succeeded / Failed / Skipped / Total] 95 / 72 / 6 / 173:  17%|█▋        | 174/1000 [06:43<31:57,  2.32s/it][Succeeded / Failed / Skipped / Total] 96 / 72 / 6 / 174:  17%|█▋        | 174/1000 [06:43<31:57,  2.32s/it][Succeeded / Failed / Skipped / Total] 96 / 72 / 6 / 174:  18%|█▊        | 175/1000 [06:45<31:49,  2.32s/it][Succeeded / Failed / Skipped / Total] 97 / 72 / 6 / 175:  18%|█▊        | 175/1000 [06:45<31:49,  2.32s/it][Succeeded / Failed / Skipped / Total] 97 / 72 / 6 / 175:  18%|█▊        | 176/1000 [06:46<31:43,  2.31s/it][Succeeded / Failed / Skipped / Total] 97 / 73 / 6 / 176:  18%|█▊        | 176/1000 [06:46<31:43,  2.31s/it][Succeeded / Failed / Skipped / Total] 97 / 73 / 6 / 176:  18%|█▊        | 177/1000 [06:49<31:43,  2.31s/it][Succeeded / Failed / Skipped / Total] 97 / 74 / 6 / 177:  18%|█▊        | 177/1000 [06:49<31:43,  2.31s/it][Succeeded / Failed / Skipped / Total] 97 / 74 / 6 / 177:  18%|█▊        | 178/1000 [06:53<31:50,  2.32s/it][Succeeded / Failed / Skipped / Total] 97 / 75 / 6 / 178:  18%|█▊        | 178/1000 [06:53<31:50,  2.32s/it][Succeeded / Failed / Skipped / Total] 97 / 75 / 6 / 178:  18%|█▊        | 179/1000 [06:59<32:05,  2.35s/it]Find attributes of the specified targetClass . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method method , Class < ? > [[targetClass]] ) { if ( [[targetClass]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , [[targetClass]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[load]] ( Method method , Class < ? > [[empty]] ) { if ( [[empty]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , [[empty]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 172 ---------------------------------------------
Adds contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[form]] , BindingResult [[result]] ) { validator . validate ( [[form]] , [[result]] ) ; if ( [[result]] . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( [[form]] . getName ( ) , [[form]] . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[f]] , BindingResult [[al]] ) { validator . validate ( [[f]] , [[al]] ) ; if ( [[al]] . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( [[f]] . getName ( ) , [[f]] . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 173 ---------------------------------------------
Returns true if the method name is a match . --> check whether a string is a loop --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String methodName , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && methodName . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && methodName . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[loop]] ( String methodName , String [[x]] ) { return ( [[x]] . endsWith ( "*" ) && methodName . startsWith ( [[x]] . substring ( 0 , [[x]] . length ( ) - 1 ) ) ) || ( [[x]] . startsWith ( "*" ) && methodName . endsWith ( [[x]] . substring ( 1 , [[x]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 174 ---------------------------------------------
Get a random contact . --> Format the contact --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[format]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 175 ---------------------------------------------
Gets all the config attributes . --> Return a Collection of ConfigAttribute objects --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[attributeList]] : methodMap . values ( ) ) { [[allAttributes]] . addAll ( [[attributeList]] ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[strings]] ( ) { Set < ConfigAttribute > [[q]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[function]] : methodMap . values ( ) ) { [[q]] . addAll ( [[function]] ) ; } return [[q]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 176 ---------------------------------------------
Handle a bind exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[handleBindException]] ( String [[userDn]] , String [[username]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[on]] ( String [[payload]] , String [[flag]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[payload]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 177 ---------------------------------------------
Adds a secure method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . [[methodMap]] . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[take]] ( RegisteredMethod method , List < ConfigAttribute > attr ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + attr + "]" ) ; } this . [[result]] . put ( method , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 178 ---------------------------------------------
Process any request . --> [[[FAILED]]]

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . [[put]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[put]] = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 179 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 98 / 75 / 6 / 179:  18%|█▊        | 179/1000 [06:59<32:05,  2.35s/it][Succeeded / Failed / Skipped / Total] 98 / 75 / 6 / 179:  18%|█▊        | 180/1000 [06:59<31:53,  2.33s/it][Succeeded / Failed / Skipped / Total] 99 / 75 / 6 / 180:  18%|█▊        | 180/1000 [06:59<31:53,  2.33s/it][Succeeded / Failed / Skipped / Total] 99 / 75 / 6 / 180:  18%|█▊        | 181/1000 [07:00<31:43,  2.32s/it][Succeeded / Failed / Skipped / Total] 99 / 76 / 6 / 181:  18%|█▊        | 181/1000 [07:00<31:43,  2.32s/it][Succeeded / Failed / Skipped / Total] 99 / 76 / 6 / 181:  18%|█▊        | 182/1000 [07:00<31:31,  2.31s/it][Succeeded / Failed / Skipped / Total] 99 / 76 / 7 / 182:  18%|█▊        | 182/1000 [07:00<31:31,  2.31s/it][Succeeded / Failed / Skipped / Total] 99 / 76 / 7 / 182:  18%|█▊        | 183/1000 [07:04<31:34,  2.32s/it][Succeeded / Failed / Skipped / Total] 99 / 77 / 7 / 183:  18%|█▊        | 183/1000 [07:04<31:34,  2.32s/it][Succeeded / Failed / Skipped / Total] 99 / 77 / 7 / 183:  18%|█▊        | 184/1000 [07:11<31:55,  2.35s/it][Succeeded / Failed / Skipped / Total] 99 / 78 / 7 / 184:  18%|█▊        | 184/1000 [07:11<31:55,  2.35s/it][Succeeded / Failed / Skipped / Total] 99 / 78 / 7 / 184:  18%|█▊        | 185/1000 [07:12<31:43,  2.34s/it][Succeeded / Failed / Skipped / Total] 100 / 78 / 7 / 185:  18%|█▊        | 185/1000 [07:12<31:43,  2.34s/it][Succeeded / Failed / Skipped / Total] 100 / 78 / 7 / 185:  19%|█▊        | 186/1000 [07:12<31:31,  2.32s/it]Clear authentication attributes . --> secure request --> Socre: 1.0

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[secure]] ( HttpServletRequest request ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 180 ---------------------------------------------
Checks the filter stack . --> Adds multiple filters . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[add]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 181 ---------------------------------------------
Get the field by name . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field getField ( Class < ? > clazz , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field getField ( Class < ? > clazz , String [[definition]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[definition]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[definition]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 182 ---------------------------------------------
Registers a Bean --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 183 ---------------------------------------------
Extracts the prefix of the SHA . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[i]] ( String [[element]] ) { if ( ! [[element]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[element]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[element]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 184 ---------------------------------------------
Creates redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[bus]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 185 ---------------------------------------------
Returns true if expected matches actual . --> Checks if actual is after --> Socre: 1.0

[[[[Adv]]]]: private boolean [[matches]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean [[after]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 186 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 79 / 7 / 186:  19%|█▊        | 186/1000 [07:12<31:31,  2.32s/it][Succeeded / Failed / Skipped / Total] 100 / 79 / 7 / 186:  19%|█▊        | 187/1000 [07:14<31:27,  2.32s/it][Succeeded / Failed / Skipped / Total] 100 / 80 / 7 / 187:  19%|█▊        | 187/1000 [07:14<31:27,  2.32s/it][Succeeded / Failed / Skipped / Total] 100 / 80 / 7 / 187:  19%|█▉        | 188/1000 [07:17<31:31,  2.33s/it][Succeeded / Failed / Skipped / Total] 100 / 81 / 7 / 188:  19%|█▉        | 188/1000 [07:17<31:31,  2.33s/it][Succeeded / Failed / Skipped / Total] 100 / 81 / 7 / 188:  19%|█▉        | 189/1000 [07:22<31:39,  2.34s/it][Succeeded / Failed / Skipped / Total] 100 / 82 / 7 / 189:  19%|█▉        | 189/1000 [07:22<31:39,  2.34s/it][Succeeded / Failed / Skipped / Total] 100 / 82 / 7 / 189:  19%|█▉        | 190/1000 [07:27<31:46,  2.35s/it][Succeeded / Failed / Skipped / Total] 100 / 83 / 7 / 190:  19%|█▉        | 190/1000 [07:27<31:46,  2.35s/it][Succeeded / Failed / Skipped / Total] 100 / 83 / 7 / 190:  19%|█▉        | 191/1000 [07:29<31:45,  2.36s/it][Succeeded / Failed / Skipped / Total] 101 / 83 / 7 / 191:  19%|█▉        | 191/1000 [07:29<31:45,  2.36s/it][Succeeded / Failed / Skipped / Total] 101 / 83 / 7 / 191:  19%|█▉        | 192/1000 [07:30<31:34,  2.35s/it][Succeeded / Failed / Skipped / Total] 101 / 84 / 7 / 192:  19%|█▉        | 192/1000 [07:30<31:34,  2.35s/it][Succeeded / Failed / Skipped / Total] 101 / 84 / 7 / 192:  19%|█▉        | 193/1000 [07:31<31:28,  2.34s/it]Build service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse [[response]] ) { return CommonUtils . constructServiceUrl ( null , [[response]] , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . [[encodeServiceUrlWithSessionId]] ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[fix]] ( final HttpServletRequest request , final HttpServletResponse [[condition]] ) { return CommonUtils . constructServiceUrl ( null , [[condition]] , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . [[response]] ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 187 ---------------------------------------------
Safely access Denied . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest request , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[accept]] ( HttpServletRequest request , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 188 ---------------------------------------------
Gets the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[extractorMap]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[format]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[string]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 189 ---------------------------------------------
Lookup parameter names . --> [[[FAILED]]]

[[[[Adv]]]]: private < T [[extends]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String [[parameterName]] = findParameterName ( annotations ) ; if ( [[parameterName]] != null ) { found = "True" == "True" ; paramNames [ i ] = [[parameterName]] ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T [[to]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String [[hid]] = findParameterName ( annotations ) ; if ( [[hid]] != null ) { found = "True" == "True" ; paramNames [ i ] = [[hid]] ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 190 ---------------------------------------------
Gets the authority list to set . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[add]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 191 ---------------------------------------------
Extracts the identifier from the ResultSet --> Convert a ResultSet object to an identifier --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[image]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[image]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[image]] = convertFromStringTo ( ( String ) [[image]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 192 ---------------------------------------------
Sets the default failure url . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[declaration]] ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 193 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 101 / 85 / 7 / 193:  19%|█▉        | 193/1000 [07:31<31:28,  2.34s/it][Succeeded / Failed / Skipped / Total] 101 / 85 / 7 / 193:  19%|█▉        | 194/1000 [07:32<31:21,  2.33s/it][Succeeded / Failed / Skipped / Total] 102 / 85 / 7 / 194:  19%|█▉        | 194/1000 [07:32<31:21,  2.33s/it][Succeeded / Failed / Skipped / Total] 102 / 85 / 7 / 194:  20%|█▉        | 195/1000 [07:39<31:37,  2.36s/it][Succeeded / Failed / Skipped / Total] 102 / 86 / 7 / 195:  20%|█▉        | 195/1000 [07:39<31:37,  2.36s/it][Succeeded / Failed / Skipped / Total] 102 / 86 / 7 / 195:  20%|█▉        | 196/1000 [07:39<31:26,  2.35s/it][Succeeded / Failed / Skipped / Total] 102 / 86 / 8 / 196:  20%|█▉        | 196/1000 [07:39<31:26,  2.35s/it][Succeeded / Failed / Skipped / Total] 102 / 86 / 8 / 196:  20%|█▉        | 197/1000 [07:41<31:23,  2.35s/it][Succeeded / Failed / Skipped / Total] 102 / 87 / 8 / 197:  20%|█▉        | 197/1000 [07:41<31:23,  2.35s/it][Succeeded / Failed / Skipped / Total] 102 / 87 / 8 / 197:  20%|█▉        | 198/1000 [07:48<31:36,  2.36s/it][Succeeded / Failed / Skipped / Total] 103 / 87 / 8 / 198:  20%|█▉        | 198/1000 [07:48<31:36,  2.36s/it][Succeeded / Failed / Skipped / Total] 103 / 87 / 8 / 198:  20%|█▉        | 199/1000 [07:53<31:44,  2.38s/it][Succeeded / Failed / Skipped / Total] 104 / 87 / 8 / 199:  20%|█▉        | 199/1000 [07:53<31:44,  2.38s/it][Succeeded / Failed / Skipped / Total] 104 / 87 / 8 / 199:  20%|██        | 200/1000 [07:53<31:34,  2.37s/it]Extracts the cause of the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[entry]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[entry]] . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = [[entry]] . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[font]] ( Throwable [[name]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[en]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[en]] . getKey ( ) ; if ( throwableType . isInstance ( [[name]] ) ) { ThrowableCauseExtractor extractor = [[en]] . getValue ( ) ; return extractor . extractCause ( [[name]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 194 ---------------------------------------------
Resolves the resolved decision inputs . --> Declare c --> Socre: 1.0

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . [[resolveHiddenInputs]] = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[declare]] ( Function < HttpServletRequest , Map < String , String > > [[c]] ) { Assert . notNull ( [[c]] , "resolveHiddenInputs cannot be null" ) ; this . [[b]] = [[c]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 195 ---------------------------------------------
Create attribute list . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[arrays]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[arrays]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 196 ---------------------------------------------
Returns an empty ServerWebExchangeMatcher . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher anyExchange ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 197 ---------------------------------------------
Checks if the given URL is absolute . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String [[url]] ) { if ( [[url]] == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[fix]] ( String [[s]] ) { if ( [[s]] == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[s]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 198 ---------------------------------------------
Delete the given password using the given salt . --> delux TextEncryptor --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( stronger ( password , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence password , CharSequence [[index]] ) { return new HexEncodingTextEncryptor ( stronger ( password , [[index]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 199 ---------------------------------------------
Build the request URL --> Helper method to call a request --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String [[servletPath]] , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( [[servletPath]] != null ) { [[url]] . append ( [[servletPath]] ) ; if ( pathInfo != null ) { [[url]] . append ( pathInfo ) ; } } else { [[url]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[url]] . append ( "?" ) . append ( queryString ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[call]] ( String [[command]] , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[f]] = new StringBuilder ( ) ; if ( [[command]] != null ) { [[f]] . append ( [[command]] ) ; if ( pathInfo != null ) { [[f]] . append ( pathInfo ) ; } } else { [[f]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[f]] . append ( "?" ) . append ( queryString ) ; } return [[f]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 200 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 105 / 87 / 8 / 200:  20%|██        | 200/1000 [07:53<31:34,  2.37s/it][Succeeded / Failed / Skipped / Total] 105 / 87 / 8 / 200:  20%|██        | 201/1000 [07:56<31:32,  2.37s/it][Succeeded / Failed / Skipped / Total] 106 / 87 / 8 / 201:  20%|██        | 201/1000 [07:56<31:32,  2.37s/it][Succeeded / Failed / Skipped / Total] 106 / 87 / 8 / 201:  20%|██        | 202/1000 [07:58<31:31,  2.37s/it][Succeeded / Failed / Skipped / Total] 107 / 87 / 8 / 202:  20%|██        | 202/1000 [07:58<31:31,  2.37s/it][Succeeded / Failed / Skipped / Total] 107 / 87 / 8 / 202:  20%|██        | 203/1000 [07:59<31:23,  2.36s/it][Succeeded / Failed / Skipped / Total] 108 / 87 / 8 / 203:  20%|██        | 203/1000 [07:59<31:23,  2.36s/it][Succeeded / Failed / Skipped / Total] 108 / 87 / 8 / 203:  20%|██        | 204/1000 [08:03<31:24,  2.37s/it][Succeeded / Failed / Skipped / Total] 108 / 88 / 8 / 204:  20%|██        | 204/1000 [08:03<31:24,  2.37s/it][Succeeded / Failed / Skipped / Total] 108 / 88 / 8 / 204:  20%|██        | 205/1000 [08:04<31:17,  2.36s/it]Create entries . --> region > host --> Socre: 1.0

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "[[True]]" == "[[True]]" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[host]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "[[s]]" == "[[s]]" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 201 ---------------------------------------------
Create an encryptor for queryable text . --> Create new TextEncryptor --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence password , CharSequence [[max]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , [[max]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 202 ---------------------------------------------
Write the header . --> write request headers --> Socre: 1.0

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . [[allowFromStrategy]] . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . [[refuse]] . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 203 ---------------------------------------------
Determine target url . --> Calls a request . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[call]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[call]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 204 ---------------------------------------------
Saves the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest request , HttpServletResponse [[query]] ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 205 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 108 / 89 / 8 / 205:  20%|██        | 205/1000 [08:04<31:17,  2.36s/it][Succeeded / Failed / Skipped / Total] 108 / 89 / 8 / 205:  21%|██        | 206/1000 [08:04<31:06,  2.35s/it][Succeeded / Failed / Skipped / Total] 109 / 89 / 8 / 206:  21%|██        | 206/1000 [08:04<31:06,  2.35s/it][Succeeded / Failed / Skipped / Total] 109 / 89 / 8 / 206:  21%|██        | 207/1000 [08:07<31:05,  2.35s/it][Succeeded / Failed / Skipped / Total] 110 / 89 / 8 / 207:  21%|██        | 207/1000 [08:07<31:05,  2.35s/it][Succeeded / Failed / Skipped / Total] 110 / 89 / 8 / 207:  21%|██        | 208/1000 [08:11<31:09,  2.36s/it][Succeeded / Failed / Skipped / Total] 111 / 89 / 8 / 208:  21%|██        | 208/1000 [08:11<31:09,  2.36s/it][Succeeded / Failed / Skipped / Total] 111 / 90 / 8 / 209:  21%|██        | 209/1000 [08:11<30:58,  2.35s/it][Succeeded / Failed / Skipped / Total] 111 / 90 / 8 / 209:  21%|██        | 210/1000 [08:13<30:57,  2.35s/it][Succeeded / Failed / Skipped / Total] 111 / 91 / 8 / 210:  21%|██        | 210/1000 [08:13<30:57,  2.35s/it]Adds an object to the database . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[id]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 206 ---------------------------------------------
Returns a text encryptor for the given password . --> Returns TextEncryptor library --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[library]] ( CharSequence [[ml]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[ml]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 207 ---------------------------------------------
Retrieves the parent directory for the given parent directory id . --> Retrieve bridge . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[bridge]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 208 ---------------------------------------------
Creates the shared objects . --> Returns a map of class values . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[hold]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 209 ---------------------------------------------
Gets the path sequence for a server path . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... [[patterns]] ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( [[patterns]] . length ) ; for ( String pattern : [[patterns]] ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[call]] ( HttpMethod method , String ... [[line]] ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( [[line]] . length ) ; for ( String pattern : [[line]] ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 210 ---------------------------------------------
Determine the target url for this request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[foo]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 211 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 111 / 92 / 8 / 211:  21%|██        | 211/1000 [08:13<30:47,  2.34s/it][Succeeded / Failed / Skipped / Total] 111 / 92 / 8 / 211:  21%|██        | 212/1000 [08:14<30:36,  2.33s/it][Succeeded / Failed / Skipped / Total] 111 / 93 / 8 / 212:  21%|██        | 212/1000 [08:14<30:36,  2.33s/it][Succeeded / Failed / Skipped / Total] 112 / 93 / 8 / 213:  21%|██▏       | 213/1000 [08:16<30:34,  2.33s/it][Succeeded / Failed / Skipped / Total] 112 / 93 / 8 / 213:  21%|██▏       | 214/1000 [08:17<30:28,  2.33s/it][Succeeded / Failed / Skipped / Total] 112 / 94 / 8 / 214:  21%|██▏       | 214/1000 [08:17<30:28,  2.33s/it][Succeeded / Failed / Skipped / Total] 113 / 94 / 8 / 215:  22%|██▏       | 215/1000 [08:17<30:17,  2.32s/it][Succeeded / Failed / Skipped / Total] 113 / 94 / 8 / 215:  22%|██▏       | 216/1000 [08:20<30:16,  2.32s/it][Succeeded / Failed / Skipped / Total] 114 / 94 / 8 / 216:  22%|██▏       | 216/1000 [08:20<30:16,  2.32s/it][Succeeded / Failed / Skipped / Total] 115 / 94 / 8 / 217:  22%|██▏       | 217/1000 [08:23<30:15,  2.32s/it][Succeeded / Failed / Skipped / Total] 115 / 94 / 8 / 217:  22%|██▏       | 218/1000 [08:24<30:08,  2.31s/it][Succeeded / Failed / Skipped / Total] 116 / 94 / 8 / 218:  22%|██▏       | 218/1000 [08:24<30:08,  2.31s/it]Method updateObjectIdentity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 212 ---------------------------------------------
Sets the target URL parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[example]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 213 ---------------------------------------------
Builds a userDn . --> Create DistinguishedName from userDn --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[username]] ) { DistinguishedName [[dn]] = new DistinguishedName ( userDnBase ) ; [[dn]] . add ( usernameAttribute , [[username]] ) ; return [[dn]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[add]] ) { DistinguishedName [[build]] = new DistinguishedName ( userDnBase ) ; [[build]] . add ( usernameAttribute , [[add]] ) ; return [[build]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 214 ---------------------------------------------
Returns the current date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[begin]] ( ) { long [[wait]] = System . currentTimeMillis ( ) ; if ( ( [[wait]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[wait]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[wait]] ; currentDate = format . format ( new Date ( [[wait]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 215 ---------------------------------------------
Internal parse method . --> parse a string value to a Long Object --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[medium]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 216 ---------------------------------------------
Gets the timeSphere groups . --> Ends a string --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String securityName ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[end]] ( final String securityName ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 217 ---------------------------------------------
Update cached cache . --> execute a bit --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap [[cache]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[execute]] ( HashMap [[bit]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[bit]] . size ( ) > 1000 ) { [[bit]] . clear ( ) ; } [[bit]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 218 ---------------------------------------------
Build the group sDn . --> Build the groupDn --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[group]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[z]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[z]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 219 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 94 / 8 / 219:  22%|██▏       | 219/1000 [08:28<30:13,  2.32s/it][Succeeded / Failed / Skipped / Total] 117 / 94 / 8 / 219:  22%|██▏       | 220/1000 [08:29<30:07,  2.32s/it][Succeeded / Failed / Skipped / Total] 118 / 94 / 8 / 220:  22%|██▏       | 220/1000 [08:29<30:07,  2.32s/it][Succeeded / Failed / Skipped / Total] 118 / 95 / 8 / 221:  22%|██▏       | 221/1000 [08:30<30:00,  2.31s/it][Succeeded / Failed / Skipped / Total] 118 / 95 / 8 / 221:  22%|██▏       | 222/1000 [08:30<29:50,  2.30s/it][Succeeded / Failed / Skipped / Total] 118 / 96 / 8 / 222:  22%|██▏       | 222/1000 [08:30<29:50,  2.30s/it][Succeeded / Failed / Skipped / Total] 119 / 96 / 8 / 223:  22%|██▏       | 223/1000 [08:31<29:41,  2.29s/it][Succeeded / Failed / Skipped / Total] 119 / 96 / 8 / 223:  22%|██▏       | 224/1000 [08:37<29:53,  2.31s/it][Succeeded / Failed / Skipped / Total] 120 / 96 / 8 / 224:  22%|██▏       | 224/1000 [08:37<29:53,  2.31s/it][Succeeded / Failed / Skipped / Total] 120 / 97 / 8 / 225:  22%|██▎       | 225/1000 [08:42<29:58,  2.32s/it][Succeeded / Failed / Skipped / Total] 120 / 97 / 8 / 225:  23%|██▎       | 226/1000 [08:43<29:52,  2.32s/it][Succeeded / Failed / Skipped / Total] 120 / 98 / 8 / 226:  23%|██▎       | 226/1000 [08:43<29:52,  2.32s/it]Determine whether the SessionAuthentication sessions should be enabled . --> region allowableSessionsExceeded --> Socre: 1.0

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[sessions]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[file]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[file]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 220 ---------------------------------------------
Returns the filters for the given url . --> Ends the specified URL --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[end]] ( String url ) { return [[end]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 221 ---------------------------------------------
Gets the security name . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String [[userSecurityName]] = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[foo]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String [[doi]] = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 222 ---------------------------------------------
Sets the authentication details . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[array]] ( HttpServletRequest [[index]] , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[index]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 223 ---------------------------------------------
Configures the Jaas . --> Configure JaasUsingLoop --> Socre: 1.0

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String [[loginConfigUrl]] = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String [[prefix]] = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( [[prefix]] + n ) ) != null ) { alreadySet = existing . equals ( [[loginConfigUrl]] ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = [[prefix]] + n ; log . debug ( "Setting security property [" + key + "] to: " + [[loginConfigUrl]] ) ; Security . setProperty ( key , [[loginConfigUrl]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String [[index]] = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String [[z]] = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( [[z]] + n ) ) != null ) { alreadySet = existing . equals ( [[index]] ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = [[z]] + n ; log . debug ( "Setting security property [" + key + "] to: " + [[index]] ) ; Security . setProperty ( key , [[index]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 224 ---------------------------------------------
Sets the filter list . --> edit filter list --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > filters ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[edit]] ( List < Filter > filters ) { Validate . notNull ( [[edit]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[edit]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 225 ---------------------------------------------
Returns the list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain [[chain]] : filterChains ) { if ( [[chain]] . matches ( [[request]] ) ) { return [[chain]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[call]] ( HttpServletRequest [[ed]] ) { for ( SecurityFilterChain [[implementation]] : filterChains ) { if ( [[implementation]] . matches ( [[ed]] ) ) { return [[implementation]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 226 ---------------------------------------------
Copies the details of the source authentication token . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[i]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 227 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 120 / 99 / 8 / 227:  23%|██▎       | 227/1000 [08:47<29:56,  2.32s/it][Succeeded / Failed / Skipped / Total] 120 / 99 / 8 / 227:  23%|██▎       | 228/1000 [08:49<29:51,  2.32s/it][Succeeded / Failed / Skipped / Total] 121 / 99 / 8 / 228:  23%|██▎       | 228/1000 [08:49<29:51,  2.32s/it][Succeeded / Failed / Skipped / Total] 122 / 99 / 8 / 229:  23%|██▎       | 229/1000 [08:49<29:43,  2.31s/it][Succeeded / Failed / Skipped / Total] 122 / 99 / 8 / 229:  23%|██▎       | 230/1000 [08:53<29:46,  2.32s/it][Succeeded / Failed / Skipped / Total] 123 / 99 / 8 / 230:  23%|██▎       | 230/1000 [08:53<29:46,  2.32s/it][Succeeded / Failed / Skipped / Total] 124 / 99 / 8 / 231:  23%|██▎       | 231/1000 [08:56<29:45,  2.32s/it][Succeeded / Failed / Skipped / Total] 124 / 99 / 8 / 231:  23%|██▎       | 232/1000 [08:57<29:40,  2.32s/it]Returns the current application context . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext [[servletContext]] = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext [[list]] = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[list]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 228 ---------------------------------------------
Change the password . --> Create a new assertion --> Socre: 1.0

[[[[Adv]]]]: public void [[changePassword]] ( final String [[oldPassword]] , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[oldPassword]] , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , [[oldPassword]] , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[assertion]] ( final String [[attacker]] , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[attacker]] , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , [[attacker]] , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 229 ---------------------------------------------
Sets the session attributes . --> Perform a request specification program --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . [[sessionAttributes]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[program]] ( Map < String , Object > [[objects]] ) { notNull ( [[objects]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[objects]] , this . [[be]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 230 ---------------------------------------------
Creates a NTLMAuth scheme . --> Returns the NTLMAuthScheme for the given domain --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( domain ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme [[method]] = new NTLMAuthScheme ( ) ; [[method]] . setUserName ( userName ) ; [[method]] . setPassword ( password ) ; [[method]] . setWorkstation ( workstation ) ; [[method]] . setDomain ( domain ) ; return [[method]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 231 ---------------------------------------------
Print response message . --> Returns formatted formatted string . --> Socre: 1.0

[[[[Adv]]]]: public static String print ( ResponseOptions [[responseOptions]] , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( [[responseOptions]] . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = [[responseOptions]] . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = [[responseOptions]] . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( [[responseOptions]] , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String print ( ResponseOptions [[path]] , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( [[path]] . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = [[path]] . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = [[path]] . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( [[path]] , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 232 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 99 / 8 / 232:  23%|██▎       | 232/1000 [08:57<29:40,  2.32s/it][Succeeded / Failed / Skipped / Total] 125 / 100 / 8 / 233:  23%|██▎       | 233/1000 [08:58<29:32,  2.31s/it][Succeeded / Failed / Skipped / Total] 125 / 100 / 8 / 233:  23%|██▎       | 234/1000 [08:59<29:25,  2.31s/it][Succeeded / Failed / Skipped / Total] 125 / 101 / 8 / 234:  23%|██▎       | 234/1000 [08:59<29:25,  2.31s/it][Succeeded / Failed / Skipped / Total] 125 / 102 / 8 / 235:  24%|██▎       | 235/1000 [09:02<29:26,  2.31s/it][Succeeded / Failed / Skipped / Total] 125 / 102 / 8 / 235:  24%|██▎       | 236/1000 [09:02<29:16,  2.30s/it][Succeeded / Failed / Skipped / Total] 125 / 102 / 9 / 236:  24%|██▎       | 236/1000 [09:02<29:16,  2.30s/it][Succeeded / Failed / Skipped / Total] 126 / 102 / 9 / 237:  24%|██▎       | 237/1000 [09:03<29:08,  2.29s/it][Succeeded / Failed / Skipped / Total] 126 / 102 / 9 / 237:  24%|██▍       | 238/1000 [09:03<28:58,  2.28s/it][Succeeded / Failed / Skipped / Total] 127 / 102 / 9 / 238:  24%|██▍       | 238/1000 [09:03<28:58,  2.28s/it][Succeeded / Failed / Skipped / Total] 128 / 102 / 9 / 239:  24%|██▍       | 239/1000 [09:04<28:55,  2.28s/it][Succeeded / Failed / Skipped / Total] 128 / 102 / 9 / 239:  24%|██▍       | 240/1000 [09:05<28:47,  2.27s/it]Return basic authentication by username and password --> object with given password --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String [[userName]] , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( [[userName]] ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[object]] ( String [[exception]] , String password ) { final PreemptiveBasicAuthScheme [[field]] = new PreemptiveBasicAuthScheme ( ) ; [[field]] . setUserName ( [[exception]] ) ; [[field]] . setPassword ( password ) ; return [[field]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 233 ---------------------------------------------
Add additional filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... additionalFilters ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[bass]] ( Filter [[function]] , Filter ... additionalFilters ) { Validate . notNull ( [[function]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[function]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 234 ---------------------------------------------
Proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public static void proxy ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void proxy ( URI [[hosts]] ) { if ( [[hosts]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[hosts]] . getHost ( ) , [[hosts]] . getPort ( ) , [[hosts]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 235 ---------------------------------------------
Get the dn s baseDn . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName [[dn]] , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( baseDn ) ) { return [[dn]] ; } baseDn . append ( [[dn]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName [[add]] , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[add]] . contains ( baseDn ) ) { return [[add]] ; } baseDn . append ( [[add]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 236 ---------------------------------------------
Returns an instance of RestAssuredMock --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig sessionConfig ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 237 ---------------------------------------------
Returns the default object type . --> Create a new instance of JacksonConfig --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[utility]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[utility]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 238 ---------------------------------------------
Appends the default content charset to the provided charset . --> Simple element . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[element]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 239 ---------------------------------------------
Returns an Authentication scheme for the given user name and password . --> Get AuthenticationScheme library --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String password ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[library]] ( String userName , String password ) { final BasicAuthScheme [[client]] = new BasicAuthScheme ( ) ; [[client]] . setUserName ( userName ) ; [[client]] . setPassword ( password ) ; return [[client]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 240 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 129 / 102 / 9 / 240:  24%|██▍       | 240/1000 [09:05<28:47,  2.27s/it][Succeeded / Failed / Skipped / Total] 130 / 102 / 9 / 241:  24%|██▍       | 241/1000 [09:05<28:39,  2.27s/it][Succeeded / Failed / Skipped / Total] 130 / 102 / 9 / 241:  24%|██▍       | 242/1000 [09:06<28:32,  2.26s/it][Succeeded / Failed / Skipped / Total] 131 / 102 / 9 / 242:  24%|██▍       | 242/1000 [09:06<28:32,  2.26s/it][Succeeded / Failed / Skipped / Total] 132 / 102 / 9 / 243:  24%|██▍       | 243/1000 [09:11<28:37,  2.27s/it][Succeeded / Failed / Skipped / Total] 132 / 102 / 9 / 243:  24%|██▍       | 244/1000 [09:11<28:29,  2.26s/it][Succeeded / Failed / Skipped / Total] 133 / 102 / 9 / 244:  24%|██▍       | 244/1000 [09:11<28:29,  2.26s/it][Succeeded / Failed / Skipped / Total] 134 / 102 / 9 / 245:  24%|██▍       | 245/1000 [09:13<28:24,  2.26s/it][Succeeded / Failed / Skipped / Total] 134 / 102 / 9 / 245:  25%|██▍       | 246/1000 [09:13<28:15,  2.25s/it][Succeeded / Failed / Skipped / Total] 135 / 102 / 9 / 246:  25%|██▍       | 246/1000 [09:13<28:15,  2.25s/it]Gets the ObjectMapper config object . --> Convenience method for Jackson --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory [[output]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 241 ---------------------------------------------
Redirect a RedirectConfig --> Create a new RestAssuredConfig object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[index]] ( RedirectConfig [[heap]] ) { notNull ( [[heap]] , "Redirect config" ) ; return new RestAssuredConfig ( [[heap]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 242 ---------------------------------------------
Create an RestAssuredMock config . --> Create an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[by]] ( LogConfig logConfig ) { notNull ( [[by]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[by]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 243 ---------------------------------------------
Create an RestAssuredMock config . --> Get an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig xmlConfig ( XmlConfig [[xmlConfig]] ) { notNull ( xmlConfig , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig xmlConfig ( XmlConfig [[files]] ) { notNull ( xmlConfig , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 244 ---------------------------------------------
Returns an instance of RestAssuredMock method . --> Create an instance of RestAssured mock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig objectMapperConfig ( ObjectMapperConfig [[objectMapperConfig]] ) { notNull ( objectMapperConfig , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig objectMapperConfig ( ObjectMapperConfig [[stack]] ) { notNull ( objectMapperConfig , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 245 ---------------------------------------------
Get the Elasticsearch mock config . --> Create an RestAssuredMock cleartext configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig [[encoderConfig]] ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig [[code]] ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 246 ---------------------------------------------
Gets all mock soap config . --> Create an instance of RestAssuredMock mechanism . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig [[headerConfig]] ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig [[files]] ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 247 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 136 / 102 / 9 / 247:  25%|██▍       | 247/1000 [09:13<28:08,  2.24s/it][Succeeded / Failed / Skipped / Total] 136 / 102 / 9 / 247:  25%|██▍       | 248/1000 [09:14<28:00,  2.23s/it][Succeeded / Failed / Skipped / Total] 137 / 102 / 9 / 248:  25%|██▍       | 248/1000 [09:14<28:00,  2.23s/it][Succeeded / Failed / Skipped / Total] 138 / 102 / 9 / 249:  25%|██▍       | 249/1000 [09:18<28:03,  2.24s/it][Succeeded / Failed / Skipped / Total] 138 / 102 / 9 / 249:  25%|██▌       | 250/1000 [09:18<27:56,  2.24s/it][Succeeded / Failed / Skipped / Total] 139 / 102 / 9 / 250:  25%|██▌       | 250/1000 [09:18<27:56,  2.24s/it][Succeeded / Failed / Skipped / Total] 139 / 103 / 9 / 251:  25%|██▌       | 251/1000 [09:19<27:48,  2.23s/it][Succeeded / Failed / Skipped / Total] 139 / 103 / 9 / 251:  25%|██▌       | 252/1000 [09:19<27:40,  2.22s/it][Succeeded / Failed / Skipped / Total] 140 / 103 / 9 / 252:  25%|██▌       | 252/1000 [09:19<27:40,  2.22s/it][Succeeded / Failed / Skipped / Total] 141 / 103 / 9 / 253:  25%|██▌       | 253/1000 [09:20<27:35,  2.22s/it][Succeeded / Failed / Skipped / Total] 141 / 103 / 9 / 253:  25%|██▌       | 254/1000 [09:22<27:30,  2.21s/it][Succeeded / Failed / Skipped / Total] 142 / 103 / 9 / 254:  25%|██▌       | 254/1000 [09:22<27:30,  2.21s/it]Create a RestAssuredMock config . --> Create an instance of RestAssuredMockMvcConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[mockMvcConfig]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[mockMvcConfig]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[mockMvcConfig]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[var]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[var]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[var]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 248 ---------------------------------------------
Get the JMX config . --> Create an instance of RestAssuredMock method . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig [[asyncConfig]] ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig [[domain]] ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 249 ---------------------------------------------
Create an RestAssuredMock config from the given json config . --> Returns an RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig [[jsonConfig]] ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[method]] ( JsonConfig [[set]] ) { notNull ( [[method]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[method]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 250 ---------------------------------------------
Returns an RestAssuredMock config for the given MultiPartConfig . --> Create an instance of RestAssuredMockMvcConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig multiPartConfig ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bus]] ( MultiPartConfig multiPartConfig ) { notNull ( [[bus]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[bus]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 251 ---------------------------------------------
Determines whether this keystore is running or not . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[generator]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 252 ---------------------------------------------
Returns the RestAssured mock config . --> Create an instance of RestAssuredMock . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[foo]] ( MockMvcParamConfig paramConfig ) { notNull ( [[foo]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[foo]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 253 ---------------------------------------------
Gets a mock config matcher . --> Gets foo from MatcherConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[foo]] ( MatcherConfig matcherConfig ) { notNull ( [[foo]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[foo]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 254 ---------------------------------------------
Declares a XmlPathConfig . --> Declare a new XmlPathConfig --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig declareNamespaces ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig declareNamespaces ( Map < String , String > [[html]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[html]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 255 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 143 / 103 / 9 / 255:  26%|██▌       | 255/1000 [09:22<27:23,  2.21s/it][Succeeded / Failed / Skipped / Total] 143 / 103 / 9 / 255:  26%|██▌       | 256/1000 [09:23<27:17,  2.20s/it][Succeeded / Failed / Skipped / Total] 143 / 104 / 9 / 256:  26%|██▌       | 256/1000 [09:23<27:17,  2.20s/it][Succeeded / Failed / Skipped / Total] 144 / 104 / 9 / 257:  26%|██▌       | 257/1000 [09:29<27:26,  2.22s/it][Succeeded / Failed / Skipped / Total] 144 / 104 / 9 / 257:  26%|██▌       | 258/1000 [09:31<27:23,  2.21s/it][Succeeded / Failed / Skipped / Total] 145 / 104 / 9 / 258:  26%|██▌       | 258/1000 [09:31<27:23,  2.21s/it][Succeeded / Failed / Skipped / Total] 146 / 104 / 9 / 259:  26%|██▌       | 259/1000 [09:34<27:23,  2.22s/it][Succeeded / Failed / Skipped / Total] 146 / 104 / 9 / 259:  26%|██▌       | 260/1000 [09:36<27:21,  2.22s/it][Succeeded / Failed / Skipped / Total] 147 / 104 / 9 / 260:  26%|██▌       | 260/1000 [09:36<27:21,  2.22s/it][Succeeded / Failed / Skipped / Total] 148 / 104 / 9 / 261:  26%|██▌       | 261/1000 [09:40<27:23,  2.22s/it][Succeeded / Failed / Skipped / Total] 148 / 104 / 9 / 261:  26%|██▌       | 262/1000 [09:40<27:14,  2.21s/it]Get the declared namespace . --> send an XML configuration object --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[send]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 256 ---------------------------------------------
Create the scheme for the user . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme form ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setConfig ( config ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme form ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[form]] = new FormAuthScheme ( ) ; [[form]] . setUserName ( userName ) ; [[form]] . setPassword ( password ) ; [[form]] . setConfig ( config ) ; return [[form]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 257 ---------------------------------------------
Adds basic credentials . --> Create a basic request --> Socre: 1.0

[[[[Adv]]]]: public void basic ( String host , int port , String [[user]] , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( [[user]] , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void basic ( String host , int port , String [[access]] , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( [[access]] , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 258 ---------------------------------------------
Creates a NTCredentials for the AuthScope . --> Generates a NTCredentials --> Socre: 1.0

[[[[Adv]]]]: public void ntlm ( String host , int [[port]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String host , int [[call]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[call]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 259 ---------------------------------------------
Reset the internal state . --> Execute the request --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[execute]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 260 ---------------------------------------------
Sets response header . --> Sets headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder setHeader ( String name , String [[value]] ) { notNull ( name , "Header name" ) ; notNull ( [[value]] , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , [[value]] ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( [[value]] ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder setHeader ( String name , String [[count]] ) { notNull ( name , "Header name" ) ; notNull ( [[count]] , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , [[count]] ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( [[count]] ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 261 ---------------------------------------------
Build the response . --> Default function . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[function]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 262 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 148 / 105 / 9 / 262:  26%|██▌       | 262/1000 [09:40<27:14,  2.21s/it][Succeeded / Failed / Skipped / Total] 149 / 105 / 9 / 263:  26%|██▋       | 263/1000 [09:43<27:14,  2.22s/it][Succeeded / Failed / Skipped / Total] 149 / 105 / 9 / 263:  26%|██▋       | 264/1000 [09:48<27:21,  2.23s/it][Succeeded / Failed / Skipped / Total] 149 / 106 / 9 / 264:  26%|██▋       | 264/1000 [09:48<27:21,  2.23s/it][Succeeded / Failed / Skipped / Total] 149 / 107 / 9 / 265:  26%|██▋       | 265/1000 [09:49<27:15,  2.22s/it][Succeeded / Failed / Skipped / Total] 149 / 107 / 9 / 265:  27%|██▋       | 266/1000 [09:51<27:11,  2.22s/it][Succeeded / Failed / Skipped / Total] 149 / 108 / 9 / 266:  27%|██▋       | 266/1000 [09:51<27:11,  2.22s/it][Succeeded / Failed / Skipped / Total] 150 / 108 / 9 / 267:  27%|██▋       | 267/1000 [09:51<27:04,  2.22s/it][Succeeded / Failed / Skipped / Total] 150 / 108 / 9 / 267:  27%|██▋       | 268/1000 [09:56<27:08,  2.22s/it][Succeeded / Failed / Skipped / Total] 150 / 109 / 9 / 268:  27%|██▋       | 268/1000 [09:56<27:08,  2.22s/it][Succeeded / Failed / Skipped / Total] 150 / 110 / 9 / 269:  27%|██▋       | 269/1000 [09:56<27:01,  2.22s/it][Succeeded / Failed / Skipped / Total] 150 / 110 / 9 / 269:  27%|██▋       | 270/1000 [09:58<26:59,  2.22s/it][Succeeded / Failed / Skipped / Total] 150 / 111 / 9 / 270:  27%|██▋       | 270/1000 [09:58<26:59,  2.22s/it][Succeeded / Failed / Skipped / Total] 151 / 111 / 9 / 271:  27%|██▋       | 271/1000 [10:01<26:58,  2.22s/it][Succeeded / Failed / Skipped / Total] 151 / 111 / 9 / 271:  27%|██▋       | 272/1000 [10:05<27:00,  2.23s/it]Sets a header value . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String value ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[bit]] ( String [[attribute]] , String value ) { Validate . notEmpty ( [[attribute]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 263 ---------------------------------------------
Set the proxy . --> invite a host --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int [[port]] , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , [[port]] , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[invite]] ( String host , int [[token]] , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , [[token]] , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 264 ---------------------------------------------
Sets the request headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > headers ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[var]] ( Map < ? , ? > headers ) { this . [[name]] . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . [[name]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 265 ---------------------------------------------
Set control name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder controlName ( String controlName ) { Validate . notEmpty ( controlName , "Control name cannot be empty" ) ; this . [[controlName]] = controlName ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder controlName ( String controlName ) { Validate . notEmpty ( controlName , "Control name cannot be empty" ) ; this . [[it]] = controlName ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 266 ---------------------------------------------
Create a new header with additional headers . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers [[headers]] ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[after]] ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 267 ---------------------------------------------
Matches a domain by its matcher . --> Log a log entry for DetailedCookieMatcher --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[log]] ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Matches a given value matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[format]] ( Matcher < ? super String > [[dictionary]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[dictionary]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Returns a DetailedCookieMatcher for the given expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[program]] ( Matcher < ? super Date > [[tag]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[tag]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Matches the given comment matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[loop]] ( Matcher < ? super String > [[list]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[list]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Creates a request . --> Add a client --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String method , boolean hasBody , Closure [[configClosure]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , [[configClosure]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[client]] ( String method , boolean hasBody , Closure [[bar]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , [[bar]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 272 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 151 / 112 / 9 / 272:  27%|██▋       | 272/1000 [10:05<27:00,  2.23s/it][Succeeded / Failed / Skipped / Total] 151 / 113 / 9 / 273:  27%|██▋       | 273/1000 [10:08<26:59,  2.23s/it][Succeeded / Failed / Skipped / Total] 151 / 113 / 9 / 273:  27%|██▋       | 274/1000 [10:10<26:58,  2.23s/it][Succeeded / Failed / Skipped / Total] 151 / 114 / 9 / 274:  27%|██▋       | 274/1000 [10:10<26:58,  2.23s/it][Succeeded / Failed / Skipped / Total] 152 / 114 / 9 / 275:  28%|██▊       | 275/1000 [10:12<26:54,  2.23s/it][Succeeded / Failed / Skipped / Total] 152 / 114 / 9 / 275:  28%|██▊       | 276/1000 [10:12<26:46,  2.22s/it][Succeeded / Failed / Skipped / Total] 153 / 114 / 9 / 276:  28%|██▊       | 276/1000 [10:12<26:46,  2.22s/it][Succeeded / Failed / Skipped / Total] 153 / 115 / 9 / 277:  28%|██▊       | 277/1000 [10:13<26:40,  2.21s/it][Succeeded / Failed / Skipped / Total] 153 / 115 / 9 / 277:  28%|██▊       | 278/1000 [10:18<26:46,  2.22s/it][Succeeded / Failed / Skipped / Total] 153 / 116 / 9 / 278:  28%|██▊       | 278/1000 [10:18<26:46,  2.22s/it][Succeeded / Failed / Skipped / Total] 153 / 117 / 9 / 279:  28%|██▊       | 279/1000 [10:19<26:40,  2.22s/it][Succeeded / Failed / Skipped / Total] 153 / 117 / 9 / 279:  28%|██▊       | 280/1000 [10:21<26:37,  2.22s/it][Succeeded / Failed / Skipped / Total] 153 / 118 / 9 / 280:  28%|██▊       | 280/1000 [10:21<26:37,  2.22s/it][Succeeded / Failed / Skipped / Total] 154 / 118 / 9 / 281:  28%|██▊       | 281/1000 [10:21<26:31,  2.21s/it][Succeeded / Failed / Skipped / Total] 154 / 118 / 9 / 281:  28%|██▊       | 282/1000 [10:24<26:29,  2.21s/it][Succeeded / Failed / Skipped / Total] 155 / 118 / 9 / 282:  28%|██▊       | 282/1000 [10:24<26:29,  2.21s/it]Matches a path matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[manager]] ( Matcher < ? super String > [[field]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[field]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Matches if this scanner matches this securedMatcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > [[object]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[object]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Returns a version matcher that is associated to the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[end]] ( Matcher < ? super Integer > [[a]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[a]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Returns a copy of this Proxy specification . --> Create a new ProxySpecification --> Socre: 1.0

[[[[Adv]]]]: public ProxySpecification withHost ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification withHost ( String [[foo]] ) { return new ProxySpecification ( [[foo]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 276 ---------------------------------------------
Returns a new instance of DetailedCookieMatcher . --> DetailedMatcher on the given x --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[on]] ( Matcher < ? super Integer > [[x]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[x]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Returns a list of Detailed cookieMatcher for the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[i]] ( Matcher < ? super Boolean > [[pointer]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[pointer]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 278 ---------------------------------------------
Adds a header . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String expectedValue ) { spec . header ( [[headerName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[flow]] ( String [[source]] , String expectedValue ) { spec . header ( [[source]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 279 ---------------------------------------------
Adds a header value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( headerName , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[end]] ( String headerName , Matcher < String > [[error]] ) { spec . header ( headerName , [[error]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 280 ---------------------------------------------
Expect cookie by cookie name . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String expectedValue ) { spec . cookie ( [[cookieName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[ing]] ( String [[forward]] , String expectedValue ) { spec . cookie ( [[forward]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 281 ---------------------------------------------
Creates a new JsonPathConfig . --> Create a new JsonPathConfig --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType [[numberReturnType]] ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[on]] ( NumberReturnType [[file]] ) { return new JsonPathConfig ( [[on]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 282 ---------------------------------------------
Get the default parser type --> End a string value --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[end]] ( JsonParserType [[element]] ) { return new JsonPathConfig ( numberReturnType , [[end]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
[Succeeded / Failed / Skipped / Total] 156 / 118 / 9 / 283:  28%|██▊       | 283/1000 [10:24<26:22,  2.21s/it][Succeeded / Failed / Skipped / Total] 156 / 118 / 9 / 283:  28%|██▊       | 284/1000 [10:26<26:20,  2.21s/it][Succeeded / Failed / Skipped / Total] 157 / 118 / 9 / 284:  28%|██▊       | 284/1000 [10:26<26:20,  2.21s/it][Succeeded / Failed / Skipped / Total] 158 / 118 / 9 / 285:  28%|██▊       | 285/1000 [10:27<26:15,  2.20s/it][Succeeded / Failed / Skipped / Total] 158 / 118 / 9 / 285:  29%|██▊       | 286/1000 [10:30<26:13,  2.20s/it][Succeeded / Failed / Skipped / Total] 159 / 118 / 9 / 286:  29%|██▊       | 286/1000 [10:30<26:13,  2.20s/it][Succeeded / Failed / Skipped / Total] 160 / 118 / 9 / 287:  29%|██▊       | 287/1000 [10:30<26:07,  2.20s/it][Succeeded / Failed / Skipped / Total] 160 / 118 / 9 / 287:  29%|██▉       | 288/1000 [10:33<26:05,  2.20s/it][Succeeded / Failed / Skipped / Total] 161 / 118 / 9 / 288:  29%|██▉       | 288/1000 [10:33<26:05,  2.20s/it][Succeeded / Failed / Skipped / Total] 162 / 118 / 9 / 289:  29%|██▉       | 289/1000 [10:36<26:05,  2.20s/it][Succeeded / Failed / Skipped / Total] 162 / 118 / 9 / 289:  29%|██▉       | 290/1000 [10:39<26:06,  2.21s/it][Succeeded / Failed / Skipped / Total] 163 / 118 / 9 / 290:  29%|██▉       | 290/1000 [10:39<26:06,  2.21s/it][Succeeded / Failed / Skipped / Total] 164 / 118 / 9 / 291:  29%|██▉       | 291/1000 [10:40<26:01,  2.20s/it][Succeeded / Failed / Skipped / Total] 164 / 118 / 9 / 291:  29%|██▉       | 292/1000 [10:41<25:55,  2.20s/it][Succeeded / Failed / Skipped / Total] 164 / 119 / 9 / 292:  29%|██▉       | 292/1000 [10:41<25:55,  2.20s/it]--------------------------------------------- Result 283 ---------------------------------------------
Provide a LogConfig for debugging . --> Get named configuration archive --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream printStream ) { return new LogConfig ( printStream , "[[True]]" == "[[True]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[archive]] ( PrintStream printStream ) { return new LogConfig ( printStream , "[[data]]" == "[[data]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[data]]" == "[[data]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 284 ---------------------------------------------
Enable logging at the specified log --> Enables a broken error message . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail [[logDetail]] ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , [[logDetail]] , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail [[group]] ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , [[group]] , urlEncodeRequestUri , "[[data]]" == "[[data]]" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 285 ---------------------------------------------
Add a header to the request . --> Adds extension . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String headerName , String headerValue ) { spec . header ( headerName , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[extension]] ( String headerName , String headerValue ) { spec . header ( headerName , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 286 ---------------------------------------------
Add additional result handlers . --> Adds resultHandlers to the request . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler resultHandler , ResultHandler ... [[additionalResultHandlers]] ) { spec . resultHandlers ( resultHandler , [[additionalResultHandlers]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler resultHandler , ResultHandler ... [[c]] ) { spec . resultHandlers ( resultHandler , [[c]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 287 ---------------------------------------------
Add an attribute --> Adds array . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String [[attributeName]] , Object attributeValue ) { spec . attribute ( [[attributeName]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[array]] ( String [[reference]] , Object attributeValue ) { spec . attribute ( [[reference]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 288 ---------------------------------------------
Adds the provided HTTP parameters to the server . --> Create a new HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[object]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 289 ---------------------------------------------
HttpMultipart mode . --> Returns a new HttpClientConfig instance --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode [[httpMultipartMode]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode [[function]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 290 ---------------------------------------------
Gets an integer . --> Reads a String --> Socre: 1.0

[[[[Adv]]]]: public int getInt ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int getInt ( String [[t]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 291 ---------------------------------------------
Returns a multi - part config object . --> Load a property declaration --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String [[defaultBoundary]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[declaration]] ( String [[f]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[declaration]] , defaultCharset , "[[set]]" == "[[set]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 292 ---------------------------------------------
Sets the given parameter to the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[call]]" == "[[call]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .
[Succeeded / Failed / Skipped / Total] 164 / 120 / 9 / 293:  29%|██▉       | 293/1000 [10:45<25:57,  2.20s/it][Succeeded / Failed / Skipped / Total] 164 / 120 / 9 / 293:  29%|██▉       | 294/1000 [10:47<25:54,  2.20s/it][Succeeded / Failed / Skipped / Total] 164 / 121 / 9 / 294:  29%|██▉       | 294/1000 [10:47<25:54,  2.20s/it][Succeeded / Failed / Skipped / Total] 164 / 122 / 9 / 295:  30%|██▉       | 295/1000 [10:48<25:49,  2.20s/it][Succeeded / Failed / Skipped / Total] 164 / 122 / 9 / 295:  30%|██▉       | 296/1000 [10:49<25:43,  2.19s/it][Succeeded / Failed / Skipped / Total] 164 / 123 / 9 / 296:  30%|██▉       | 296/1000 [10:49<25:43,  2.19s/it][Succeeded / Failed / Skipped / Total] 165 / 123 / 9 / 297:  30%|██▉       | 297/1000 [10:49<25:36,  2.19s/it][Succeeded / Failed / Skipped / Total] 165 / 123 / 9 / 297:  30%|██▉       | 298/1000 [10:56<25:46,  2.20s/it][Succeeded / Failed / Skipped / Total] 165 / 124 / 9 / 298:  30%|██▉       | 298/1000 [10:56<25:46,  2.20s/it][Succeeded / Failed / Skipped / Total] 165 / 125 / 9 / 299:  30%|██▉       | 299/1000 [10:56<25:38,  2.20s/it][Succeeded / Failed / Skipped / Total] 165 / 125 / 9 / 299:  30%|███       | 300/1000 [10:56<25:32,  2.19s/it][Succeeded / Failed / Skipped / Total] 166 / 125 / 9 / 300:  30%|███       | 300/1000 [10:56<25:32,  2.19s/it][Succeeded / Failed / Skipped / Total] 167 / 125 / 9 / 301:  30%|███       | 301/1000 [10:57<25:25,  2.18s/it][Succeeded / Failed / Skipped / Total] 167 / 125 / 9 / 301:  30%|███       | 302/1000 [11:00<25:25,  2.19s/it][Succeeded / Failed / Skipped / Total] 168 / 125 / 9 / 302:  30%|███       | 302/1000 [11:00<25:25,  2.19s/it][Succeeded / Failed / Skipped / Total] 169 / 125 / 9 / 303:  30%|███       | 303/1000 [11:02<25:23,  2.19s/it][Succeeded / Failed / Skipped / Total] 169 / 125 / 9 / 303:  30%|███       | 304/1000 [11:02<25:17,  2.18s/it]--------------------------------------------- Result 293 ---------------------------------------------
Adds a multi - part request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String [[controlName]] , String contentBody , String mimeType ) { spec . multiPart ( [[controlName]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String [[spec]] , String contentBody , String mimeType ) { spec . multiPart ( [[spec]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 294 ---------------------------------------------
Gets a T object from the path . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object [[json]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) jsonAssertion . getResult ( [[json]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[paths]] > [[paths]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object [[level]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[paths]] ) jsonAssertion . getResult ( [[level]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 295 ---------------------------------------------
Create a new HttpClientConfig object --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[archive]] ( HttpClientFactory [[domain]] ) { return new HttpClientConfig ( [[archive]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 296 ---------------------------------------------
Returns the byte at the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[format]] ( String [[objects]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 297 ---------------------------------------------
Returns the short of the given path . --> Convenience method for test --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[test]] ( String [[p]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 298 ---------------------------------------------
Gets the double . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[method]] ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 299 ---------------------------------------------
Create a HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: static HttpRequestBase [[createHttpRequest]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[type]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase [[generator]] ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[field]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 300 ---------------------------------------------
Returns the long value for the given path . --> region mode Implementation --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[mode]] ( String [[array]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 301 ---------------------------------------------
Returns the float value of the given path . --> print n address --> Socre: 1.0

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[print]] ( String [[n]] ) { final Object [[address]] = get ( [[n]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 302 ---------------------------------------------
Gets map . --> Call this method --> Socre: 1.0

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[model]] , V > Map < [[model]] , V > [[call]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 303 ---------------------------------------------
Gets the object from the given path . --> Returns field of field type --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object [[object]] = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[field]] > [[field]] getObject ( String path , Class < [[field]] > objectType ) { Object [[me]] = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( [[me]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 304 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 170 / 125 / 9 / 304:  30%|███       | 304/1000 [11:02<25:17,  2.18s/it][Succeeded / Failed / Skipped / Total] 170 / 126 / 9 / 305:  30%|███       | 305/1000 [11:13<25:33,  2.21s/it][Succeeded / Failed / Skipped / Total] 170 / 126 / 9 / 305:  31%|███       | 306/1000 [11:13<25:27,  2.20s/it][Succeeded / Failed / Skipped / Total] 170 / 127 / 9 / 306:  31%|███       | 306/1000 [11:13<25:27,  2.20s/it][Succeeded / Failed / Skipped / Total] 170 / 127 / 9 / 306:  31%|███       | 307/1000 [11:15<25:24,  2.20s/it][Succeeded / Failed / Skipped / Total] 170 / 128 / 9 / 307:  31%|███       | 307/1000 [11:15<25:24,  2.20s/it][Succeeded / Failed / Skipped / Total] 170 / 128 / 9 / 307:  31%|███       | 308/1000 [11:15<25:18,  2.19s/it][Succeeded / Failed / Skipped / Total] 170 / 129 / 9 / 308:  31%|███       | 308/1000 [11:15<25:18,  2.19s/it][Succeeded / Failed / Skipped / Total] 170 / 129 / 9 / 308:  31%|███       | 309/1000 [11:20<25:20,  2.20s/it][Succeeded / Failed / Skipped / Total] 170 / 130 / 9 / 309:  31%|███       | 309/1000 [11:20<25:20,  2.20s/it][Succeeded / Failed / Skipped / Total] 170 / 130 / 9 / 309:  31%|███       | 310/1000 [11:24<25:22,  2.21s/it][Succeeded / Failed / Skipped / Total] 170 / 131 / 9 / 310:  31%|███       | 310/1000 [11:24<25:22,  2.21s/it][Succeeded / Failed / Skipped / Total] 170 / 131 / 9 / 310:  31%|███       | 311/1000 [11:25<25:19,  2.21s/it][Succeeded / Failed / Skipped / Total] 170 / 132 / 9 / 311:  31%|███       | 311/1000 [11:25<25:19,  2.21s/it][Succeeded / Failed / Skipped / Total] 170 / 132 / 9 / 311:  31%|███       | 312/1000 [11:29<25:20,  2.21s/it][Succeeded / Failed / Skipped / Total] 170 / 133 / 9 / 312:  31%|███       | 312/1000 [11:29<25:20,  2.21s/it][Succeeded / Failed / Skipped / Total] 170 / 133 / 9 / 312:  31%|███▏      | 313/1000 [11:31<25:18,  2.21s/it]Set the body of the object . --> Set b --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object [[object]] , ObjectMapper mapper ) { spec . body ( [[object]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[b]] ( Object [[client]] , ObjectMapper mapper ) { spec . body ( [[client]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 305 ---------------------------------------------
Adds a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Object ... [[parameterValues]] ) { spec . param ( parameterName , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[ee]] ( String parameterName , Object ... [[net]] ) { spec . param ( parameterName , [[net]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Adds a query parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Collection < ? > parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[d]] ( String parameterName , Collection < ? > parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Add cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object [[value]] , Object ... cookieNameValuePairs ) { spec . cookie ( [[key]] , [[value]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[bit]] ( String [[chunk]] , Object [[log]] , Object ... cookieNameValuePairs ) { spec . cookie ( [[chunk]] , [[log]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
Create a request parameter config with Update strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[handle]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 309 ---------------------------------------------
Create a response filter for the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public static Filter [[logResponseToIfMatches]] ( PrintStream stream , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( stream , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter [[attack]] ( PrintStream stream , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( stream , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 310 ---------------------------------------------
Add the bindings to the state . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[hold]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 311 ---------------------------------------------
Removes keys and source from the map . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[remove]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 312 ---------------------------------------------
Create a new cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie [[cookie]] , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( [[cookie]] , "Cookie" ) ; final List < Cookie > [[cookieList]] = new LinkedList < Cookie > ( ) ; [[cookieList]] . add ( [[cookie]] ) ; Collections . addAll ( [[cookieList]] , [[additionalCookies]] ) ; return new Cookies ( [[cookieList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[category]] ( Cookie [[ing]] , Cookie ... [[html]] ) { AssertParameter . notNull ( [[ing]] , "Cookie" ) ; final List < Cookie > [[i]] = new LinkedList < Cookie > ( ) ; [[i]] . add ( [[ing]] ) ; Collections . addAll ( [[i]] , [[html]] ) ; return new Cookies ( [[i]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 313 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 170 / 134 / 9 / 313:  31%|███▏      | 313/1000 [11:31<25:18,  2.21s/it][Succeeded / Failed / Skipped / Total] 170 / 134 / 9 / 313:  31%|███▏      | 314/1000 [11:32<25:13,  2.21s/it][Succeeded / Failed / Skipped / Total] 170 / 135 / 9 / 314:  31%|███▏      | 314/1000 [11:32<25:13,  2.21s/it][Succeeded / Failed / Skipped / Total] 170 / 135 / 9 / 314:  32%|███▏      | 315/1000 [11:34<25:09,  2.20s/it][Succeeded / Failed / Skipped / Total] 170 / 136 / 9 / 315:  32%|███▏      | 315/1000 [11:34<25:09,  2.20s/it][Succeeded / Failed / Skipped / Total] 170 / 136 / 9 / 315:  32%|███▏      | 316/1000 [11:35<25:04,  2.20s/it][Succeeded / Failed / Skipped / Total] 170 / 137 / 9 / 316:  32%|███▏      | 316/1000 [11:35<25:04,  2.20s/it][Succeeded / Failed / Skipped / Total] 170 / 137 / 9 / 316:  32%|███▏      | 317/1000 [11:42<25:13,  2.22s/it][Succeeded / Failed / Skipped / Total] 170 / 138 / 9 / 317:  32%|███▏      | 317/1000 [11:42<25:13,  2.22s/it][Succeeded / Failed / Skipped / Total] 170 / 138 / 9 / 317:  32%|███▏      | 318/1000 [11:47<25:17,  2.22s/it][Succeeded / Failed / Skipped / Total] 170 / 139 / 9 / 318:  32%|███▏      | 318/1000 [11:47<25:17,  2.22s/it][Succeeded / Failed / Skipped / Total] 170 / 139 / 9 / 318:  32%|███▏      | 319/1000 [11:50<25:17,  2.23s/it][Succeeded / Failed / Skipped / Total] 170 / 140 / 9 / 319:  32%|███▏      | 319/1000 [11:50<25:17,  2.23s/it][Succeeded / Failed / Skipped / Total] 170 / 140 / 9 / 319:  32%|███▏      | 320/1000 [11:51<25:11,  2.22s/it][Succeeded / Failed / Skipped / Total] 170 / 141 / 9 / 320:  32%|███▏      | 320/1000 [11:51<25:11,  2.22s/it][Succeeded / Failed / Skipped / Total] 170 / 141 / 9 / 320:  32%|███▏      | 321/1000 [11:53<25:08,  2.22s/it]Returns all dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[load]] ( BindingImpl < ? > [[key]] ) { if ( [[key]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[key]] ) . getInternalDependencies ( ) ; } else if ( [[key]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[key]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 314 ---------------------------------------------
Remove an InjectionPoint . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[undo]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 315 ---------------------------------------------
Returns a list containing the specified generic type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[original]] = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( [[original]] != null ) { for ( T t : [[original]] ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[text]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[field]] = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( [[field]] != null ) { for ( T t : [[field]] ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 316 ---------------------------------------------
Convert the key to a constant literal . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[object]] ( Key < T > [[method]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 317 ---------------------------------------------
Returns the uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > [[rawType]] = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = [[rawType]] . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[binding]] { Class < ? > [[function]] = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = [[function]] . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Returns the provider s type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[i]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 319 ---------------------------------------------
Binds the given injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl injector ) { Key < Injector > [[key]] = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Injector > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[include]] ( InjectorImpl injector ) { Key < Injector > [[declaration]] = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( [[declaration]] , new ProviderInstanceBindingImpl < Injector > ( injector , [[declaration]] , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 320 ---------------------------------------------
Initialize the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > [[a]] ) { checkState ( this . [[type]] == null , "delegate already initialized" ) ; this . [[type]] = checkNotNull ( [[a]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 321 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 170 / 142 / 9 / 321:  32%|███▏      | 321/1000 [11:53<25:08,  2.22s/it][Succeeded / Failed / Skipped / Total] 170 / 142 / 9 / 321:  32%|███▏      | 322/1000 [11:56<25:08,  2.22s/it][Succeeded / Failed / Skipped / Total] 171 / 142 / 9 / 322:  32%|███▏      | 322/1000 [11:56<25:08,  2.22s/it][Succeeded / Failed / Skipped / Total] 171 / 142 / 9 / 322:  32%|███▏      | 323/1000 [11:57<25:02,  2.22s/it][Succeeded / Failed / Skipped / Total] 171 / 143 / 9 / 323:  32%|███▏      | 323/1000 [11:57<25:02,  2.22s/it][Succeeded / Failed / Skipped / Total] 171 / 143 / 9 / 323:  32%|███▏      | 324/1000 [12:03<25:09,  2.23s/it][Succeeded / Failed / Skipped / Total] 172 / 143 / 9 / 324:  32%|███▏      | 324/1000 [12:03<25:09,  2.23s/it][Succeeded / Failed / Skipped / Total] 172 / 143 / 9 / 324:  32%|███▎      | 325/1000 [12:05<25:07,  2.23s/it][Succeeded / Failed / Skipped / Total] 173 / 143 / 9 / 325:  32%|███▎      | 325/1000 [12:05<25:07,  2.23s/it][Succeeded / Failed / Skipped / Total] 173 / 143 / 9 / 325:  33%|███▎      | 326/1000 [12:06<25:01,  2.23s/it][Succeeded / Failed / Skipped / Total] 173 / 144 / 9 / 326:  33%|███▎      | 326/1000 [12:06<25:01,  2.23s/it][Succeeded / Failed / Skipped / Total] 173 / 144 / 9 / 326:  33%|███▎      | 327/1000 [12:08<24:59,  2.23s/it][Succeeded / Failed / Skipped / Total] 174 / 144 / 9 / 327:  33%|███▎      | 327/1000 [12:08<24:59,  2.23s/it][Succeeded / Failed / Skipped / Total] 174 / 144 / 9 / 327:  33%|███▎      | 328/1000 [12:08<24:53,  2.22s/it][Succeeded / Failed / Skipped / Total] 175 / 144 / 9 / 328:  33%|███▎      | 328/1000 [12:08<24:53,  2.22s/it][Succeeded / Failed / Skipped / Total] 175 / 144 / 9 / 328:  33%|███▎      | 329/1000 [12:11<24:52,  2.22s/it]Binds the injector to the Provider . --> [[[FAILED]]]

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl [[injector]] ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl [[f]] ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; [[f]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( [[f]] , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 322 ---------------------------------------------
PreparesBuiltInConverters . --> library the given injector --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[library]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 323 ---------------------------------------------
Checks if is overrides a method . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method [[b]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[test]] ( Method a , Method [[r]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 324 ---------------------------------------------
Returns true if the specified class has the same version of the specified classloader . --> test class loader --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[test]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 325 ---------------------------------------------
Returns a fully qualified class loader . --> Returns a new classloader --> Socre: 1.0

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[g]] ( ClassLoader [[f]] ) { return [[f]] != null ? [[f]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 326 ---------------------------------------------
Internal method . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int [[size]] = [[parameterInjectors]] . length ; Object [ ] [[parameters]] = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[status]] ) throws InternalProvisionException { if ( [[status]] == null ) { return NO_ARGUMENTS ; } int [[sex]] = [[status]] . length ; Object [ ] [[parameter]] = new Object [ [[sex]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 327 ---------------------------------------------
Checks if the annotation is present in the member . --> fix for a member --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member member , Errors [[errors]] ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( [[errors]] , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[fix]] ( Member member , Errors [[ror]] ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( [[ror]] , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "[[fault]]" != "[[fault]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 328 ---------------------------------------------
Returns a canonical version of the given type literal . --> assume the given model literal --> Socre: 1.0

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > [[typeLiteral]] ) { Type type = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[errors]] = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( [[errors]] . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[assume]] ( TypeLiteral < T > [[model]] ) { Type type = [[model]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[file]] = new Errors ( ) . keyNotFullySpecified ( [[model]] ) ; throw new ConfigurationException ( [[file]] . getMessages ( ) ) ; } if ( [[model]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 329 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 175 / 145 / 9 / 329:  33%|███▎      | 329/1000 [12:11<24:52,  2.22s/it][Succeeded / Failed / Skipped / Total] 175 / 145 / 9 / 329:  33%|███▎      | 330/1000 [12:12<24:47,  2.22s/it][Succeeded / Failed / Skipped / Total] 175 / 146 / 9 / 330:  33%|███▎      | 330/1000 [12:12<24:47,  2.22s/it][Succeeded / Failed / Skipped / Total] 175 / 146 / 9 / 330:  33%|███▎      | 331/1000 [12:13<24:42,  2.22s/it][Succeeded / Failed / Skipped / Total] 175 / 147 / 9 / 331:  33%|███▎      | 331/1000 [12:13<24:42,  2.22s/it][Succeeded / Failed / Skipped / Total] 175 / 147 / 9 / 331:  33%|███▎      | 332/1000 [12:13<24:36,  2.21s/it][Succeeded / Failed / Skipped / Total] 176 / 147 / 9 / 332:  33%|███▎      | 332/1000 [12:13<24:36,  2.21s/it][Succeeded / Failed / Skipped / Total] 176 / 147 / 9 / 332:  33%|███▎      | 333/1000 [12:14<24:30,  2.20s/it][Succeeded / Failed / Skipped / Total] 177 / 147 / 9 / 333:  33%|███▎      | 333/1000 [12:14<24:30,  2.20s/it][Succeeded / Failed / Skipped / Total] 177 / 147 / 9 / 333:  33%|███▎      | 334/1000 [12:15<24:26,  2.20s/it][Succeeded / Failed / Skipped / Total] 178 / 147 / 9 / 334:  33%|███▎      | 334/1000 [12:15<24:26,  2.20s/it][Succeeded / Failed / Skipped / Total] 178 / 147 / 9 / 334:  34%|███▎      | 335/1000 [12:19<24:27,  2.21s/it][Succeeded / Failed / Skipped / Total] 178 / 148 / 9 / 335:  34%|███▎      | 335/1000 [12:19<24:27,  2.21s/it][Succeeded / Failed / Skipped / Total] 178 / 148 / 9 / 335:  34%|███▎      | 336/1000 [12:20<24:23,  2.20s/it]Cleans up the dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean [[bindingFailed]] = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency [[dep]] : deps ) { Key < ? > depKey = [[dep]] . getKey ( ) ; InjectionPoint ip = [[dep]] . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean [[e]] = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency [[end]] : deps ) { Key < ? > depKey = [[end]] . getKey ( ) ; InjectionPoint ip = [[end]] . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 330 ---------------------------------------------
Perform the request injection --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[base]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 331 ---------------------------------------------
Resolves all types . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { result [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[message]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[message]] . length ] ; for ( int t = 0 ; t < [[message]] . length ; t ++ ) { result [ t ] = resolve ( [[message]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 332 ---------------------------------------------
Creates a new instance of the given arguments . --> Creates a new Object --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[ject]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 333 ---------------------------------------------
Returns the annotations for the given key . --> Returns the type of field b --> Socre: 1.0

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[be]] ( Key < ? > [[b]] ) { return [[b]] . getAnnotation ( ) == null ? [[b]] : Key . get ( [[b]] . getTypeLiteral ( ) , [[b]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 334 ---------------------------------------------
Creates a ServletRequest instance with the default value . --> Register a new ServletRequest --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest [[servletRequest]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest [[linux]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 335 ---------------------------------------------
Returns the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[name]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 336 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 179 / 148 / 9 / 336:  34%|███▎      | 336/1000 [12:20<24:23,  2.20s/it][Succeeded / Failed / Skipped / Total] 179 / 148 / 9 / 336:  34%|███▎      | 337/1000 [12:38<24:51,  2.25s/it][Succeeded / Failed / Skipped / Total] 179 / 149 / 9 / 337:  34%|███▎      | 337/1000 [12:38<24:51,  2.25s/it][Succeeded / Failed / Skipped / Total] 179 / 149 / 9 / 337:  34%|███▍      | 338/1000 [12:41<24:51,  2.25s/it][Succeeded / Failed / Skipped / Total] 179 / 150 / 9 / 338:  34%|███▍      | 338/1000 [12:41<24:51,  2.25s/it][Succeeded / Failed / Skipped / Total] 179 / 150 / 9 / 338:  34%|███▍      | 339/1000 [12:46<24:53,  2.26s/it][Succeeded / Failed / Skipped / Total] 179 / 151 / 9 / 339:  34%|███▍      | 339/1000 [12:46<24:53,  2.26s/it][Succeeded / Failed / Skipped / Total] 179 / 151 / 9 / 339:  34%|███▍      | 340/1000 [12:47<24:49,  2.26s/it][Succeeded / Failed / Skipped / Total] 180 / 151 / 9 / 340:  34%|███▍      | 340/1000 [12:47<24:49,  2.26s/it][Succeeded / Failed / Skipped / Total] 180 / 151 / 9 / 340:  34%|███▍      | 341/1000 [12:54<24:56,  2.27s/it][Succeeded / Failed / Skipped / Total] 180 / 152 / 9 / 341:  34%|███▍      | 341/1000 [12:54<24:56,  2.27s/it][Succeeded / Failed / Skipped / Total] 180 / 152 / 9 / 341:  34%|███▍      | 342/1000 [12:56<24:53,  2.27s/it][Succeeded / Failed / Skipped / Total] 180 / 153 / 9 / 342:  34%|███▍      | 342/1000 [12:56<24:53,  2.27s/it][Succeeded / Failed / Skipped / Total] 180 / 154 / 9 / 343:  34%|███▍      | 343/1000 [12:56<24:47,  2.26s/it][Succeeded / Failed / Skipped / Total] 180 / 154 / 9 / 343:  34%|███▍      | 344/1000 [12:56<24:40,  2.26s/it]Validates all pendingInjections . --> capture errors --> Socre: 1.0

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "[[True]]" == "[[True]]" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[capture]] ( Errors errors ) { validationStarted = "[[cause]]" == "[[cause]]" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 337 ---------------------------------------------
Checks whether the given Annotation is present on the current retention . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention [[retention]] = [[annotationType]] . getAnnotation ( Retention . class ) ; return [[retention]] != null && [[retention]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[end]] ( Class < ? extends Annotation > [[method]] ) { Retention [[returns]] = [[method]] . getAnnotation ( Retention . class ) ; return [[returns]] != null && [[returns]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 338 ---------------------------------------------
Normalizes a path . --> [[[FAILED]]]

[[[[Adv]]]]: static String normalizePath ( String path ) { StringBuilder [[sb]] = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String normalizePath ( String path ) { StringBuilder [[reference]] = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 339 ---------------------------------------------
Returns the name of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[like]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 340 ---------------------------------------------
Add the direct type binding . --> get the binder --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[get]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 341 ---------------------------------------------
Initialize the delegate Provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[http]] ( Provider < T > [[a]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[a]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 342 ---------------------------------------------
Finds the scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] [[annotations]] ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : [[annotations]] ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[end]] ( Errors errors , Annotation [ ] [[brackets]] ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : [[brackets]] ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 343 ---------------------------------------------
Returns the scope for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl [[injector]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl [[command]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 344 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 180 / 155 / 9 / 344:  34%|███▍      | 344/1000 [12:56<24:40,  2.26s/it][Succeeded / Failed / Skipped / Total] 181 / 155 / 9 / 345:  34%|███▍      | 345/1000 [13:02<24:46,  2.27s/it][Succeeded / Failed / Skipped / Total] 181 / 155 / 9 / 345:  35%|███▍      | 346/1000 [13:04<24:42,  2.27s/it][Succeeded / Failed / Skipped / Total] 182 / 155 / 9 / 346:  35%|███▍      | 346/1000 [13:04<24:42,  2.27s/it][Succeeded / Failed / Skipped / Total] 182 / 156 / 9 / 347:  35%|███▍      | 347/1000 [13:06<24:40,  2.27s/it][Succeeded / Failed / Skipped / Total] 182 / 156 / 9 / 347:  35%|███▍      | 348/1000 [13:07<24:36,  2.26s/it][Succeeded / Failed / Skipped / Total] 182 / 157 / 9 / 348:  35%|███▍      | 348/1000 [13:07<24:36,  2.26s/it][Succeeded / Failed / Skipped / Total] 182 / 158 / 9 / 349:  35%|███▍      | 349/1000 [13:10<24:35,  2.27s/it][Succeeded / Failed / Skipped / Total] 182 / 158 / 9 / 349:  35%|███▌      | 350/1000 [13:11<24:29,  2.26s/it]Determines whether the member is a public method . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > [[type]] : parameterTypes ) { if ( ! Modifier . isPublic ( [[type]] . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[procedure]] ) { if ( ! Modifier . isPublic ( [[procedure]] . getModifiers ( ) ) ) { return "[[simple]]" != "[[simple]]" ; } Class < ? > [ ] parameterTypes ; if ( [[procedure]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[procedure]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[procedure]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[[simple]]" != "[[simple]]" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > [[file]] : parameterTypes ) { if ( ! Modifier . isPublic ( [[file]] . getModifiers ( ) ) ) { return "[[simple]]" != "[[simple]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 345 ---------------------------------------------
Creates a new instance of the construction . --> after construction context --> Socre: 1.0

[[[[Adv]]]]: private T [[provision]] ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[after]] ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 346 ---------------------------------------------
Make the given Scoping instance . --> Make a changeoping --> Socre: 1.0

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping [[scoping]] , InjectorImpl [[injector]] , Errors [[errors]] ) { Class < ? extends Annotation > scopeAnnotation = [[scoping]] . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return [[scoping]] ; } ScopeBinding scope = [[injector]] . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } [[errors]] . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping [[view]] , InjectorImpl [[image]] , Errors [[pot]] ) { Class < ? extends Annotation > scopeAnnotation = [[view]] . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return [[view]] ; } ScopeBinding scope = [[image]] . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } [[pot]] . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 347 ---------------------------------------------
Returns the ConstructorInjector of the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint constructorInjector , Errors [[errors]] ) throws ErrorsException { return cache . get ( constructorInjector , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[buy]] ( InjectionPoint constructorInjector , Errors [[invoked]] ) throws ErrorsException { return cache . get ( constructorInjector , [[invoked]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 348 ---------------------------------------------
Returns the key for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > type , Member [[member]] , Annotation [ ] [[annotations]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , [[member]] , [[annotations]] ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[method]] ( TypeLiteral < ? > type , Member [[type]] , Annotation [ ] [[objects]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , [[type]] , [[objects]] ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 349 ---------------------------------------------
Get assist snapshot methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[var]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 350 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 182 / 159 / 9 / 350:  35%|███▌      | 350/1000 [13:11<24:29,  2.26s/it][Succeeded / Failed / Skipped / Total] 183 / 159 / 9 / 351:  35%|███▌      | 351/1000 [13:14<24:29,  2.26s/it][Succeeded / Failed / Skipped / Total] 183 / 159 / 9 / 351:  35%|███▌      | 352/1000 [13:16<24:26,  2.26s/it][Succeeded / Failed / Skipped / Total] 183 / 160 / 9 / 352:  35%|███▌      | 352/1000 [13:16<24:26,  2.26s/it][Succeeded / Failed / Skipped / Total] 183 / 161 / 9 / 353:  35%|███▌      | 353/1000 [13:22<24:30,  2.27s/it][Succeeded / Failed / Skipped / Total] 183 / 161 / 9 / 353:  35%|███▌      | 354/1000 [13:33<24:44,  2.30s/it][Succeeded / Failed / Skipped / Total] 183 / 162 / 9 / 354:  35%|███▌      | 354/1000 [13:33<24:44,  2.30s/it][Succeeded / Failed / Skipped / Total] 183 / 162 / 9 / 354:  36%|███▌      | 355/1000 [13:33<24:38,  2.29s/it][Succeeded / Failed / Skipped / Total] 183 / 162 / 10 / 355:  36%|███▌      | 355/1000 [13:33<24:38,  2.29s/it][Succeeded / Failed / Skipped / Total] 183 / 162 / 10 / 355:  36%|███▌      | 356/1000 [13:35<24:35,  2.29s/it][Succeeded / Failed / Skipped / Total] 184 / 162 / 10 / 356:  36%|███▌      | 356/1000 [13:35<24:35,  2.29s/it][Succeeded / Failed / Skipped / Total] 184 / 162 / 10 / 356:  36%|███▌      | 357/1000 [13:43<24:43,  2.31s/it]Returns the key for a new ProviderMap --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[function]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[function]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[function]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 351 ---------------------------------------------
Returns a new Module for the given module . --> Forwards test --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[test]] ( Module [[construct]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 352 ---------------------------------------------
Convenience method for creating a single object . --> [[[FAILED]]]

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[i]] = 0 ; [[i]] < sourcesAsStrings . length ; [[i]] ++ ) { sourcesAsStrings [ [[i]] ] = Errors . convert ( sourcesAsStrings [ [[i]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[context]] = 0 ; [[context]] < sourcesAsStrings . length ; [[context]] ++ ) { sourcesAsStrings [ [[context]] ] = Errors . convert ( sourcesAsStrings [ [[context]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 353 ---------------------------------------------
Checks if annotation has scope . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation annotation : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > [[c]] ) { for ( Annotation annotation : [[c]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 354 ---------------------------------------------
New RealMapBinder . --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 355 ---------------------------------------------
Returns the implementation with the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 356 ---------------------------------------------
Removes the set of dependencies . --> Remove the super classes from the given method --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > [[deps]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dep]] : [[deps]] ) { Class < ? > annotationType = [[dep]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( [[dep]] ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > [[method]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[example]] : [[method]] ) { Class < ? > annotationType = [[example]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( [[example]] ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 357 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 185 / 162 / 10 / 357:  36%|███▌      | 357/1000 [13:43<24:43,  2.31s/it][Succeeded / Failed / Skipped / Total] 185 / 162 / 10 / 357:  36%|███▌      | 358/1000 [13:45<24:40,  2.31s/it][Succeeded / Failed / Skipped / Total] 185 / 163 / 10 / 358:  36%|███▌      | 358/1000 [13:45<24:40,  2.31s/it][Succeeded / Failed / Skipped / Total] 185 / 163 / 10 / 358:  36%|███▌      | 359/1000 [13:50<24:42,  2.31s/it][Succeeded / Failed / Skipped / Total] 186 / 163 / 10 / 359:  36%|███▌      | 359/1000 [13:50<24:42,  2.31s/it][Succeeded / Failed / Skipped / Total] 186 / 163 / 10 / 359:  36%|███▌      | 360/1000 [13:51<24:38,  2.31s/it][Succeeded / Failed / Skipped / Total] 187 / 163 / 10 / 360:  36%|███▌      | 360/1000 [13:51<24:38,  2.31s/it][Succeeded / Failed / Skipped / Total] 187 / 163 / 10 / 360:  36%|███▌      | 361/1000 [13:53<24:34,  2.31s/it][Succeeded / Failed / Skipped / Total] 187 / 164 / 10 / 361:  36%|███▌      | 361/1000 [13:53<24:34,  2.31s/it][Succeeded / Failed / Skipped / Total] 187 / 164 / 10 / 361:  36%|███▌      | 362/1000 [13:56<24:34,  2.31s/it][Succeeded / Failed / Skipped / Total] 188 / 164 / 10 / 362:  36%|███▌      | 362/1000 [13:56<24:34,  2.31s/it][Succeeded / Failed / Skipped / Total] 188 / 164 / 10 / 362:  36%|███▋      | 363/1000 [13:57<24:28,  2.31s/it][Succeeded / Failed / Skipped / Total] 188 / 165 / 10 / 363:  36%|███▋      | 363/1000 [13:57<24:28,  2.31s/it][Succeeded / Failed / Skipped / Total] 188 / 165 / 10 / 363:  36%|███▋      | 364/1000 [13:59<24:26,  2.31s/it]Returns the dependencies for the given ctorPoint . --> On a class --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > [[implementation]] ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[implementation]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[implementation]] ) ) { [[builder]] . addAll ( ip . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[on]] ( InjectionPoint ctorPoint , TypeLiteral < ? > [[style]] ) { ImmutableSet . Builder < Dependency < ? > > [[layer]] = ImmutableSet . builder ( ) ; [[layer]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[style]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[style]] ) ) { [[layer]] . addAll ( ip . getDependencies ( ) ) ; } } return [[layer]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 358 ---------------------------------------------
Get the getBinding from a new context . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[enter]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 359 ---------------------------------------------
Invokes the method with the specified arguments . --> Override Object gui in subclasses --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object [[proxy]] , final Method [[method]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[gui]] ( Object [[org]] , final Method [[browser]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 360 ---------------------------------------------
Returns the InjectionPoint associated with this proxy . --> Begin a InjectionPoint --> Socre: 1.0

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[begin]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 361 ---------------------------------------------
Returns true if the implementation is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > [[dependencies]] , Class < ? > implementation , TypeLiteral < ? > [[factoryType]] ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[set]] ( Set < Dependency < ? > > [[implementation]] , Class < ? > implementation , TypeLiteral < ? > [[parameter]] ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 362 ---------------------------------------------
Return true if the type literal is not critical . --> Merges a Type literal --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > [[typeLiteral]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[merge]] ( TypeLiteral < ? > [[name]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[name]] ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[command]]" != "[[command]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 363 ---------------------------------------------
Find the next filter . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[text]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 364 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 188 / 166 / 10 / 364:  36%|███▋      | 364/1000 [13:59<24:26,  2.31s/it][Succeeded / Failed / Skipped / Total] 189 / 166 / 10 / 365:  36%|███▋      | 365/1000 [13:59<24:20,  2.30s/it][Succeeded / Failed / Skipped / Total] 189 / 166 / 10 / 365:  37%|███▋      | 366/1000 [13:59<24:14,  2.29s/it][Succeeded / Failed / Skipped / Total] 189 / 167 / 10 / 366:  37%|███▋      | 366/1000 [13:59<24:14,  2.29s/it][Succeeded / Failed / Skipped / Total] 189 / 168 / 10 / 367:  37%|███▋      | 367/1000 [14:03<24:14,  2.30s/it][Succeeded / Failed / Skipped / Total] 189 / 168 / 10 / 367:  37%|███▋      | 368/1000 [14:07<24:16,  2.30s/it][Succeeded / Failed / Skipped / Total] 190 / 168 / 10 / 368:  37%|███▋      | 368/1000 [14:07<24:16,  2.30s/it][Succeeded / Failed / Skipped / Total] 191 / 168 / 10 / 369:  37%|███▋      | 369/1000 [14:11<24:15,  2.31s/it][Succeeded / Failed / Skipped / Total] 191 / 168 / 10 / 369:  37%|███▋      | 370/1000 [14:12<24:12,  2.30s/it][Succeeded / Failed / Skipped / Total] 191 / 169 / 10 / 370:  37%|███▋      | 370/1000 [14:12<24:12,  2.30s/it][Succeeded / Failed / Skipped / Total] 191 / 170 / 10 / 371:  37%|███▋      | 371/1000 [14:20<24:19,  2.32s/it][Succeeded / Failed / Skipped / Total] 191 / 170 / 10 / 371:  37%|███▋      | 372/1000 [14:21<24:13,  2.31s/it]Returns true if the class has an inject . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[construct]] ( Constructor [[p]] ) { return [[p]] . isAnnotationPresent ( Inject . class ) || [[p]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 365 ---------------------------------------------
Checks to see if there is a matching parameters . --> generator method --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > [[type]] , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = [[type]] . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[generator]] ( TypeLiteral < ? > [[variables]] , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = [[variables]] . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 366 ---------------------------------------------
New RealMultibinder . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder [[binder]] , Key < T > [[key]] ) { [[binder]] = [[binder]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[result]] = new RealMultibinder <> ( [[binder]] , [[key]] ) ; [[binder]] . install ( [[result]] ) ; return [[result]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[check]] ( Binder [[word]] , Key < T > [[error]] ) { [[word]] = [[word]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[null]] = new RealMultibinder <> ( [[word]] , [[error]] ) ; [[word]] . install ( [[null]] ) ; return [[null]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 367 ---------------------------------------------
Returns the dependencies of this class . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[add]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 368 ---------------------------------------------
Returns the line corresponding to the given member . --> i - th --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[i]] ( Member [[name]] ) { Preconditions . checkArgument ( type == [[name]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[name]] , [[name]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[name]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 369 ---------------------------------------------
Initialize the process . --> compilation of hot --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[compilation]] ( Errors [[hot]] ) { injector . lookups = injector ; new LookupProcessor ( [[hot]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 370 ---------------------------------------------
Transfer Transfer callable to transfer . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > callable ) { return wrap ( callable , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[release]] ( Callable < T > callable ) { return wrap ( callable , [[release]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 371 ---------------------------------------------
Returns a new Module for the given module --> [[[FAILED]]]

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "[[False]]" != "[[False]]" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[on]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "[[file]]" != "[[file]]" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 372 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 191 / 171 / 10 / 372:  37%|███▋      | 372/1000 [14:21<24:13,  2.31s/it][Succeeded / Failed / Skipped / Total] 191 / 172 / 10 / 373:  37%|███▋      | 373/1000 [14:24<24:12,  2.32s/it][Succeeded / Failed / Skipped / Total] 191 / 172 / 10 / 373:  37%|███▋      | 374/1000 [14:29<24:15,  2.33s/it][Succeeded / Failed / Skipped / Total] 191 / 173 / 10 / 374:  37%|███▋      | 374/1000 [14:29<24:15,  2.33s/it][Succeeded / Failed / Skipped / Total] 191 / 174 / 10 / 375:  38%|███▊      | 375/1000 [14:30<24:10,  2.32s/it][Succeeded / Failed / Skipped / Total] 191 / 174 / 10 / 375:  38%|███▊      | 376/1000 [14:32<24:08,  2.32s/it][Succeeded / Failed / Skipped / Total] 191 / 175 / 10 / 376:  38%|███▊      | 376/1000 [14:32<24:08,  2.32s/it][Succeeded / Failed / Skipped / Total] 191 / 176 / 10 / 377:  38%|███▊      | 377/1000 [14:33<24:02,  2.32s/it][Succeeded / Failed / Skipped / Total] 191 / 176 / 10 / 377:  38%|███▊      | 378/1000 [14:33<23:57,  2.31s/it]Validates that the object is compatible . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > [[key]] , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[on]] ( Key < ? > [[field]] , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[field]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[field]] + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 373 ---------------------------------------------
Executes the given callable using the given seed map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > callable , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( callable , [[continueRequest]] ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[execute]] ( Callable < T > callable , Map < Key < ? > , Object > [[line]] ) { return wrap ( callable , [[execute]] ( [[line]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 374 ---------------------------------------------
Returns a Key for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > [[type]] , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( [[type]] , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > [[d]] , AnnotationStrategy [[c]] ) { return new Key < T > ( [[d]] , [[c]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 375 ---------------------------------------------
Returns the name of the source . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[foo]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 376 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[object]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 377 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[include]] ( Class < ? extends Annotation > [[j]] ) { [[j]] = Annotations . canonicalizeIfNamed ( [[j]] ) ; if ( isAllDefaultMethods ( [[j]] ) ) { return [[include]] ( generateAnnotation ( [[j]] ) ) ; } checkNotNull ( [[j]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[j]] ) ; ensureIsBindingAnnotation ( [[j]] ) ; return new AnnotationTypeStrategy ( [[j]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 378 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 191 / 177 / 10 / 378:  38%|███▊      | 378/1000 [14:33<23:57,  2.31s/it][Succeeded / Failed / Skipped / Total] 191 / 178 / 10 / 379:  38%|███▊      | 379/1000 [14:44<24:09,  2.33s/it][Succeeded / Failed / Skipped / Total] 191 / 178 / 10 / 379:  38%|███▊      | 380/1000 [14:47<24:07,  2.33s/it][Succeeded / Failed / Skipped / Total] 192 / 178 / 10 / 380:  38%|███▊      | 380/1000 [14:47<24:07,  2.33s/it][Succeeded / Failed / Skipped / Total] 192 / 178 / 10 / 380:  38%|███▊      | 381/1000 [14:50<24:07,  2.34s/it][Succeeded / Failed / Skipped / Total] 192 / 179 / 10 / 381:  38%|███▊      | 381/1000 [14:50<24:07,  2.34s/it][Succeeded / Failed / Skipped / Total] 192 / 179 / 10 / 381:  38%|███▊      | 382/1000 [14:58<24:14,  2.35s/it][Succeeded / Failed / Skipped / Total] 193 / 179 / 10 / 382:  38%|███▊      | 382/1000 [14:58<24:14,  2.35s/it][Succeeded / Failed / Skipped / Total] 193 / 179 / 10 / 382:  38%|███▊      | 383/1000 [15:00<24:11,  2.35s/it]Returns the annotation for the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation [[getAnnotation]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation [[on]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 379 ---------------------------------------------
Returns the injectors for the given injection points . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors [[errorsForMember]] = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector [[injector]] = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injector]] , injectionPoint , [[errorsForMember]] ) : new SingleMethodInjector ( this . [[injector]] , injectionPoint , [[errorsForMember]] ) ; [[injectors]] . add ( [[injector]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[a]] = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors [[u]] = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector [[b]] = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[start]] , injectionPoint , [[u]] ) : new SingleMethodInjector ( this . [[start]] , injectionPoint , [[u]] ) ; [[a]] . add ( [[b]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 380 ---------------------------------------------
Converts an Object to an Object --> dita34 --> Socre: 1.0

[[[[Adv]]]]: static Object [[convert]] ( Object o ) { ElementSource [[source]] = null ; if ( o instanceof ElementSource ) { [[source]] = ( ElementSource ) o ; o = [[source]] . getDeclaringSource ( ) ; } return [[convert]] ( o , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[dicate]] ( Object o ) { ElementSource [[a]] = null ; if ( o instanceof ElementSource ) { [[a]] = ( ElementSource ) o ; o = [[a]] . getDeclaringSource ( ) ; } return [[dicate]] ( o , [[a]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 381 ---------------------------------------------
Create a message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( String messageFormat , Object ... arguments ) { return [[create]] ( null , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[system]] ( String messageFormat , Object ... arguments ) { return [[system]] ( null , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 382 ---------------------------------------------
Create the set of registered listeners . --> drop the events --> Socre: 1.0

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > [[type]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[type]] ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding [[binding]] : typeListenerBindings ) { TypeListener typeListener = [[binding]] . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && [[binding]] . getTypeMatcher ( ) . matches ( [[type]] ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( [[type]] , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( [[binding]] , [[type]] , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[type]] , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[drop]] ( TypeLiteral < T > [[events]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[events]] ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding [[process]] : typeListenerBindings ) { TypeListener typeListener = [[process]] . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && [[process]] . getTypeMatcher ( ) . matches ( [[events]] ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( [[events]] , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( [[process]] , [[events]] , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[events]] , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 383 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 193 / 180 / 10 / 383:  38%|███▊      | 383/1000 [15:00<24:11,  2.35s/it][Succeeded / Failed / Skipped / Total] 193 / 180 / 10 / 383:  38%|███▊      | 384/1000 [15:04<24:10,  2.35s/it][Succeeded / Failed / Skipped / Total] 193 / 181 / 10 / 384:  38%|███▊      | 384/1000 [15:04<24:10,  2.35s/it][Succeeded / Failed / Skipped / Total] 193 / 181 / 10 / 384:  38%|███▊      | 385/1000 [15:06<24:07,  2.35s/it][Succeeded / Failed / Skipped / Total] 194 / 181 / 10 / 385:  38%|███▊      | 385/1000 [15:06<24:07,  2.35s/it][Succeeded / Failed / Skipped / Total] 194 / 181 / 10 / 385:  39%|███▊      | 386/1000 [15:07<24:03,  2.35s/it][Succeeded / Failed / Skipped / Total] 194 / 182 / 10 / 386:  39%|███▊      | 386/1000 [15:07<24:03,  2.35s/it][Succeeded / Failed / Skipped / Total] 194 / 182 / 10 / 386:  39%|███▊      | 387/1000 [15:12<24:05,  2.36s/it][Succeeded / Failed / Skipped / Total] 194 / 183 / 10 / 387:  39%|███▊      | 387/1000 [15:12<24:05,  2.36s/it][Succeeded / Failed / Skipped / Total] 194 / 183 / 10 / 387:  39%|███▉      | 388/1000 [15:14<24:02,  2.36s/it][Succeeded / Failed / Skipped / Total] 194 / 184 / 10 / 388:  39%|███▉      | 388/1000 [15:14<24:02,  2.36s/it][Succeeded / Failed / Skipped / Total] 194 / 184 / 10 / 388:  39%|███▉      | 389/1000 [15:16<23:59,  2.36s/it][Succeeded / Failed / Skipped / Total] 194 / 185 / 10 / 389:  39%|███▉      | 389/1000 [15:16<23:59,  2.36s/it][Succeeded / Failed / Skipped / Total] 194 / 185 / 10 / 389:  39%|███▉      | 390/1000 [15:16<23:53,  2.35s/it][Succeeded / Failed / Skipped / Total] 194 / 185 / 11 / 390:  39%|███▉      | 390/1000 [15:16<23:53,  2.35s/it][Succeeded / Failed / Skipped / Total] 194 / 185 / 11 / 390:  39%|███▉      | 391/1000 [15:17<23:49,  2.35s/it][Succeeded / Failed / Skipped / Total] 195 / 185 / 11 / 391:  39%|███▉      | 391/1000 [15:17<23:49,  2.35s/it][Succeeded / Failed / Skipped / Total] 195 / 185 / 11 / 391:  39%|███▉      | 392/1000 [15:20<23:48,  2.35s/it]Checks if the given className is a parent node . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String className ) { return ( parent != null && parent . shouldBeSkipped ( className ) ) || classNamesToSkip . contains ( className ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[procedure]] ( String className ) { return ( parent != null && parent . shouldBeSkipped ( className ) ) || classNamesToSkip . contains ( className ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 384 ---------------------------------------------
Create a message with the given arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , String [[messageFormat]] , Object ... arguments ) { return [[create]] ( cause , ImmutableList . of ( ) , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[system]] ( Throwable cause , String [[procedure]] , Object ... arguments ) { return [[system]] ( cause , ImmutableList . of ( ) , [[procedure]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 385 ---------------------------------------------
Runs the command line . --> Entry point to the class --> Socre: 1.0

[[[[Adv]]]]: public static void main ( String [ ] [[args]] ) throws Exception { if ( [[args]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[module]] = ( Module ) Class . forName ( [[args]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( [[module]] ) ; manage ( [[args]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void main ( String [ ] [[a]] ) throws Exception { if ( [[a]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[manager]] = ( Module ) Class . forName ( [[a]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( [[manager]] ) ; manage ( [[a]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 386 ---------------------------------------------
Return the object of the module class name . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[function]] ( List < String > [[empty]] ) { Preconditions . checkNotNull ( [[empty]] , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : [[empty]] ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 387 ---------------------------------------------
Prunes a stack trace . --> [[[FAILED]]]

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable [[t]] = throwable ; [[t]] != null ; [[t]] = [[t]] . getCause ( ) ) { StackTraceElement [ ] [[stackTrace]] = [[t]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[stackTrace]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[t]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable [[element]] = throwable ; [[element]] != null ; [[element]] = [[element]] . getCause ( ) ) { StackTraceElement [ ] [[b]] = [[element]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[b]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[element]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 388 ---------------------------------------------
Creates an instance of Initializable . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[print]] ( final T [[x]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[x]] ; } @ Override public String toString ( ) { return String . valueOf ( [[x]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 389 ---------------------------------------------
Creates a message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String [[message]] = format ( messageFormat , arguments ) ; return new Message ( sources , [[message]] , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[model]] ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String [[method]] = format ( messageFormat , arguments ) ; return new Message ( sources , [[method]] , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 390 ---------------------------------------------
Throws unchecked exception . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 391 ---------------------------------------------
Pushes the current state . --> loop a source loop --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > [[key]] , Object source ) { doPushState ( [[key]] , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[loop]] ( com . google . inject . Key < ? > [[node]] , Object source ) { doPushState ( [[node]] , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 392 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 196 / 185 / 11 / 392:  39%|███▉      | 392/1000 [15:20<23:48,  2.35s/it][Succeeded / Failed / Skipped / Total] 196 / 185 / 11 / 392:  39%|███▉      | 393/1000 [15:29<23:55,  2.36s/it][Succeeded / Failed / Skipped / Total] 196 / 186 / 11 / 393:  39%|███▉      | 393/1000 [15:29<23:55,  2.36s/it][Succeeded / Failed / Skipped / Total] 196 / 186 / 11 / 393:  39%|███▉      | 394/1000 [15:32<23:54,  2.37s/it][Succeeded / Failed / Skipped / Total] 196 / 187 / 11 / 394:  39%|███▉      | 394/1000 [15:32<23:54,  2.37s/it][Succeeded / Failed / Skipped / Total] 196 / 187 / 11 / 394:  40%|███▉      | 395/1000 [15:35<23:52,  2.37s/it][Succeeded / Failed / Skipped / Total] 197 / 187 / 11 / 395:  40%|███▉      | 395/1000 [15:35<23:52,  2.37s/it][Succeeded / Failed / Skipped / Total] 197 / 187 / 11 / 395:  40%|███▉      | 396/1000 [15:36<23:47,  2.36s/it][Succeeded / Failed / Skipped / Total] 198 / 187 / 11 / 396:  40%|███▉      | 396/1000 [15:36<23:47,  2.36s/it][Succeeded / Failed / Skipped / Total] 198 / 187 / 11 / 396:  40%|███▉      | 397/1000 [15:41<23:50,  2.37s/it][Succeeded / Failed / Skipped / Total] 198 / 188 / 11 / 397:  40%|███▉      | 397/1000 [15:41<23:50,  2.37s/it][Succeeded / Failed / Skipped / Total] 198 / 188 / 11 / 397:  40%|███▉      | 398/1000 [15:43<23:47,  2.37s/it][Succeeded / Failed / Skipped / Total] 199 / 188 / 11 / 398:  40%|███▉      | 398/1000 [15:43<23:47,  2.37s/it][Succeeded / Failed / Skipped / Total] 199 / 188 / 11 / 398:  40%|███▉      | 399/1000 [15:44<23:42,  2.37s/it]Returns the provider for the given dependency . --> End the provider --> Socre: 1.0

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T [[t]] = provider . get ( ) ; if ( [[t]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( [[t]] ) ; return [[t]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[end]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T [[bar]] = provider . get ( ) ; if ( [[bar]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( [[bar]] ) ; return [[bar]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 393 ---------------------------------------------
Pushes a dependency . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > [[dependency]] , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = [[dependency]] ; doPushState ( [[dependency]] , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > [[client]] , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = [[client]] ; doPushState ( [[client]] , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 394 ---------------------------------------------
Register the default processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > [[processor]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[processor]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[main]] ( RemotingProcessor < ? > [[data]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[data]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 395 ---------------------------------------------
Tries to get the given url . --> Returns the specified Url . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[a]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 396 ---------------------------------------------
Executes the given RunStateRecordedFutureTask --> RunStateRecordedFutureTask . --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[start]] > [[start]] getFutureTaskResult ( RunStateRecordedFutureTask < [[start]] > task , Logger logger ) { [[start]] [[still]] = null ; if ( null != task ) { try { [[still]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[still]] ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 397 ---------------------------------------------
Registers a processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode cmdCode , RemotingProcessor < ? > [[processor]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[processor]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[processor]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[controller]] ( CommandCode cmdCode , RemotingProcessor < ? > [[i]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[i]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[i]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 398 ---------------------------------------------
Scans the connection pool . --> Gracefully stop expired tasks . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[scan]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void [[ask]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 399 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 199 / 189 / 11 / 399:  40%|███▉      | 399/1000 [15:44<23:42,  2.37s/it][Succeeded / Failed / Skipped / Total] 199 / 189 / 11 / 399:  40%|████      | 400/1000 [15:44<23:37,  2.36s/it][Succeeded / Failed / Skipped / Total] 200 / 189 / 11 / 400:  40%|████      | 400/1000 [15:44<23:37,  2.36s/it][Succeeded / Failed / Skipped / Total] 200 / 189 / 11 / 400:  40%|████      | 401/1000 [15:48<23:36,  2.36s/it][Succeeded / Failed / Skipped / Total] 201 / 189 / 11 / 401:  40%|████      | 401/1000 [15:48<23:36,  2.36s/it][Succeeded / Failed / Skipped / Total] 201 / 189 / 11 / 401:  40%|████      | 402/1000 [15:48<23:30,  2.36s/it][Succeeded / Failed / Skipped / Total] 202 / 189 / 11 / 402:  40%|████      | 402/1000 [15:48<23:30,  2.36s/it][Succeeded / Failed / Skipped / Total] 202 / 189 / 11 / 402:  40%|████      | 403/1000 [15:49<23:26,  2.36s/it][Succeeded / Failed / Skipped / Total] 203 / 189 / 11 / 403:  40%|████      | 403/1000 [15:49<23:26,  2.36s/it][Succeeded / Failed / Skipped / Total] 203 / 189 / 11 / 403:  40%|████      | 404/1000 [15:49<23:20,  2.35s/it][Succeeded / Failed / Skipped / Total] 203 / 190 / 11 / 404:  40%|████      | 404/1000 [15:49<23:20,  2.35s/it][Succeeded / Failed / Skipped / Total] 203 / 190 / 11 / 404:  40%|████      | 405/1000 [15:49<23:15,  2.35s/it][Succeeded / Failed / Skipped / Total] 204 / 190 / 11 / 405:  40%|████      | 405/1000 [15:49<23:15,  2.35s/it][Succeeded / Failed / Skipped / Total] 204 / 190 / 11 / 405:  41%|████      | 406/1000 [15:50<23:10,  2.34s/it][Succeeded / Failed / Skipped / Total] 205 / 190 / 11 / 406:  41%|████      | 406/1000 [15:50<23:10,  2.34s/it][Succeeded / Failed / Skipped / Total] 205 / 190 / 11 / 406:  41%|████      | 407/1000 [15:51<23:06,  2.34s/it]Adds a connection event processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( type ) ; if ( [[processorList]] == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[processorList]] = this . processors . get ( type ) ; } [[processorList]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[node]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[domain]] = this . processors . get ( type ) ; if ( [[domain]] == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[domain]] = this . processors . get ( type ) ; } [[domain]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 400 ---------------------------------------------
Decodes protocol code . --> Create a new ProtocolCode . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf [[in]] ) { if ( [[in]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[in]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[x]] ( ByteBuf [[bytes]] ) { if ( [[bytes]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[bytes]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 401 ---------------------------------------------
Sets the processor . --> Set the connection event handler --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection [[conn]] ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( type ) ; if ( [[processorList]] != null ) { for ( ConnectionEventProcessor [[processor]] : [[processorList]] ) { [[processor]] . onEvent ( remoteAddr , [[conn]] ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection [[handler]] ) { List < ConnectionEventProcessor > [[com]] = this . processors . get ( type ) ; if ( [[com]] != null ) { for ( ConnectionEventProcessor [[index]] : [[com]] ) { [[index]] . onEvent ( remoteAddr , [[handler]] ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 402 ---------------------------------------------
Create a new Connection getAnd instance --> Opens a connection access --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[access]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 403 ---------------------------------------------
Create connection andHeal ifNeed --> Add a new Url --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[add]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 404 ---------------------------------------------
Get the default processor --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[cmdCode]] ) ; if ( processor != null ) { return processor ; } return this . [[defaultProcessor]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[assume]] ( CommandCode [[d]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[d]] ) ; if ( processor != null ) { return processor ; } return this . [[source]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 405 ---------------------------------------------
Remove a task . --> Reads a connection pool . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[array]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 406 ---------------------------------------------
Get all connections . --> Changes the connection pool --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > [[allConnections]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { [[allConnections]] . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return [[allConnections]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[change]] ( ) { Map < String , List < Connection > > [[configuration]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { [[configuration]] . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return [[configuration]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 407 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 206 / 190 / 11 / 407:  41%|████      | 407/1000 [15:51<23:06,  2.34s/it][Succeeded / Failed / Skipped / Total] 206 / 190 / 11 / 407:  41%|████      | 408/1000 [15:53<23:03,  2.34s/it][Succeeded / Failed / Skipped / Total] 207 / 190 / 11 / 408:  41%|████      | 408/1000 [15:53<23:03,  2.34s/it][Succeeded / Failed / Skipped / Total] 207 / 190 / 11 / 408:  41%|████      | 409/1000 [15:54<22:59,  2.33s/it][Succeeded / Failed / Skipped / Total] 208 / 190 / 11 / 409:  41%|████      | 409/1000 [15:54<22:59,  2.33s/it][Succeeded / Failed / Skipped / Total] 208 / 190 / 11 / 409:  41%|████      | 410/1000 [15:56<22:56,  2.33s/it][Succeeded / Failed / Skipped / Total] 209 / 190 / 11 / 410:  41%|████      | 410/1000 [15:56<22:56,  2.33s/it][Succeeded / Failed / Skipped / Total] 209 / 190 / 11 / 410:  41%|████      | 411/1000 [15:58<22:53,  2.33s/it][Succeeded / Failed / Skipped / Total] 210 / 190 / 11 / 411:  41%|████      | 411/1000 [15:58<22:53,  2.33s/it][Succeeded / Failed / Skipped / Total] 210 / 190 / 11 / 411:  41%|████      | 412/1000 [16:02<22:54,  2.34s/it][Succeeded / Failed / Skipped / Total] 211 / 190 / 11 / 412:  41%|████      | 412/1000 [16:02<22:54,  2.34s/it][Succeeded / Failed / Skipped / Total] 211 / 190 / 11 / 412:  41%|████▏     | 413/1000 [16:03<22:49,  2.33s/it]Creates a unique Url if it exists . --> Synchronized . --> Socre: 1.0

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool pool , Url [[url]] ) throws RemotingException , InterruptedException { String poolKey = [[url]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool pool , Url [[name]] ) throws RemotingException , InterruptedException { String poolKey = [[name]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 408 ---------------------------------------------
Close connection . --> Closes the connection . --> Socre: 1.0

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url [[url]] = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( [[url]] . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url [[access]] = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( [[access]] . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 409 ---------------------------------------------
Create a new connection . --> Checks if the connection is warmup . --> Socre: 1.0

[[[[Adv]]]]: private void [[doCreate]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void [[assume]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 410 ---------------------------------------------
Called when the server is closed . --> Move to next --> Socre: 1.0

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[next]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 411 ---------------------------------------------
dispatch to user processor --> c . --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[c]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 412 ---------------------------------------------
Pre - process shoting context --> Sets the current timestamp . --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[alice]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 413 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 212 / 190 / 11 / 413:  41%|████▏     | 413/1000 [16:03<22:49,  2.33s/it][Succeeded / Failed / Skipped / Total] 212 / 190 / 11 / 413:  41%|████▏     | 414/1000 [16:04<22:45,  2.33s/it][Succeeded / Failed / Skipped / Total] 213 / 190 / 11 / 414:  41%|████▏     | 414/1000 [16:04<22:45,  2.33s/it][Succeeded / Failed / Skipped / Total] 213 / 190 / 11 / 414:  42%|████▏     | 415/1000 [16:08<22:44,  2.33s/it][Succeeded / Failed / Skipped / Total] 214 / 190 / 11 / 415:  42%|████▏     | 415/1000 [16:08<22:44,  2.33s/it][Succeeded / Failed / Skipped / Total] 214 / 190 / 11 / 415:  42%|████▏     | 416/1000 [16:09<22:40,  2.33s/it][Succeeded / Failed / Skipped / Total] 215 / 190 / 11 / 416:  42%|████▏     | 416/1000 [16:09<22:40,  2.33s/it][Succeeded / Failed / Skipped / Total] 215 / 190 / 11 / 416:  42%|████▏     | 417/1000 [16:13<22:40,  2.33s/it]Deserialize the RpcRequestCommand . --> Add a RpcRequestCommand . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[add]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 414 ---------------------------------------------
Called by the server . --> Wait for a RpcRequestCommand --> Socre: 1.0

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel [[channel]] = channelCtx . channel ( ) ; if ( null != [[channel]] ) { remoteAddr = RemotingUtil . parseRemoteAddress ( [[channel]] ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel [[link]] = channelCtx . channel ( ) ; if ( null != [[link]] ) { remoteAddr = RemotingUtil . parseRemoteAddress ( [[link]] ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 415 ---------------------------------------------
Log a log message --> Start a new call . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[b]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 416 ---------------------------------------------
Registers a user processor . --> Registers a UserProcessor --> Socre: 1.0

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[processor]] instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) [[processor]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[processor]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[processor]] . interest ( ) , [[processor]] ) ; if ( preProcessor != null ) { String [[errMsg]] = "Processor with interest key [" + [[processor]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[errMsg]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > [[x]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[x]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[x]] instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) [[x]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[x]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[x]] . interest ( ) , [[x]] ) ; if ( preProcessor != null ) { String [[array]] = "Processor with interest key [" + [[x]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[array]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 417 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 215 / 191 / 11 / 417:  42%|████▏     | 417/1000 [16:13<22:40,  2.33s/it][Succeeded / Failed / Skipped / Total] 215 / 191 / 11 / 417:  42%|████▏     | 418/1000 [16:16<22:39,  2.34s/it][Succeeded / Failed / Skipped / Total] 216 / 191 / 11 / 418:  42%|████▏     | 418/1000 [16:16<22:39,  2.34s/it][Succeeded / Failed / Skipped / Total] 216 / 191 / 11 / 418:  42%|████▏     | 419/1000 [16:17<22:35,  2.33s/it][Succeeded / Failed / Skipped / Total] 217 / 191 / 11 / 419:  42%|████▏     | 419/1000 [16:17<22:35,  2.33s/it][Succeeded / Failed / Skipped / Total] 217 / 191 / 11 / 419:  42%|████▏     | 420/1000 [16:19<22:33,  2.33s/it][Succeeded / Failed / Skipped / Total] 217 / 192 / 11 / 420:  42%|████▏     | 420/1000 [16:19<22:33,  2.33s/it][Succeeded / Failed / Skipped / Total] 217 / 192 / 11 / 420:  42%|████▏     | 421/1000 [16:20<22:28,  2.33s/it][Succeeded / Failed / Skipped / Total] 218 / 192 / 11 / 421:  42%|████▏     | 421/1000 [16:20<22:28,  2.33s/it][Succeeded / Failed / Skipped / Total] 218 / 192 / 11 / 421:  42%|████▏     | 422/1000 [16:21<22:24,  2.33s/it]Sets attribute in attribute map . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String key , Object [[value]] ) { return attributes . putIfAbsent ( key , [[value]] ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[field]] ( String key , Object [[key]] ) { return attributes . putIfAbsent ( key , [[key]] ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 418 ---------------------------------------------
Invoked when a remote address is received . --> Called when a remote address is received --> Socre: 1.0

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[f]] ) throws Exception { if ( ! [[f]] . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , [[f]] . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[run]] ) throws Exception { if ( ! [[run]] . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , [[run]] . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 419 ---------------------------------------------
Converts a BitSet to a byte . --> Returns the value of the specified BitSet . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[bus]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 420 ---------------------------------------------
Formats messages for a heading . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > errorMessages ) { Formatter [[fmt]] = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; [[fmt]] . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( [[fmt]] , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; [[fmt]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int [[causeIdx]] = causes . get ( causeEquivalence ) ; [[fmt]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , [[causeIdx]] ) ; } } [[fmt]] . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { [[fmt]] . format ( "1 error" ) ; } else { [[fmt]] . format ( "%s errors" , errorMessages . size ( ) ) ; } return [[fmt]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[method]] ( String heading , Collection < Message > errorMessages ) { Formatter [[method]] = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; [[method]] . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( [[method]] , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; [[method]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int [[name]] = causes . get ( causeEquivalence ) ; [[method]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , [[name]] ) ; } } [[method]] . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { [[method]] . format ( "1 error" ) ; } else { [[method]] . format ( "%s errors" , errorMessages . size ( ) ) ; } return [[method]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 421 ---------------------------------------------
Converts value into a bit set . --> Sets the number of bytes in the range . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet [[toBitSet]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet [[ab]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 422 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 219 / 192 / 11 / 422:  42%|████▏     | 422/1000 [16:21<22:24,  2.33s/it][Succeeded / Failed / Skipped / Total] 219 / 192 / 11 / 422:  42%|████▏     | 423/1000 [16:22<22:19,  2.32s/it][Succeeded / Failed / Skipped / Total] 219 / 192 / 12 / 423:  42%|████▏     | 423/1000 [16:22<22:19,  2.32s/it][Succeeded / Failed / Skipped / Total] 219 / 192 / 12 / 423:  42%|████▏     | 424/1000 [16:22<22:15,  2.32s/it][Succeeded / Failed / Skipped / Total] 220 / 192 / 12 / 424:  42%|████▏     | 424/1000 [16:22<22:15,  2.32s/it][Succeeded / Failed / Skipped / Total] 221 / 192 / 12 / 425:  42%|████▎     | 425/1000 [16:22<22:09,  2.31s/it][Succeeded / Failed / Skipped / Total] 221 / 192 / 12 / 425:  43%|████▎     | 426/1000 [16:22<22:04,  2.31s/it][Succeeded / Failed / Skipped / Total] 221 / 192 / 13 / 426:  43%|████▎     | 426/1000 [16:22<22:04,  2.31s/it][Succeeded / Failed / Skipped / Total] 221 / 193 / 13 / 427:  43%|████▎     | 427/1000 [16:23<21:59,  2.30s/it][Succeeded / Failed / Skipped / Total] 221 / 193 / 13 / 427:  43%|████▎     | 428/1000 [16:28<22:00,  2.31s/it]Add a url to the pool --> Adds a URL to the pool . --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[apache]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 423 ---------------------------------------------
Monitors all of the existing connection pools . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 424 ---------------------------------------------
Stop the timer . --> Called after the connection has started . --> Socre: 1.0

[[[[Adv]]]]: public void [[stop]] ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void [[after]] ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 425 ---------------------------------------------
Register a UserProcessor --> loop a MultiInterestUserProcessor --> Socre: 1.0

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[loop]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 426 ---------------------------------------------
Gets a boolean value . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean getBool ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 427 ---------------------------------------------
Close the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "[[True]]" == "[[True]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[notification]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "[[counter]]" == "[[counter]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 428 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 222 / 193 / 13 / 428:  43%|████▎     | 428/1000 [16:28<22:00,  2.31s/it][Succeeded / Failed / Skipped / Total] 223 / 193 / 13 / 429:  43%|████▎     | 429/1000 [16:28<21:55,  2.30s/it][Succeeded / Failed / Skipped / Total] 223 / 193 / 13 / 429:  43%|████▎     | 430/1000 [16:28<21:50,  2.30s/it][Succeeded / Failed / Skipped / Total] 224 / 193 / 13 / 430:  43%|████▎     | 430/1000 [16:28<21:50,  2.30s/it][Succeeded / Failed / Skipped / Total] 224 / 193 / 14 / 431:  43%|████▎     | 431/1000 [16:28<21:45,  2.29s/it][Succeeded / Failed / Skipped / Total] 224 / 193 / 14 / 431:  43%|████▎     | 432/1000 [16:35<21:49,  2.30s/it][Succeeded / Failed / Skipped / Total] 225 / 193 / 14 / 432:  43%|████▎     | 432/1000 [16:35<21:49,  2.30s/it][Succeeded / Failed / Skipped / Total] 226 / 193 / 14 / 433:  43%|████▎     | 433/1000 [16:40<21:49,  2.31s/it][Succeeded / Failed / Skipped / Total] 226 / 193 / 14 / 433:  43%|████▎     | 434/1000 [16:41<21:45,  2.31s/it][Succeeded / Failed / Skipped / Total] 226 / 194 / 14 / 434:  43%|████▎     | 434/1000 [16:41<21:45,  2.31s/it]Filter the connections . --> Returns a map of connection names . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[filter]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[after]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 429 ---------------------------------------------
Executes the given executor . --> Execute a given ExecutorService --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[process]] ( RemotingContext ctx , T [[msg]] , ExecutorService [[defaultExecutor]] ) throws Exception { ProcessTask [[task]] = new ProcessTask ( ctx , [[msg]] ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[task]] ) ; } else { [[defaultExecutor]] . execute ( [[task]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void [[foo]] ( RemotingContext ctx , T [[l]] , ExecutorService [[service]] ) throws Exception { ProcessTask [[sequence]] = new ProcessTask ( ctx , [[l]] ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[sequence]] ) ; } else { [[service]] . execute ( [[sequence]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 430 ---------------------------------------------
Log info log --> Fills the logger . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[after]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 431 ---------------------------------------------
Returns the value associated with the key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 432 ---------------------------------------------
Returns a random connection . --> Takes a list of conns and returns it . --> Socre: 1.0

[[[[Adv]]]]: private Connection [[randomGet]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection [[buffer]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 433 ---------------------------------------------
Returns the property value for the given key . --> Returns the named declaration . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[declaration]] ( String [[assignment]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[assignment]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 434 ---------------------------------------------
Returns the user processor . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . [[userProcessors]] . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[are]] ( String [[data]] ) { return StringUtils . isBlank ( [[data]] ) ? null : this . [[c]] . get ( [[data]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 435 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 227 / 194 / 14 / 435:  44%|████▎     | 435/1000 [16:43<21:42,  2.31s/it][Succeeded / Failed / Skipped / Total] 227 / 194 / 14 / 435:  44%|████▎     | 436/1000 [16:47<21:43,  2.31s/it][Succeeded / Failed / Skipped / Total] 228 / 194 / 14 / 436:  44%|████▎     | 436/1000 [16:47<21:43,  2.31s/it][Succeeded / Failed / Skipped / Total] 229 / 194 / 14 / 437:  44%|████▎     | 437/1000 [16:48<21:38,  2.31s/it][Succeeded / Failed / Skipped / Total] 229 / 194 / 14 / 437:  44%|████▍     | 438/1000 [16:49<21:35,  2.31s/it][Succeeded / Failed / Skipped / Total] 230 / 194 / 14 / 438:  44%|████▍     | 438/1000 [16:49<21:35,  2.31s/it][Succeeded / Failed / Skipped / Total] 231 / 194 / 14 / 439:  44%|████▍     | 439/1000 [16:50<21:31,  2.30s/it][Succeeded / Failed / Skipped / Total] 231 / 194 / 14 / 439:  44%|████▍     | 440/1000 [16:54<21:31,  2.31s/it][Succeeded / Failed / Skipped / Total] 232 / 194 / 14 / 440:  44%|████▍     | 440/1000 [16:54<21:31,  2.31s/it]Closes the service off connections . --> Closes FreshSelectManager . --> Socre: 1.0

[[[[Adv]]]]: private void closeFreshSelectConnections ( Connection [[lastSelectConnect]] , List < Connection > [[serviceOffConnections]] ) throws InterruptedException { if ( null != [[lastSelectConnect]] ) { if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( [[lastSelectConnect]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( [[lastSelectConnect]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[lastSelectConnect]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void closeFreshSelectConnections ( Connection [[manager]] , List < Connection > [[index]] ) throws InterruptedException { if ( null != [[manager]] ) { if ( [[manager]] . isInvokeFutureMapFinish ( ) ) { [[index]] . add ( [[manager]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[manager]] . isInvokeFutureMapFinish ( ) ) { [[index]] . add ( [[manager]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[manager]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 436 ---------------------------------------------
Returns detail message . --> Gets detailErrMsg . --> Socre: 1.0

[[[[Adv]]]]: private static String detailErrMsg ( String [[clientErrMsg]] , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[clientErrMsg]] , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[clientErrMsg]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String detailErrMsg ( String [[address]] , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[address]] , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[address]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 437 ---------------------------------------------
Gets the response object . --> get the ResponseCommand --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[response]] = ( RpcResponseCommand ) responseCommand ; [[response]] . deserialize ( ) ; return [[response]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[example]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[v]] = ( RpcResponseCommand ) responseCommand ; [[v]] . deserialize ( ) ; return [[v]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 438 ---------------------------------------------
Create a server exception . --> Generates a RpcServerException --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable t , String errMsg ) { String [[formattedErrMsg]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( [[formattedErrMsg]] ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable t , String errMsg ) { String [[q]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( [[q]] ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 439 ---------------------------------------------
Checks whether the request is timeout . --> Returns a boolean value indicating if there is no more data . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . [[rpcCommandType]] != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . [[arriveTimestamp]] ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[array]] ( ) { if ( this . timeout > 0 && ( this . [[request]] != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . [[data]] ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 440 ---------------------------------------------
Print the connection trace log --> A utility method to perform a logging request . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[a]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 441 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 232 / 195 / 14 / 441:  44%|████▍     | 441/1000 [16:54<21:26,  2.30s/it][Succeeded / Failed / Skipped / Total] 232 / 195 / 14 / 441:  44%|████▍     | 442/1000 [16:59<21:26,  2.31s/it][Succeeded / Failed / Skipped / Total] 233 / 195 / 14 / 442:  44%|████▍     | 442/1000 [16:59<21:26,  2.31s/it][Succeeded / Failed / Skipped / Total] 233 / 196 / 14 / 443:  44%|████▍     | 443/1000 [17:05<21:29,  2.32s/it][Succeeded / Failed / Skipped / Total] 233 / 196 / 14 / 443:  44%|████▍     | 444/1000 [17:07<21:26,  2.31s/it][Succeeded / Failed / Skipped / Total] 233 / 197 / 14 / 444:  44%|████▍     | 444/1000 [17:07<21:26,  2.31s/it][Succeeded / Failed / Skipped / Total] 233 / 198 / 14 / 445:  44%|████▍     | 445/1000 [17:07<21:21,  2.31s/it][Succeeded / Failed / Skipped / Total] 233 / 198 / 14 / 445:  45%|████▍     | 446/1000 [17:09<21:19,  2.31s/it][Succeeded / Failed / Skipped / Total] 233 / 199 / 14 / 446:  45%|████▍     | 446/1000 [17:09<21:19,  2.31s/it][Succeeded / Failed / Skipped / Total] 233 / 200 / 14 / 447:  45%|████▍     | 447/1000 [17:10<21:15,  2.31s/it][Succeeded / Failed / Skipped / Total] 233 / 200 / 14 / 447:  45%|████▍     | 448/1000 [17:10<21:10,  2.30s/it][Succeeded / Failed / Skipped / Total] 233 / 201 / 14 / 448:  45%|████▍     | 448/1000 [17:10<21:10,  2.30s/it]Resolves a response object . --> [[[FAILED]]]

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String [[addr]] ) throws RemotingException { preProcess ( responseCommand , [[addr]] ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String [[msg]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , [[addr]] , responseCommand . getId ( ) ) ; logger . warn ( [[msg]] ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( [[msg]] , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( [[msg]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[a]] ( ResponseCommand responseCommand , String [[response]] ) throws RemotingException { preProcess ( responseCommand , [[response]] ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String [[data]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , [[response]] , responseCommand . getId ( ) ) ; logger . warn ( [[data]] ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( [[data]] , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( [[data]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 442 ---------------------------------------------
Converts a ResponseCommand to a throwable . --> get the call assignment --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) responseCommand ; [[resp]] . deserialize ( ) ; Object ex = [[resp]] . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[assignment]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[t]] = ( RpcResponseCommand ) responseCommand ; [[t]] . deserialize ( ) ; Object ex = [[t]] . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 443 ---------------------------------------------
Parse the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = channel . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[assignment]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[x]] = channel . remoteAddress ( ) ; return doParse ( [[x]] != null ? [[x]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 444 ---------------------------------------------
Performs a leader command . --> [[[FAILED]]]

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object [[request]] , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( [[request]] ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[operations]] ( Object [[bar]] , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( [[bar]] ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 445 ---------------------------------------------
Parses local address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[channel]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[assignment]] ( final Channel [[bus]] ) { if ( null == [[bus]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[bus]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
New EventLoopGroup . --> [[[FAILED]]]

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 447 ---------------------------------------------
Parse a remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[above]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[p]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[p]] != null ) { return [[p]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Parse the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[base]] ( final Channel [[base]] ) { if ( null == [[base]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[base]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
[Succeeded / Failed / Skipped / Total] 233 / 202 / 14 / 449:  45%|████▍     | 449/1000 [17:16<21:12,  2.31s/it][Succeeded / Failed / Skipped / Total] 233 / 202 / 14 / 449:  45%|████▌     | 450/1000 [17:17<21:08,  2.31s/it][Succeeded / Failed / Skipped / Total] 234 / 202 / 14 / 450:  45%|████▌     | 450/1000 [17:17<21:08,  2.31s/it][Succeeded / Failed / Skipped / Total] 235 / 202 / 14 / 451:  45%|████▌     | 451/1000 [17:19<21:05,  2.31s/it][Succeeded / Failed / Skipped / Total] 235 / 202 / 14 / 451:  45%|████▌     | 452/1000 [17:21<21:02,  2.30s/it][Succeeded / Failed / Skipped / Total] 235 / 203 / 14 / 452:  45%|████▌     | 452/1000 [17:21<21:02,  2.30s/it][Succeeded / Failed / Skipped / Total] 235 / 204 / 14 / 453:  45%|████▌     | 453/1000 [17:21<20:57,  2.30s/it][Succeeded / Failed / Skipped / Total] 235 / 204 / 14 / 453:  45%|████▌     | 454/1000 [17:26<20:58,  2.30s/it]--------------------------------------------- Result 449 ---------------------------------------------
Parse local IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[on]] ( final Channel [[definition]] ) { if ( null == [[definition]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[condition]] = ( InetSocketAddress ) [[definition]] . localAddress ( ) ; if ( [[condition]] != null ) { return [[condition]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Returns the connection . --> Returns the length of the snapshot . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[length]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 451 ---------------------------------------------
Adds a connection . --> Adds access . --> Socre: 1.0

[[[[Adv]]]]: public void add ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[connection]] ) ; if ( res ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void add ( Connection [[access]] ) { markAccess ( ) ; if ( null == [[access]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[access]] ) ; if ( res ) { [[access]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 452 ---------------------------------------------
Invokes a request with a callback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout [[timeout]] = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout [[timeout]] ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( [[timeout]] ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout [[id]] = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout [[identification]] ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( [[id]] ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 453 ---------------------------------------------
Parse remote port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[command]] ( final Channel [[access]] ) { if ( null == [[access]] ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) [[access]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 454 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 236 / 204 / 14 / 454:  45%|████▌     | 454/1000 [17:26<20:58,  2.30s/it][Succeeded / Failed / Skipped / Total] 236 / 205 / 14 / 455:  46%|████▌     | 455/1000 [17:26<20:53,  2.30s/it][Succeeded / Failed / Skipped / Total] 236 / 205 / 14 / 455:  46%|████▌     | 456/1000 [17:27<20:49,  2.30s/it][Succeeded / Failed / Skipped / Total] 237 / 205 / 14 / 456:  46%|████▌     | 456/1000 [17:27<20:49,  2.30s/it][Succeeded / Failed / Skipped / Total] 238 / 205 / 14 / 457:  46%|████▌     | 457/1000 [17:28<20:45,  2.29s/it][Succeeded / Failed / Skipped / Total] 238 / 205 / 14 / 457:  46%|████▌     | 458/1000 [17:30<20:43,  2.29s/it][Succeeded / Failed / Skipped / Total] 239 / 205 / 14 / 458:  46%|████▌     | 458/1000 [17:30<20:43,  2.29s/it][Succeeded / Failed / Skipped / Total] 240 / 205 / 14 / 459:  46%|████▌     | 459/1000 [17:33<20:41,  2.29s/it][Succeeded / Failed / Skipped / Total] 240 / 205 / 14 / 459:  46%|████▌     | 460/1000 [17:33<20:36,  2.29s/it][Succeeded / Failed / Skipped / Total] 240 / 206 / 14 / 460:  46%|████▌     | 460/1000 [17:33<20:36,  2.29s/it][Succeeded / Failed / Skipped / Total] 241 / 206 / 14 / 461:  46%|████▌     | 461/1000 [17:33<20:32,  2.29s/it][Succeeded / Failed / Skipped / Total] 241 / 206 / 14 / 461:  46%|████▌     | 462/1000 [17:34<20:28,  2.28s/it]Removes and closes connection . --> Remove and close date . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection connection ) { if ( null == connection ) { return ; } boolean [[res]] = this . [[conns]] . remove ( connection ) ; if ( [[res]] ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection connection ) { if ( null == connection ) { return ; } boolean [[function]] = this . [[date]] . remove ( connection ) ; if ( [[function]] ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 455 ---------------------------------------------
Parse the local port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[call]] ( final Channel [[end]] ) { if ( null == [[end]] ) { return - 1 ; } final InetSocketAddress [[version]] = ( InetSocketAddress ) [[end]] . localAddress ( ) ; if ( [[version]] != null ) { return [[version]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 456 ---------------------------------------------
Returns the CustomSerializer for the given command code . --> Gets user --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[user]] ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 457 ---------------------------------------------
Start the background thread --> Buffer the connection monitor . --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void [[buffer]] ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 458 ---------------------------------------------
Returns the custom serializer for the given class . --> Gets a CustomSerializer object from a String --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[where]] ( String [[number]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[number]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 459 ---------------------------------------------
Check if the remote address is connected . --> operator --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[operator]] ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 460 ---------------------------------------------
Parses an address to host IP . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress socketAddress ) { final InetSocketAddress [[addrs]] = ( InetSocketAddress ) socketAddress ; if ( [[addrs]] != null ) { InetAddress [[addr]] = [[addrs]] . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[foo]] ( SocketAddress socketAddress ) { final InetSocketAddress [[address]] = ( InetSocketAddress ) socketAddress ; if ( [[address]] != null ) { InetAddress [[name]] = [[address]] . getAddress ( ) ; if ( null != [[name]] ) { return [[name]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 461 ---------------------------------------------
Initializes the high water mark . --> Starts alarm . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[alarm]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 462 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 242 / 206 / 14 / 462:  46%|████▌     | 462/1000 [17:34<20:28,  2.28s/it][Succeeded / Failed / Skipped / Total] 243 / 206 / 14 / 463:  46%|████▋     | 463/1000 [17:35<20:23,  2.28s/it][Succeeded / Failed / Skipped / Total] 243 / 206 / 14 / 463:  46%|████▋     | 464/1000 [17:35<20:19,  2.28s/it][Succeeded / Failed / Skipped / Total] 244 / 206 / 14 / 464:  46%|████▋     | 464/1000 [17:35<20:19,  2.28s/it][Succeeded / Failed / Skipped / Total] 245 / 206 / 14 / 465:  46%|████▋     | 465/1000 [17:38<20:17,  2.28s/it][Succeeded / Failed / Skipped / Total] 245 / 206 / 14 / 465:  47%|████▋     | 466/1000 [17:40<20:14,  2.28s/it][Succeeded / Failed / Skipped / Total] 246 / 206 / 14 / 466:  47%|████▋     | 466/1000 [17:40<20:14,  2.28s/it][Succeeded / Failed / Skipped / Total] 247 / 206 / 14 / 467:  47%|████▋     | 467/1000 [17:40<20:10,  2.27s/it][Succeeded / Failed / Skipped / Total] 247 / 206 / 14 / 467:  47%|████▋     | 468/1000 [17:42<20:07,  2.27s/it][Succeeded / Failed / Skipped / Total] 247 / 207 / 14 / 468:  47%|████▋     | 468/1000 [17:42<20:07,  2.27s/it]Creates an abstract frame for the given opcode . --> Create an Framedata --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 [[get]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 [[an]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 463 ---------------------------------------------
Returns true if the channel is in the socket . --> Return true if a batch is connected . --> Socre: 1.0

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl [[ws]] , ByteChannel sockchannel ) throws IOException { if ( [[ws]] == null ) { return "False" != "False" ; } ByteBuffer buffer = [[ws]] . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl [[basic]] , ByteChannel sockchannel ) throws IOException { if ( [[basic]] == null ) { return "False" != "False" ; } ByteBuffer buffer = [[basic]] . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 464 ---------------------------------------------
Set the code to use . --> Adds a new int . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[example]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 465 ---------------------------------------------
Updates the payload . --> Read an argument . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[argument]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 466 ---------------------------------------------
Reads payload size limit . --> This method is called before payloadsize . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[before]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 467 ---------------------------------------------
Translate a single frame checkPacket size --> Incomplete frame . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[before]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 468 ---------------------------------------------
Register a custom serializer --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer serializer ) { CustomSerializer [[prevSerializer]] = classCustomSerializer . putIfAbsent ( [[className]] , serializer ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[test]] ( String [[reference]] , CustomSerializer serializer ) { CustomSerializer [[array]] = classCustomSerializer . putIfAbsent ( [[reference]] , serializer ) ; if ( [[array]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[reference]] + ", the custom serializer is: " + [[array]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 469 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 247 / 208 / 14 / 469:  47%|████▋     | 469/1000 [17:43<20:04,  2.27s/it][Succeeded / Failed / Skipped / Total] 247 / 208 / 14 / 469:  47%|████▋     | 470/1000 [17:43<19:59,  2.26s/it][Succeeded / Failed / Skipped / Total] 248 / 208 / 14 / 470:  47%|████▋     | 470/1000 [17:43<19:59,  2.26s/it][Succeeded / Failed / Skipped / Total] 249 / 208 / 14 / 471:  47%|████▋     | 471/1000 [17:45<19:56,  2.26s/it][Succeeded / Failed / Skipped / Total] 249 / 208 / 14 / 471:  47%|████▋     | 472/1000 [17:45<19:51,  2.26s/it][Succeeded / Failed / Skipped / Total] 250 / 208 / 14 / 472:  47%|████▋     | 472/1000 [17:45<19:51,  2.26s/it][Succeeded / Failed / Skipped / Total] 251 / 208 / 14 / 473:  47%|████▋     | 473/1000 [17:46<19:48,  2.25s/it][Succeeded / Failed / Skipped / Total] 251 / 208 / 14 / 473:  47%|████▋     | 474/1000 [17:47<19:44,  2.25s/it][Succeeded / Failed / Skipped / Total] 252 / 208 / 14 / 474:  47%|████▋     | 474/1000 [17:47<19:44,  2.25s/it][Succeeded / Failed / Skipped / Total] 253 / 208 / 14 / 475:  48%|████▊     | 475/1000 [17:50<19:42,  2.25s/it][Succeeded / Failed / Skipped / Total] 253 / 208 / 14 / 475:  48%|████▊     | 476/1000 [17:50<19:38,  2.25s/it][Succeeded / Failed / Skipped / Total] 254 / 208 / 14 / 476:  48%|████▊     | 476/1000 [17:50<19:38,  2.25s/it]Register a custom serializer . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode code , CustomSerializer serializer ) { CustomSerializer [[prevSerializer]] = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[main]] ( CommandCode code , CustomSerializer serializer ) { CustomSerializer [[c]] = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( [[c]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + [[c]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 470 ---------------------------------------------
Validate UTF - 8 --> Validates UTF - 8 . --> Socre: 1.0

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer payload , int [[mark]] ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( [[mark]] ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer payload , int [[array]] ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( [[array]] ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 471 ---------------------------------------------
Logs the websocket error . --> Logs an error message . --> Socre: 1.0

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException [[e]] ) { log . error ( "Runtime exception during onWebsocketMessage" , [[e]] ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , [[e]] ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException [[end]] ) { log . error ( "Runtime exception during onWebsocketMessage" , [[end]] ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , [[end]] ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 472 ---------------------------------------------
Process binary message --> Call webSocketImpl . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[call]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 473 ---------------------------------------------
Generates the final key for the given string . --> Computes the fix . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[fix]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 474 ---------------------------------------------
Process frame text . --> Captures message . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[capture]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 475 ---------------------------------------------
Process Close frame and nonFin . --> Handle an example --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode [[curop]] ) throws InvalidDataException { if ( [[curop]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[example]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode [[sequence]] ) throws InvalidDataException { if ( [[sequence]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 476 ---------------------------------------------
Process the Close frame code . --> Call this method . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[call]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
[Succeeded / Failed / Skipped / Total] 254 / 209 / 14 / 477:  48%|████▊     | 477/1000 [17:51<19:34,  2.25s/it][Succeeded / Failed / Skipped / Total] 254 / 209 / 14 / 477:  48%|████▊     | 478/1000 [17:52<19:31,  2.24s/it][Succeeded / Failed / Skipped / Total] 255 / 209 / 14 / 478:  48%|████▊     | 478/1000 [17:52<19:31,  2.24s/it][Succeeded / Failed / Skipped / Total] 256 / 209 / 14 / 479:  48%|████▊     | 479/1000 [17:54<19:28,  2.24s/it][Succeeded / Failed / Skipped / Total] 256 / 209 / 14 / 479:  48%|████▊     | 480/1000 [17:55<19:24,  2.24s/it][Succeeded / Failed / Skipped / Total] 257 / 209 / 14 / 480:  48%|████▊     | 480/1000 [17:55<19:24,  2.24s/it][Succeeded / Failed / Skipped / Total] 258 / 209 / 14 / 481:  48%|████▊     | 481/1000 [17:58<19:23,  2.24s/it][Succeeded / Failed / Skipped / Total] 258 / 209 / 14 / 481:  48%|████▊     | 482/1000 [17:58<19:19,  2.24s/it][Succeeded / Failed / Skipped / Total] 259 / 209 / 14 / 482:  48%|████▊     | 482/1000 [17:58<19:19,  2.24s/it]--------------------------------------------- Result 477 ---------------------------------------------
Checks if the requested protocol is NOT_MATCH . --> [[[FAILED]]]

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[client]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 478 ---------------------------------------------
Check the buffer limit . --> Inserts data . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[data]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 479 ---------------------------------------------
Returns the size of the buffers in bytes of this buffer . --> Start buffer . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[start]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 480 ---------------------------------------------
Process the frame from a Close frame . --> Method find . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl [[webSocketImpl]] , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[find]] ( WebSocketImpl [[net]] , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[net]] . getWebSocketListener ( ) . onWebsocketMessage ( [[net]] , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[net]] , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[net]] . getWebSocketListener ( ) . onWebsocketMessage ( [[net]] , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[net]] , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 481 ---------------------------------------------
Closes the connection toWrong handshake . --> Adds an exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[add]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 482 ---------------------------------------------
Process the Previous continuous frame . --> Buffer a new Framedata --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[buffer]] ( Framedata [[ng]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[ng]] ; addToBufferList ( [[ng]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 483 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 260 / 209 / 14 / 483:  48%|████▊     | 483/1000 [17:58<19:14,  2.23s/it][Succeeded / Failed / Skipped / Total] 260 / 209 / 14 / 483:  48%|████▊     | 484/1000 [17:58<19:10,  2.23s/it][Succeeded / Failed / Skipped / Total] 261 / 209 / 14 / 484:  48%|████▊     | 484/1000 [17:58<19:10,  2.23s/it][Succeeded / Failed / Skipped / Total] 262 / 209 / 14 / 485:  48%|████▊     | 485/1000 [18:00<19:06,  2.23s/it][Succeeded / Failed / Skipped / Total] 262 / 209 / 14 / 485:  49%|████▊     | 486/1000 [18:03<19:05,  2.23s/it][Succeeded / Failed / Skipped / Total] 262 / 210 / 14 / 486:  49%|████▊     | 486/1000 [18:03<19:05,  2.23s/it][Succeeded / Failed / Skipped / Total] 263 / 210 / 14 / 487:  49%|████▊     | 487/1000 [18:04<19:01,  2.23s/it][Succeeded / Failed / Skipped / Total] 263 / 210 / 14 / 487:  49%|████▉     | 488/1000 [18:04<18:57,  2.22s/it][Succeeded / Failed / Skipped / Total] 264 / 210 / 14 / 488:  49%|████▉     | 488/1000 [18:04<18:57,  2.22s/it][Succeeded / Failed / Skipped / Total] 265 / 210 / 14 / 489:  49%|████▉     | 489/1000 [18:04<18:53,  2.22s/it][Succeeded / Failed / Skipped / Total] 265 / 210 / 14 / 489:  49%|████▉     | 490/1000 [18:04<18:48,  2.21s/it]Translates the first lineTokens and line line . --> translateHandshake documentation --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] firstLineTokens , String [[line]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] firstLineTokens , String [[example]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 484 ---------------------------------------------
Decode the socket buffer . --> call socketBuffer --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[call]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 485 ---------------------------------------------
Close the connection asynchronously . --> Copies all exceptions . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[copy]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 486 ---------------------------------------------
Start the connect . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[call]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 487 ---------------------------------------------
Sends the given text to the Role . --> Sends a WebSocket request --> Socre: 1.0

[[[[Adv]]]]: @ Override public void send ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void send ( String [[element]] ) { if ( [[element]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( [[element]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 488 ---------------------------------------------
Private helper method for translate the handshake HTTP server . --> translateHandshakeHttpServer --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] [[firstLineTokens]] , String [[line]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] [[symbol]] , String [[object]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 489 ---------------------------------------------
Gets the data from the list . --> Ends this buffer . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { [[resultingByteBuffer]] . put ( buffer ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[end]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[segment]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[segment]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { [[segment]] . put ( buffer ) ; } } [[segment]] . flip ( ) ; return [[segment]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 490 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 266 / 210 / 14 / 490:  49%|████▉     | 490/1000 [18:04<18:48,  2.21s/it][Succeeded / Failed / Skipped / Total] 267 / 210 / 14 / 491:  49%|████▉     | 491/1000 [18:06<18:45,  2.21s/it][Succeeded / Failed / Skipped / Total] 267 / 210 / 14 / 491:  49%|████▉     | 492/1000 [18:06<18:41,  2.21s/it][Succeeded / Failed / Skipped / Total] 268 / 210 / 14 / 492:  49%|████▉     | 492/1000 [18:06<18:41,  2.21s/it][Succeeded / Failed / Skipped / Total] 269 / 210 / 14 / 493:  49%|████▉     | 493/1000 [18:09<18:40,  2.21s/it][Succeeded / Failed / Skipped / Total] 269 / 210 / 14 / 493:  49%|████▉     | 494/1000 [18:09<18:36,  2.21s/it]Reset the websocket thread . --> Start the websocket connection . --> Socre: 1.0

[[[[Adv]]]]: private void [[reset]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect

[[[[Adv]]]]: private void [[alert]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 491 ---------------------------------------------
Generates the socket s error code --> Generation of server --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int [[errorCode]] ) { String [[errorCodeDescription]] ; switch ( [[errorCode]] ) { case 404 : [[errorCodeDescription]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[errorCodeDescription]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[errorCodeDescription]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[errorCodeDescription]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[errorCodeDescription]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int [[b]] ) { String [[name]] ; switch ( [[b]] ) { case 404 : [[name]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[name]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[name]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[name]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[name]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 492 ---------------------------------------------
Sends a new handshake request --> Sends theHandshake . --> Socre: 1.0

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client [[handshake]] = new HandshakeImpl1Client ( ) ; [[handshake]] . setResourceDescriptor ( path ) ; [[handshake]] . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { [[handshake]] . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( [[handshake]] ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client [[c]] = new HandshakeImpl1Client ( ) ; [[c]] . setResourceDescriptor ( path ) ; [[c]] . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { [[c]] . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( [[c]] ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 493 ---------------------------------------------
Sets the connection lost timeout . --> Stops this connection . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[after]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 494 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 270 / 210 / 14 / 494:  49%|████▉     | 494/1000 [18:09<18:36,  2.21s/it][Succeeded / Failed / Skipped / Total] 271 / 210 / 14 / 495:  50%|████▉     | 495/1000 [18:09<18:31,  2.20s/it][Succeeded / Failed / Skipped / Total] 271 / 210 / 14 / 495:  50%|████▉     | 496/1000 [18:12<18:30,  2.20s/it][Succeeded / Failed / Skipped / Total] 272 / 210 / 14 / 496:  50%|████▉     | 496/1000 [18:12<18:30,  2.20s/it][Succeeded / Failed / Skipped / Total] 273 / 210 / 14 / 497:  50%|████▉     | 497/1000 [18:14<18:27,  2.20s/it][Succeeded / Failed / Skipped / Total] 273 / 210 / 14 / 497:  50%|████▉     | 498/1000 [18:14<18:23,  2.20s/it][Succeeded / Failed / Skipped / Total] 273 / 210 / 15 / 498:  50%|████▉     | 498/1000 [18:14<18:23,  2.20s/it][Succeeded / Failed / Skipped / Total] 274 / 210 / 15 / 499:  50%|████▉     | 499/1000 [18:14<18:19,  2.19s/it][Succeeded / Failed / Skipped / Total] 274 / 210 / 15 / 499:  50%|█████     | 500/1000 [18:15<18:15,  2.19s/it][Succeeded / Failed / Skipped / Total] 275 / 210 / 15 / 500:  50%|█████     | 500/1000 [18:15<18:15,  2.19s/it]Restarts the worker . --> Restart connectionLostTimer . --> Socre: 1.0

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[minimumPongTime]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , [[minimumPongTime]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[buffer]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , [[buffer]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 495 ---------------------------------------------
Stop the connection lost timer . --> Call this method . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[call]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 496 ---------------------------------------------
Cancel the lost timer . --> Call this method . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[call]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 497 ---------------------------------------------
Starts connection lost timer . --> Method loops . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "[[True]]" == "[[True]]" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[loops]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "[[path]]" == "[[path]]" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 498 ---------------------------------------------
Handle the given SelectionKey . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 499 ---------------------------------------------
Callback when web socket is received . --> Callback on websocket handshake handshake --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket conn , Draft draft , ClientHandshake [[request]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket conn , Draft draft , ClientHandshake [[design]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 500 ---------------------------------------------
Returns the port . --> dangling . --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[dangling]] ( ) { int [[scheme]] = uri . getPort ( ) ; if ( [[scheme]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[scheme]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 501 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 275 / 210 / 16 / 501:  50%|█████     | 501/1000 [18:15<18:11,  2.19s/it][Succeeded / Failed / Skipped / Total] 275 / 210 / 16 / 501:  50%|█████     | 502/1000 [18:15<18:07,  2.18s/it][Succeeded / Failed / Skipped / Total] 275 / 210 / 17 / 502:  50%|█████     | 502/1000 [18:15<18:07,  2.18s/it][Succeeded / Failed / Skipped / Total] 275 / 211 / 17 / 503:  50%|█████     | 503/1000 [18:19<18:06,  2.19s/it][Succeeded / Failed / Skipped / Total] 275 / 211 / 17 / 503:  50%|█████     | 504/1000 [18:19<18:02,  2.18s/it][Succeeded / Failed / Skipped / Total] 276 / 211 / 17 / 504:  50%|█████     | 504/1000 [18:19<18:02,  2.18s/it][Succeeded / Failed / Skipped / Total] 277 / 211 / 17 / 505:  50%|█████     | 505/1000 [18:20<17:58,  2.18s/it][Succeeded / Failed / Skipped / Total] 277 / 211 / 17 / 505:  51%|█████     | 506/1000 [18:21<17:55,  2.18s/it][Succeeded / Failed / Skipped / Total] 278 / 211 / 17 / 506:  51%|█████     | 506/1000 [18:21<17:55,  2.18s/it][Succeeded / Failed / Skipped / Total] 279 / 211 / 17 / 507:  51%|█████     | 507/1000 [18:22<17:51,  2.17s/it][Succeeded / Failed / Skipped / Total] 279 / 211 / 17 / 507:  51%|█████     | 508/1000 [18:23<17:48,  2.17s/it]Opens a WebSocket connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 502 ---------------------------------------------
doEnsureSingleutable --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 503 ---------------------------------------------
Get the server port . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[address]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 504 ---------------------------------------------
Read data from the socket . --> Adds the socket to the queue . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[add]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 505 ---------------------------------------------
Write a SelectionKey . --> Closes the socket . --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[after]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 506 ---------------------------------------------
Close server shutdown . --> Add the server . --> Socre: 1.0

[[[[Adv]]]]: private void [[doServerShutdown]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown

[[[[Adv]]]]: private void [[add]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 507 ---------------------------------------------
Reads a single key from the WebSocket . --> Reads data from the WebSocket . --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "[[copy]]" == "[[copy]]" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 508 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 280 / 211 / 17 / 508:  51%|█████     | 508/1000 [18:23<17:48,  2.17s/it][Succeeded / Failed / Skipped / Total] 280 / 211 / 18 / 509:  51%|█████     | 509/1000 [18:23<17:44,  2.17s/it][Succeeded / Failed / Skipped / Total] 280 / 211 / 18 / 509:  51%|█████     | 510/1000 [18:25<17:41,  2.17s/it][Succeeded / Failed / Skipped / Total] 281 / 211 / 18 / 510:  51%|█████     | 510/1000 [18:25<17:41,  2.17s/it][Succeeded / Failed / Skipped / Total] 282 / 211 / 18 / 511:  51%|█████     | 511/1000 [18:25<17:37,  2.16s/it][Succeeded / Failed / Skipped / Total] 282 / 211 / 18 / 511:  51%|█████     | 512/1000 [18:25<17:33,  2.16s/it][Succeeded / Failed / Skipped / Total] 283 / 211 / 18 / 512:  51%|█████     | 512/1000 [18:25<17:33,  2.16s/it][Succeeded / Failed / Skipped / Total] 284 / 211 / 18 / 513:  51%|█████▏    | 513/1000 [18:26<17:30,  2.16s/it][Succeeded / Failed / Skipped / Total] 284 / 211 / 18 / 513:  51%|█████▏    | 514/1000 [18:26<17:26,  2.15s/it][Succeeded / Failed / Skipped / Total] 285 / 211 / 18 / 514:  51%|█████▏    | 514/1000 [18:26<17:26,  2.15s/it]Execute the given connection . --> Update bridge . --> Socre: 1.0

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket webSocket , long [[minimumPongTime]] ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[webSocketImpl]] = ( WebSocketImpl ) webSocket ; if ( [[webSocketImpl]] . getLastPong ( ) < [[minimumPongTime]] ) { log . trace ( "Closing connection due to no pong received: {}" , [[webSocketImpl]] ) ; [[webSocketImpl]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[webSocketImpl]] . isOpen ( ) ) { [[webSocketImpl]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[webSocketImpl]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[bridge]] ( WebSocket webSocket , long [[bridge]] ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[example]] = ( WebSocketImpl ) webSocket ; if ( [[example]] . getLastPong ( ) < [[bridge]] ) { log . trace ( "Closing connection due to no pong received: {}" , [[example]] ) ; [[example]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[example]] . isOpen ( ) ) { [[example]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[example]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 509 ---------------------------------------------
Copy the given byte buffer into the given byte buffer . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 510 ---------------------------------------------
Invoked on websocket ping frame . --> On websocket animation --> Socre: 1.0

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket [[conn]] , Framedata [[f]] ) { [[conn]] . sendFrame ( new PongFrame ( ( PingFrame ) [[f]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket [[ai]] , Framedata [[ta]] ) { [[ai]] . sendFrame ( new PongFrame ( ( PingFrame ) [[ta]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 511 ---------------------------------------------
Broadcasts the text to the given clients . --> Quick fix function . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String text , Collection < WebSocket > clients ) { if ( text == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[fix]] ( String text , Collection < WebSocket > clients ) { if ( text == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 512 ---------------------------------------------
Returns the socket for the given WebSocket . --> Helper method for creating a new channel . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[channel]] ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 513 ---------------------------------------------
Do the actual broadcast . --> Send some data . --> Socre: 1.0

[[[[Adv]]]]: private void [[doBroadcast]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void [[let]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 514 ---------------------------------------------
Broadcasts the given byte array to the server --> Broadcast bytes asynchronously . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( byte [ ] [[data]] , Collection < WebSocket > clients ) { if ( [[data]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( [[data]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( byte [ ] [[bytes]] , Collection < WebSocket > clients ) { if ( [[bytes]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( [[bytes]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 515 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 286 / 211 / 18 / 515:  52%|█████▏    | 515/1000 [18:28<17:23,  2.15s/it][Succeeded / Failed / Skipped / Total] 286 / 211 / 18 / 515:  52%|█████▏    | 516/1000 [18:30<17:21,  2.15s/it][Succeeded / Failed / Skipped / Total] 287 / 211 / 18 / 516:  52%|█████▏    | 516/1000 [18:30<17:21,  2.15s/it][Succeeded / Failed / Skipped / Total] 287 / 212 / 18 / 517:  52%|█████▏    | 517/1000 [18:30<17:17,  2.15s/it][Succeeded / Failed / Skipped / Total] 287 / 212 / 18 / 517:  52%|█████▏    | 518/1000 [18:30<17:13,  2.14s/it][Succeeded / Failed / Skipped / Total] 288 / 212 / 18 / 518:  52%|█████▏    | 518/1000 [18:30<17:13,  2.14s/it][Succeeded / Failed / Skipped / Total] 289 / 212 / 18 / 519:  52%|█████▏    | 519/1000 [18:33<17:11,  2.14s/it][Succeeded / Failed / Skipped / Total] 289 / 212 / 18 / 519:  52%|█████▏    | 520/1000 [18:34<17:09,  2.14s/it][Succeeded / Failed / Skipped / Total] 290 / 212 / 18 / 520:  52%|█████▏    | 520/1000 [18:34<17:09,  2.14s/it][Succeeded / Failed / Skipped / Total] 290 / 213 / 18 / 521:  52%|█████▏    | 521/1000 [18:35<17:05,  2.14s/it][Succeeded / Failed / Skipped / Total] 290 / 213 / 18 / 521:  52%|█████▏    | 522/1000 [18:37<17:03,  2.14s/it][Succeeded / Failed / Skipped / Total] 291 / 213 / 18 / 522:  52%|█████▏    | 522/1000 [18:37<17:03,  2.14s/it][Succeeded / Failed / Skipped / Total] 291 / 213 / 19 / 523:  52%|█████▏    | 523/1000 [18:37<16:59,  2.14s/it][Succeeded / Failed / Skipped / Total] 291 / 213 / 19 / 523:  52%|█████▏    | 524/1000 [18:41<16:58,  2.14s/it][Succeeded / Failed / Skipped / Total] 292 / 213 / 19 / 524:  52%|█████▏    | 524/1000 [18:41<16:58,  2.14s/it][Succeeded / Failed / Skipped / Total] 292 / 214 / 19 / 525:  52%|█████▎    | 525/1000 [18:41<16:54,  2.14s/it][Succeeded / Failed / Skipped / Total] 292 / 214 / 19 / 525:  53%|█████▎    | 526/1000 [18:41<16:50,  2.13s/it]Fill the frames . --> Fill a list of frames . --> Socre: 1.0

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > [[draftFrames]] , String sData , ByteBuffer bData ) { if ( ! [[draftFrames]] . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { [[draftFrames]] . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > [[block]] , String sData , ByteBuffer bData ) { if ( ! [[block]] . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { [[block]] . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 516 ---------------------------------------------
Convert arguments to verifya buffer . --> Build array . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[array]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 517 ---------------------------------------------
Stops the timer . --> [[[FAILED]]]

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "[[True]]" == "[[True]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[end]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "[[genuine]]" == "[[genuine]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 518 ---------------------------------------------
Start persistence unit . --> Set up persistence units --> Socre: 1.0

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[ng]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 519 ---------------------------------------------
Gets a string value . --> Gets the result --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String [[key]] , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[key]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String [[copy]] , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[copy]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 520 ---------------------------------------------
Gets the result . --> Get a list of arguments --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang [[lang]] , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , [[lang]] ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang [[st]] , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , [[st]] ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 521 ---------------------------------------------
Creates a new transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[fix]] ( Consumer < EntityManager > [[ex]] ) { [[fix]] ( em -> { [[ex]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 522 ---------------------------------------------
IsDefinedAt a key? --> IsDefinedAt? --> Socre: 1.0

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String [[key]] ) { return messages . isDefinedAt ( [[key]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String [[z]] ) { return messages . isDefinedAt ( [[z]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 523 ---------------------------------------------
Get the complete REPLACEME0 --> [[[SKIPPED]]]

[[[[Adv]]]]: public final Self REPLACEME0 ( play . api . inject . Binding < ? > ... REPLACEME0 ) { return REPLACEME0 ( Guiceable . bindings ( REPLACEME0 ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 524 ---------------------------------------------
Get the bindings for the given module . --> Create the base --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... modules ) { return [[bindings]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[base]] ( play . api . inject . Module ... modules ) { return [[base]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 525 ---------------------------------------------
Returns the entity manager with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String name ) { EntityManagerFactory emf = emfs . get ( name ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[v]] ( String name ) { EntityManagerFactory emf = emfs . get ( name ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
[Succeeded / Failed / Skipped / Total] 293 / 214 / 19 / 526:  53%|█████▎    | 526/1000 [18:41<16:50,  2.13s/it][Succeeded / Failed / Skipped / Total] 293 / 215 / 19 / 527:  53%|█████▎    | 527/1000 [18:43<16:48,  2.13s/it][Succeeded / Failed / Skipped / Total] 293 / 215 / 19 / 527:  53%|█████▎    | 528/1000 [18:44<16:45,  2.13s/it][Succeeded / Failed / Skipped / Total] 294 / 215 / 19 / 528:  53%|█████▎    | 528/1000 [18:44<16:45,  2.13s/it][Succeeded / Failed / Skipped / Total] 295 / 215 / 19 / 529:  53%|█████▎    | 529/1000 [18:47<16:43,  2.13s/it][Succeeded / Failed / Skipped / Total] 295 / 215 / 19 / 529:  53%|█████▎    | 530/1000 [18:47<16:39,  2.13s/it][Succeeded / Failed / Skipped / Total] 296 / 215 / 19 / 530:  53%|█████▎    | 530/1000 [18:47<16:39,  2.13s/it][Succeeded / Failed / Skipped / Total] 296 / 216 / 19 / 531:  53%|█████▎    | 531/1000 [18:47<16:36,  2.12s/it][Succeeded / Failed / Skipped / Total] 296 / 216 / 19 / 531:  53%|█████▎    | 532/1000 [18:47<16:32,  2.12s/it][Succeeded / Failed / Skipped / Total] 297 / 216 / 19 / 532:  53%|█████▎    | 532/1000 [18:47<16:32,  2.12s/it][Succeeded / Failed / Skipped / Total] 298 / 216 / 19 / 533:  53%|█████▎    | 533/1000 [18:52<16:32,  2.12s/it][Succeeded / Failed / Skipped / Total] 298 / 216 / 19 / 533:  53%|█████▎    | 534/1000 [18:53<16:29,  2.12s/it][Succeeded / Failed / Skipped / Total] 298 / 217 / 19 / 534:  53%|█████▎    | 534/1000 [18:53<16:29,  2.12s/it][Succeeded / Failed / Skipped / Total] 299 / 217 / 19 / 535:  54%|█████▎    | 535/1000 [18:54<16:26,  2.12s/it][Succeeded / Failed / Skipped / Total] 299 / 217 / 19 / 535:  54%|█████▎    | 536/1000 [18:56<16:23,  2.12s/it][Succeeded / Failed / Skipped / Total] 299 / 218 / 19 / 536:  54%|█████▎    | 536/1000 [18:56<16:23,  2.12s/it][Succeeded / Failed / Skipped / Total] 299 / 219 / 19 / 537:  54%|█████▎    | 537/1000 [18:56<16:20,  2.12s/it][Succeeded / Failed / Skipped / Total] 299 / 219 / 19 / 537:  54%|█████▍    | 538/1000 [18:58<16:17,  2.12s/it]--------------------------------------------- Result 526 ---------------------------------------------
Returns the provider bindings for the given modules . --> Create a new group --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[group]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 527 ---------------------------------------------
Wraps a list of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[method]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 528 ---------------------------------------------
Returns the injector for the given modules . --> Returns an overrides for the given api --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[api]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[api]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 529 ---------------------------------------------
Return the implementation overrides for the given bindings . --> Returns the overrides for the given html --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[bindings]] ) { return overrides ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[html]] ) { return overrides ( Guiceable . [[html]] ( [[html]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 530 ---------------------------------------------
Returns the overrides for the given inject . --> Returns the base --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... modules ) { return [[overrides]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[base]] ( play . api . inject . Module ... modules ) { return [[base]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 531 ---------------------------------------------
Send a request to the list of messages . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader request ) { play . api . i18n . Messages msgs = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[archive]] ( Http . RequestHeader request ) { play . api . i18n . Messages msgs = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 532 ---------------------------------------------
Disables the specified module classes . --> Sets the module classes --> Socre: 1.0

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[mind]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 533 ---------------------------------------------
Sets the language . --> Setter for data --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result [[result]] , Lang lang ) { return messages . setLang ( [[result]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[data]] ( Result [[tags]] , Lang lang ) { return messages . setLang ( [[tags]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 534 ---------------------------------------------
Gets the in field . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[t]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 535 ---------------------------------------------
Static factory method for creating a Tuple5 . --> Build common common . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > [[Tuple5]] < A , B , C , D , E > [[Tuple5]] ( A a , B b , C c , D d , E e ) { return new [[Tuple5]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > [[common]] < A , B , C , D , E > [[common]] ( A a , B b , C c , D d , E e ) { return new [[common]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 536 ---------------------------------------------
Retrieve the existing file . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[header]] ( String [[format]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[format]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 537 ---------------------------------------------
Executes the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[error]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 538 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 299 / 220 / 19 / 538:  54%|█████▍    | 538/1000 [18:58<16:17,  2.12s/it][Succeeded / Failed / Skipped / Total] 300 / 220 / 19 / 539:  54%|█████▍    | 539/1000 [18:59<16:14,  2.11s/it][Succeeded / Failed / Skipped / Total] 300 / 220 / 19 / 539:  54%|█████▍    | 540/1000 [19:05<16:15,  2.12s/it][Succeeded / Failed / Skipped / Total] 301 / 220 / 19 / 540:  54%|█████▍    | 540/1000 [19:05<16:15,  2.12s/it][Succeeded / Failed / Skipped / Total] 302 / 220 / 19 / 541:  54%|█████▍    | 541/1000 [19:06<16:12,  2.12s/it][Succeeded / Failed / Skipped / Total] 302 / 220 / 19 / 541:  54%|█████▍    | 542/1000 [19:09<16:11,  2.12s/it][Succeeded / Failed / Skipped / Total] 302 / 221 / 19 / 542:  54%|█████▍    | 542/1000 [19:09<16:11,  2.12s/it][Succeeded / Failed / Skipped / Total] 302 / 222 / 19 / 543:  54%|█████▍    | 543/1000 [19:10<16:08,  2.12s/it][Succeeded / Failed / Skipped / Total] 302 / 222 / 19 / 543:  54%|█████▍    | 544/1000 [19:11<16:04,  2.12s/it][Succeeded / Failed / Skipped / Total] 303 / 222 / 19 / 544:  54%|█████▍    | 544/1000 [19:11<16:04,  2.12s/it][Succeeded / Failed / Skipped / Total] 303 / 223 / 19 / 545:  55%|█████▍    | 545/1000 [19:16<16:05,  2.12s/it][Succeeded / Failed / Skipped / Total] 303 / 223 / 19 / 545:  55%|█████▍    | 546/1000 [19:22<16:06,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 224 / 19 / 546:  55%|█████▍    | 546/1000 [19:22<16:06,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 224 / 19 / 546:  55%|█████▍    | 547/1000 [19:23<16:03,  2.13s/it]Creates a Messages . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > [[candidates]] ) { Seq < Lang > cs = Scala . asScala ( [[candidates]] ) ; play . api . i18n . Messages [[msgs]] = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > [[net]] ) { Seq < Lang > cs = Scala . asScala ( [[net]] ) ; play . api . i18n . Messages [[z]] = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( [[z]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 539 ---------------------------------------------
Adds the given ExecutionContext to the executor . --> executing operation --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext [[prepared]] = ec . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[executing]] ( ExecutionContext ec ) { ExecutionContext [[c]] = ec . prepare ( ) ; if ( [[c]] instanceof Executor ) { return ( Executor ) [[c]] ; } else { return [[c]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 540 ---------------------------------------------
Static factory method for creating a tuple with A and B . --> Static main method . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B [[b]] ) { return new [[Tuple]] < A , B > ( a , [[b]] ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[main]] < A , B > [[main]] ( A a , B [[w]] ) { return new [[main]] < A , B > ( a , [[w]] ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 541 ---------------------------------------------
Escapes a string . --> Validate integer --> Socre: 1.0

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[by]] ( String [[integer]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[integer]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 542 ---------------------------------------------
Get a json --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[format]] ( String [[ish]] ) { return Flow . of ( JsonNode . class ) . map ( [[format]] -> { return ByteString . fromString ( Json . stringify ( [[format]] ) ) ; } ) . via ( flow ( [[ish]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 543 ---------------------------------------------
Adds a constraint validator . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > [[MappedConstraintValidatorFactory]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[input]] ConstraintValidator < ? , ? > > [[move]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 544 ---------------------------------------------
Creates a new instance of the specified key . --> Create a new instance of a class --> Socre: 1.0

[[[[Adv]]]]: private < T [[extends]] ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < T [[parameters]] ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 545 ---------------------------------------------
Construct a JPAConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[name]] , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[format]] ( String [[header]] , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[header]] , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 546 ---------------------------------------------
Creates a new JPAConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[persistenceUnits]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { [[persistenceUnits]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[persistenceUnits]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[on]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[array]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { [[array]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[array]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 547 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 303 / 225 / 19 / 547:  55%|█████▍    | 547/1000 [19:23<16:03,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 225 / 19 / 547:  55%|█████▍    | 548/1000 [19:27<16:03,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 226 / 19 / 548:  55%|█████▍    | 548/1000 [19:27<16:03,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 226 / 19 / 548:  55%|█████▍    | 549/1000 [19:30<16:01,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 227 / 19 / 549:  55%|█████▍    | 549/1000 [19:30<16:01,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 227 / 19 / 549:  55%|█████▌    | 550/1000 [19:32<15:59,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 228 / 19 / 550:  55%|█████▌    | 550/1000 [19:32<15:59,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 228 / 19 / 550:  55%|█████▌    | 551/1000 [19:33<15:56,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 229 / 19 / 551:  55%|█████▌    | 551/1000 [19:33<15:56,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 229 / 19 / 551:  55%|█████▌    | 552/1000 [19:35<15:53,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 230 / 19 / 552:  55%|█████▌    | 552/1000 [19:35<15:53,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 230 / 19 / 552:  55%|█████▌    | 553/1000 [19:37<15:51,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 231 / 19 / 553:  55%|█████▌    | 553/1000 [19:37<15:51,  2.13s/it][Succeeded / Failed / Skipped / Total] 303 / 231 / 19 / 553:  55%|█████▌    | 554/1000 [19:42<15:51,  2.13s/it]Creates a JPAConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String n1 , String u1 , String [[n2]] , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( [[n2]] , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[queue]] ( String n1 , String u1 , String [[c1]] , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( [[c1]] , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 548 ---------------------------------------------
Handles request message . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[template]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 549 ---------------------------------------------
Handle a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[foo]] , String [[null]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[foo]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 550 ---------------------------------------------
Method onNotFound . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader request , String [[message]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader request , String [[declaration]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 551 ---------------------------------------------
Sends an error to the client . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[function]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 552 ---------------------------------------------
Gets the accessible method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[method]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 553 ---------------------------------------------
Replies the throwableToUsefulException . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException throwableToUsefulException ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException throwableToUsefulException ( final Throwable [[program]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[program]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 554 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 304 / 231 / 19 / 554:  55%|█████▌    | 554/1000 [19:42<15:51,  2.13s/it][Succeeded / Failed / Skipped / Total] 304 / 231 / 19 / 554:  56%|█████▌    | 555/1000 [19:43<15:48,  2.13s/it][Succeeded / Failed / Skipped / Total] 304 / 232 / 19 / 555:  56%|█████▌    | 555/1000 [19:43<15:48,  2.13s/it][Succeeded / Failed / Skipped / Total] 304 / 232 / 19 / 555:  56%|█████▌    | 556/1000 [19:43<15:45,  2.13s/it][Succeeded / Failed / Skipped / Total] 305 / 232 / 19 / 556:  56%|█████▌    | 556/1000 [19:43<15:45,  2.13s/it][Succeeded / Failed / Skipped / Total] 305 / 232 / 19 / 556:  56%|█████▌    | 557/1000 [19:48<15:45,  2.13s/it][Succeeded / Failed / Skipped / Total] 305 / 233 / 19 / 557:  56%|█████▌    | 557/1000 [19:48<15:45,  2.13s/it][Succeeded / Failed / Skipped / Total] 306 / 233 / 19 / 558:  56%|█████▌    | 558/1000 [19:48<15:41,  2.13s/it][Succeeded / Failed / Skipped / Total] 306 / 233 / 19 / 558:  56%|█████▌    | 559/1000 [19:52<15:40,  2.13s/it][Succeeded / Failed / Skipped / Total] 306 / 234 / 19 / 559:  56%|█████▌    | 559/1000 [19:52<15:40,  2.13s/it][Succeeded / Failed / Skipped / Total] 306 / 234 / 20 / 560:  56%|█████▌    | 560/1000 [19:52<15:37,  2.13s/it][Succeeded / Failed / Skipped / Total] 306 / 234 / 20 / 560:  56%|█████▌    | 561/1000 [19:53<15:33,  2.13s/it][Succeeded / Failed / Skipped / Total] 306 / 235 / 20 / 561:  56%|█████▌    | 561/1000 [19:53<15:33,  2.13s/it][Succeeded / Failed / Skipped / Total] 307 / 235 / 20 / 562:  56%|█████▌    | 562/1000 [19:57<15:33,  2.13s/it][Succeeded / Failed / Skipped / Total] 307 / 235 / 20 / 562:  56%|█████▋    | 563/1000 [19:59<15:31,  2.13s/it][Succeeded / Failed / Skipped / Total] 308 / 235 / 20 / 563:  56%|█████▋    | 563/1000 [19:59<15:31,  2.13s/it]Builds a BuildDoc handler from a jar file . --> Build doc handler . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[build]] ( File directory , JarFile jarFile , String base ) { return [[build]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 555 ---------------------------------------------
Logs a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader [[request]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[object]] ( RequestHeader [[d]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[d]] . method ( ) , [[d]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 556 ---------------------------------------------
Log an exception . --> Return type of the request --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader request , Throwable [[exception]] ) { try { UsefulException [[usefulException]] = throwableToUsefulException ( [[exception]] ) ; logServerError ( request , [[usefulException]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , [[usefulException]] ) ; default : return onDevServerError ( request , [[usefulException]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[type]] ( RequestHeader request , Throwable [[execution]] ) { try { UsefulException [[o]] = throwableToUsefulException ( [[execution]] ) ; logServerError ( request , [[o]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , [[o]] ) ; default : return onDevServerError ( request , [[o]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 557 ---------------------------------------------
Starts a sound . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader [[ception]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[ception]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 558 ---------------------------------------------
Create HttpEntity from content . --> Return formatted string body --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content content , String charset ) { String body ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[f]] ( Content content , String charset ) { String body ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 559 ---------------------------------------------
Retrieves the currently selected exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader request , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[exception]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader request , UsefulException [[condition]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[condition]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 560 ---------------------------------------------
UTF - 8 --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Result status ( int status , JsonNode content ) { return status ( status , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 561 ---------------------------------------------
Create a Build doc handler for the given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectory ( File directory ) { FileRepository [[repo]] = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectory ( File directory ) { FileRepository [[update]] = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( [[update]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 562 ---------------------------------------------
Consume data . --> used by Materializer --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer [[mat]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[mat]] ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[by]] ( Materializer [[data]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[data]] ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 563 ---------------------------------------------
Sends JSON response status code . --> Operation Operation --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , JsonNode content , JsonEncoding encoding ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( content , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[foo]] ( int status , JsonNode content , JsonEncoding encoding ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return [[foo]] ( [[foo]] ) . sendJson ( content , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
[Succeeded / Failed / Skipped / Total] 309 / 235 / 20 / 564:  56%|█████▋    | 564/1000 [20:06<15:32,  2.14s/it][Succeeded / Failed / Skipped / Total] 309 / 235 / 20 / 564:  56%|█████▋    | 565/1000 [20:06<15:29,  2.14s/it][Succeeded / Failed / Skipped / Total] 309 / 235 / 21 / 565:  56%|█████▋    | 565/1000 [20:06<15:29,  2.14s/it][Succeeded / Failed / Skipped / Total] 309 / 236 / 21 / 566:  57%|█████▋    | 566/1000 [20:07<15:26,  2.13s/it][Succeeded / Failed / Skipped / Total] 309 / 236 / 21 / 566:  57%|█████▋    | 567/1000 [20:08<15:22,  2.13s/it][Succeeded / Failed / Skipped / Total] 309 / 237 / 21 / 567:  57%|█████▋    | 567/1000 [20:08<15:22,  2.13s/it][Succeeded / Failed / Skipped / Total] 309 / 238 / 21 / 568:  57%|█████▋    | 568/1000 [20:08<15:19,  2.13s/it][Succeeded / Failed / Skipped / Total] 309 / 238 / 21 / 568:  57%|█████▋    | 569/1000 [20:12<15:18,  2.13s/it][Succeeded / Failed / Skipped / Total] 309 / 239 / 21 / 569:  57%|█████▋    | 569/1000 [20:12<15:18,  2.13s/it][Succeeded / Failed / Skipped / Total] 310 / 239 / 21 / 570:  57%|█████▋    | 570/1000 [20:13<15:15,  2.13s/it][Succeeded / Failed / Skipped / Total] 310 / 239 / 21 / 570:  57%|█████▋    | 571/1000 [20:14<15:12,  2.13s/it][Succeeded / Failed / Skipped / Total] 311 / 239 / 21 / 571:  57%|█████▋    | 571/1000 [20:14<15:12,  2.13s/it][Succeeded / Failed / Skipped / Total] 312 / 239 / 21 / 572:  57%|█████▋    | 572/1000 [20:14<15:09,  2.12s/it][Succeeded / Failed / Skipped / Total] 312 / 239 / 21 / 572:  57%|█████▋    | 573/1000 [20:18<15:07,  2.13s/it][Succeeded / Failed / Skipped / Total] 313 / 239 / 21 / 573:  57%|█████▋    | 573/1000 [20:18<15:07,  2.13s/it][Succeeded / Failed / Skipped / Total] 314 / 239 / 21 / 574:  57%|█████▋    | 574/1000 [20:18<15:04,  2.12s/it][Succeeded / Failed / Skipped / Total] 314 / 239 / 21 / 574:  57%|█████▊    | 575/1000 [20:23<15:04,  2.13s/it][Succeeded / Failed / Skipped / Total] 315 / 239 / 21 / 575:  57%|█████▊    | 575/1000 [20:23<15:04,  2.13s/it]--------------------------------------------- Result 564 ---------------------------------------------
Sends the status code for the given content . --> Return the status of the given message --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , InputStream [[content]] , long contentLength ) { return status ( status ) . sendInputStream ( [[content]] , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream [[level]] , long contentLength ) { return status ( status ) . sendInputStream ( [[level]] , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 565 ---------------------------------------------
Returns the user . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 566 ---------------------------------------------
Get the HttpEntity chunked . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[mapping]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 567 ---------------------------------------------
Create a HttpEntity object with the given content and charset . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String content , String [[charset]] ) { return new Strict ( ByteString . fromString ( content , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[load]] ( String content , String [[data]] ) { return new Strict ( ByteString . fromString ( content , [[data]] ) , Optional . of ( "text/plain; charset=" + [[data]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 568 ---------------------------------------------
Create a BuildDocHandler from a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[id]] ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 569 ---------------------------------------------
Create a Result with the given content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[loop]] ( int [[location]] , byte [ ] [[end]] ) { if ( [[end]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[loop]] , new HttpEntity . Strict ( ByteString . fromArray ( [[end]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 570 ---------------------------------------------
Returns a unique identifier . --> Play this method --> Socre: 1.0

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[play]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 571 ---------------------------------------------
Returns the absolute URL of the given request . --> Pushes a request --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[push]] ( Http . Request request ) { return [[push]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 572 ---------------------------------------------
Returns the status of the file . --> Output output volume --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[output]] ( int status , File [[volume]] ) { return [[output]] ( [[output]] , [[volume]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 573 ---------------------------------------------
Gets web socket URL . --> Push a request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[push]] ( Http . Request request ) { return [[push]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 574 ---------------------------------------------
Define a service fragment . --> test data --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[test]] ( String [[data]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[data]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 575 ---------------------------------------------
Returns the preferred of the given candidates . --> Computes chart log --> Socre: 1.0

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[log]] ( Collection < Lang > [[foo]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[foo]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 576 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 315 / 240 / 21 / 576:  58%|█████▊    | 576/1000 [20:24<15:01,  2.13s/it][Succeeded / Failed / Skipped / Total] 315 / 240 / 21 / 576:  58%|█████▊    | 577/1000 [20:25<14:58,  2.12s/it][Succeeded / Failed / Skipped / Total] 316 / 240 / 21 / 577:  58%|█████▊    | 577/1000 [20:25<14:58,  2.12s/it][Succeeded / Failed / Skipped / Total] 317 / 240 / 21 / 578:  58%|█████▊    | 578/1000 [20:28<14:57,  2.13s/it][Succeeded / Failed / Skipped / Total] 317 / 240 / 21 / 578:  58%|█████▊    | 579/1000 [20:30<14:54,  2.13s/it][Succeeded / Failed / Skipped / Total] 317 / 241 / 21 / 579:  58%|█████▊    | 579/1000 [20:30<14:54,  2.13s/it][Succeeded / Failed / Skipped / Total] 318 / 241 / 21 / 580:  58%|█████▊    | 580/1000 [20:34<14:53,  2.13s/it][Succeeded / Failed / Skipped / Total] 318 / 241 / 21 / 580:  58%|█████▊    | 581/1000 [20:34<14:50,  2.13s/it][Succeeded / Failed / Skipped / Total] 318 / 242 / 21 / 581:  58%|█████▊    | 581/1000 [20:34<14:50,  2.13s/it][Succeeded / Failed / Skipped / Total] 318 / 243 / 21 / 582:  58%|█████▊    | 582/1000 [20:34<14:46,  2.12s/it][Succeeded / Failed / Skipped / Total] 318 / 243 / 21 / 582:  58%|█████▊    | 583/1000 [20:36<14:44,  2.12s/it]Gets a connection function . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return [[block]] . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[file]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[description]] ) { try { return [[file]] . call ( [[description]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 577 ---------------------------------------------
Converts the given JSON object to the given class . --> Creates an object from the given json . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[e]] > [[e]] fromJson ( JsonNode json , Class < [[e]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 578 ---------------------------------------------
Convert the given data object to a JsonNode . --> include a value --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[include]] ( final Object [[d]] ) { try { return mapper ( ) . valueToTree ( [[d]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 579 ---------------------------------------------
Creates the BuildDocHandler from the given files . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] [[files]] , String [ ] baseDirs ) throws IOException { assert ( [[files]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[files]] . length ] ; List < JarFile > [[jarFiles]] = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[files]] . length ; i ++ ) { File file = [[files]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] [[object]] , String [ ] baseDirs ) throws IOException { assert ( [[object]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[object]] . length ] ; List < JarFile > [[q]] = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[object]] . length ; i ++ ) { File file = [[object]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 580 ---------------------------------------------
Returns a canonical representation of the specified URL . --> Returns the string after the given url --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[after]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[after]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[after]] . empty ( ) && [[after]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[after]] . push ( comp ) ; else [[after]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[after]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 581 ---------------------------------------------
Gets a connection function . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[test]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 582 ---------------------------------------------
Parse a string to a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[set]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 583 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 318 / 244 / 21 / 583:  58%|█████▊    | 583/1000 [20:36<14:44,  2.12s/it][Succeeded / Failed / Skipped / Total] 318 / 245 / 21 / 584:  58%|█████▊    | 584/1000 [20:36<14:40,  2.12s/it][Succeeded / Failed / Skipped / Total] 318 / 245 / 21 / 584:  58%|█████▊    | 585/1000 [20:40<14:40,  2.12s/it][Succeeded / Failed / Skipped / Total] 319 / 245 / 21 / 585:  58%|█████▊    | 585/1000 [20:40<14:40,  2.12s/it][Succeeded / Failed / Skipped / Total] 320 / 245 / 21 / 586:  59%|█████▊    | 586/1000 [20:42<14:37,  2.12s/it][Succeeded / Failed / Skipped / Total] 320 / 245 / 21 / 586:  59%|█████▊    | 587/1000 [20:43<14:34,  2.12s/it][Succeeded / Failed / Skipped / Total] 321 / 245 / 21 / 587:  59%|█████▊    | 587/1000 [20:43<14:34,  2.12s/it][Succeeded / Failed / Skipped / Total] 322 / 245 / 21 / 588:  59%|█████▉    | 588/1000 [20:43<14:31,  2.11s/it][Succeeded / Failed / Skipped / Total] 322 / 245 / 21 / 588:  59%|█████▉    | 589/1000 [20:46<14:30,  2.12s/it][Succeeded / Failed / Skipped / Total] 323 / 245 / 21 / 589:  59%|█████▉    | 589/1000 [20:46<14:30,  2.12s/it][Succeeded / Failed / Skipped / Total] 323 / 246 / 21 / 590:  59%|█████▉    | 590/1000 [20:47<14:26,  2.11s/it][Succeeded / Failed / Skipped / Total] 323 / 246 / 21 / 590:  59%|█████▉    | 591/1000 [20:48<14:24,  2.11s/it][Succeeded / Failed / Skipped / Total] 324 / 246 / 21 / 591:  59%|█████▉    | 591/1000 [20:48<14:24,  2.11s/it]Build doc handler from directory and jar files --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[call]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 584 ---------------------------------------------
Read a JsonNode from the InputStream --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[er]] ) { try { return mapper ( ) . readTree ( [[er]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 585 ---------------------------------------------
Builds a new Server for the given mode . --> operator --> Socre: 1.0

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode [[mode]] , int port , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . [[mode]] ( [[mode]] ) . http ( port ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[operator]] ( Mode [[na]] , int port , Function < BuiltInComponents , Router > [[server]] ) { return new Builder ( ) . [[na]] ( [[na]] ) . http ( port ) . build ( [[server]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 586 ---------------------------------------------
Gets cron intervals . --> Create a cron expression --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String cron , Date [[date]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String cron , Date [[a]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[a]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 587 ---------------------------------------------
Displays displayable constraint . --> Find all elements in b --> Socre: 1.0

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[find]] ( Set < ConstraintDescriptor < ? > > [[b]] ) { return [[b]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[find]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 588 ---------------------------------------------
Returns the given stage timeout . --> region > change --> Socre: 1.0

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[change]] ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 589 ---------------------------------------------
Returns the relative path . --> Convenience method for example --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[example]] ( String [[background]] , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 590 ---------------------------------------------
Parses a cron expression . --> [[[FAILED]]]

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[extension]] ( String [[s]] ) { try { return new CronExpression ( [[s]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[s]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 591 ---------------------------------------------
Retrieves the result as a Result . --> Set the flag --> Socre: 1.0

[[[[Adv]]]]: public static Result [[TODO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[flag]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
[Succeeded / Failed / Skipped / Total] 325 / 246 / 21 / 592:  59%|█████▉    | 592/1000 [20:51<14:22,  2.11s/it][Succeeded / Failed / Skipped / Total] 325 / 246 / 21 / 592:  59%|█████▉    | 593/1000 [20:52<14:19,  2.11s/it][Succeeded / Failed / Skipped / Total] 325 / 247 / 21 / 593:  59%|█████▉    | 593/1000 [20:52<14:19,  2.11s/it][Succeeded / Failed / Skipped / Total] 326 / 247 / 21 / 594:  59%|█████▉    | 594/1000 [20:52<14:16,  2.11s/it][Succeeded / Failed / Skipped / Total] 326 / 247 / 21 / 594:  60%|█████▉    | 595/1000 [20:54<14:14,  2.11s/it][Succeeded / Failed / Skipped / Total] 326 / 248 / 21 / 595:  60%|█████▉    | 595/1000 [20:54<14:14,  2.11s/it][Succeeded / Failed / Skipped / Total] 326 / 249 / 21 / 596:  60%|█████▉    | 596/1000 [20:54<14:10,  2.11s/it][Succeeded / Failed / Skipped / Total] 326 / 249 / 21 / 596:  60%|█████▉    | 597/1000 [20:55<14:07,  2.10s/it][Succeeded / Failed / Skipped / Total] 327 / 249 / 21 / 597:  60%|█████▉    | 597/1000 [20:55<14:07,  2.10s/it][Succeeded / Failed / Skipped / Total] 327 / 250 / 21 / 598:  60%|█████▉    | 598/1000 [20:58<14:06,  2.11s/it][Succeeded / Failed / Skipped / Total] 327 / 250 / 21 / 598:  60%|█████▉    | 599/1000 [21:01<14:04,  2.11s/it][Succeeded / Failed / Skipped / Total] 328 / 250 / 21 / 599:  60%|█████▉    | 599/1000 [21:01<14:04,  2.11s/it][Succeeded / Failed / Skipped / Total] 328 / 251 / 21 / 600:  60%|██████    | 600/1000 [21:02<14:01,  2.10s/it][Succeeded / Failed / Skipped / Total] 328 / 251 / 21 / 600:  60%|██████    | 601/1000 [21:03<13:58,  2.10s/it][Succeeded / Failed / Skipped / Total] 328 / 252 / 21 / 601:  60%|██████    | 601/1000 [21:03<13:58,  2.10s/it]--------------------------------------------- Result 592 ---------------------------------------------
Create an application builder . --> Load an application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[engine]] ( ApplicationLoader . Context [[ele]] ) { return initialBuilder . in ( [[ele]] . environment ( ) ) . loadConfig ( [[ele]] . initialConfig ( ) ) . overrides ( overrides ( [[ele]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 593 ---------------------------------------------
Creates and returns the displayable constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > constraint ) { final Display [[displayAnnotation]] = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > constraint ) { final Display [[path]] = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[path]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[path]] . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 594 ---------------------------------------------
Sets a flash value . --> region List Implementation --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String key , String value ) { [[flash]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[list]] ( String key , String value ) { [[list]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 595 ---------------------------------------------
Returns an annotation with the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[full]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 596 ---------------------------------------------
Returns a qualified definition for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[ceiling]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 597 ---------------------------------------------
Set session . --> Swap by key --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String key , String value ) { [[session]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[swap]] ( String key , String value ) { [[swap]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 598 ---------------------------------------------
Converts a supplier to a Binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[provider]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 599 ---------------------------------------------
Returns all the availables for a given application . --> Return a list of Langs --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[buffer]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 600 ---------------------------------------------
Create a Binding for the given implementation . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > [[client]] ) { return underlying . to ( [[client]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 601 ---------------------------------------------
Convert the provider to a Binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[method]] ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 602 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 329 / 252 / 21 / 602:  60%|██████    | 602/1000 [21:03<13:55,  2.10s/it][Succeeded / Failed / Skipped / Total] 329 / 252 / 21 / 602:  60%|██████    | 603/1000 [21:05<13:53,  2.10s/it][Succeeded / Failed / Skipped / Total] 329 / 253 / 21 / 603:  60%|██████    | 603/1000 [21:05<13:53,  2.10s/it][Succeeded / Failed / Skipped / Total] 330 / 253 / 21 / 604:  60%|██████    | 604/1000 [21:09<13:51,  2.10s/it][Succeeded / Failed / Skipped / Total] 330 / 253 / 21 / 604:  60%|██████    | 605/1000 [21:10<13:49,  2.10s/it][Succeeded / Failed / Skipped / Total] 331 / 253 / 21 / 605:  60%|██████    | 605/1000 [21:10<13:49,  2.10s/it][Succeeded / Failed / Skipped / Total] 331 / 254 / 21 / 606:  61%|██████    | 606/1000 [21:12<13:47,  2.10s/it][Succeeded / Failed / Skipped / Total] 331 / 254 / 21 / 606:  61%|██████    | 607/1000 [21:12<13:44,  2.10s/it][Succeeded / Failed / Skipped / Total] 331 / 254 / 22 / 607:  61%|██████    | 607/1000 [21:12<13:44,  2.10s/it][Succeeded / Failed / Skipped / Total] 332 / 254 / 22 / 608:  61%|██████    | 608/1000 [21:14<13:42,  2.10s/it][Succeeded / Failed / Skipped / Total] 332 / 254 / 22 / 608:  61%|██████    | 609/1000 [21:14<13:38,  2.09s/it][Succeeded / Failed / Skipped / Total] 332 / 255 / 22 / 609:  61%|██████    | 609/1000 [21:14<13:38,  2.09s/it][Succeeded / Failed / Skipped / Total] 332 / 255 / 23 / 610:  61%|██████    | 610/1000 [21:15<13:35,  2.09s/it][Succeeded / Failed / Skipped / Total] 332 / 255 / 23 / 610:  61%|██████    | 611/1000 [21:16<13:32,  2.09s/it][Succeeded / Failed / Skipped / Total] 333 / 255 / 23 / 611:  61%|██████    | 611/1000 [21:16<13:32,  2.09s/it][Succeeded / Failed / Skipped / Total] 334 / 255 / 23 / 612:  61%|██████    | 612/1000 [21:17<13:30,  2.09s/it][Succeeded / Failed / Skipped / Total] 334 / 255 / 23 / 612:  61%|██████▏   | 613/1000 [21:18<13:27,  2.09s/it]Create AhcWS client . --> Get AhcWSClient object --> Socre: 1.0

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient [[client]] = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( [[client]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[archive]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient [[array]] = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( [[array]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 603 ---------------------------------------------
Converts the given BindingKey to a Java Binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[glue]] ( final BindingKey < ? extends T > [[template]] ) { return underlying . to ( [[template]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 604 ---------------------------------------------
Creates an application configuration --> Creates a GuiceApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[by]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 605 ---------------------------------------------
Returns the loader for the given module loader --> Creates an application builder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[a]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 606 ---------------------------------------------
Create a Java provider --> [[[FAILED]]]

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[end]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 607 ---------------------------------------------
Load a Guice application --> [[[SKIPPED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... modules ) { return load ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 608 ---------------------------------------------
Loads a Guiceable module --> Generates a Guice application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[model]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 609 ---------------------------------------------
Creates a new evolutions reader . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[link]] . EvolutionsReader [[template]] ( Map < String , List < Evolution > > [[link]] ) { return new SimpleEvolutionsReader ( [[link]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 610 ---------------------------------------------
Creates a new GuiceApplicationBuilder --> [[[SKIPPED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 611 ---------------------------------------------
Loads an application . --> Load an application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[com]] ) { return load ( Guiceable . [[com]] ( [[com]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 612 ---------------------------------------------
Load the given bindings . --> Load a result --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... [[bindings]] ) { return load ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... [[result]] ) { return load ( Guiceable . [[result]] ( [[result]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 613 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 335 / 255 / 23 / 613:  61%|██████▏   | 613/1000 [21:18<13:27,  2.09s/it][Succeeded / Failed / Skipped / Total] 336 / 255 / 23 / 614:  61%|██████▏   | 614/1000 [21:21<13:25,  2.09s/it][Succeeded / Failed / Skipped / Total] 336 / 255 / 23 / 614:  62%|██████▏   | 615/1000 [21:25<13:24,  2.09s/it][Succeeded / Failed / Skipped / Total] 336 / 256 / 23 / 615:  62%|██████▏   | 615/1000 [21:25<13:24,  2.09s/it][Succeeded / Failed / Skipped / Total] 337 / 256 / 23 / 616:  62%|██████▏   | 616/1000 [21:29<13:23,  2.09s/it][Succeeded / Failed / Skipped / Total] 337 / 256 / 23 / 616:  62%|██████▏   | 617/1000 [21:30<13:21,  2.09s/it][Succeeded / Failed / Skipped / Total] 337 / 257 / 23 / 617:  62%|██████▏   | 617/1000 [21:30<13:21,  2.09s/it][Succeeded / Failed / Skipped / Total] 337 / 258 / 23 / 618:  62%|██████▏   | 618/1000 [21:31<13:18,  2.09s/it][Succeeded / Failed / Skipped / Total] 337 / 258 / 23 / 618:  62%|██████▏   | 619/1000 [21:36<13:18,  2.10s/it]Returns a list of available languages . --> let let app let let let --> Socre: 1.0

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > [[availableLangs]] ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > [[stream]] = [[availableLangs]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = [[stream]] . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[let]] ( Application app , List < Lang > [[com]] ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > [[set]] = [[com]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = [[set]] . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 614 ---------------------------------------------
Removes the evolutions . --> region > id --> Socre: 1.0

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database database , boolean [[autocommit]] , String schema ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , [[autocommit]] ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[id]] ( Database database , boolean [[representation]] , String schema ) { DatabaseEvolutions [[h]] = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; [[h]] . evolve ( [[h]] . resetScripts ( ) , [[representation]] ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 615 ---------------------------------------------
Creates a new Evolutions reader reader . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[forDefault]] ( Evolution ... evolutions ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[dl]] ( Evolution ... evolutions ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 616 ---------------------------------------------
Returns true if the class array is assignable to the class array . --> load class arrays --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] [[toClassArray]] , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( [[toClassArray]] ) ) { return "[[False]]" != "[[False]]" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( [[toClassArray]] == null ) { [[toClassArray]] = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[isAssignable]] ( classArray [ i ] , [[toClassArray]] [ i ] , autoboxing ) == "[[False]]" != "[[False]]" ) { return "[[False]]" != "[[False]]" ; } } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[load]] ( Class < ? > [ ] classArray , Class < ? > [ ] [[variables]] , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( [[variables]] ) ) { return "[[error]]" != "[[error]]" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( [[variables]] == null ) { [[variables]] = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[load]] ( classArray [ i ] , [[variables]] [ i ] , autoboxing ) == "[[error]]" != "[[error]]" ) { return "[[error]]" != "[[error]]" ; } } return "[[noise]]" == "[[noise]]" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 617 ---------------------------------------------
Returns an EntityManager object . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > [[ems]] = this . emStack ( "True" == "True" ) ; if ( [[ems]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ems]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[operator]] ( ) { Deque < EntityManager > [[context]] = this . emStack ( "True" == "True" ) ; if ( [[context]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[context]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 618 ---------------------------------------------
Encodes the given cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[buf]] = new StringBuilder ( ) ; [[encode]] ( [[buf]] , cookie ) ; return stripTrailingSeparator ( [[buf]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[null]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[i]] = new StringBuilder ( ) ; [[null]] ( [[i]] , cookie ) ; return stripTrailingSeparator ( [[i]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 619 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 338 / 258 / 23 / 619:  62%|██████▏   | 619/1000 [21:36<13:18,  2.10s/it][Succeeded / Failed / Skipped / Total] 338 / 259 / 23 / 620:  62%|██████▏   | 620/1000 [21:38<13:15,  2.09s/it][Succeeded / Failed / Skipped / Total] 338 / 259 / 23 / 620:  62%|██████▏   | 621/1000 [21:38<13:12,  2.09s/it][Succeeded / Failed / Skipped / Total] 338 / 260 / 23 / 621:  62%|██████▏   | 621/1000 [21:38<13:12,  2.09s/it][Succeeded / Failed / Skipped / Total] 339 / 260 / 23 / 622:  62%|██████▏   | 622/1000 [21:41<13:10,  2.09s/it][Succeeded / Failed / Skipped / Total] 339 / 260 / 23 / 622:  62%|██████▏   | 623/1000 [21:43<13:09,  2.09s/it][Succeeded / Failed / Skipped / Total] 340 / 260 / 23 / 623:  62%|██████▏   | 623/1000 [21:43<13:09,  2.09s/it][Succeeded / Failed / Skipped / Total] 341 / 260 / 23 / 624:  62%|██████▏   | 624/1000 [21:43<13:05,  2.09s/it][Succeeded / Failed / Skipped / Total] 341 / 260 / 23 / 624:  62%|██████▎   | 625/1000 [21:44<13:02,  2.09s/it][Succeeded / Failed / Skipped / Total] 341 / 260 / 24 / 625:  62%|██████▎   | 625/1000 [21:44<13:02,  2.09s/it][Succeeded / Failed / Skipped / Total] 341 / 261 / 24 / 626:  63%|██████▎   | 626/1000 [21:45<12:59,  2.09s/it][Succeeded / Failed / Skipped / Total] 341 / 261 / 24 / 626:  63%|██████▎   | 627/1000 [21:45<12:56,  2.08s/it]Fill a form with the given value . --> fill the given length --> Socre: 1.0

[[[[Adv]]]]: public Form < T > fill ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > fill ( T [[length]] ) { if ( [[length]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[length]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 620 ---------------------------------------------
Returns the error message . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[system]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 621 ---------------------------------------------
Gets the context ems . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[emsObject]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[emsObject]] != null ) { return ( Deque < EntityManager > ) [[emsObject]] ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[name]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[name]] != null ) { return ( Deque < EntityManager > ) [[name]] ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 622 ---------------------------------------------
Returns a flow - registry . --> loop with overflow strategy --> Socre: 1.0

[[[[Adv]]]]: public static < In , [[Out]] > Flow < In , [[Out]] , ? > [[actorRef]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , [[Out]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , [[vs]] > Flow < In , [[vs]] , ? > [[loop]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , [[vs]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 623 ---------------------------------------------
Converts the given error arguments to a list . --> Converts an Object array to a list of Objects --> Socre: 1.0

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] [[file]] ) { if ( [[file]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[set]] = Arrays . stream ( [[file]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[set]] ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 624 ---------------------------------------------
Returns value . --> Returns label by key . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[label]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 625 ---------------------------------------------
Parse an object from the given text . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T parse ( Field field , String text ) { return ( T ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 626 ---------------------------------------------
Removes the given EntityManager . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > [[ems]] = this . emStack ( threadLocalFallback ) ; if ( em != null ) { [[ems]] . push ( em ) ; } else { if ( [[ems]] . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } [[ems]] . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[ems]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > [[em]] = this . emStack ( threadLocalFallback ) ; if ( em != null ) { [[em]] . push ( em ) ; } else { if ( [[em]] . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } [[em]] . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 627 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 342 / 261 / 24 / 627:  63%|██████▎   | 627/1000 [21:45<12:56,  2.08s/it][Succeeded / Failed / Skipped / Total] 342 / 261 / 25 / 628:  63%|██████▎   | 628/1000 [21:45<12:53,  2.08s/it][Succeeded / Failed / Skipped / Total] 342 / 261 / 25 / 628:  63%|██████▎   | 629/1000 [21:47<12:51,  2.08s/it][Succeeded / Failed / Skipped / Total] 342 / 262 / 25 / 629:  63%|██████▎   | 629/1000 [21:47<12:51,  2.08s/it][Succeeded / Failed / Skipped / Total] 343 / 262 / 25 / 630:  63%|██████▎   | 630/1000 [21:48<12:48,  2.08s/it][Succeeded / Failed / Skipped / Total] 343 / 262 / 25 / 630:  63%|██████▎   | 631/1000 [21:48<12:45,  2.07s/it][Succeeded / Failed / Skipped / Total] 343 / 263 / 25 / 631:  63%|██████▎   | 631/1000 [21:48<12:45,  2.07s/it][Succeeded / Failed / Skipped / Total] 343 / 264 / 25 / 632:  63%|██████▎   | 632/1000 [21:49<12:42,  2.07s/it][Succeeded / Failed / Skipped / Total] 343 / 264 / 25 / 632:  63%|██████▎   | 633/1000 [21:55<12:42,  2.08s/it][Succeeded / Failed / Skipped / Total] 344 / 264 / 25 / 633:  63%|██████▎   | 633/1000 [21:55<12:42,  2.08s/it][Succeeded / Failed / Skipped / Total] 344 / 265 / 25 / 634:  63%|██████▎   | 634/1000 [21:57<12:40,  2.08s/it][Succeeded / Failed / Skipped / Total] 344 / 265 / 25 / 634:  64%|██████▎   | 635/1000 [22:01<12:39,  2.08s/it][Succeeded / Failed / Skipped / Total] 345 / 265 / 25 / 635:  64%|██████▎   | 635/1000 [22:01<12:39,  2.08s/it]Create a new Dynamic form object . --> fill a DynamicForm object --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > value ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > value ) { Form < Dynamic > [[empty]] = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( [[empty]] . rawData ( ) , [[empty]] . files ( ) , [[empty]] . errors ( ) , [[empty]] . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 628 ---------------------------------------------
Registers the source type . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 629 ---------------------------------------------
Print a field --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[by]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 630 ---------------------------------------------
Print T . --> Print a T --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[end]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[end]] . class ) ) { return conversion . convert ( t , [[end]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 631 ---------------------------------------------
Parses the given text using the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[string]] > [[string]] parse ( String text , Class < [[string]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 632 ---------------------------------------------
Convert a TypeDescriptor to string . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[c]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[c]] . class ) ) ) { return ( [[c]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[c]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[c]] . class ) ) { return conversion . convert ( t , [[c]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 633 ---------------------------------------------
Create a scala . collection . --> query conversion --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > list ) { return scala . collection . JavaConverters . asScalaBufferConverter ( list ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[query]] ( java . util . List < T > list ) { return scala . collection . JavaConverters . asScalaBufferConverter ( list ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 634 ---------------------------------------------
Gets a bypassWith . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , [[FlowIn]] , Out > Flow < In , Out , ? > bypassWith ( Function < In , F . Either < [[FlowIn]] , Out > > splitter , Flow < [[FlowIn]] , Out , ? > flow ) { return bypassWith ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , [[est]] , Out > Flow < In , Out , ? > bypassWith ( Function < In , F . Either < [[est]] , Out > > splitter , Flow < [[est]] , Out , ? > flow ) { return bypassWith ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 635 ---------------------------------------------
Gets the errors as JSON . --> For debugging --> Socre: 1.0

[[[[Adv]]]]: public JsonNode errorsAsJson ( Lang [[lang]] ) { Map < String , List < String > > [[allMessages]] = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[messages]] = new ArrayList <> ( ) ; if ( messagesApi != null && [[lang]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[messages]] . add ( messagesApi . get ( [[lang]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[lang]] ) ) ) ; } else { [[messages]] . add ( error . message ( ) ) ; } [[allMessages]] . put ( error . key ( ) , [[messages]] ) ; } } ) ; return play . libs . Json . toJson ( [[allMessages]] ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode errorsAsJson ( Lang [[library]] ) { Map < String , List < String > > [[symbols]] = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[notation]] = new ArrayList <> ( ) ; if ( messagesApi != null && [[library]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[notation]] . add ( messagesApi . get ( [[library]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[library]] ) ) ) ; } else { [[notation]] . add ( error . message ( ) ) ; } [[symbols]] . put ( error . key ( ) , [[notation]] ) ; } } ) ; return play . libs . Json . toJson ( [[symbols]] ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 636 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 345 / 265 / 26 / 636:  64%|██████▎   | 636/1000 [22:01<12:36,  2.08s/it][Succeeded / Failed / Skipped / Total] 345 / 265 / 26 / 636:  64%|██████▎   | 637/1000 [22:02<12:33,  2.08s/it][Succeeded / Failed / Skipped / Total] 346 / 265 / 26 / 637:  64%|██████▎   | 637/1000 [22:02<12:33,  2.08s/it][Succeeded / Failed / Skipped / Total] 347 / 265 / 26 / 638:  64%|██████▍   | 638/1000 [22:04<12:31,  2.08s/it][Succeeded / Failed / Skipped / Total] 347 / 265 / 26 / 638:  64%|██████▍   | 639/1000 [22:06<12:29,  2.08s/it][Succeeded / Failed / Skipped / Total] 348 / 265 / 26 / 639:  64%|██████▍   | 639/1000 [22:06<12:29,  2.08s/it][Succeeded / Failed / Skipped / Total] 349 / 265 / 26 / 640:  64%|██████▍   | 640/1000 [22:10<12:28,  2.08s/it][Succeeded / Failed / Skipped / Total] 349 / 265 / 26 / 640:  64%|██████▍   | 641/1000 [22:12<12:26,  2.08s/it][Succeeded / Failed / Skipped / Total] 350 / 265 / 26 / 641:  64%|██████▍   | 641/1000 [22:12<12:26,  2.08s/it][Succeeded / Failed / Skipped / Total] 350 / 266 / 26 / 642:  64%|██████▍   | 642/1000 [22:14<12:24,  2.08s/it][Succeeded / Failed / Skipped / Total] 350 / 266 / 26 / 642:  64%|██████▍   | 643/1000 [22:14<12:21,  2.08s/it]Create a MappedWebSocketAcceptor --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > json ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 637 ---------------------------------------------
Gets varargs . --> load array --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[load]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 638 ---------------------------------------------
Perform a select operation on the specified node . --> Return a NodeList for a given point --> Socre: 1.0

[[[[Adv]]]]: public static NodeList selectNodes ( String [[path]] , Object [[node]] ) { return selectNodes ( [[path]] , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList selectNodes ( String [[point]] , Object [[loop]] ) { return selectNodes ( [[point]] , [[loop]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 639 ---------------------------------------------
Turns an array into a Seq --> return the hold operator --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[hold]] ( T [ ] [[operator]] ) { return [[hold]] ( java . util . Arrays . asList ( [[operator]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 640 ---------------------------------------------
Determine if the given object is a setAccessible workaround . --> Checks if the given AccessibleObject is available --> Socre: 1.0

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member [[m]] = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( [[m]] . getModifiers ( ) ) && isPackageAccess ( [[m]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member [[h]] = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( [[h]] . getModifiers ( ) ) && isPackageAccess ( [[h]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 641 ---------------------------------------------
Get the cost for the primitive type . --> Get theimitive promotion cost --> Socre: 1.0

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > destClass ) { float [[cost]] = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > destClass ) { float [[foo]] = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 642 ---------------------------------------------
Encodes the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[name]] = cookie . name ( ) ; final String [[value]] = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( [[name]] , [[value]] ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , [[name]] , [[value]] ) ; } else { add ( buf , [[name]] , [[value]] ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[bin]] = cookie . name ( ) ; final String [[chunk]] = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( [[bin]] , [[chunk]] ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , [[bin]] , [[chunk]] ) ; } else { add ( buf , [[bin]] , [[chunk]] ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 643 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 351 / 266 / 26 / 643:  64%|██████▍   | 643/1000 [22:14<12:21,  2.08s/it][Succeeded / Failed / Skipped / Total] 351 / 267 / 26 / 644:  64%|██████▍   | 644/1000 [22:17<12:19,  2.08s/it][Succeeded / Failed / Skipped / Total] 351 / 267 / 26 / 644:  64%|██████▍   | 645/1000 [22:21<12:18,  2.08s/it][Succeeded / Failed / Skipped / Total] 352 / 267 / 26 / 645:  64%|██████▍   | 645/1000 [22:21<12:18,  2.08s/it][Succeeded / Failed / Skipped / Total] 353 / 267 / 26 / 646:  65%|██████▍   | 646/1000 [22:32<12:21,  2.09s/it][Succeeded / Failed / Skipped / Total] 353 / 267 / 26 / 646:  65%|██████▍   | 647/1000 [22:33<12:18,  2.09s/it][Succeeded / Failed / Skipped / Total] 353 / 268 / 26 / 647:  65%|██████▍   | 647/1000 [22:33<12:18,  2.09s/it][Succeeded / Failed / Skipped / Total] 353 / 268 / 26 / 647:  65%|██████▍   | 648/1000 [22:33<12:15,  2.09s/it][Succeeded / Failed / Skipped / Total] 353 / 269 / 26 / 648:  65%|██████▍   | 648/1000 [22:33<12:15,  2.09s/it][Succeeded / Failed / Skipped / Total] 353 / 269 / 26 / 648:  65%|██████▍   | 649/1000 [22:34<12:12,  2.09s/it][Succeeded / Failed / Skipped / Total] 353 / 270 / 26 / 649:  65%|██████▍   | 649/1000 [22:34<12:12,  2.09s/it][Succeeded / Failed / Skipped / Total] 353 / 270 / 26 / 649:  65%|██████▌   | 650/1000 [22:37<12:11,  2.09s/it][Succeeded / Failed / Skipped / Total] 354 / 270 / 26 / 650:  65%|██████▌   | 650/1000 [22:37<12:11,  2.09s/it][Succeeded / Failed / Skipped / Total] 354 / 270 / 26 / 650:  65%|██████▌   | 651/1000 [22:38<12:08,  2.09s/it]Creates a new WebSocket message . --> Return a WebSocket result --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[request]] ) { return f . apply ( [[request]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[flow]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[flow]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[client]] ) { return f . apply ( [[client]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[path]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[path]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 644 ---------------------------------------------
Registers the given formatter . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[test]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 645 ---------------------------------------------
Gets a list of keys . --> edit keys --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[edit]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 646 ---------------------------------------------
Gets a string at the given key . --> Return after r --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String [[key]] , Object ... [[args]] ) { return messagesApi . get ( lang , [[key]] , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[after]] ( String [[r]] , Object ... [[net]] ) { return messagesApi . get ( lang , [[r]] , [[net]] ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 647 ---------------------------------------------
Returns the cost of a class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[method]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 648 ---------------------------------------------
Calculates the merge strategy using the provided Flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , FlowIn , Out > Flow < [[In]] , Out , ? > bypassWith ( Flow < [[In]] , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > [[flow]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < [[self]] , FlowIn , Out > Flow < [[self]] , Out , ? > bypassWith ( Flow < [[self]] , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > [[unknown]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 649 ---------------------------------------------
Create a new ParallelSorter instance --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] arrays ) { Generator [[gen]] = new Generator ( ) ; [[gen]] . setArrays ( arrays ) ; return [[gen]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[a]] ( Object [ ] arrays ) { Generator [[t]] = new Generator ( ) ; [[t]] . setArrays ( arrays ) ; return [[t]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 650 ---------------------------------------------
quick sort . --> Chooses a Comparator --> Socre: 1.0

[[[[Adv]]]]: public void quickSort ( int index , int [[lo]] , int hi , Comparator [[cmp]] ) { chooseComparer ( index , [[cmp]] ) ; super . quickSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void quickSort ( int index , int [[e]] , int hi , Comparator [[f]] ) { chooseComparer ( index , [[f]] ) ; super . quickSort ( [[e]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 651 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 354 / 270 / 27 / 651:  65%|██████▌   | 651/1000 [22:38<12:08,  2.09s/it][Succeeded / Failed / Skipped / Total] 354 / 270 / 27 / 651:  65%|██████▌   | 652/1000 [22:39<12:05,  2.09s/it][Succeeded / Failed / Skipped / Total] 355 / 270 / 27 / 652:  65%|██████▌   | 652/1000 [22:39<12:05,  2.09s/it][Succeeded / Failed / Skipped / Total] 355 / 270 / 27 / 652:  65%|██████▌   | 653/1000 [22:39<12:02,  2.08s/it][Succeeded / Failed / Skipped / Total] 356 / 270 / 27 / 653:  65%|██████▌   | 653/1000 [22:39<12:02,  2.08s/it][Succeeded / Failed / Skipped / Total] 356 / 270 / 27 / 653:  65%|██████▌   | 654/1000 [22:40<11:59,  2.08s/it][Succeeded / Failed / Skipped / Total] 357 / 270 / 27 / 654:  65%|██████▌   | 654/1000 [22:40<11:59,  2.08s/it][Succeeded / Failed / Skipped / Total] 357 / 270 / 27 / 654:  66%|██████▌   | 655/1000 [22:47<12:00,  2.09s/it][Succeeded / Failed / Skipped / Total] 358 / 270 / 27 / 655:  66%|██████▌   | 655/1000 [22:47<12:00,  2.09s/it][Succeeded / Failed / Skipped / Total] 359 / 270 / 27 / 656:  66%|██████▌   | 656/1000 [22:47<11:57,  2.08s/it][Succeeded / Failed / Skipped / Total] 359 / 270 / 27 / 656:  66%|██████▌   | 657/1000 [22:48<11:54,  2.08s/it][Succeeded / Failed / Skipped / Total] 359 / 271 / 27 / 657:  66%|██████▌   | 657/1000 [22:48<11:54,  2.08s/it]Emits a field . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 652 ---------------------------------------------
Create a Database instance for the given parameters . --> Support for testing --> Socre: 1.0

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String [[url]] , Map < String , ? extends Object > config ) { return [[createFrom]] ( "default" , driver , [[url]] , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[foo]] ( String driver , String [[field]] , Map < String , ? extends Object > config ) { return [[foo]] ( "default" , driver , [[field]] , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 653 ---------------------------------------------
visit Type from to Type --> End the line --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[end]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[end]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[end]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[end]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 654 ---------------------------------------------
Load the argument at the given index . --> region load_arg --> Socre: 1.0

[[[[Adv]]]]: public void load_arg ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void load_arg ( int [[x]] ) { load_local ( state . argumentTypes [ [[x]] ] , state . localOffset + skipArgs ( [[x]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 655 ---------------------------------------------
Merges the sort using the specified comparator . --> Load a comparator --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int lo , int [[hi]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[load]] ( int index , int lo , int [[sum]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , [[sum]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 656 ---------------------------------------------
A null - safe method to remove any remaining parameters . --> tree method --> Socre: 1.0

[[[[Adv]]]]: private static void [[nullcmp]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void [[tree]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 657 ---------------------------------------------
Checks whether the type is zero . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[zero_or_null]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[loop]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 658 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 360 / 271 / 27 / 658:  66%|██████▌   | 658/1000 [22:50<11:52,  2.08s/it][Succeeded / Failed / Skipped / Total] 360 / 271 / 27 / 658:  66%|██████▌   | 659/1000 [22:50<11:49,  2.08s/it][Succeeded / Failed / Skipped / Total] 360 / 272 / 27 / 659:  66%|██████▌   | 659/1000 [22:50<11:49,  2.08s/it][Succeeded / Failed / Skipped / Total] 360 / 272 / 28 / 660:  66%|██████▌   | 660/1000 [22:50<11:46,  2.08s/it][Succeeded / Failed / Skipped / Total] 360 / 272 / 28 / 660:  66%|██████▌   | 661/1000 [22:51<11:43,  2.08s/it]Process the code --> Main method to start a loop --> Socre: 1.0

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[componentType]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( [[componentType]] ) ; callback . processElement ( [[componentType]] ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[main]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[er]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( [[er]] ) ; callback . processElement ( [[er]] ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 659 ---------------------------------------------
Register annotations . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[main]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 660 ---------------------------------------------
Sets the field names . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 661 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 361 / 272 / 28 / 661:  66%|██████▌   | 661/1000 [22:51<11:43,  2.08s/it][Succeeded / Failed / Skipped / Total] 361 / 273 / 28 / 662:  66%|██████▌   | 662/1000 [22:54<11:41,  2.08s/it][Succeeded / Failed / Skipped / Total] 361 / 273 / 28 / 662:  66%|██████▋   | 663/1000 [22:55<11:39,  2.07s/it][Succeeded / Failed / Skipped / Total] 362 / 273 / 28 / 663:  66%|██████▋   | 663/1000 [22:55<11:39,  2.07s/it][Succeeded / Failed / Skipped / Total] 362 / 273 / 29 / 664:  66%|██████▋   | 664/1000 [22:55<11:35,  2.07s/it][Succeeded / Failed / Skipped / Total] 362 / 273 / 29 / 664:  66%|██████▋   | 665/1000 [22:57<11:34,  2.07s/it][Succeeded / Failed / Skipped / Total] 363 / 273 / 29 / 665:  66%|██████▋   | 665/1000 [22:57<11:34,  2.07s/it][Succeeded / Failed / Skipped / Total] 363 / 274 / 29 / 666:  67%|██████▋   | 666/1000 [23:02<11:33,  2.08s/it][Succeeded / Failed / Skipped / Total] 363 / 274 / 29 / 666:  67%|██████▋   | 667/1000 [23:03<11:30,  2.07s/it]Unbox the given type . --> unbox a method --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { if ( [[type]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label [[end]] = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[type]] ) ; goTo ( [[end]] ) ; mark ( nonNull ) ; unbox ( [[type]] ) ; mark ( [[end]] ) ; } } else { checkcast ( [[type]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type [[method]] ) { if ( TypeUtils . isPrimitive ( [[method]] ) ) { if ( [[method]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label [[set]] = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[method]] ) ; goTo ( [[set]] ) ; mark ( nonNull ) ; unbox ( [[method]] ) ; mark ( [[set]] ) ; } } else { checkcast ( [[method]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 662 ---------------------------------------------
Invokes the method . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[invoke]] ( Object [[obj]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[obj]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[g]] ( Object [[b]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[b]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 663 ---------------------------------------------
Convenience method for setting a list of methods . --> Array . --> Socre: 0.9999999999820136

[[[[Adv]]]]: public static void [[getMethods]] ( Class superclass , Class [ ] interfaces , List methods ) { [[getMethods]] ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[array]] ( Class superclass , Class [ ] interfaces , List methods ) { [[array]] ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 664 ---------------------------------------------
Finds all the methods . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 665 ---------------------------------------------
Resolves all the classes in this package . --> Resolves the class --> Socre: 1.0

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[resolved]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[resolved]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , [[resolved]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[resolved]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[ret]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[ret]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , [[ret]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[ret]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 666 ---------------------------------------------
Returns the cost of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If [[the]] destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[on]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If [[it]] destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 667 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 363 / 275 / 29 / 667:  67%|██████▋   | 667/1000 [23:03<11:30,  2.07s/it][Succeeded / Failed / Skipped / Total] 364 / 275 / 29 / 668:  67%|██████▋   | 668/1000 [23:03<11:27,  2.07s/it][Succeeded / Failed / Skipped / Total] 364 / 275 / 29 / 668:  67%|██████▋   | 669/1000 [23:08<11:26,  2.08s/it][Succeeded / Failed / Skipped / Total] 364 / 276 / 29 / 669:  67%|██████▋   | 669/1000 [23:08<11:26,  2.08s/it][Succeeded / Failed / Skipped / Total] 364 / 277 / 29 / 670:  67%|██████▋   | 670/1000 [23:09<11:24,  2.07s/it][Succeeded / Failed / Skipped / Total] 364 / 277 / 29 / 670:  67%|██████▋   | 671/1000 [23:09<11:21,  2.07s/it][Succeeded / Failed / Skipped / Total] 365 / 277 / 29 / 671:  67%|██████▋   | 671/1000 [23:09<11:21,  2.07s/it][Succeeded / Failed / Skipped / Total] 366 / 277 / 29 / 672:  67%|██████▋   | 672/1000 [23:11<11:19,  2.07s/it][Succeeded / Failed / Skipped / Total] 366 / 277 / 29 / 672:  67%|██████▋   | 673/1000 [23:18<11:19,  2.08s/it][Succeeded / Failed / Skipped / Total] 367 / 277 / 29 / 673:  67%|██████▋   | 673/1000 [23:18<11:19,  2.08s/it][Succeeded / Failed / Skipped / Total] 367 / 278 / 29 / 674:  67%|██████▋   | 674/1000 [23:19<11:16,  2.08s/it][Succeeded / Failed / Skipped / Total] 367 / 278 / 29 / 674:  68%|██████▊   | 675/1000 [23:20<11:14,  2.07s/it][Succeeded / Failed / Skipped / Total] 367 / 279 / 29 / 675:  68%|██████▊   | 675/1000 [23:20<11:14,  2.07s/it][Succeeded / Failed / Skipped / Total] 367 / 280 / 29 / 676:  68%|██████▊   | 676/1000 [23:21<11:11,  2.07s/it][Succeeded / Failed / Skipped / Total] 367 / 280 / 29 / 676:  68%|██████▊   | 677/1000 [23:22<11:09,  2.07s/it][Succeeded / Failed / Skipped / Total] 367 / 281 / 29 / 677:  68%|██████▊   | 677/1000 [23:22<11:09,  2.07s/it]Adds a method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[test]] ( Method [[implementations]] ) { [[test]] ( ReflectUtils . getSignature ( [[implementations]] ) , ReflectUtils . getExceptionTypes ( [[implementations]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 668 ---------------------------------------------
Sets the superclass . --> Unions this superclass --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . [[superclass]] = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[unions]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . [[status]] = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 669 ---------------------------------------------
Return the cardinality value . --> [[[FAILED]]]

[[[[Adv]]]]: public int cardinality ( ) { int [[w]] = value ; int c = 0 ; while ( [[w]] != 0 ) { c += T [ [[w]] & 255 ] ; [[w]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int cardinality ( ) { int [[b]] = value ; int c = 0 ; while ( [[b]] != 0 ) { c += T [ [[b]] & 255 ] ; [[b]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 670 ---------------------------------------------
Sets the naming policy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[after]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 671 ---------------------------------------------
Create new HttpRequest with given destination . --> Create new HttpRequest with given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[bus]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 672 ---------------------------------------------
Filter constructors . --> scope methods --> Socre: 1.0

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class sc , List [[constructors]] ) { CollectionUtils . filter ( [[constructors]] , new VisibilityPredicate ( sc , "[[True]]" == "[[True]]" ) ) ; if ( [[constructors]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[scope]] ( Class sc , List [[a]] ) { CollectionUtils . filter ( [[a]] , new VisibilityPredicate ( sc , "[[view]]" == "[[view]]" ) ) ; if ( [[a]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 673 ---------------------------------------------
Sets the host . --> Set the address --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[address]] ( final String [[access]] ) { this . [[nat]] = [[address]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[address]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 674 ---------------------------------------------
Resolves the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path resolve ( final Path [[base]] , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return [[base]] . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path resolve ( final Path [[wait]] , String [[begin]] ) { if ( StringUtil . startsWithChar ( [[begin]] , File . separatorChar ) ) { [[begin]] = [[begin]] . substring ( 1 ) ; } return [[wait]] . resolve ( [[begin]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 675 ---------------------------------------------
Creates a new instance of HttpRequest . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[loop]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 676 ---------------------------------------------
A POST request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[to]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 677 ---------------------------------------------
Create a new HttpRequest with the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[list]] ( final String [[heap]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[heap]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 678 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 367 / 282 / 29 / 678:  68%|██████▊   | 678/1000 [23:23<11:06,  2.07s/it][Succeeded / Failed / Skipped / Total] 367 / 282 / 29 / 678:  68%|██████▊   | 679/1000 [23:24<11:03,  2.07s/it][Succeeded / Failed / Skipped / Total] 368 / 282 / 29 / 679:  68%|██████▊   | 679/1000 [23:24<11:03,  2.07s/it][Succeeded / Failed / Skipped / Total] 368 / 283 / 29 / 680:  68%|██████▊   | 680/1000 [23:26<11:02,  2.07s/it][Succeeded / Failed / Skipped / Total] 368 / 283 / 29 / 680:  68%|██████▊   | 681/1000 [23:31<11:01,  2.07s/it][Succeeded / Failed / Skipped / Total] 368 / 284 / 29 / 681:  68%|██████▊   | 681/1000 [23:31<11:01,  2.07s/it][Succeeded / Failed / Skipped / Total] 368 / 285 / 29 / 682:  68%|██████▊   | 682/1000 [23:31<10:58,  2.07s/it][Succeeded / Failed / Skipped / Total] 368 / 285 / 29 / 682:  68%|██████▊   | 683/1000 [23:32<10:55,  2.07s/it][Succeeded / Failed / Skipped / Total] 369 / 285 / 29 / 683:  68%|██████▊   | 683/1000 [23:32<10:55,  2.07s/it][Succeeded / Failed / Skipped / Total] 369 / 286 / 29 / 684:  68%|██████▊   | 684/1000 [23:33<10:53,  2.07s/it][Succeeded / Failed / Skipped / Total] 369 / 286 / 29 / 684:  68%|██████▊   | 685/1000 [23:35<10:51,  2.07s/it][Succeeded / Failed / Skipped / Total] 369 / 287 / 29 / 685:  68%|██████▊   | 685/1000 [23:35<10:51,  2.07s/it][Succeeded / Failed / Skipped / Total] 370 / 287 / 29 / 686:  69%|██████▊   | 686/1000 [23:36<10:48,  2.06s/it][Succeeded / Failed / Skipped / Total] 370 / 287 / 29 / 686:  69%|██████▊   | 687/1000 [23:36<10:45,  2.06s/it][Succeeded / Failed / Skipped / Total] 370 / 288 / 29 / 687:  69%|██████▊   | 687/1000 [23:36<10:45,  2.06s/it][Succeeded / Failed / Skipped / Total] 371 / 288 / 29 / 688:  69%|██████▉   | 688/1000 [23:38<10:43,  2.06s/it][Succeeded / Failed / Skipped / Total] 371 / 288 / 29 / 688:  69%|██████▉   | 689/1000 [23:39<10:40,  2.06s/it]Creates a new HttpRequest with the given destination name . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[manager]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 679 ---------------------------------------------
Read a string . --> Create a string representation of a template --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter [[writer]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[ella]] ( final Path [[template]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[template]] , StandardCharsets . UTF_8 ) ) { StringWriter [[er]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 680 ---------------------------------------------
Creates a new instance of HttpRequest . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[ator]] ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 681 ---------------------------------------------
Create a DELETE request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[pointer]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 682 ---------------------------------------------
Create a HEAD request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[array]] ( final String [[name]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[name]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 683 ---------------------------------------------
Create a new HttpRequest with the given destination string . --> Returns an HttpRequest with the given search string --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[e]] ( final String [[search]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[search]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 684 ---------------------------------------------
Create a new HttpRequest instance with the given destination string . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest options ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest options ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 685 ---------------------------------------------
Sets the value of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[command]] ( String [[hash]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 686 ---------------------------------------------
Add parameters . --> Request a request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object [[value1]] , final Object ... parameters ) { [[query]] ( name1 , [[value1]] == null ? null : [[value1]] . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[query]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[request]] ( final String name1 , final Object [[access]] , final Object ... parameters ) { [[request]] ( name1 , [[access]] == null ? null : [[access]] . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[request]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 687 ---------------------------------------------
Gets the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[sql]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 688 ---------------------------------------------
Sets the query string . --> Generic http request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest queryString ( final String [[queryString]] , final boolean decode ) { this . query = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String [[header]] , final boolean decode ) { this . query = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 689 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 372 / 288 / 29 / 689:  69%|██████▉   | 689/1000 [23:39<10:40,  2.06s/it][Succeeded / Failed / Skipped / Total] 373 / 288 / 29 / 690:  69%|██████▉   | 690/1000 [23:39<10:37,  2.06s/it][Succeeded / Failed / Skipped / Total] 373 / 288 / 29 / 690:  69%|██████▉   | 691/1000 [23:40<10:35,  2.06s/it][Succeeded / Failed / Skipped / Total] 374 / 288 / 29 / 691:  69%|██████▉   | 691/1000 [23:40<10:35,  2.06s/it][Succeeded / Failed / Skipped / Total] 375 / 288 / 29 / 692:  69%|██████▉   | 692/1000 [23:42<10:32,  2.06s/it][Succeeded / Failed / Skipped / Total] 375 / 288 / 29 / 692:  69%|██████▉   | 693/1000 [23:45<10:31,  2.06s/it][Succeeded / Failed / Skipped / Total] 376 / 288 / 29 / 693:  69%|██████▉   | 693/1000 [23:45<10:31,  2.06s/it][Succeeded / Failed / Skipped / Total] 377 / 288 / 29 / 694:  69%|██████▉   | 694/1000 [23:48<10:29,  2.06s/it][Succeeded / Failed / Skipped / Total] 377 / 288 / 29 / 694:  70%|██████▉   | 695/1000 [23:48<10:26,  2.06s/it][Succeeded / Failed / Skipped / Total] 378 / 288 / 29 / 695:  70%|██████▉   | 695/1000 [23:48<10:26,  2.06s/it][Succeeded / Failed / Skipped / Total] 378 / 289 / 29 / 696:  70%|██████▉   | 696/1000 [23:50<10:24,  2.05s/it][Succeeded / Failed / Skipped / Total] 378 / 289 / 29 / 696:  70%|██████▉   | 697/1000 [23:51<10:22,  2.05s/it][Succeeded / Failed / Skipped / Total] 378 / 290 / 29 / 697:  70%|██████▉   | 697/1000 [23:51<10:22,  2.05s/it][Succeeded / Failed / Skipped / Total] 378 / 291 / 29 / 698:  70%|██████▉   | 698/1000 [23:52<10:19,  2.05s/it][Succeeded / Failed / Skipped / Total] 378 / 291 / 29 / 698:  70%|██████▉   | 699/1000 [23:54<10:17,  2.05s/it]Returns the host url . --> Create a link --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[link]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 690 ---------------------------------------------
Set basic authentication . --> Set username and password --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[ia]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 691 ---------------------------------------------
Adds a Map to the query . --> add access to rant --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > entry : [[queryMap]] . entrySet ( ) ) { [[query]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[rant]] ( final Map < String , String > [[access]] ) { for ( Map . Entry < String , String > entry : [[access]] . entrySet ( ) ) { [[rant]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 692 ---------------------------------------------
Set the host header . --> Set the HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[bridge]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 693 ---------------------------------------------
Send a function and receive the result . --> Sends the address and waits for the given function --> Socre: 1.0

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[address]] > [[address]] sendAndReceive ( final Function < HttpResponse , [[address]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 694 ---------------------------------------------
Maintain the request buffer . --> Create a boolean value --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[f]] ( final boolean [[value]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 695 ---------------------------------------------
Collect all action results . --> help methods --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[help]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 696 ---------------------------------------------
Collects all action criterion . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[actions]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 697 ---------------------------------------------
Collect all action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > [[interceptorValues]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[interceptorValues]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[interceptor]] ( ) { final Collection < ? extends ActionInterceptor > [[set]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[set]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 698 ---------------------------------------------
Collects the action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[buffer]] ( ) { final Collection < ? extends ActionFilter > [[i]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[i]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 699 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 379 / 291 / 29 / 699:  70%|██████▉   | 699/1000 [23:54<10:17,  2.05s/it][Succeeded / Failed / Skipped / Total] 380 / 291 / 29 / 700:  70%|███████   | 700/1000 [23:56<10:15,  2.05s/it][Succeeded / Failed / Skipped / Total] 380 / 291 / 29 / 700:  70%|███████   | 701/1000 [23:58<10:13,  2.05s/it][Succeeded / Failed / Skipped / Total] 381 / 291 / 29 / 701:  70%|███████   | 701/1000 [23:58<10:13,  2.05s/it][Succeeded / Failed / Skipped / Total] 381 / 292 / 29 / 702:  70%|███████   | 702/1000 [24:04<10:13,  2.06s/it][Succeeded / Failed / Skipped / Total] 381 / 292 / 29 / 702:  70%|███████   | 703/1000 [24:05<10:10,  2.06s/it][Succeeded / Failed / Skipped / Total] 381 / 293 / 29 / 703:  70%|███████   | 703/1000 [24:05<10:10,  2.06s/it][Succeeded / Failed / Skipped / Total] 381 / 294 / 29 / 704:  70%|███████   | 704/1000 [24:06<10:08,  2.06s/it][Succeeded / Failed / Skipped / Total] 381 / 294 / 29 / 704:  70%|███████   | 705/1000 [24:08<10:06,  2.06s/it][Succeeded / Failed / Skipped / Total] 381 / 295 / 29 / 705:  70%|███████   | 705/1000 [24:08<10:06,  2.06s/it][Succeeded / Failed / Skipped / Total] 381 / 296 / 29 / 706:  71%|███████   | 706/1000 [24:12<10:04,  2.06s/it][Succeeded / Failed / Skipped / Total] 381 / 296 / 29 / 706:  71%|███████   | 707/1000 [24:12<10:01,  2.05s/it][Succeeded / Failed / Skipped / Total] 381 / 297 / 29 / 707:  71%|███████   | 707/1000 [24:12<10:01,  2.05s/it]Sets the bean property . --> setter for example --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[example]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 700 ---------------------------------------------
Extract the reference to the given property name --> Quote a property --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[quote]] ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 701 ---------------------------------------------
Get the output writer . --> region print Implementation --> Socre: 1.0

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[write]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 702 ---------------------------------------------
Gets the object property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[c]] > [[c]] getProperty ( final Object bean , final String name ) { BeanProperty [[address]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[address]] ) ; return ( [[c]] ) getIndexProperty ( [[address]] ) ; } else { try { resolveNestedProperties ( [[address]] ) ; return ( [[c]] ) getIndexProperty ( [[address]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 703 ---------------------------------------------
Set REPLACEME0 . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : [[REPLACEME0]] ) { Integer [[maxAge]] = cookie . getMaxAge ( ) ; if ( [[maxAge]] != null && [[maxAge]] . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[cookieString]] . append ( "; " ) ; } first = "False" != "False" ; [[cookieString]] . append ( cookie . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[ran]] ( final Cookie ... [[ran]] ) { if ( [[ran]] . length == 0 ) { return this ; } StringBuilder [[last]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : [[ran]] ) { Integer [[middle]] = cookie . getMaxAge ( ) ; if ( [[middle]] != null && [[middle]] . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[last]] . append ( "; " ) ; } first = "False" != "False" ; [[last]] . append ( cookie . getName ( ) ) ; [[last]] . append ( ' ' ) ; [[last]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[last]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 704 ---------------------------------------------
Get the object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[description]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 705 ---------------------------------------------
Returns the index of the table length . --> [[[FAILED]]]

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler [[firstHandler]] ) { int length = 0 ; Handler [[handler]] = [[firstHandler]] ; while ( [[handler]] != null ) { length ++ ; [[handler]] = [[handler]] . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler [[s]] ) { int length = 0 ; Handler [[t]] = [[s]] ; while ( [[t]] != null ) { length ++ ; [[t]] = [[t]] . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 706 ---------------------------------------------
Set a object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[pair]] ( final String [[strings]] , final Object [[table]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[strings]] , [[table]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Lookup an object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[reference]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 708 ---------------------------------------------
Serialize a value --> Serialize a JSON document to a JSON document --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[value]] ) { if ( jsonContext . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[ld]] ) { if ( jsonContext . pushValue ( [[ld]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .[Succeeded / Failed / Skipped / Total] 382 / 297 / 29 / 708:  71%|███████   | 708/1000 [24:19<10:01,  2.06s/it][Succeeded / Failed / Skipped / Total] 382 / 297 / 29 / 708:  71%|███████   | 709/1000 [24:19<09:59,  2.06s/it][Succeeded / Failed / Skipped / Total] 382 / 298 / 29 / 709:  71%|███████   | 709/1000 [24:19<09:59,  2.06s/it][Succeeded / Failed / Skipped / Total] 383 / 298 / 29 / 710:  71%|███████   | 710/1000 [24:19<09:56,  2.06s/it][Succeeded / Failed / Skipped / Total] 383 / 298 / 29 / 710:  71%|███████   | 711/1000 [24:23<09:54,  2.06s/it][Succeeded / Failed / Skipped / Total] 384 / 298 / 29 / 711:  71%|███████   | 711/1000 [24:23<09:54,  2.06s/it][Succeeded / Failed / Skipped / Total] 384 / 299 / 29 / 712:  71%|███████   | 712/1000 [24:24<09:52,  2.06s/it][Succeeded / Failed / Skipped / Total] 384 / 299 / 29 / 712:  71%|███████▏  | 713/1000 [24:29<09:51,  2.06s/it][Succeeded / Failed / Skipped / Total] 385 / 299 / 29 / 713:  71%|███████▏  | 713/1000 [24:29<09:51,  2.06s/it][Succeeded / Failed / Skipped / Total] 386 / 299 / 29 / 714:  71%|███████▏  | 714/1000 [24:30<09:49,  2.06s/it][Succeeded / Failed / Skipped / Total] 386 / 299 / 29 / 714:  72%|███████▏  | 715/1000 [24:37<09:49,  2.07s/it][Succeeded / Failed / Skipped / Total] 387 / 299 / 29 / 715:  72%|███████▏  | 715/1000 [24:37<09:49,  2.07s/it][Succeeded / Failed / Skipped / Total] 388 / 299 / 29 / 716:  72%|███████▏  | 716/1000 [24:41<09:47,  2.07s/it][Succeeded / Failed / Skipped / Total] 388 / 299 / 29 / 716:  72%|███████▏  | 717/1000 [24:46<09:46,  2.07s/it]
--------------------------------------------- Result 709 ---------------------------------------------
Gets the DbEntityDescriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 710 ---------------------------------------------
Lookup the table reference . --> Returns the entity descriptor after the specified query --> Socre: 1.0

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[after]] ( final String [[query]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[query]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[query]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 711 ---------------------------------------------
Register a hint . --> Adds the given note --> Socre: 1.0

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[note]] ( final String [[preview]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[preview]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 712 ---------------------------------------------
Gets table alias . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( tableRef ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[template]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[f]] = tableRefs . get ( tableRef ) ; return [[f]] == null ? null : [[f]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 713 ---------------------------------------------
Find the table descriptor by column name . --> Returns the DbEntityDescriptor for the given columnRef --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[ded]] = entry . getValue ( ) . desc ; if ( [[ded]] . findByPropertyName ( columnRef ) != null ) { return [[ded]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[gate]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[path]] = entry . getValue ( ) . desc ; if ( [[path]] . findByPropertyName ( columnRef ) != null ) { return [[path]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 714 ---------------------------------------------
Converts column name to property name . --> Generates a Serial columnName --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[bar]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 715 ---------------------------------------------
Register a table reference . --> Call after tableAlias --> Socre: 1.0

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor [[ded]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[t]] = new TableRefData ( [[ded]] , tableAlias ) ; if ( tableRefs . put ( tableReference , [[t]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[after]] ( final String tableReference , final DbEntityDescriptor [[array]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[index]] = new TableRefData ( [[array]] , tableAlias ) ; if ( tableRefs . put ( tableReference , [[index]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 716 ---------------------------------------------
Apply column to column name --> Convert a columnName --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String columnName ) { String [[propertyName]] = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( [[propertyName]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[change]] ( final String columnName ) { String [[changed]] = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( [[changed]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 717 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 388 / 300 / 29 / 717:  72%|███████▏  | 717/1000 [24:46<09:46,  2.07s/it][Succeeded / Failed / Skipped / Total] 388 / 301 / 29 / 718:  72%|███████▏  | 718/1000 [24:47<09:44,  2.07s/it][Succeeded / Failed / Skipped / Total] 388 / 301 / 29 / 718:  72%|███████▏  | 719/1000 [24:49<09:42,  2.07s/it][Succeeded / Failed / Skipped / Total] 388 / 302 / 29 / 719:  72%|███████▏  | 719/1000 [24:49<09:42,  2.07s/it][Succeeded / Failed / Skipped / Total] 388 / 303 / 29 / 720:  72%|███████▏  | 720/1000 [24:52<09:40,  2.07s/it][Succeeded / Failed / Skipped / Total] 388 / 303 / 29 / 720:  72%|███████▏  | 721/1000 [24:53<09:38,  2.07s/it][Succeeded / Failed / Skipped / Total] 388 / 304 / 29 / 721:  72%|███████▏  | 721/1000 [24:53<09:38,  2.07s/it][Succeeded / Failed / Skipped / Total] 389 / 304 / 29 / 722:  72%|███████▏  | 722/1000 [24:58<09:37,  2.08s/it][Succeeded / Failed / Skipped / Total] 389 / 304 / 29 / 722:  72%|███████▏  | 723/1000 [25:01<09:35,  2.08s/it][Succeeded / Failed / Skipped / Total] 389 / 305 / 29 / 723:  72%|███████▏  | 723/1000 [25:01<09:35,  2.08s/it][Succeeded / Failed / Skipped / Total] 389 / 306 / 29 / 724:  72%|███████▏  | 724/1000 [25:03<09:33,  2.08s/it][Succeeded / Failed / Skipped / Total] 389 / 306 / 29 / 724:  72%|███████▎  | 725/1000 [25:09<09:32,  2.08s/it]Prepare get value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[b]] > [[b]] prepareGetValue ( final T t , final Class < [[b]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[b]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 718 ---------------------------------------------
remove range . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label [[start]] , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , [[start]] , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = [[start]] . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[java]] ( final Handler firstHandler , final Label [[begin]] , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[java]] ( firstHandler . nextHandler , [[begin]] , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = [[begin]] . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 719 ---------------------------------------------
convertPropertyName to column name --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder [[tableName]] = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[convertedTableName]] = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; [[tableName]] . append ( [[convertedTableName]] ) ; } else { [[tableName]] . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return [[tableName]] . toString ( ) ; } return uppercase ? toUppercase ( [[tableName]] ) . toString ( ) : toLowercase ( [[tableName]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[can]] ( final String [[result]] ) { StringBuilder [[index]] = new StringBuilder ( [[result]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[color]] = Format . fromCamelCase ( [[result]] , separatorChar ) ; [[index]] . append ( [[color]] ) ; } else { [[index]] . append ( [[result]] ) ; } if ( ! changeCase ) { return [[index]] . toString ( ) ; } return uppercase ? toUppercase ( [[index]] ) . toString ( ) : toLowercase ( [[index]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 720 ---------------------------------------------
Create a new wrapper --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[v]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 721 ---------------------------------------------
Returns a set of all wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[flags]] ( ) { final Set < T > [[object]] = new HashSet <> ( wrappers . size ( ) ) ; [[object]] . addAll ( wrappers . values ( ) ) ; return [[object]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 722 ---------------------------------------------
Resolve a wrapper class . --> Resolve a class --> Socre: 1.0

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[wrapperClass]] ) { String [[wrapperClassName]] = [[wrapperClass]] . getName ( ) ; T wrapper = lookup ( [[wrapperClassName]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[wrapperClassName]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[p]] ) { String [[base]] = [[p]] . getName ( ) ; T wrapper = lookup ( [[base]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[p]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[base]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 723 ---------------------------------------------
Convert a path to a file system . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[fix]] ( final String [[value]] ) { if ( [[value]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[value]] ) ; } else { return separatorsToUnix ( [[value]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 724 ---------------------------------------------
Store value . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T [[t]] = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , [[t]] , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[type]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T [[mp]] = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , [[mp]] , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 725 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 389 / 307 / 29 / 725:  72%|███████▎  | 725/1000 [25:09<09:32,  2.08s/it][Succeeded / Failed / Skipped / Total] 390 / 307 / 29 / 726:  73%|███████▎  | 726/1000 [25:12<09:30,  2.08s/it][Succeeded / Failed / Skipped / Total] 390 / 307 / 29 / 726:  73%|███████▎  | 727/1000 [25:13<09:28,  2.08s/it][Succeeded / Failed / Skipped / Total] 391 / 307 / 29 / 727:  73%|███████▎  | 727/1000 [25:13<09:28,  2.08s/it][Succeeded / Failed / Skipped / Total] 392 / 307 / 29 / 728:  73%|███████▎  | 728/1000 [25:14<09:25,  2.08s/it][Succeeded / Failed / Skipped / Total] 392 / 307 / 29 / 728:  73%|███████▎  | 729/1000 [25:19<09:24,  2.08s/it][Succeeded / Failed / Skipped / Total] 393 / 307 / 29 / 729:  73%|███████▎  | 729/1000 [25:19<09:24,  2.08s/it][Succeeded / Failed / Skipped / Total] 393 / 308 / 29 / 730:  73%|███████▎  | 730/1000 [25:20<09:22,  2.08s/it][Succeeded / Failed / Skipped / Total] 393 / 308 / 29 / 730:  73%|███████▎  | 731/1000 [25:22<09:20,  2.08s/it][Succeeded / Failed / Skipped / Total] 393 / 309 / 29 / 731:  73%|███████▎  | 731/1000 [25:22<09:20,  2.08s/it]Sets the action configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[through]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 726 ---------------------------------------------
Gets relative path . --> Gets relativePath from objective --> Socre: 1.0

[[[[Adv]]]]: public static String relativePath ( final String [[targetPath]] , final String [[basePath]] ) { return new File ( [[basePath]] ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String relativePath ( final String [[objective]] , final String [[subjective]] ) { return new File ( [[subjective]] ) . toPath ( ) . relativize ( new File ( [[objective]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 727 ---------------------------------------------
Register a component . --> Register a class --> Socre: 1.0

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[c]] ) { Objects . requireNonNull ( [[c]] ) ; madvocComponents . add ( ClassConsumer . of ( [[c]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 728 ---------------------------------------------
Initialize WebApp . --> Get the WebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[group]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 729 ---------------------------------------------
Gets the resource path . --> Returns null if filename is empty --> Socre: 1.0

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int [[prefix]] = getPrefixLength ( filename ) ; if ( [[prefix]] < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( [[prefix]] >= filename . length ( ) || index < 0 || [[prefix]] >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( [[prefix]] , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[fetch]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int [[iris]] = getPrefixLength ( filename ) ; if ( [[iris]] < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( [[iris]] >= filename . length ( ) || index < 0 || [[iris]] >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( [[iris]] , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 730 ---------------------------------------------
Register the Madvoc container . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[copy]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 731 ---------------------------------------------
Registers the defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[action]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 732 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 393 / 310 / 29 / 732:  73%|███████▎  | 732/1000 [25:34<09:21,  2.10s/it][Succeeded / Failed / Skipped / Total] 393 / 310 / 29 / 732:  73%|███████▎  | 733/1000 [25:35<09:19,  2.09s/it][Succeeded / Failed / Skipped / Total] 394 / 310 / 29 / 733:  73%|███████▎  | 733/1000 [25:35<09:19,  2.09s/it][Succeeded / Failed / Skipped / Total] 394 / 310 / 29 / 733:  73%|███████▎  | 734/1000 [25:39<09:18,  2.10s/it][Succeeded / Failed / Skipped / Total] 394 / 311 / 29 / 734:  73%|███████▎  | 734/1000 [25:39<09:18,  2.10s/it][Succeeded / Failed / Skipped / Total] 394 / 311 / 29 / 734:  74%|███████▎  | 735/1000 [25:42<09:15,  2.10s/it][Succeeded / Failed / Skipped / Total] 394 / 312 / 29 / 735:  74%|███████▎  | 735/1000 [25:42<09:15,  2.10s/it][Succeeded / Failed / Skipped / Total] 394 / 312 / 29 / 735:  74%|███████▎  | 736/1000 [25:42<09:13,  2.10s/it][Succeeded / Failed / Skipped / Total] 395 / 312 / 29 / 736:  74%|███████▎  | 736/1000 [25:42<09:13,  2.10s/it][Succeeded / Failed / Skipped / Total] 395 / 312 / 29 / 736:  74%|███████▎  | 737/1000 [25:43<09:10,  2.09s/it][Succeeded / Failed / Skipped / Total] 395 / 313 / 29 / 737:  74%|███████▎  | 737/1000 [25:43<09:10,  2.09s/it][Succeeded / Failed / Skipped / Total] 395 / 313 / 29 / 737:  74%|███████▍  | 738/1000 [25:49<09:10,  2.10s/it][Succeeded / Failed / Skipped / Total] 396 / 313 / 29 / 738:  74%|███████▍  | 738/1000 [25:49<09:10,  2.10s/it][Succeeded / Failed / Skipped / Total] 396 / 313 / 29 / 738:  74%|███████▍  | 739/1000 [25:50<09:07,  2.10s/it]Inject attributes . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > [[attributeNames]] = servletRequest . getAttributeNames ( ) ; while ( [[attributeNames]] . hasMoreElements ( ) ) { final String attrName = [[attributeNames]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( attrName ) ; if ( [[name]] != null ) { final Object [[attrValue]] = servletRequest . getAttribute ( attrName ) ; target . writeValue ( [[name]] , [[attrValue]] , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[are]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > [[it]] = servletRequest . getAttributeNames ( ) ; while ( [[it]] . hasMoreElements ( ) ) { final String attrName = [[it]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[product]] = in . matchedName ( attrName ) ; if ( [[product]] != null ) { final Object [[output]] = servletRequest . getAttribute ( attrName ) ; target . writeValue ( [[product]] , [[output]] , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 733 ---------------------------------------------
Allows to exclude jars . --> Exposed for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[excludedJars]] ) { for ( final String [[excludedJar]] : [[excludedJars]] ) { rulesJars . exclude ( [[excludedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[include]] ) { for ( final String [[base]] : [[include]] ) { rulesJars . exclude ( [[base]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 734 ---------------------------------------------
Sets the list of jars to include . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... [[includedJars]] ) { for ( final String [[includedJar]] : [[includedJars]] ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[est]] ( final String ... [[i]] ) { for ( final String [[plus]] : [[i]] ) { rulesJars . include ( [[plus]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 735 ---------------------------------------------
Includes all included entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String [[includedEntry]] : includedEntries ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String [[version]] : includedEntries ) { rulesEntries . include ( [[version]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 736 ---------------------------------------------
ScanClassPath Method . --> scan the class file --> Socre: 1.0

[[[[Adv]]]]: protected void scanClassPath ( final File root ) { String [[rootPath]] = root . getAbsolutePath ( ) ; if ( ! [[rootPath]] . endsWith ( File . separator ) ) { [[rootPath]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[rootPath]] ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[rootPath]] , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[rootPath]] , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void scanClassPath ( final File root ) { String [[extension]] = root . getAbsolutePath ( ) ; if ( ! [[extension]] . endsWith ( File . separator ) ) { [[extension]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[extension]] ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[extension]] , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[extension]] , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 737 ---------------------------------------------
Sets the list of excluded entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... [[excludedEntries]] ) { for ( final String excludedEntry : [[excludedEntries]] ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... [[exclude]] ) { for ( final String excludedEntry : [[exclude]] ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 738 ---------------------------------------------
scan . --> Write the list of files to scan --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[write]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 739 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 396 / 314 / 29 / 739:  74%|███████▍  | 739/1000 [25:50<09:07,  2.10s/it][Succeeded / Failed / Skipped / Total] 396 / 314 / 29 / 739:  74%|███████▍  | 740/1000 [25:52<09:05,  2.10s/it][Succeeded / Failed / Skipped / Total] 396 / 315 / 29 / 740:  74%|███████▍  | 740/1000 [25:52<09:05,  2.10s/it][Succeeded / Failed / Skipped / Total] 396 / 315 / 29 / 740:  74%|███████▍  | 741/1000 [25:52<09:02,  2.10s/it][Succeeded / Failed / Skipped / Total] 396 / 316 / 29 / 741:  74%|███████▍  | 741/1000 [25:52<09:02,  2.10s/it][Succeeded / Failed / Skipped / Total] 396 / 316 / 29 / 741:  74%|███████▍  | 742/1000 [25:55<09:00,  2.10s/it]Split extension . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] [[split]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[i]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 740 ---------------------------------------------
InjectUploaded files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[multipartRequest]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[multipartRequest]] . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = [[multipartRequest]] . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] [[paramValues]] = [[multipartRequest]] . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < [[paramValues]] . length ; j ++ ) { final FileUpload [[paramValue]] = [[paramValues]] [ j ] ; if ( ( ! [[paramValue]] . isValid ( ) ) || ( ! [[paramValue]] . isUploaded ( ) ) ) { [[paramValues]] [ j ] = null ; } } } final Object value = ( [[paramValues]] . length == 1 ? [[paramValues]] [ 0 ] : [[paramValues]] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[since]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[end]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[end]] . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = [[end]] . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] [[result]] = [[end]] . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < [[result]] . length ; j ++ ) { final FileUpload [[form]] = [[result]] [ j ] ; if ( ( ! [[form]] . isValid ( ) ) || ( ! [[form]] . isUploaded ( ) ) ) { [[result]] [ j ] = null ; } } } final Object value = ( [[result]] . length == 1 ? [[result]] [ 0 ] : [[result]] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 741 ---------------------------------------------
Inject parameters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final boolean [[encode]] = encodeGetParams && [[servletRequest]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( paramName ) ; if ( [[name]] != null ) { String [ ] paramValues = [[servletRequest]] . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( [[encode]] ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( [[name]] , value , "[[True]]" == "[[True]]" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[after]] ( final HttpServletRequest [[ri]] , final Targets targets ) { final boolean [[dir]] = encodeGetParams && [[ri]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = [[ri]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[ri]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[source]] = in . matchedName ( paramName ) ; if ( [[source]] != null ) { String [ ] paramValues = [[ri]] . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( [[dir]] ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( [[source]] , value , "[[bit]]" == "[[bit]]" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
[Succeeded / Failed / Skipped / Total] 396 / 317 / 29 / 742:  74%|███████▍  | 742/1000 [25:55<09:00,  2.10s/it][Succeeded / Failed / Skipped / Total] 396 / 317 / 29 / 742:  74%|███████▍  | 743/1000 [25:57<08:58,  2.10s/it][Succeeded / Failed / Skipped / Total] 396 / 318 / 29 / 743:  74%|███████▍  | 743/1000 [25:57<08:58,  2.10s/it][Succeeded / Failed / Skipped / Total] 396 / 318 / 29 / 743:  74%|███████▍  | 744/1000 [25:58<08:56,  2.09s/it][Succeeded / Failed / Skipped / Total] 397 / 318 / 29 / 744:  74%|███████▍  | 744/1000 [25:58<08:56,  2.09s/it][Succeeded / Failed / Skipped / Total] 397 / 318 / 29 / 744:  74%|███████▍  | 745/1000 [25:59<08:53,  2.09s/it][Succeeded / Failed / Skipped / Total] 397 / 319 / 29 / 745:  74%|███████▍  | 745/1000 [25:59<08:53,  2.09s/it][Succeeded / Failed / Skipped / Total] 397 / 319 / 29 / 745:  75%|███████▍  | 746/1000 [26:05<08:53,  2.10s/it][Succeeded / Failed / Skipped / Total] 398 / 319 / 29 / 746:  75%|███████▍  | 746/1000 [26:05<08:53,  2.10s/it][Succeeded / Failed / Skipped / Total] 398 / 319 / 29 / 746:  75%|███████▍  | 747/1000 [26:05<08:50,  2.10s/it][Succeeded / Failed / Skipped / Total] 398 / 319 / 30 / 747:  75%|███████▍  | 747/1000 [26:05<08:50,  2.10s/it][Succeeded / Failed / Skipped / Total] 398 / 319 / 30 / 747:  75%|███████▍  | 748/1000 [26:14<08:50,  2.10s/it][Succeeded / Failed / Skipped / Total] 398 / 320 / 30 / 748:  75%|███████▍  | 748/1000 [26:14<08:50,  2.10s/it][Succeeded / Failed / Skipped / Total] 398 / 320 / 30 / 748:  75%|███████▍  | 749/1000 [26:16<08:48,  2.10s/it][Succeeded / Failed / Skipped / Total] 398 / 321 / 30 / 749:  75%|███████▍  | 749/1000 [26:16<08:48,  2.10s/it][Succeeded / Failed / Skipped / Total] 398 / 321 / 30 / 749:  75%|███████▌  | 750/1000 [26:21<08:47,  2.11s/it][Succeeded / Failed / Skipped / Total] 399 / 321 / 30 / 750:  75%|███████▌  | 750/1000 [26:21<08:47,  2.11s/it][Succeeded / Failed / Skipped / Total] 399 / 321 / 30 / 750:  75%|███████▌  | 751/1000 [26:23<08:45,  2.11s/it]--------------------------------------------- Result 742 ---------------------------------------------
Returns the default scope type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[http]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 743 ---------------------------------------------
Returns the bytecode signature of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[foo]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 744 ---------------------------------------------
Creates a new JtxTransaction . --> Execute a command --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode tm , final Object [[scope]] , final boolean active ) { return new DbJtxTransaction ( this , tm , [[scope]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[execute]] ( final JtxTransactionMode tm , final Object [[command]] , final boolean active ) { return new DbJtxTransaction ( this , tm , [[command]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 745 ---------------------------------------------
Starts the jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[cobra]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 746 ---------------------------------------------
Create a copy of the given source object . --> Create an instance of BeanCopy --> Socre: 1.0

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[driver]] ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 747 ---------------------------------------------
Copy this bean --> [[[SKIPPED]]]

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 748 ---------------------------------------------
Returns the updated MadvocScope of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope [[s]] : allScopes ) { if ( [[s]] . getClass ( ) . equals ( madvocScopeType ) ) { return [[s]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope [[icon]] : allScopes ) { if ( [[icon]] . getClass ( ) . equals ( madvocScopeType ) ) { return [[icon]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 749 ---------------------------------------------
Processes the scope . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[scope]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 750 ---------------------------------------------
Method init . --> Set the template data --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[base]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 751 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 400 / 321 / 30 / 751:  75%|███████▌  | 751/1000 [26:23<08:45,  2.11s/it][Succeeded / Failed / Skipped / Total] 400 / 321 / 30 / 751:  75%|███████▌  | 752/1000 [26:24<08:42,  2.11s/it][Succeeded / Failed / Skipped / Total] 401 / 321 / 30 / 752:  75%|███████▌  | 752/1000 [26:24<08:42,  2.11s/it][Succeeded / Failed / Skipped / Total] 401 / 321 / 30 / 752:  75%|███████▌  | 753/1000 [26:27<08:40,  2.11s/it][Succeeded / Failed / Skipped / Total] 401 / 322 / 30 / 753:  75%|███████▌  | 753/1000 [26:27<08:40,  2.11s/it][Succeeded / Failed / Skipped / Total] 401 / 322 / 30 / 753:  75%|███████▌  | 754/1000 [26:32<08:39,  2.11s/it][Succeeded / Failed / Skipped / Total] 402 / 322 / 30 / 754:  75%|███████▌  | 754/1000 [26:32<08:39,  2.11s/it][Succeeded / Failed / Skipped / Total] 402 / 322 / 30 / 754:  76%|███████▌  | 755/1000 [26:35<08:37,  2.11s/it][Succeeded / Failed / Skipped / Total] 403 / 322 / 30 / 755:  76%|███████▌  | 755/1000 [26:35<08:37,  2.11s/it][Succeeded / Failed / Skipped / Total] 403 / 322 / 30 / 755:  76%|███████▌  | 756/1000 [26:41<08:36,  2.12s/it][Succeeded / Failed / Skipped / Total] 403 / 323 / 30 / 756:  76%|███████▌  | 756/1000 [26:41<08:36,  2.12s/it][Succeeded / Failed / Skipped / Total] 403 / 323 / 30 / 756:  76%|███████▌  | 757/1000 [26:44<08:35,  2.12s/it]Assure size . --> F743 --> Socre: 1.0

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[token]] = iterator . next ( ) ; if ( [[token]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[token]] . validUntil < validUntilMin ) { validUntilMin = [[token]] . validUntil ; tokenToRemove = [[token]] ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[head]] = iterator . next ( ) ; if ( [[head]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[head]] . validUntil < validUntilMin ) { validUntilMin = [[head]] . validUntil ; tokenToRemove = [[head]] ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 752 ---------------------------------------------
Check whether the token is valid . --> routine routine for session access --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "[[True]]" == "[[True]]" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean [[found]] = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; [[found]] = "[[True]]" == "[[True]]" ; } } return [[found]] ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[routine]] ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "[[ring]]" == "[[ring]]" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean [[answer]] = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; [[answer]] = "[[ring]]" == "[[ring]]" ; } } return [[answer]] ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 753 ---------------------------------------------
Resolves a scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[v]] Scope > S resolveScope ( final Class < S > scopeType ) { S [[exception]] = ( S ) scopes . get ( scopeType ) ; if ( [[exception]] == null ) { try { [[exception]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[exception]] ) ; scopes . put ( scopeType , [[exception]] ) ; } return [[exception]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 754 ---------------------------------------------
Visits a property value . --> Set data flag --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String [[name]] , final Object [[value]] ) { if ( isTargetMap ) { [[name]] = LEFT_SQ_BRACKET + [[name]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[name]] , [[value]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[flag]] ( String [[data]] , final Object [[count]] ) { if ( isTargetMap ) { [[data]] = LEFT_SQ_BRACKET + [[data]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[data]] , [[count]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 755 ---------------------------------------------
Remove the bean . --> Set the class --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[a]] ( final Class [[alice]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 756 ---------------------------------------------
Returns a random token from the session . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int [[timeToLive]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , [[timeToLive]] ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int [[data]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , [[data]] ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 757 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 404 / 323 / 30 / 757:  76%|███████▌  | 757/1000 [26:44<08:35,  2.12s/it][Succeeded / Failed / Skipped / Total] 404 / 323 / 30 / 757:  76%|███████▌  | 758/1000 [26:49<08:33,  2.12s/it][Succeeded / Failed / Skipped / Total] 405 / 323 / 30 / 758:  76%|███████▌  | 758/1000 [26:49<08:33,  2.12s/it][Succeeded / Failed / Skipped / Total] 405 / 323 / 30 / 758:  76%|███████▌  | 759/1000 [26:49<08:31,  2.12s/it][Succeeded / Failed / Skipped / Total] 406 / 323 / 30 / 759:  76%|███████▌  | 759/1000 [26:49<08:31,  2.12s/it][Succeeded / Failed / Skipped / Total] 406 / 323 / 30 / 759:  76%|███████▌  | 760/1000 [26:51<08:28,  2.12s/it]Registers a new property Injection Point . --> Set a bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[dicate]] ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 758 ---------------------------------------------
Registers a Ctor Injection . --> Method to test a class --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] [[paramTypes]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( [[paramTypes]] == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( [[paramTypes]] , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[test]] ( final String beanName , final Class [ ] [[files]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( [[files]] == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( [[files]] , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 759 ---------------------------------------------
Register a set Injection point . --> Declares a property --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[declare]] ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 760 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 406 / 324 / 30 / 760:  76%|███████▌  | 760/1000 [26:51<08:28,  2.12s/it][Succeeded / Failed / Skipped / Total] 406 / 324 / 30 / 760:  76%|███████▌  | 761/1000 [26:55<08:27,  2.12s/it][Succeeded / Failed / Skipped / Total] 407 / 324 / 30 / 761:  76%|███████▌  | 761/1000 [26:55<08:27,  2.12s/it][Succeeded / Failed / Skipped / Total] 407 / 324 / 30 / 761:  76%|███████▌  | 762/1000 [26:58<08:25,  2.12s/it][Succeeded / Failed / Skipped / Total] 408 / 324 / 30 / 762:  76%|███████▌  | 762/1000 [26:58<08:25,  2.12s/it][Succeeded / Failed / Skipped / Total] 408 / 324 / 30 / 762:  76%|███████▋  | 763/1000 [27:06<08:25,  2.13s/it]Scan the specified jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry [[zipEntry]] = ( ZipEntry ) entries . nextElement ( ) ; final String [[zipEntryName]] = [[zipEntry]] . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[zipEntryName]] , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( [[zipEntryName]] , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , [[zipEntry]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( [[zipEntryName]] , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , [[zipEntry]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry [[tables]] = ( ZipEntry ) entries . nextElement ( ) ; final String [[row]] = [[tables]] . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[row]] , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( [[row]] , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , [[tables]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( [[row]] , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , [[tables]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 761 ---------------------------------------------
Registers a method InjectionPoint . --> Register aInjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String [[beanName]] , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String [[value]] , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[value]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 762 ---------------------------------------------
Register a destroy method for a bean definition . --> Register a destroyMethods --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String [[beanName]] , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String [[g]] , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[g]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 763 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 409 / 324 / 30 / 763:  76%|███████▋  | 763/1000 [27:06<08:25,  2.13s/it][Succeeded / Failed / Skipped / Total] 409 / 324 / 30 / 763:  76%|███████▋  | 764/1000 [27:07<08:22,  2.13s/it][Succeeded / Failed / Skipped / Total] 410 / 324 / 30 / 764:  76%|███████▋  | 764/1000 [27:07<08:22,  2.13s/it][Succeeded / Failed / Skipped / Total] 410 / 324 / 30 / 764:  76%|███████▋  | 765/1000 [27:12<08:21,  2.13s/it][Succeeded / Failed / Skipped / Total] 411 / 324 / 30 / 765:  76%|███████▋  | 765/1000 [27:12<08:21,  2.13s/it][Succeeded / Failed / Skipped / Total] 411 / 324 / 30 / 765:  77%|███████▋  | 766/1000 [27:13<08:18,  2.13s/it][Succeeded / Failed / Skipped / Total] 411 / 325 / 30 / 766:  77%|███████▋  | 766/1000 [27:13<08:18,  2.13s/it][Succeeded / Failed / Skipped / Total] 411 / 325 / 30 / 766:  77%|███████▋  | 767/1000 [27:13<08:16,  2.13s/it][Succeeded / Failed / Skipped / Total] 411 / 326 / 30 / 767:  77%|███████▋  | 767/1000 [27:13<08:16,  2.13s/it][Succeeded / Failed / Skipped / Total] 411 / 326 / 30 / 767:  77%|███████▋  | 768/1000 [27:22<08:16,  2.14s/it]Iterates over the bean types and handles types . --> Iterate over bean types --> Socre: 1.0

[[[[Adv]]]]: public void forEachBeanType ( final Class [[type]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void forEachBeanType ( final Class [[value]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[value]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 764 ---------------------------------------------
Register a provider definition for the specified beanName . --> use a ProviderDefinition --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String [[providerName]] , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[providerName]] , beanName , md . getMethod ( ) ) ; providers . put ( [[providerName]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[use]] ( final String [[table]] , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[table]] , beanName , md . getMethod ( ) ) ; providers . put ( [[table]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 765 ---------------------------------------------
Define parameter parameters . --> maps the properties --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[maps]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 766 ---------------------------------------------
Resolve bean names for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class [[type]] ) { String [ ] beanNames = beanCollections . get ( [[type]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[box]] ( final Class [[word]] ) { String [ ] beanNames = beanCollections . get ( [[word]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[word]] ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[word]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 767 ---------------------------------------------
Register bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class [[type]] = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( [[type]] ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( [[type]] ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class [[api]] = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( [[api]] ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( [[api]] ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 768 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 412 / 326 / 30 / 768:  77%|███████▋  | 768/1000 [27:22<08:16,  2.14s/it][Succeeded / Failed / Skipped / Total] 412 / 326 / 30 / 768:  77%|███████▋  | 769/1000 [27:31<08:16,  2.15s/it][Succeeded / Failed / Skipped / Total] 412 / 327 / 30 / 769:  77%|███████▋  | 769/1000 [27:31<08:16,  2.15s/it][Succeeded / Failed / Skipped / Total] 412 / 327 / 30 / 769:  77%|███████▋  | 770/1000 [27:33<08:13,  2.15s/it][Succeeded / Failed / Skipped / Total] 412 / 328 / 30 / 770:  77%|███████▋  | 770/1000 [27:33<08:13,  2.15s/it][Succeeded / Failed / Skipped / Total] 412 / 328 / 30 / 770:  77%|███████▋  | 771/1000 [27:36<08:12,  2.15s/it][Succeeded / Failed / Skipped / Total] 412 / 329 / 30 / 771:  77%|███████▋  | 771/1000 [27:36<08:12,  2.15s/it][Succeeded / Failed / Skipped / Total] 412 / 329 / 30 / 771:  77%|███████▋  | 772/1000 [27:40<08:10,  2.15s/it][Succeeded / Failed / Skipped / Total] 412 / 330 / 30 / 772:  77%|███████▋  | 772/1000 [27:40<08:10,  2.15s/it][Succeeded / Failed / Skipped / Total] 412 / 330 / 30 / 772:  77%|███████▋  | 773/1000 [27:41<08:07,  2.15s/it][Succeeded / Failed / Skipped / Total] 413 / 330 / 30 / 773:  77%|███████▋  | 773/1000 [27:41<08:07,  2.15s/it][Succeeded / Failed / Skipped / Total] 413 / 330 / 30 / 773:  77%|███████▋  | 774/1000 [27:41<08:05,  2.15s/it]Register a provider --> Create a product for a class --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor [[md]] = [[cd]] . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , [[md]] . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[product]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor [[ba]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor [[b]] = [[ba]] . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( [[b]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , [[b]] . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 769 ---------------------------------------------
Adds a integer to the mv . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int [[value]] ) { if ( [[value]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[value]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[include]] ( final MethodVisitor mv , final int [[element]] ) { if ( [[element]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[element]] ) ; } else if ( [[element]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[element]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[element]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 770 ---------------------------------------------
Registers a Bean with the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > [[type]] , String name , Class < ? extends Scope > [[scopeType]] , WiringMode wiringMode , final boolean [[define]] , final Consumer < T > [[consumer]] ) { if ( name == null ) { name = resolveBeanName ( [[type]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[type]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( [[scopeType]] == null ) { [[scopeType]] = annotationResolver . resolveBeanScopeType ( [[type]] ) ; } if ( [[scopeType]] == null ) { [[scopeType]] = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[assume]] ( final Class < T > [[customer]] , String name , Class < ? extends Scope > [[customer]] , WiringMode wiringMode , final boolean [[agent]] , final Consumer < T > [[dealer]] ) { if ( name == null ) { name = resolveBeanName ( [[customer]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[customer]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( [[customer]] == null ) { [[customer]] = annotationResolver . resolveBeanScopeType ( [[customer]] ) ; } if ( [[customer]] == null ) { [[customer]] = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 771 ---------------------------------------------
Resolves the Java version . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return [[version]] > platformVersion ? [[version]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[end]] ( final int [[b]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return [[b]] > platformVersion ? [[b]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 772 ---------------------------------------------
Sets the argument index in the given method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo [[methodInfo]] , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > [[methodInfo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo [[ult]] , final int [[element]] ) { if ( ( [[element]] < 1 ) || ( [[element]] > [[ult]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[element]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 773 ---------------------------------------------
Intercept the action request . --> Print the given ActionRequest --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest [[actionRequest]] ) throws Exception { printBefore ( [[actionRequest]] ) ; long startTime = System . currentTimeMillis ( ) ; Object [[result]] = null ; try { [[result]] = [[actionRequest]] . invoke ( ) ; } catch ( Exception ex ) { [[result]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[result]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( [[actionRequest]] , executionTime , [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[alt]] ( final ActionRequest [[age]] ) throws Exception { printBefore ( [[age]] ) ; long startTime = System . currentTimeMillis ( ) ; Object [[execution]] = null ; try { [[execution]] = [[age]] . invoke ( ) ; } catch ( Exception ex ) { [[execution]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[execution]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( [[age]] , executionTime , [[execution]] ) ; } return [[execution]] ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 774 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 414 / 330 / 30 / 774:  77%|███████▋  | 774/1000 [27:41<08:05,  2.15s/it][Succeeded / Failed / Skipped / Total] 414 / 330 / 30 / 774:  78%|███████▊  | 775/1000 [27:43<08:02,  2.15s/it][Succeeded / Failed / Skipped / Total] 415 / 330 / 30 / 775:  78%|███████▊  | 775/1000 [27:43<08:02,  2.15s/it][Succeeded / Failed / Skipped / Total] 415 / 330 / 30 / 775:  78%|███████▊  | 776/1000 [27:44<08:00,  2.14s/it][Succeeded / Failed / Skipped / Total] 416 / 330 / 30 / 776:  78%|███████▊  | 776/1000 [27:44<08:00,  2.14s/it][Succeeded / Failed / Skipped / Total] 416 / 330 / 30 / 776:  78%|███████▊  | 777/1000 [27:47<07:58,  2.15s/it][Succeeded / Failed / Skipped / Total] 416 / 331 / 30 / 777:  78%|███████▊  | 777/1000 [27:47<07:58,  2.15s/it][Succeeded / Failed / Skipped / Total] 416 / 331 / 30 / 777:  78%|███████▊  | 778/1000 [27:52<07:57,  2.15s/it][Succeeded / Failed / Skipped / Total] 417 / 331 / 30 / 778:  78%|███████▊  | 778/1000 [27:52<07:57,  2.15s/it][Succeeded / Failed / Skipped / Total] 417 / 331 / 30 / 778:  78%|███████▊  | 779/1000 [27:57<07:55,  2.15s/it][Succeeded / Failed / Skipped / Total] 417 / 332 / 30 / 779:  78%|███████▊  | 779/1000 [27:57<07:55,  2.15s/it][Succeeded / Failed / Skipped / Total] 417 / 332 / 30 / 779:  78%|███████▊  | 780/1000 [28:00<07:54,  2.15s/it]Registers a new init method with the given name . --> Create a new instance of a class --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int [[total]] = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[total]] ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor [[md]] = [[cd]] . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( [[md]] . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[say]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[reg]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int [[c]] = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[c]] ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor [[variable]] = [[reg]] . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( [[variable]] == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( [[variable]] . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 775 ---------------------------------------------
Returns the field with the specified name and index . --> Sets the parameter at index --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int index ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[foo]] ( final String [[parameter]] , final int index ) { return ProxettaNames . fieldPrefix + [[parameter]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 776 ---------------------------------------------
Returns the method name . --> Entry point for testing --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[main]] ( final String [[reference]] , final int index ) { return ProxettaNames . methodPrefix + [[reference]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 777 ---------------------------------------------
Decodes a char array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int [[cnt]] = endx - sndx + 1 ; int [[sepCnt]] = length > 76 ? ( arr [ 76 ] == ' ' ? [[cnt]] / 78 : 0 ) << 1 : 0 ; int len = ( ( [[cnt]] - [[sepCnt]] ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int [[cc]] = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( [[sepCnt]] > 0 && ++ [[cc]] == 19 ) { sndx += 2 ; [[cc]] = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[null]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int [[reg]] = endx - sndx + 1 ; int [[d]] = length > 76 ? ( arr [ 76 ] == ' ' ? [[reg]] / 78 : 0 ) << 1 : 0 ; int len = ( ( [[reg]] - [[d]] ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int [[g]] = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( [[d]] > 0 && ++ [[g]] == 19 ) { sndx += 2 ; [[g]] = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 778 ---------------------------------------------
Create a signature key for a method . --> Create a description string --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[description]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 779 ---------------------------------------------
Load the special method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[fix]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 780 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 417 / 333 / 30 / 780:  78%|███████▊  | 780/1000 [28:00<07:54,  2.15s/it][Succeeded / Failed / Skipped / Total] 417 / 333 / 30 / 780:  78%|███████▊  | 781/1000 [28:04<07:52,  2.16s/it][Succeeded / Failed / Skipped / Total] 417 / 334 / 30 / 781:  78%|███████▊  | 781/1000 [28:04<07:52,  2.16s/it][Succeeded / Failed / Skipped / Total] 417 / 334 / 30 / 781:  78%|███████▊  | 782/1000 [28:10<07:51,  2.16s/it][Succeeded / Failed / Skipped / Total] 417 / 335 / 30 / 782:  78%|███████▊  | 782/1000 [28:10<07:51,  2.16s/it][Succeeded / Failed / Skipped / Total] 417 / 335 / 30 / 782:  78%|███████▊  | 783/1000 [28:10<07:48,  2.16s/it][Succeeded / Failed / Skipped / Total] 417 / 336 / 30 / 783:  78%|███████▊  | 783/1000 [28:10<07:48,  2.16s/it][Succeeded / Failed / Skipped / Total] 417 / 336 / 30 / 783:  78%|███████▊  | 784/1000 [28:15<07:47,  2.16s/it][Succeeded / Failed / Skipped / Total] 417 / 337 / 30 / 784:  78%|███████▊  | 784/1000 [28:15<07:47,  2.16s/it][Succeeded / Failed / Skipped / Total] 417 / 337 / 30 / 784:  78%|███████▊  | 785/1000 [28:16<07:44,  2.16s/it]Loads the static method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { for ( int i = 0 ; i < [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[product]] ( final MethodVisitor mv , final MethodInfo [[x]] ) { for ( int i = 0 ; i < [[x]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[x]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 781 ---------------------------------------------
Load arguments for a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { for ( int i = 1 ; i <= [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[fix]] ( final MethodVisitor mv , final MethodInfo [[nent]] ) { for ( int i = 1 ; i <= [[nent]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[nent]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 782 ---------------------------------------------
Create a new signature . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[assuming]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 783 ---------------------------------------------
Pre Pre - initialization method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[mv]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[mv]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[foo]] ( final MethodVisitor [[at]] , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[at]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[at]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[at]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[at]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[at]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[at]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[at]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[at]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[at]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 784 ---------------------------------------------
Stores the array into the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor mv , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( [[componentType]] == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( [[componentType]] == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( [[componentType]] == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( [[componentType]] == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( [[componentType]] == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[merge]] ( final MethodVisitor mv , final Class [[extension]] ) { if ( [[extension]] == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( [[extension]] == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( [[extension]] == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( [[extension]] == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( [[extension]] == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[extension]] == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( [[extension]] == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[extension]] == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 785 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 417 / 338 / 30 / 785:  78%|███████▊  | 785/1000 [28:16<07:44,  2.16s/it][Succeeded / Failed / Skipped / Total] 417 / 338 / 30 / 785:  79%|███████▊  | 786/1000 [28:17<07:42,  2.16s/it][Succeeded / Failed / Skipped / Total] 417 / 339 / 30 / 786:  79%|███████▊  | 786/1000 [28:17<07:42,  2.16s/it][Succeeded / Failed / Skipped / Total] 417 / 339 / 30 / 786:  79%|███████▊  | 787/1000 [28:17<07:39,  2.16s/it][Succeeded / Failed / Skipped / Total] 418 / 339 / 30 / 787:  79%|███████▊  | 787/1000 [28:17<07:39,  2.16s/it][Succeeded / Failed / Skipped / Total] 418 / 339 / 30 / 787:  79%|███████▉  | 788/1000 [28:23<07:38,  2.16s/it][Succeeded / Failed / Skipped / Total] 418 / 340 / 30 / 788:  79%|███████▉  | 788/1000 [28:23<07:38,  2.16s/it][Succeeded / Failed / Skipped / Total] 418 / 340 / 30 / 788:  79%|███████▉  | 789/1000 [28:26<07:36,  2.16s/it][Succeeded / Failed / Skipped / Total] 418 / 341 / 30 / 789:  79%|███████▉  | 789/1000 [28:26<07:36,  2.16s/it][Succeeded / Failed / Skipped / Total] 418 / 341 / 30 / 789:  79%|███████▉  | 790/1000 [28:28<07:34,  2.16s/it][Succeeded / Failed / Skipped / Total] 419 / 341 / 30 / 790:  79%|███████▉  | 790/1000 [28:28<07:34,  2.16s/it][Succeeded / Failed / Skipped / Total] 419 / 341 / 30 / 790:  79%|███████▉  | 791/1000 [28:30<07:31,  2.16s/it][Succeeded / Failed / Skipped / Total] 420 / 341 / 30 / 791:  79%|███████▉  | 791/1000 [28:30<07:31,  2.16s/it][Succeeded / Failed / Skipped / Total] 420 / 341 / 30 / 791:  79%|███████▉  | 792/1000 [28:32<07:29,  2.16s/it]Load method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[function]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 786 ---------------------------------------------
Write method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[stack]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 787 ---------------------------------------------
Resolve the auth token from the request . --> begin a request --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int [[ndx]] = header . indexOf ( "Bearer " ) ; if ( [[ndx]] == - 1 ) { return null ; } return header . substring ( [[ndx]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[begin]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int [[file]] = header . indexOf ( "Bearer " ) ; if ( [[file]] == - 1 ) { return null ; } return header . substring ( [[file]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 788 ---------------------------------------------
Extract encoding from contentType --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String contentType , String defaultEncoding ) { String encoding = [[extractEncoding]] ( contentType ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[fix]] ( final String contentType , String defaultEncoding ) { String encoding = [[fix]] ( contentType ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 789 ---------------------------------------------
Require authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse [[resp]] , final String realm ) throws IOException { [[resp]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; [[resp]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse [[client]] , final String realm ) throws IOException { [[client]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; [[client]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 790 ---------------------------------------------
Prepare response . --> assume a mime type --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String [[extension]] = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( [[extension]] ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[assume]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String [[signature]] = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( [[signature]] ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 791 ---------------------------------------------
Store context path . --> test attribute --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[test]] ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
[Succeeded / Failed / Skipped / Total] 421 / 341 / 30 / 792:  79%|███████▉  | 792/1000 [28:32<07:29,  2.16s/it][Succeeded / Failed / Skipped / Total] 421 / 341 / 30 / 792:  79%|███████▉  | 793/1000 [28:33<07:27,  2.16s/it][Succeeded / Failed / Skipped / Total] 421 / 342 / 30 / 793:  79%|███████▉  | 793/1000 [28:33<07:27,  2.16s/it][Succeeded / Failed / Skipped / Total] 421 / 342 / 30 / 793:  79%|███████▉  | 794/1000 [28:38<07:25,  2.16s/it][Succeeded / Failed / Skipped / Total] 422 / 342 / 30 / 794:  79%|███████▉  | 794/1000 [28:38<07:25,  2.16s/it][Succeeded / Failed / Skipped / Total] 422 / 342 / 30 / 794:  80%|███████▉  | 795/1000 [28:39<07:23,  2.16s/it][Succeeded / Failed / Skipped / Total] 423 / 342 / 30 / 795:  80%|███████▉  | 795/1000 [28:39<07:23,  2.16s/it][Succeeded / Failed / Skipped / Total] 423 / 342 / 30 / 795:  80%|███████▉  | 796/1000 [28:43<07:21,  2.16s/it][Succeeded / Failed / Skipped / Total] 424 / 342 / 30 / 796:  80%|███████▉  | 796/1000 [28:43<07:21,  2.16s/it][Succeeded / Failed / Skipped / Total] 424 / 342 / 30 / 796:  80%|███████▉  | 797/1000 [28:43<07:19,  2.16s/it][Succeeded / Failed / Skipped / Total] 425 / 342 / 30 / 797:  80%|███████▉  | 797/1000 [28:43<07:19,  2.16s/it][Succeeded / Failed / Skipped / Total] 425 / 342 / 30 / 797:  80%|███████▉  | 798/1000 [28:45<07:16,  2.16s/it][Succeeded / Failed / Skipped / Total] 426 / 342 / 30 / 798:  80%|███████▉  | 798/1000 [28:45<07:16,  2.16s/it][Succeeded / Failed / Skipped / Total] 426 / 342 / 30 / 798:  80%|███████▉  | 799/1000 [28:48<07:14,  2.16s/it]--------------------------------------------- Result 792 ---------------------------------------------
Store context path . --> Sets the contextPath variable name --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[library]] ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 793 ---------------------------------------------
Prepare file download . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( response , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[fix]] ( final HttpServletResponse response , final File [[comment]] , final String mimeType ) { if ( ! [[comment]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[comment]] ) ; } if ( [[comment]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[comment]] ) ; } prepareResponse ( response , [[comment]] . getAbsolutePath ( ) , mimeType , ( int ) [[comment]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 794 ---------------------------------------------
Invokes the given body . --> Convenience method for unless --> Socre: 1.0

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[unless]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 795 ---------------------------------------------
Prepares the parameters . --> returns null if the parameter is empty --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[returns]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 796 ---------------------------------------------
Checks if the flags is a user flags . --> Method object . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags [[flags]] ) { if ( [[flags]] == null ) return "True" == "True" ; Flags . Flag [ ] [[systemFlags]] = [[flags]] . getSystemFlags ( ) ; if ( [[systemFlags]] != null && [[systemFlags]] . length > 0 ) { return "[[False]]" != "[[False]]" ; } String [ ] [[userFlags]] = [[flags]] . getUserFlags ( ) ; if ( [[userFlags]] != null && [[userFlags]] . length > 0 ) { return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[object]] ( Flags [[array]] ) { if ( [[array]] == null ) return "True" == "True" ; Flags . Flag [ ] [[j]] = [[array]] . getSystemFlags ( ) ; if ( [[j]] != null && [[j]] . length > 0 ) { return "[[data]]" != "[[data]]" ; } String [ ] [[i]] = [[array]] . getUserFlags ( ) ; if ( [[i]] != null && [[i]] . length > 0 ) { return "[[data]]" != "[[data]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 797 ---------------------------------------------
read content from request body --> Return template from command --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader [[buff]] = [[request]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( [[buff]] , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[template]] ( final HttpServletRequest [[command]] ) throws IOException { BufferedReader [[index]] = [[command]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( [[index]] , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 798 ---------------------------------------------
Renders the body . --> Render the given JspFragment --> Socre: 1.0

[[[[Adv]]]]: public static String renderBodyToString ( final JspFragment [[body]] ) throws JspException { char [ ] result = renderBody ( [[body]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String renderBodyToString ( final JspFragment [[foo]] ) throws JspException { char [ ] result = renderBody ( [[foo]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 799 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 427 / 342 / 30 / 799:  80%|███████▉  | 799/1000 [28:48<07:14,  2.16s/it][Succeeded / Failed / Skipped / Total] 427 / 342 / 30 / 799:  80%|████████  | 800/1000 [28:49<07:12,  2.16s/it][Succeeded / Failed / Skipped / Total] 428 / 342 / 30 / 800:  80%|████████  | 800/1000 [28:49<07:12,  2.16s/it][Succeeded / Failed / Skipped / Total] 428 / 342 / 30 / 800:  80%|████████  | 801/1000 [28:50<07:09,  2.16s/it][Succeeded / Failed / Skipped / Total] 429 / 342 / 30 / 801:  80%|████████  | 801/1000 [28:50<07:09,  2.16s/it][Succeeded / Failed / Skipped / Total] 429 / 342 / 30 / 801:  80%|████████  | 802/1000 [28:51<07:07,  2.16s/it][Succeeded / Failed / Skipped / Total] 429 / 343 / 30 / 802:  80%|████████  | 802/1000 [28:51<07:07,  2.16s/it][Succeeded / Failed / Skipped / Total] 429 / 343 / 30 / 802:  80%|████████  | 803/1000 [28:55<07:05,  2.16s/it][Succeeded / Failed / Skipped / Total] 430 / 343 / 30 / 803:  80%|████████  | 803/1000 [28:55<07:05,  2.16s/it][Succeeded / Failed / Skipped / Total] 430 / 343 / 30 / 803:  80%|████████  | 804/1000 [28:55<07:03,  2.16s/it][Succeeded / Failed / Skipped / Total] 431 / 343 / 30 / 804:  80%|████████  | 804/1000 [28:55<07:03,  2.16s/it][Succeeded / Failed / Skipped / Total] 431 / 343 / 30 / 804:  80%|████████  | 805/1000 [28:56<07:00,  2.16s/it][Succeeded / Failed / Skipped / Total] 431 / 344 / 30 / 805:  80%|████████  | 805/1000 [28:56<07:00,  2.16s/it][Succeeded / Failed / Skipped / Total] 431 / 344 / 30 / 805:  81%|████████  | 806/1000 [28:57<06:58,  2.16s/it]Invokes the init method . --> test method --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[test]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 800 ---------------------------------------------
Calls destroy methods . --> Ends the bean --> Socre: 1.0

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[end]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 801 ---------------------------------------------
Checks if is get parameter . --> Does the query request operator? --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] [[nameValuePairs]] = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : [[nameValuePairs]] ) { if ( nameValuePair . startsWith ( name ) ) { return "[[True]]" == "[[True]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[operator]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] [[result]] = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : [[result]] ) { if ( nameValuePair . startsWith ( name ) ) { return "[[empty]]" == "[[empty]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 802 ---------------------------------------------
Reads the string from the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[client]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 803 ---------------------------------------------
Inject parameters . --> region paramManager --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[now]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 804 ---------------------------------------------
Render the body of a char array . --> Get the author of the given JspFragment --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[author]] ( final JspFragment [[foo]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[foo]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 805 ---------------------------------------------
Gets all cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie [[cookie]] : cookies ) { if ( [[cookie]] . getName ( ) . equals ( cookieName ) ) { list . add ( [[cookie]] ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[group]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie [[end]] : cookies ) { if ( [[end]] . getName ( ) . equals ( cookieName ) ) { list . add ( [[end]] ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 806 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 432 / 344 / 30 / 806:  81%|████████  | 806/1000 [28:57<06:58,  2.16s/it][Succeeded / Failed / Skipped / Total] 432 / 344 / 30 / 806:  81%|████████  | 807/1000 [29:01<06:56,  2.16s/it][Succeeded / Failed / Skipped / Total] 433 / 344 / 30 / 807:  81%|████████  | 807/1000 [29:01<06:56,  2.16s/it][Succeeded / Failed / Skipped / Total] 433 / 344 / 30 / 807:  81%|████████  | 808/1000 [29:02<06:54,  2.16s/it][Succeeded / Failed / Skipped / Total] 434 / 344 / 30 / 808:  81%|████████  | 808/1000 [29:02<06:54,  2.16s/it][Succeeded / Failed / Skipped / Total] 434 / 345 / 30 / 809:  81%|████████  | 809/1000 [29:02<06:51,  2.15s/it][Succeeded / Failed / Skipped / Total] 434 / 345 / 30 / 809:  81%|████████  | 810/1000 [29:08<06:50,  2.16s/it][Succeeded / Failed / Skipped / Total] 435 / 345 / 30 / 810:  81%|████████  | 810/1000 [29:08<06:50,  2.16s/it][Succeeded / Failed / Skipped / Total] 436 / 345 / 30 / 811:  81%|████████  | 811/1000 [29:15<06:49,  2.16s/it][Succeeded / Failed / Skipped / Total] 436 / 345 / 30 / 811:  81%|████████  | 812/1000 [29:16<06:46,  2.16s/it][Succeeded / Failed / Skipped / Total] 437 / 345 / 30 / 812:  81%|████████  | 812/1000 [29:16<06:46,  2.16s/it][Succeeded / Failed / Skipped / Total] 437 / 346 / 30 / 813:  81%|████████▏ | 813/1000 [29:16<06:43,  2.16s/it][Succeeded / Failed / Skipped / Total] 437 / 346 / 30 / 813:  81%|████████▏ | 814/1000 [29:18<06:41,  2.16s/it][Succeeded / Failed / Skipped / Total] 438 / 346 / 30 / 814:  81%|████████▏ | 814/1000 [29:18<06:41,  2.16s/it][Succeeded / Failed / Skipped / Total] 439 / 346 / 30 / 815:  82%|████████▏ | 815/1000 [29:20<06:39,  2.16s/it][Succeeded / Failed / Skipped / Total] 439 / 346 / 30 / 815:  82%|████████▏ | 816/1000 [29:30<06:39,  2.17s/it]Put a new entry in the map . --> Main entry point . --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[a]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 807 ---------------------------------------------
Add a base property . --> Entry point for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[main]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 808 ---------------------------------------------
Add profile property . --> region List --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[list]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 809 ---------------------------------------------
Returns a new bean instance . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[manager]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 810 ---------------------------------------------
Adds a header . --> Add a parameter --> Socre: 1.0

[[[[Adv]]]]: public void [[addHeader]] ( final String name , final String value ) { List < String > [[valuesList]] = super . getAll ( name ) ; if ( [[valuesList]] . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; [[valuesList]] . add ( value ) ; super . addAll ( name , [[valuesList]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[example]] ( final String name , final String value ) { List < String > [[foo]] = super . getAll ( name ) ; if ( [[foo]] . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; [[foo]] . add ( value ) ; super . addAll ( name , [[foo]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 811 ---------------------------------------------
Converts a byte array to the streamtoword . --> Reads four bytes from the byte array --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int [[word]] = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[word]] = ( [[word]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[word]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int [[bi]] = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[bi]] = ( [[bi]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[bi]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 812 ---------------------------------------------
Extracts a document from a map . --> vector for profiles and wildcard patterns --> Socre: 1.0

[[[[Adv]]]]: public Map [[extract]] ( Map target , final String [ ] profiles , final String [ ] wildcardPatterns , String [[prefix]] ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[vector]] ( Map target , final String [ ] profiles , final String [ ] wildcardPatterns , String [[profile]] ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 813 ---------------------------------------------
Rewrite the action path . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String [[actionPath]] , final String [[httpMethod]] ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String [[invitation]] , final String [[anonymous]] ) { return [[invitation]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 814 ---------------------------------------------
Gets a profile property . --> Return a PropsEntry at the specified key --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String [[profile]] , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( [[profile]] ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[ator]] ( final String [[q]] , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( [[q]] ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 815 ---------------------------------------------
Resolve a long value . --> Include a string value --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String value , final String ... [[profiles]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[include]] ( String value , final String ... [[end]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 816 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 440 / 346 / 30 / 816:  82%|████████▏ | 816/1000 [29:30<06:39,  2.17s/it][Succeeded / Failed / Skipped / Total] 440 / 346 / 30 / 816:  82%|████████▏ | 817/1000 [29:39<06:38,  2.18s/it][Succeeded / Failed / Skipped / Total] 440 / 347 / 30 / 817:  82%|████████▏ | 817/1000 [29:39<06:38,  2.18s/it][Succeeded / Failed / Skipped / Total] 440 / 347 / 30 / 817:  82%|████████▏ | 818/1000 [29:42<06:36,  2.18s/it][Succeeded / Failed / Skipped / Total] 440 / 348 / 30 / 818:  82%|████████▏ | 818/1000 [29:42<06:36,  2.18s/it][Succeeded / Failed / Skipped / Total] 440 / 348 / 30 / 818:  82%|████████▏ | 819/1000 [29:45<06:34,  2.18s/it][Succeeded / Failed / Skipped / Total] 441 / 348 / 30 / 819:  82%|████████▏ | 819/1000 [29:45<06:34,  2.18s/it][Succeeded / Failed / Skipped / Total] 441 / 348 / 30 / 819:  82%|████████▏ | 820/1000 [29:48<06:32,  2.18s/it][Succeeded / Failed / Skipped / Total] 441 / 349 / 30 / 820:  82%|████████▏ | 820/1000 [29:48<06:32,  2.18s/it][Succeeded / Failed / Skipped / Total] 441 / 349 / 30 / 820:  82%|████████▏ | 821/1000 [29:50<06:30,  2.18s/it][Succeeded / Failed / Skipped / Total] 441 / 350 / 30 / 821:  82%|████████▏ | 821/1000 [29:50<06:30,  2.18s/it][Succeeded / Failed / Skipped / Total] 441 / 350 / 30 / 821:  82%|████████▏ | 822/1000 [29:54<06:28,  2.18s/it][Succeeded / Failed / Skipped / Total] 442 / 350 / 30 / 822:  82%|████████▏ | 822/1000 [29:54<06:28,  2.18s/it][Succeeded / Failed / Skipped / Total] 442 / 350 / 30 / 822:  82%|████████▏ | 823/1000 [29:55<06:26,  2.18s/it]Resolve action configuration . --> Returns the version of the ActionConfig --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > [[annotationType]] ; if ( annotationValues == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[version]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > [[t]] ; if ( annotationValues == null ) { [[t]] = Action . class ; } else { [[t]] = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( [[t]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 817 ---------------------------------------------
Copy all bytes from the stream to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[loop]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 818 ---------------------------------------------
Copy parameters to attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest servletRequest , final boolean [[treatEmptyParamsAsNull]] , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , [[treatEmptyParamsAsNull]] , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[fix]] ( final HttpServletRequest servletRequest , final boolean [[start]] , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , [[start]] , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 819 ---------------------------------------------
Checks whether the plaintext is a hashed string --> Validates the given binary string --> Socre: 1.0

[[[[Adv]]]]: public static boolean checkpw ( String [[plaintext]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String [[try_pw]] = hashpw ( [[plaintext]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = [[try_pw]] . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte [[ret]] = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { [[ret]] |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return [[ret]] == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String [[binary]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String [[counter]] = hashpw ( [[binary]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = [[counter]] . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte [[source]] = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { [[source]] |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return [[source]] == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 820 ---------------------------------------------
Parse action . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 821 ---------------------------------------------
Copy the max bytes . --> [[[FAILED]]]

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int maxBytes ) throws IOException { int [[count]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[count]] ++ ; if ( [[count]] == maxBytes ) { return [[count]] ; } } return [[count]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int maxBytes ) throws IOException { int [[bit]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[bit]] ++ ; if ( [[bit]] == maxBytes ) { return [[bit]] ; } } return [[bit]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 822 ---------------------------------------------
Parses the method alias . --> Return the state of the annotation --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[state]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 823 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 442 / 350 / 31 / 823:  82%|████████▏ | 823/1000 [29:55<06:26,  2.18s/it][Succeeded / Failed / Skipped / Total] 442 / 350 / 31 / 823:  82%|████████▏ | 824/1000 [29:59<06:24,  2.18s/it][Succeeded / Failed / Skipped / Total] 443 / 350 / 31 / 824:  82%|████████▏ | 824/1000 [29:59<06:24,  2.18s/it][Succeeded / Failed / Skipped / Total] 443 / 350 / 31 / 824:  82%|████████▎ | 825/1000 [29:59<06:21,  2.18s/it][Succeeded / Failed / Skipped / Total] 443 / 351 / 31 / 825:  82%|████████▎ | 825/1000 [29:59<06:21,  2.18s/it][Succeeded / Failed / Skipped / Total] 443 / 351 / 31 / 825:  83%|████████▎ | 826/1000 [30:02<06:19,  2.18s/it][Succeeded / Failed / Skipped / Total] 443 / 352 / 31 / 826:  83%|████████▎ | 826/1000 [30:02<06:19,  2.18s/it][Succeeded / Failed / Skipped / Total] 443 / 353 / 31 / 827:  83%|████████▎ | 827/1000 [30:02<06:17,  2.18s/it][Succeeded / Failed / Skipped / Total] 443 / 353 / 31 / 827:  83%|████████▎ | 828/1000 [30:03<06:14,  2.18s/it][Succeeded / Failed / Skipped / Total] 444 / 353 / 31 / 828:  83%|████████▎ | 828/1000 [30:03<06:14,  2.18s/it][Succeeded / Failed / Skipped / Total] 444 / 354 / 31 / 829:  83%|████████▎ | 829/1000 [30:04<06:12,  2.18s/it][Succeeded / Failed / Skipped / Total] 444 / 354 / 31 / 829:  83%|████████▎ | 830/1000 [30:05<06:09,  2.18s/it][Succeeded / Failed / Skipped / Total] 445 / 354 / 31 / 830:  83%|████████▎ | 830/1000 [30:05<06:09,  2.18s/it]For internal use only --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 824 ---------------------------------------------
Hash salt . --> end salt --> Socre: 1.0

[[[[Adv]]]]: public static String [[hashpw]] ( String [[password]] , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[end]] ( String [[alt]] , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 825 ---------------------------------------------
Read action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[result]] = interceptedBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[index]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[id]] = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[id]] = interceptedBy . value ( ) ; if ( [[id]] . length == 0 ) { [[id]] = null ; } } return [[id]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 826 ---------------------------------------------
Read action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy [[filteredBy]] = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( [[filteredBy]] != null ) { result = [[filteredBy]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy [[array]] = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( [[array]] != null ) { result = [[array]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 827 ---------------------------------------------
Registers an action alias in the actions . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[alias]] = parseMethodAlias ( annotationValues ) ; if ( [[alias]] != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[alias]] , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[array]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[mask]] = parseMethodAlias ( annotationValues ) ; if ( [[mask]] != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[mask]] , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 828 ---------------------------------------------
Find the first advice of the specified class . --> Attempt to apply the specified entity type --> Socre: 1.0

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class [[fetch]] = cache . get ( targetClass ) ; if ( [[fetch]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 829 ---------------------------------------------
Read package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[program]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 830 ---------------------------------------------
Inject target into proxy . --> Add a client --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[client]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 831 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 445 / 355 / 31 / 831:  83%|████████▎ | 831/1000 [30:14<06:09,  2.18s/it][Succeeded / Failed / Skipped / Total] 445 / 355 / 31 / 831:  83%|████████▎ | 832/1000 [30:19<06:07,  2.19s/it][Succeeded / Failed / Skipped / Total] 445 / 356 / 31 / 832:  83%|████████▎ | 832/1000 [30:19<06:07,  2.19s/it][Succeeded / Failed / Skipped / Total] 445 / 356 / 31 / 832:  83%|████████▎ | 833/1000 [30:21<06:05,  2.19s/it][Succeeded / Failed / Skipped / Total] 445 / 357 / 31 / 833:  83%|████████▎ | 833/1000 [30:21<06:05,  2.19s/it][Succeeded / Failed / Skipped / Total] 445 / 357 / 31 / 833:  83%|████████▎ | 834/1000 [30:22<06:02,  2.19s/it][Succeeded / Failed / Skipped / Total] 446 / 357 / 31 / 834:  83%|████████▎ | 834/1000 [30:22<06:02,  2.19s/it][Succeeded / Failed / Skipped / Total] 446 / 357 / 31 / 834:  84%|████████▎ | 835/1000 [30:23<06:00,  2.18s/it][Succeeded / Failed / Skipped / Total] 446 / 358 / 31 / 835:  84%|████████▎ | 835/1000 [30:23<06:00,  2.18s/it][Succeeded / Failed / Skipped / Total] 447 / 358 / 31 / 836:  84%|████████▎ | 836/1000 [30:23<05:57,  2.18s/it][Succeeded / Failed / Skipped / Total] 447 / 358 / 31 / 836:  84%|████████▎ | 837/1000 [30:23<05:55,  2.18s/it][Succeeded / Failed / Skipped / Total] 447 / 359 / 31 / 837:  84%|████████▎ | 837/1000 [30:23<05:55,  2.18s/it][Succeeded / Failed / Skipped / Total] 448 / 359 / 31 / 838:  84%|████████▍ | 838/1000 [30:25<05:52,  2.18s/it][Succeeded / Failed / Skipped / Total] 448 / 359 / 31 / 838:  84%|████████▍ | 839/1000 [30:27<05:50,  2.18s/it][Succeeded / Failed / Skipped / Total] 449 / 359 / 31 / 839:  84%|████████▍ | 839/1000 [30:27<05:50,  2.18s/it][Succeeded / Failed / Skipped / Total] 449 / 360 / 31 / 840:  84%|████████▍ | 840/1000 [30:34<05:49,  2.18s/it][Succeeded / Failed / Skipped / Total] 449 / 360 / 31 / 840:  84%|████████▍ | 841/1000 [30:36<05:47,  2.18s/it]Read the method action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String [[methodName]] , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[closure]] ( final String [[actions]] , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 832 ---------------------------------------------
Visits an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String descriptor , final boolean [[visible]] ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , [[visible]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[id]] ( final String descriptor , final boolean [[symbol]] ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , [[symbol]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 833 ---------------------------------------------
Resolves the name of the real name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int [[jsonIndex]] = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( [[jsonIndex]] == - 1 ) { return jsonName ; } return realNames [ [[jsonIndex]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[var]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int [[object]] = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( [[object]] == - 1 ) { return jsonName ; } return realNames [ [[object]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 834 ---------------------------------------------
Resolves the name of a real name . --> Returns the end of a string --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int [[realIndex]] = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( [[realIndex]] == - 1 ) { return [[realName]] ; } return jsonNames [ [[realIndex]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[end]] ( final String [[unknown]] ) { if ( realNames == null ) { return [[unknown]] ; } int [[object]] = ArraysUtil . indexOf ( realNames , [[unknown]] ) ; if ( [[object]] == - 1 ) { return [[unknown]] ; } return jsonNames [ [[object]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 835 ---------------------------------------------
Lookup type data . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 836 ---------------------------------------------
Gets the type data for the given class . --> Return the method for the given example --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[method]] ( final Class [[example]] ) { TypeData [[f]] = typeDataMap . get ( [[example]] ) ; if ( [[f]] == null ) { [[f]] = scanClassForAnnotations ( [[example]] ) ; typeDataMap . put ( [[example]] , [[f]] ) ; } return [[f]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 837 ---------------------------------------------
Find the type data for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[de]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 838 ---------------------------------------------
Resolve real name . --> Resolve a method --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[method]] ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 839 ---------------------------------------------
Return the content of the file . --> Reads a command --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[command]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 840 ---------------------------------------------
Puts the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[a2]] ( final ByteVector [[a]] ) { [[a]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 841 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 449 / 361 / 31 / 841:  84%|████████▍ | 841/1000 [30:36<05:47,  2.18s/it][Succeeded / Failed / Skipped / Total] 450 / 361 / 31 / 842:  84%|████████▍ | 842/1000 [30:40<05:45,  2.19s/it][Succeeded / Failed / Skipped / Total] 450 / 361 / 31 / 842:  84%|████████▍ | 843/1000 [30:41<05:42,  2.18s/it][Succeeded / Failed / Skipped / Total] 450 / 362 / 31 / 843:  84%|████████▍ | 843/1000 [30:41<05:42,  2.18s/it][Succeeded / Failed / Skipped / Total] 450 / 363 / 31 / 844:  84%|████████▍ | 844/1000 [30:52<05:42,  2.20s/it][Succeeded / Failed / Skipped / Total] 450 / 363 / 31 / 844:  84%|████████▍ | 845/1000 [30:53<05:40,  2.19s/it][Succeeded / Failed / Skipped / Total] 450 / 364 / 31 / 845:  84%|████████▍ | 845/1000 [30:53<05:40,  2.19s/it][Succeeded / Failed / Skipped / Total] 450 / 364 / 31 / 845:  85%|████████▍ | 846/1000 [30:55<05:37,  2.19s/it][Succeeded / Failed / Skipped / Total] 451 / 364 / 31 / 846:  85%|████████▍ | 846/1000 [30:55<05:37,  2.19s/it][Succeeded / Failed / Skipped / Total] 451 / 364 / 31 / 846:  85%|████████▍ | 847/1000 [31:05<05:37,  2.20s/it][Succeeded / Failed / Skipped / Total] 451 / 365 / 31 / 847:  85%|████████▍ | 847/1000 [31:05<05:37,  2.20s/it][Succeeded / Failed / Skipped / Total] 451 / 365 / 31 / 847:  85%|████████▍ | 848/1000 [31:08<05:34,  2.20s/it][Succeeded / Failed / Skipped / Total] 451 / 366 / 31 / 848:  85%|████████▍ | 848/1000 [31:08<05:34,  2.20s/it][Succeeded / Failed / Skipped / Total] 451 / 366 / 31 / 848:  85%|████████▍ | 849/1000 [31:17<05:33,  2.21s/it]Puts the bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[fix]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 842 ---------------------------------------------
Copy bootstrap methods . --> Copied from ClassReader --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader [[classReader]] , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[c]] ( final ClassReader [[base]] , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 843 ---------------------------------------------
Resolve json name . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveJsonName ( final Class type , final String [[name]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String resolveJsonName ( final Class type , final String [[file]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[file]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 844 ---------------------------------------------
Set the class name . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int majorVersion , final String [[className]] ) { this . [[majorVersion]] = majorVersion ; this . className = [[className]] ; return addConstantClass ( [[className]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[add]] ( final int majorVersion , final String [[export]] ) { this . [[system]] = majorVersion ; this . className = [[export]] ; return addConstantClass ( [[export]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 845 ---------------------------------------------
Add a fieldref to this symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String [[name]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[keeper]] ( final String owner , final String [[user]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[user]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a constant method . --> Generate an array --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String [[owner]] , final String name , final String [[descriptor]] , final boolean isInterface ) { int [[tag]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[tag]] , [[owner]] , name , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[array]] ( final String [[status]] , final String name , final String [[access]] , final boolean isInterface ) { int [[n]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[n]] , [[status]] , name , [[access]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
Create an action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > [[defaultActionResult]] , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[cache]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > [[arrays]] , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a constant to the hash value . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int index , final int [[tag]] , final int value ) { add ( new Entry ( index , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[move]] ( final int index , final int [[type]] , final int value ) { add ( new Entry ( index , [[type]] , value , hash ( [[type]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 849 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 451 / 367 / 31 / 849:  85%|████████▍ | 849/1000 [31:17<05:33,  2.21s/it][Succeeded / Failed / Skipped / Total] 451 / 367 / 31 / 849:  85%|████████▌ | 850/1000 [31:18<05:31,  2.21s/it][Succeeded / Failed / Skipped / Total] 451 / 368 / 31 / 850:  85%|████████▌ | 850/1000 [31:18<05:31,  2.21s/it][Succeeded / Failed / Skipped / Total] 451 / 368 / 31 / 850:  85%|████████▌ | 851/1000 [31:26<05:30,  2.22s/it][Succeeded / Failed / Skipped / Total] 451 / 369 / 31 / 851:  85%|████████▌ | 851/1000 [31:26<05:30,  2.22s/it][Succeeded / Failed / Skipped / Total] 451 / 369 / 31 / 851:  85%|████████▌ | 852/1000 [31:26<05:27,  2.21s/it][Succeeded / Failed / Skipped / Total] 451 / 370 / 31 / 852:  85%|████████▌ | 852/1000 [31:26<05:27,  2.21s/it][Succeeded / Failed / Skipped / Total] 451 / 370 / 31 / 852:  85%|████████▌ | 853/1000 [31:30<05:25,  2.22s/it][Succeeded / Failed / Skipped / Total] 452 / 370 / 31 / 853:  85%|████████▌ | 853/1000 [31:30<05:25,  2.22s/it][Succeeded / Failed / Skipped / Total] 452 / 370 / 31 / 853:  85%|████████▌ | 854/1000 [31:37<05:24,  2.22s/it][Succeeded / Failed / Skipped / Total] 452 / 371 / 31 / 854:  85%|████████▌ | 854/1000 [31:37<05:24,  2.22s/it][Succeeded / Failed / Skipped / Total] 452 / 371 / 31 / 854:  86%|████████▌ | 855/1000 [31:38<05:21,  2.22s/it]Add a constant reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int [[index]] , final int tag , final String owner , final String [[name]] , final String descriptor ) { add ( new Entry ( [[index]] , tag , owner , [[name]] , descriptor , 0 , hash ( tag , owner , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[fix]] ( final int [[array]] , final int tag , final String owner , final String [[pointer]] , final String descriptor ) { add ( new Entry ( [[array]] , tag , owner , [[pointer]] , descriptor , 0 , hash ( tag , owner , [[pointer]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
Add a constant long or double value . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[draw]] ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a constant pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String owner , final String name , final String descriptor ) { int [[hashCode]] = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[assignment]] ( final int tag , final String owner , final String name , final String descriptor ) { int [[key]] = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( [[key]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[key]] && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , [[key]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant value to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int tag , final int value ) { int [[hashCode]] = hash ( tag , value ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == [[hashCode]] && [[entry]] . data == value ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[format]] ( final int tag , final int value ) { int [[address]] = hash ( tag , value ) ; Entry [[number]] = get ( [[address]] ) ; while ( [[number]] != null ) { if ( [[number]] . tag == tag && [[number]] . hashCode == [[address]] && [[number]] . data == value ) { return [[number]] ; } [[number]] = [[number]] . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[address]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
Adds constant UTF - 8 . --> Start begin method --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String value ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[begin]] ( final int [[x]] , final String value ) { add ( new Entry ( [[x]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String name , final String [[descriptor]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , [[descriptor]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , [[descriptor]] , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[drop]] ( final String name , final String [[icon]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , [[icon]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( [[icon]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( [[icon]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , [[icon]] , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 452 / 372 / 31 / 855:  86%|████████▌ | 855/1000 [31:38<05:21,  2.22s/it][Succeeded / Failed / Skipped / Total] 452 / 372 / 31 / 855:  86%|████████▌ | 856/1000 [31:43<05:20,  2.22s/it][Succeeded / Failed / Skipped / Total] 452 / 373 / 31 / 856:  86%|████████▌ | 856/1000 [31:43<05:20,  2.22s/it][Succeeded / Failed / Skipped / Total] 452 / 373 / 31 / 856:  86%|████████▌ | 857/1000 [31:46<05:18,  2.23s/it][Succeeded / Failed / Skipped / Total] 452 / 374 / 31 / 857:  86%|████████▌ | 857/1000 [31:46<05:18,  2.23s/it][Succeeded / Failed / Skipped / Total] 452 / 374 / 31 / 857:  86%|████████▌ | 858/1000 [31:56<05:17,  2.23s/it][Succeeded / Failed / Skipped / Total] 453 / 374 / 31 / 858:  86%|████████▌ | 858/1000 [31:56<05:17,  2.23s/it][Succeeded / Failed / Skipped / Total] 453 / 374 / 31 / 858:  86%|████████▌ | 859/1000 [32:06<05:16,  2.24s/it][Succeeded / Failed / Skipped / Total] 453 / 375 / 31 / 859:  86%|████████▌ | 859/1000 [32:06<05:16,  2.24s/it][Succeeded / Failed / Skipped / Total] 453 / 375 / 31 / 859:  86%|████████▌ | 860/1000 [32:08<05:13,  2.24s/it][Succeeded / Failed / Skipped / Total] 453 / 376 / 31 / 860:  86%|████████▌ | 860/1000 [32:08<05:13,  2.24s/it][Succeeded / Failed / Skipped / Total] 453 / 376 / 31 / 860:  86%|████████▌ | 861/1000 [32:11<05:11,  2.24s/it]Adds a UTF8 constant . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String [[value]] ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[hashCode]] && entry . value . equals ( [[value]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[value]] , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[declare]] ( final String [[format]] ) { int [[enter]] = hash ( Symbol . CONSTANT_UTF8_TAG , [[format]] ) ; Entry entry = get ( [[enter]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[enter]] && entry . value . equals ( [[format]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[format]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[format]] , [[enter]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant type name to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String [[name]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , [[name]] , descriptor , hash ( tag , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[fix]] ( final int index , final String [[icon]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , [[icon]] , descriptor , hash ( tag , [[icon]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[field]] ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
Helper method to add a new constant . --> Entry is used for testing --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String [[name]] , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , [[name]] , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , [[name]] , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[main]] ( final int tag , final int index , final String [[number]] , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , [[number]] , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , [[number]] , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 859 ---------------------------------------------
Adds a constant handle . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[operator]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantDynamic ( final String [[name]] , final String descriptor , final Handle [[bootstrapMethodHandle]] , final Object ... [[bootstrapMethodArguments]] ) { Symbol bootstrapMethod = addBootstrapMethod ( [[bootstrapMethodHandle]] , [[bootstrapMethodArguments]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String [[statement]] , final String descriptor , final Handle [[method]] , final Object ... [[group]] ) { Symbol bootstrapMethod = addBootstrapMethod ( [[method]] , [[group]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[statement]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 453 / 377 / 31 / 861:  86%|████████▌ | 861/1000 [32:11<05:11,  2.24s/it][Succeeded / Failed / Skipped / Total] 453 / 377 / 31 / 861:  86%|████████▌ | 862/1000 [32:11<05:09,  2.24s/it][Succeeded / Failed / Skipped / Total] 453 / 378 / 31 / 862:  86%|████████▌ | 862/1000 [32:11<05:09,  2.24s/it][Succeeded / Failed / Skipped / Total] 453 / 378 / 31 / 862:  86%|████████▋ | 863/1000 [32:15<05:07,  2.24s/it][Succeeded / Failed / Skipped / Total] 453 / 379 / 31 / 863:  86%|████████▋ | 863/1000 [32:15<05:07,  2.24s/it][Succeeded / Failed / Skipped / Total] 453 / 379 / 31 / 863:  86%|████████▋ | 864/1000 [32:16<05:04,  2.24s/it][Succeeded / Failed / Skipped / Total] 454 / 379 / 31 / 864:  86%|████████▋ | 864/1000 [32:16<05:04,  2.24s/it][Succeeded / Failed / Skipped / Total] 454 / 379 / 31 / 864:  86%|████████▋ | 865/1000 [32:21<05:03,  2.24s/it][Succeeded / Failed / Skipped / Total] 454 / 380 / 31 / 865:  86%|████████▋ | 865/1000 [32:21<05:03,  2.24s/it][Succeeded / Failed / Skipped / Total] 454 / 380 / 31 / 865:  87%|████████▋ | 866/1000 [32:22<05:00,  2.24s/it][Succeeded / Failed / Skipped / Total] 455 / 380 / 31 / 866:  87%|████████▋ | 866/1000 [32:22<05:00,  2.24s/it][Succeeded / Failed / Skipped / Total] 455 / 380 / 31 / 866:  87%|████████▋ | 867/1000 [32:22<04:58,  2.24s/it][Succeeded / Failed / Skipped / Total] 455 / 381 / 31 / 867:  87%|████████▋ | 867/1000 [32:22<04:58,  2.24s/it][Succeeded / Failed / Skipped / Total] 455 / 381 / 31 / 867:  87%|████████▋ | 868/1000 [32:23<04:55,  2.24s/it]Adds a constant method handle . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[main]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 862 ---------------------------------------------
Adds a new constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[entry]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 863 ---------------------------------------------
Adds constant invoke method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , [[bootstrapMethodArguments]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[expressions]] ( final String [[declaration]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... [[sign]] ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , [[sign]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[declaration]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 864 ---------------------------------------------
Removes all entries from this map . --> Returns a new HttpMultiMap --> Socre: 1.0

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[ref]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 865 ---------------------------------------------
Adds a constant reference . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int tag , final String value ) { int [[hashCode]] = hash ( tag , value ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == [[hashCode]] && [[entry]] . value . equals ( value ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[ew]] ( final int tag , final String value ) { int [[data]] = hash ( tag , value ) ; Entry [[method]] = get ( [[data]] ) ; while ( [[method]] != null ) { if ( [[method]] . tag == tag && [[method]] . hashCode == [[data]] && [[method]] . value . equals ( value ) ) { return [[method]] ; } [[method]] = [[method]] . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[data]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 866 ---------------------------------------------
Returns the hash for a name . --> Entry point for testing --> Socre: 1.0

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int h = 0 ; for ( int [[i]] = name . length ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { char c = name . charAt ( [[i]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[main]] ( final String name ) { int h = 0 ; for ( int [[foo]] = name . length ( ) - 1 ; [[foo]] >= 0 ; [[foo]] -- ) { char c = name . charAt ( [[foo]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 867 ---------------------------------------------
Adds an bootstrap method to the list . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[reference]] ( final Handle [[able]] , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 868 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 456 / 381 / 31 / 868:  87%|████████▋ | 868/1000 [32:23<04:55,  2.24s/it][Succeeded / Failed / Skipped / Total] 456 / 381 / 31 / 868:  87%|████████▋ | 869/1000 [32:24<04:53,  2.24s/it][Succeeded / Failed / Skipped / Total] 456 / 382 / 31 / 869:  87%|████████▋ | 869/1000 [32:24<04:53,  2.24s/it][Succeeded / Failed / Skipped / Total] 456 / 382 / 31 / 869:  87%|████████▋ | 870/1000 [32:29<04:51,  2.24s/it][Succeeded / Failed / Skipped / Total] 456 / 383 / 31 / 870:  87%|████████▋ | 870/1000 [32:29<04:51,  2.24s/it][Succeeded / Failed / Skipped / Total] 456 / 383 / 31 / 870:  87%|████████▋ | 871/1000 [32:31<04:48,  2.24s/it][Succeeded / Failed / Skipped / Total] 457 / 383 / 31 / 871:  87%|████████▋ | 871/1000 [32:31<04:48,  2.24s/it][Succeeded / Failed / Skipped / Total] 457 / 383 / 31 / 871:  87%|████████▋ | 872/1000 [32:31<04:46,  2.24s/it][Succeeded / Failed / Skipped / Total] 457 / 384 / 31 / 872:  87%|████████▋ | 872/1000 [32:31<04:46,  2.24s/it][Succeeded / Failed / Skipped / Total] 457 / 384 / 31 / 872:  87%|████████▋ | 873/1000 [32:33<04:44,  2.24s/it][Succeeded / Failed / Skipped / Total] 457 / 385 / 31 / 873:  87%|████████▋ | 873/1000 [32:33<04:44,  2.24s/it][Succeeded / Failed / Skipped / Total] 457 / 385 / 31 / 873:  87%|████████▋ | 874/1000 [32:37<04:42,  2.24s/it][Succeeded / Failed / Skipped / Total] 458 / 385 / 31 / 874:  87%|████████▋ | 874/1000 [32:37<04:42,  2.24s/it][Succeeded / Failed / Skipped / Total] 458 / 385 / 31 / 874:  88%|████████▊ | 875/1000 [32:40<04:40,  2.24s/it]Returns an iterator over the entries in this map . --> forward an entry --> Socre: 1.0

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[forward]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 869 ---------------------------------------------
AddMergedType Method . --> [[[FAILED]]]

[[[[Adv]]]]: int addMergedType ( final int typeTableIndex1 , final int [[typeTableIndex2]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int addMergedType ( final int typeTableIndex1 , final int [[echo]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 870 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[file]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 871 ---------------------------------------------
implements the visitor to create the firstChainDelegate_Continue --> Visit the end of the queue --> Socre: 1.0

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[size]] = 0 ; [[size]] < tmd . proxyData . length ; [[size]] ++ ) { tmd . selectCurrentProxy ( [[size]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 872 ---------------------------------------------
Create first chain start . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[foo]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 873 ---------------------------------------------
Returns a map of entries . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { [[all]] . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[end]] ( ) { List < Map . Entry < String , V > > [[c]] = new LinkedList <> ( ) ; MapEntry < V > [[field]] = head . after ; while ( [[field]] != head ) { [[c]] . add ( [[field]] ) ; [[field]] = [[field]] . after ; } return [[c]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 874 ---------------------------------------------
Configure servlet context . --> Declarative Services method for exception --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[exception]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 875 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 459 / 385 / 31 / 875:  88%|████████▊ | 875/1000 [32:40<04:40,  2.24s/it][Succeeded / Failed / Skipped / Total] 459 / 385 / 31 / 875:  88%|████████▊ | 876/1000 [32:41<04:37,  2.24s/it][Succeeded / Failed / Skipped / Total] 459 / 386 / 31 / 876:  88%|████████▊ | 876/1000 [32:41<04:37,  2.24s/it][Succeeded / Failed / Skipped / Total] 459 / 386 / 31 / 876:  88%|████████▊ | 877/1000 [32:42<04:35,  2.24s/it][Succeeded / Failed / Skipped / Total] 459 / 387 / 31 / 877:  88%|████████▊ | 877/1000 [32:42<04:35,  2.24s/it][Succeeded / Failed / Skipped / Total] 459 / 387 / 31 / 877:  88%|████████▊ | 878/1000 [32:43<04:32,  2.24s/it][Succeeded / Failed / Skipped / Total] 460 / 387 / 31 / 878:  88%|████████▊ | 878/1000 [32:43<04:32,  2.24s/it][Succeeded / Failed / Skipped / Total] 460 / 387 / 31 / 878:  88%|████████▊ | 879/1000 [32:44<04:30,  2.24s/it][Succeeded / Failed / Skipped / Total] 461 / 387 / 31 / 879:  88%|████████▊ | 879/1000 [32:44<04:30,  2.24s/it][Succeeded / Failed / Skipped / Total] 461 / 387 / 31 / 879:  88%|████████▊ | 880/1000 [32:45<04:28,  2.23s/it][Succeeded / Failed / Skipped / Total] 461 / 388 / 31 / 880:  88%|████████▊ | 880/1000 [32:45<04:28,  2.23s/it][Succeeded / Failed / Skipped / Total] 461 / 388 / 31 / 880:  88%|████████▊ | 881/1000 [32:51<04:26,  2.24s/it][Succeeded / Failed / Skipped / Total] 462 / 388 / 31 / 881:  88%|████████▊ | 881/1000 [32:51<04:26,  2.24s/it][Succeeded / Failed / Skipped / Total] 462 / 388 / 31 / 881:  88%|████████▊ | 882/1000 [32:51<04:23,  2.24s/it][Succeeded / Failed / Skipped / Total] 463 / 388 / 31 / 882:  88%|████████▊ | 882/1000 [32:51<04:23,  2.24s/it][Succeeded / Failed / Skipped / Total] 463 / 388 / 31 / 882:  88%|████████▊ | 883/1000 [32:52<04:21,  2.23s/it][Succeeded / Failed / Skipped / Total] 463 / 389 / 31 / 883:  88%|████████▊ | 883/1000 [32:52<04:21,  2.23s/it][Succeeded / Failed / Skipped / Total] 463 / 389 / 31 / 883:  88%|████████▊ | 884/1000 [32:57<04:19,  2.24s/it]Visits an annotation . --> return annotation visitor --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String [[desc]] , final boolean visible ) { AnnotationVisitor [[destAnn]] = methodVisitor . visitAnnotation ( [[desc]] , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[c]] ( final String [[object]] , final boolean visible ) { AnnotationVisitor [[c]] = methodVisitor . visitAnnotation ( [[object]] , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 876 ---------------------------------------------
Parse a path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path parse ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path parse ( final String [[command]] ) { return [[command]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[command]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 877 ---------------------------------------------
Adds a field . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[line]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 878 ---------------------------------------------
Executes the path . --> Execute the query --> Socre: 1.0

[[[[Adv]]]]: public Object execute ( ) { String [[methodName]] = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , [[methodName]] , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String [[foo]] = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , [[foo]] , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 879 ---------------------------------------------
Grows the capacity if necessary . --> assume at least capacity --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int oldCapacity = buffer . length ; int [[newCapacity]] = oldCapacity << 1 ; if ( [[newCapacity]] - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[assume]] ( final int minCapacity ) { final int oldCapacity = buffer . length ; int [[bar]] = oldCapacity << 1 ; if ( [[bar]] - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 880 ---------------------------------------------
Creates the first chain for the method . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[execute]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 881 ---------------------------------------------
Puts all entries in the map . --> region > list --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[list]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 882 ---------------------------------------------
append a char buffer to the FastCharBuffer --> End of FastChar --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int [[start]] , final int end ) { for ( int i = [[start]] ; i < end ; i ++ ) { [[append]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[end]] ( final CharSequence csq , final int [[array]] , final int end ) { for ( int i = [[array]] ; i < end ; i ++ ) { [[end]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 883 ---------------------------------------------
Returns all entries with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[es]] ( final String [[key]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[key]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[key]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 884 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 464 / 389 / 31 / 884:  88%|████████▊ | 884/1000 [32:57<04:19,  2.24s/it][Succeeded / Failed / Skipped / Total] 464 / 389 / 31 / 884:  88%|████████▊ | 885/1000 [33:03<04:17,  2.24s/it][Succeeded / Failed / Skipped / Total] 464 / 390 / 31 / 885:  88%|████████▊ | 885/1000 [33:03<04:17,  2.24s/it][Succeeded / Failed / Skipped / Total] 464 / 390 / 31 / 885:  89%|████████▊ | 886/1000 [33:07<04:15,  2.24s/it][Succeeded / Failed / Skipped / Total] 464 / 391 / 31 / 886:  89%|████████▊ | 886/1000 [33:07<04:15,  2.24s/it][Succeeded / Failed / Skipped / Total] 464 / 391 / 31 / 886:  89%|████████▊ | 887/1000 [33:10<04:13,  2.24s/it][Succeeded / Failed / Skipped / Total] 465 / 391 / 31 / 887:  89%|████████▊ | 887/1000 [33:10<04:13,  2.24s/it][Succeeded / Failed / Skipped / Total] 465 / 391 / 31 / 887:  89%|████████▉ | 888/1000 [33:12<04:11,  2.24s/it][Succeeded / Failed / Skipped / Total] 465 / 392 / 31 / 888:  89%|████████▉ | 888/1000 [33:12<04:11,  2.24s/it][Succeeded / Failed / Skipped / Total] 465 / 392 / 31 / 888:  89%|████████▉ | 889/1000 [33:15<04:09,  2.24s/it][Succeeded / Failed / Skipped / Total] 465 / 393 / 31 / 889:  89%|████████▉ | 889/1000 [33:15<04:09,  2.24s/it][Succeeded / Failed / Skipped / Total] 465 / 393 / 31 / 889:  89%|████████▉ | 890/1000 [33:17<04:06,  2.24s/it][Succeeded / Failed / Skipped / Total] 466 / 393 / 31 / 890:  89%|████████▉ | 890/1000 [33:17<04:06,  2.24s/it][Succeeded / Failed / Skipped / Total] 466 / 393 / 31 / 890:  89%|████████▉ | 891/1000 [33:21<04:04,  2.25s/it]Appends a buffer . --> Return the ing of the given handler --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[ing]] ( final Buffer [[handler]] ) { if ( [[handler]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 885 ---------------------------------------------
Convert the given JtxTransactionMode to a isolationMode . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode txMode ) { final int [[isolation]] ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[isolation]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[isolation]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[isolation]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[isolation]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[isolation]] , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[t]] ( final JtxTransactionMode txMode ) { final int [[exit]] ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[exit]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[exit]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[exit]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[exit]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[exit]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[exit]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[exit]] , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 886 ---------------------------------------------
Get all fields descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int [[index]] = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ [[index]] ] = fieldDescriptor ; [[index]] ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[arguments]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int [[a]] = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ [[a]] ] = fieldDescriptor ; [[a]] ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 887 ---------------------------------------------
Write the progress listener to the output stream . --> Convenience method for example --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[example]] ( final OutputStream [[en]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 888 ---------------------------------------------
Reads a property . --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter [[getter]] = propertyDescriptor . getGetter ( declared ) ; if ( [[getter]] != null ) { try { return [[getter]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[field]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter [[i]] = propertyDescriptor . getGetter ( declared ) ; if ( [[i]] != null ) { try { return [[i]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 889 ---------------------------------------------
Returns the string value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[command]] ( final String [[cs]] ) { CharSequence cs = ( CharSequence ) map . get ( [[cs]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 890 ---------------------------------------------
Creates a bean definition for the given type . --> Creates a Jxetta BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[name]] , Class < T > [[type]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[originalType]] = [[type]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[type]] ) ; [[type]] = builder . define ( ) ; return new ProxettaBeanDefinition ( [[name]] , [[type]] , scope , wiringMode , [[originalType]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[name]] , [[type]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[doc]] , Class < T > [[feed]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[x]] = [[feed]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[feed]] ) ; [[feed]] = builder . define ( ) ; return new ProxettaBeanDefinition ( [[doc]] , [[feed]] , scope , wiringMode , [[x]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[doc]] , [[feed]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 891 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 467 / 393 / 31 / 891:  89%|████████▉ | 891/1000 [33:21<04:04,  2.25s/it][Succeeded / Failed / Skipped / Total] 467 / 393 / 31 / 891:  89%|████████▉ | 892/1000 [33:27<04:03,  2.25s/it][Succeeded / Failed / Skipped / Total] 467 / 394 / 31 / 892:  89%|████████▉ | 892/1000 [33:27<04:03,  2.25s/it][Succeeded / Failed / Skipped / Total] 468 / 394 / 31 / 893:  89%|████████▉ | 893/1000 [33:27<04:00,  2.25s/it][Succeeded / Failed / Skipped / Total] 468 / 394 / 31 / 893:  89%|████████▉ | 894/1000 [33:27<03:58,  2.25s/it][Succeeded / Failed / Skipped / Total] 468 / 395 / 31 / 894:  89%|████████▉ | 894/1000 [33:27<03:58,  2.25s/it][Succeeded / Failed / Skipped / Total] 468 / 396 / 31 / 895:  90%|████████▉ | 895/1000 [33:30<03:55,  2.25s/it][Succeeded / Failed / Skipped / Total] 468 / 396 / 31 / 895:  90%|████████▉ | 896/1000 [33:34<03:53,  2.25s/it][Succeeded / Failed / Skipped / Total] 469 / 396 / 31 / 896:  90%|████████▉ | 896/1000 [33:34<03:53,  2.25s/it][Succeeded / Failed / Skipped / Total] 469 / 397 / 31 / 897:  90%|████████▉ | 897/1000 [33:37<03:51,  2.25s/it][Succeeded / Failed / Skipped / Total] 469 / 397 / 31 / 897:  90%|████████▉ | 898/1000 [33:40<03:49,  2.25s/it][Succeeded / Failed / Skipped / Total] 470 / 397 / 31 / 898:  90%|████████▉ | 898/1000 [33:40<03:49,  2.25s/it][Succeeded / Failed / Skipped / Total] 470 / 398 / 31 / 899:  90%|████████▉ | 899/1000 [33:41<03:47,  2.25s/it][Succeeded / Failed / Skipped / Total] 470 / 398 / 31 / 899:  90%|█████████ | 900/1000 [33:43<03:44,  2.25s/it]Get a Double . --> Print a number --> Socre: 1.0

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[print]] ( final String [[count]] ) { Number number = ( Number ) map . get ( [[count]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
Get a integer . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getInteger]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[example]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Get a Long . --> get a pointer --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[pointer]] ( final String [[q]] ) { Number number = ( Number ) map . get ( [[q]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Gets value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T val = ( T ) map . get ( key ) ; if ( val instanceof Map ) { return ( T ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( T ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T val = ( T ) map . get ( key ) ; if ( val instanceof Map ) { return ( T ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( T ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 895 ---------------------------------------------
Returns the Float for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Float [[getFloat]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Float ) { return ( Float ) [[number]] ; } return [[number]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[method]] ( final String key ) { Number [[parameter]] = ( Number ) map . get ( key ) ; if ( [[parameter]] == null ) { return null ; } if ( [[parameter]] instanceof Float ) { return ( Float ) [[parameter]] ; } return [[parameter]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 896 ---------------------------------------------
Add a new value . --> Set new attribute --> Socre: 1.0

[[[[Adv]]]]: public JsonObject [[put]] ( final String [[key]] , final String [[value]] ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[cat]] ( final String [[foo]] , final String [[key]] ) { Objects . requireNonNull ( [[foo]] ) ; map . put ( [[foo]] , [[key]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Writes this Uploadable to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; [[out]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable [[uploadable]] = ( Uploadable ) [[o]] ; InputStream inputStream = [[uploadable]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[out]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[fix]] ( final OutputStream [[option]] ) throws IOException { for ( Object [[string]] : list ) { if ( [[string]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[string]] ; [[option]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( [[string]] instanceof Uploadable ) { Uploadable [[input]] = ( Uploadable ) [[string]] ; InputStream inputStream = [[input]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[option]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 898 ---------------------------------------------
Returns the alias for the given target . --> capture the given target --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[capture]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 899 ---------------------------------------------
Writes this object to the specified writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] [[array]] = fastByteBuffer . toArray ( ) ; writer . write ( new String ( [[array]] , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[wait]] ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] [[ii]] = fastByteBuffer . toArray ( ) ; writer . write ( new String ( [[ii]] , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 900 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 471 / 398 / 31 / 900:  90%|█████████ | 900/1000 [33:43<03:44,  2.25s/it][Succeeded / Failed / Skipped / Total] 472 / 398 / 31 / 901:  90%|█████████ | 901/1000 [33:44<03:42,  2.25s/it][Succeeded / Failed / Skipped / Total] 472 / 398 / 31 / 901:  90%|█████████ | 902/1000 [33:46<03:40,  2.25s/it][Succeeded / Failed / Skipped / Total] 472 / 399 / 31 / 902:  90%|█████████ | 902/1000 [33:46<03:40,  2.25s/it][Succeeded / Failed / Skipped / Total] 473 / 399 / 31 / 903:  90%|█████████ | 903/1000 [33:47<03:37,  2.25s/it][Succeeded / Failed / Skipped / Total] 473 / 399 / 31 / 903:  90%|█████████ | 904/1000 [33:52<03:35,  2.25s/it][Succeeded / Failed / Skipped / Total] 474 / 399 / 31 / 904:  90%|█████████ | 904/1000 [33:52<03:35,  2.25s/it][Succeeded / Failed / Skipped / Total] 475 / 399 / 31 / 905:  90%|█████████ | 905/1000 [33:54<03:33,  2.25s/it][Succeeded / Failed / Skipped / Total] 475 / 399 / 31 / 905:  91%|█████████ | 906/1000 [33:54<03:31,  2.25s/it][Succeeded / Failed / Skipped / Total] 476 / 399 / 31 / 906:  91%|█████████ | 906/1000 [33:54<03:31,  2.25s/it][Succeeded / Failed / Skipped / Total] 476 / 400 / 31 / 907:  91%|█████████ | 907/1000 [33:58<03:28,  2.25s/it][Succeeded / Failed / Skipped / Total] 476 / 400 / 31 / 907:  91%|█████████ | 908/1000 [33:58<03:26,  2.24s/it][Succeeded / Failed / Skipped / Total] 476 / 401 / 31 / 908:  91%|█████████ | 908/1000 [33:58<03:26,  2.24s/it]Close the Folder . --> test message --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[test]] ( final Folder [[message]] ) { if ( [[message]] != null ) { try { [[message]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 901 ---------------------------------------------
Updates the received email flags . --> Method to test messages --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , "[[True]]" == "[[True]]" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[test]] ( final ReceivedEmail [[ception]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[ception]] . messageNumber ( ) } , [[ception]] . flags ( ) , "[[message]]" == "[[message]]" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 902 ---------------------------------------------
Sets the folder to use . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[useFolder]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[hold]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 903 ---------------------------------------------
Sets the mime type . --> Sets the data as a parameter . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[mimeOrExtension]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String [[base]] ) { if ( [[base]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[base]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[base]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 904 ---------------------------------------------
Lookup a named parameter . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String [[name]] ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( [[name]] ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[g]] ( final String [[set]] ) { DbQueryNamedParameter [[q]] = rootNP ; while ( [[q]] != null ) { if ( [[q]] . equalsName ( [[set]] ) ) { return [[q]] ; } [[q]] = [[q]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 905 ---------------------------------------------
Adds a new violation . --> Add a string value to the validator --> Socre: 1.0

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[invalid]] ( final String [[extension]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[extension]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 906 ---------------------------------------------
Validates an action . --> Does this list access? --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... [[profiles]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[profiles]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[access]] ( final String ... [[c]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[c]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 907 ---------------------------------------------
Read target . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[fs]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 908 ---------------------------------------------
Get the target object . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[mc]] ( final String [[data]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[data]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[data]] ) ; } targetClassName = [[data]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[data]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 909 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 477 / 401 / 31 / 909:  91%|█████████ | 909/1000 [33:59<03:24,  2.24s/it][Succeeded / Failed / Skipped / Total] 477 / 401 / 31 / 909:  91%|█████████ | 910/1000 [33:59<03:21,  2.24s/it][Succeeded / Failed / Skipped / Total] 477 / 401 / 32 / 910:  91%|█████████ | 910/1000 [33:59<03:21,  2.24s/it][Succeeded / Failed / Skipped / Total] 477 / 402 / 32 / 911:  91%|█████████ | 911/1000 [34:00<03:19,  2.24s/it][Succeeded / Failed / Skipped / Total] 477 / 402 / 32 / 911:  91%|█████████ | 912/1000 [34:04<03:17,  2.24s/it][Succeeded / Failed / Skipped / Total] 478 / 402 / 32 / 912:  91%|█████████ | 912/1000 [34:04<03:17,  2.24s/it][Succeeded / Failed / Skipped / Total] 479 / 402 / 32 / 913:  91%|█████████▏| 913/1000 [34:06<03:15,  2.24s/it][Succeeded / Failed / Skipped / Total] 479 / 402 / 32 / 913:  91%|█████████▏| 914/1000 [34:08<03:12,  2.24s/it][Succeeded / Failed / Skipped / Total] 480 / 402 / 32 / 914:  91%|█████████▏| 914/1000 [34:08<03:12,  2.24s/it][Succeeded / Failed / Skipped / Total] 481 / 402 / 32 / 915:  92%|█████████▏| 915/1000 [34:09<03:10,  2.24s/it][Succeeded / Failed / Skipped / Total] 481 / 402 / 32 / 915:  92%|█████████▏| 916/1000 [34:10<03:08,  2.24s/it][Succeeded / Failed / Skipped / Total] 481 / 403 / 32 / 916:  92%|█████████▏| 916/1000 [34:10<03:08,  2.24s/it]Process the target class . --> If targetInputStream is null throws an exception --> Socre: 1.0

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[string]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 910 ---------------------------------------------
Specifies a EmailAddress --> [[[SKIPPED]]]

[[[[Adv]]]]: public T from ( final String personalName , final String from ) { return from ( new EmailAddress ( personalName , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 911 ---------------------------------------------
Gets the target object . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[setTarget]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[lb]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 912 ---------------------------------------------
Define the class . --> executing the proxy --> Socre: 1.0

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[classLoader]] = proxetta . getClassLoader ( ) ; if ( [[classLoader]] == null ) { [[classLoader]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[classLoader]] == null ) && ( targetClass != null ) ) { [[classLoader]] = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , [[classLoader]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[executing]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[band]] = proxetta . getClassLoader ( ) ; if ( [[band]] == null ) { [[band]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[band]] == null ) && ( targetClass != null ) ) { [[band]] = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , [[band]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 913 ---------------------------------------------
Appends this EmailAddress to another EmailAddress . --> Adds a new EmailAddress --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[pd]] ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , [[pd]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 914 ---------------------------------------------
Converts personal name to T --> Add a EmailAddress --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final String personalName , final String to ) { return [[to]] ( new EmailAddress ( personalName , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[f]] ( final String personalName , final String to ) { return [[f]] ( new EmailAddress ( personalName , [[f]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 915 ---------------------------------------------
Creates a new instance of the Proxetta class . --> region Proxetta --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class [[type]] = define ( ) ; try { return ClassUtil . newInstance ( [[type]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[base]] ( ) { Class [[size]] = define ( ) ; try { return ClassUtil . newInstance ( [[size]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 916 ---------------------------------------------
Downloads the given download file . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String [[downloadFileName]] ) { this . downloadFileName = [[downloadFileName]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[k]] ( final String [[header]] ) { this . downloadFileName = [[header]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[header]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 917 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 482 / 403 / 32 / 917:  92%|█████████▏| 917/1000 [34:11<03:05,  2.24s/it][Succeeded / Failed / Skipped / Total] 482 / 403 / 32 / 917:  92%|█████████▏| 918/1000 [34:11<03:03,  2.23s/it][Succeeded / Failed / Skipped / Total] 483 / 403 / 32 / 918:  92%|█████████▏| 918/1000 [34:11<03:03,  2.23s/it][Succeeded / Failed / Skipped / Total] 484 / 403 / 32 / 919:  92%|█████████▏| 919/1000 [34:16<03:01,  2.24s/it][Succeeded / Failed / Skipped / Total] 484 / 403 / 32 / 919:  92%|█████████▏| 920/1000 [34:19<02:59,  2.24s/it][Succeeded / Failed / Skipped / Total] 485 / 403 / 32 / 920:  92%|█████████▏| 920/1000 [34:19<02:59,  2.24s/it][Succeeded / Failed / Skipped / Total] 486 / 403 / 32 / 921:  92%|█████████▏| 921/1000 [34:19<02:56,  2.24s/it][Succeeded / Failed / Skipped / Total] 486 / 403 / 32 / 921:  92%|█████████▏| 922/1000 [34:22<02:54,  2.24s/it][Succeeded / Failed / Skipped / Total] 487 / 403 / 32 / 922:  92%|█████████▏| 922/1000 [34:22<02:54,  2.24s/it][Succeeded / Failed / Skipped / Total] 487 / 404 / 32 / 923:  92%|█████████▏| 923/1000 [34:25<02:52,  2.24s/it][Succeeded / Failed / Skipped / Total] 487 / 404 / 32 / 923:  92%|█████████▏| 924/1000 [34:26<02:49,  2.24s/it][Succeeded / Failed / Skipped / Total] 488 / 404 / 32 / 924:  92%|█████████▏| 924/1000 [34:26<02:49,  2.24s/it][Succeeded / Failed / Skipped / Total] 488 / 405 / 32 / 925:  92%|█████████▎| 925/1000 [34:27<02:47,  2.23s/it][Succeeded / Failed / Skipped / Total] 488 / 405 / 32 / 925:  93%|█████████▎| 926/1000 [34:28<02:45,  2.23s/it]Create the proxy . --> This method is called by the debugFolder --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[cause]] ( ) { process ( ) ; byte [ ] [[purpose]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[purpose]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[purpose]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 918 ---------------------------------------------
Returns the specified REPLACEME0 . --> Set the address at the end --> Socre: 1.0

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[com]] = ArraysUtil . join ( this . [[com]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 919 ---------------------------------------------
Short message . --> Add a T --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String html , final String encoding ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[ps]] ( final String html , final String encoding ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 920 ---------------------------------------------
Print debug folder . --> dir method --> Socre: 1.0

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] bytes ) { File [[debugFolder]] = proxetta . getDebugFolder ( ) ; if ( [[debugFolder]] == null ) { return ; } if ( ! [[debugFolder]] . exists ( ) || ! [[debugFolder]] . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + [[debugFolder]] ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( [[debugFolder]] , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[dir]] ( final byte [ ] bytes ) { File [[quality]] = proxetta . getDebugFolder ( ) ; if ( [[quality]] == null ) { return ; } if ( ! [[quality]] . exists ( ) || ! [[quality]] . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + [[quality]] ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( [[quality]] , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 921 ---------------------------------------------
Set cc . --> Add a new Email Address --> Socre: 1.0

[[[[Adv]]]]: public T cc ( final EmailAddress ... [[ccs]] ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T cc ( final EmailAddress ... [[style]] ) { this . [[rc]] = ArraysUtil . join ( this . [[rc]] , valueOrEmptyArray ( [[style]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 922 ---------------------------------------------
Adds a header . --> Adds an entry to the response --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String name , final String [[value]] ) { headers . put ( name , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[ps]] ( final String name , final String [[location]] ) { headers . put ( name , [[location]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 923 ---------------------------------------------
Get the resolved parameters . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[set]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 924 ---------------------------------------------
Gets a long value . --> Get a long from a String --> Socre: 1.0

[[[[Adv]]]]: public static long getInt ( final String [[name]] , final int defaultValue ) { String value = get ( [[name]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String [[bit]] , final int defaultValue ) { String value = get ( [[bit]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 925 ---------------------------------------------
Set the text message . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[textMessage]] ( final String text , final String encoding ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[lr]] ( final String text , final String encoding ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 926 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 489 / 405 / 32 / 926:  93%|█████████▎| 926/1000 [34:28<02:45,  2.23s/it][Succeeded / Failed / Skipped / Total] 489 / 406 / 32 / 927:  93%|█████████▎| 927/1000 [34:36<02:43,  2.24s/it][Succeeded / Failed / Skipped / Total] 489 / 406 / 32 / 927:  93%|█████████▎| 928/1000 [34:37<02:41,  2.24s/it][Succeeded / Failed / Skipped / Total] 490 / 406 / 32 / 928:  93%|█████████▎| 928/1000 [34:37<02:41,  2.24s/it][Succeeded / Failed / Skipped / Total] 490 / 407 / 32 / 929:  93%|█████████▎| 929/1000 [34:46<02:39,  2.25s/it][Succeeded / Failed / Skipped / Total] 490 / 407 / 32 / 929:  93%|█████████▎| 930/1000 [34:49<02:37,  2.25s/it][Succeeded / Failed / Skipped / Total] 491 / 407 / 32 / 930:  93%|█████████▎| 930/1000 [34:49<02:37,  2.25s/it][Succeeded / Failed / Skipped / Total] 491 / 407 / 32 / 930:  93%|█████████▎| 931/1000 [34:50<02:34,  2.25s/it][Succeeded / Failed / Skipped / Total] 492 / 407 / 32 / 931:  93%|█████████▎| 931/1000 [34:50<02:34,  2.25s/it][Succeeded / Failed / Skipped / Total] 492 / 407 / 32 / 931:  93%|█████████▎| 932/1000 [34:52<02:32,  2.24s/it][Succeeded / Failed / Skipped / Total] 493 / 407 / 32 / 932:  93%|█████████▎| 932/1000 [34:52<02:32,  2.24s/it][Succeeded / Failed / Skipped / Total] 493 / 407 / 32 / 932:  93%|█████████▎| 933/1000 [34:52<02:30,  2.24s/it]Gets the property . --> Fetches a request --> Socre: 1.0

[[[[Adv]]]]: public static String [[get]] ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( name ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return defaultValue ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[fetch]] ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String [[request]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[request]] = System . getProperty ( name ) ; } else { [[request]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[request]] == null ) { return defaultValue ; } return [[request]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 927 ---------------------------------------------
Receives a set of messages . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter filter , final Flags [[flagsToSet]] , final Flags flagsToUnset , final boolean [[envelope]] , final Consumer < Message [ ] > [[processedMessageConsumer]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[envelope]] ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[var]] ( final EmailFilter filter , final Flags [[envelope]] , final Flags flagsToUnset , final boolean [[filters]] , final Consumer < Message [ ] > [[support]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[filters]] ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 928 ---------------------------------------------
Serialize a key in the current path --> Serialize an object into the current path --> Socre: 1.0

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext jsonContext , final Path currentPath , final Object [[key]] , final Object [[value]] , int count ) { if ( ( [[value]] == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( [[key]] != null ) { currentPath . push ( [[key]] . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext jsonContext , final Path currentPath , final Object [[vector]] , final Object [[icon]] , int count ) { if ( ( [[icon]] == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( [[vector]] != null ) { currentPath . push ( [[vector]] . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 929 ---------------------------------------------
Lookup alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[access]] ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 930 ---------------------------------------------
Get the slash dot . --> exit a string --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[str]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[exit]] ( final String [[c]] ) { int slashNdx = [[c]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[c]] , ' ' , [[c]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[c]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 931 ---------------------------------------------
Resolves a single result path . --> Method to b --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String [[path]] , String value ) { boolean [[absolutePath]] = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[b]] ( String [[count]] , String value ) { boolean [[output]] = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 932 ---------------------------------------------
Gets the index of the specified slash . --> exit a string --> Socre: 1.0

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[exit]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 933 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 494 / 407 / 32 / 933:  93%|█████████▎| 933/1000 [34:52<02:30,  2.24s/it][Succeeded / Failed / Skipped / Total] 494 / 407 / 32 / 933:  93%|█████████▎| 934/1000 [34:54<02:27,  2.24s/it][Succeeded / Failed / Skipped / Total] 494 / 408 / 32 / 934:  93%|█████████▎| 934/1000 [34:54<02:27,  2.24s/it][Succeeded / Failed / Skipped / Total] 494 / 408 / 32 / 934:  94%|█████████▎| 935/1000 [34:54<02:25,  2.24s/it][Succeeded / Failed / Skipped / Total] 494 / 409 / 32 / 935:  94%|█████████▎| 935/1000 [34:54<02:25,  2.24s/it][Succeeded / Failed / Skipped / Total] 494 / 409 / 32 / 935:  94%|█████████▎| 936/1000 [34:56<02:23,  2.24s/it][Succeeded / Failed / Skipped / Total] 495 / 409 / 32 / 936:  94%|█████████▎| 936/1000 [34:56<02:23,  2.24s/it][Succeeded / Failed / Skipped / Total] 495 / 409 / 32 / 936:  94%|█████████▎| 937/1000 [34:56<02:20,  2.24s/it][Succeeded / Failed / Skipped / Total] 495 / 409 / 33 / 937:  94%|█████████▎| 937/1000 [34:56<02:20,  2.24s/it][Succeeded / Failed / Skipped / Total] 495 / 409 / 33 / 937:  94%|█████████▍| 938/1000 [34:59<02:18,  2.24s/it][Succeeded / Failed / Skipped / Total] 495 / 410 / 33 / 938:  94%|█████████▍| 938/1000 [34:59<02:18,  2.24s/it][Succeeded / Failed / Skipped / Total] 495 / 410 / 33 / 938:  94%|█████████▍| 939/1000 [35:00<02:16,  2.24s/it][Succeeded / Failed / Skipped / Total] 496 / 410 / 33 / 939:  94%|█████████▍| 939/1000 [35:00<02:16,  2.24s/it][Succeeded / Failed / Skipped / Total] 496 / 410 / 33 / 939:  94%|█████████▍| 940/1000 [35:03<02:14,  2.24s/it][Succeeded / Failed / Skipped / Total] 497 / 410 / 33 / 940:  94%|█████████▍| 940/1000 [35:03<02:14,  2.24s/it][Succeeded / Failed / Skipped / Total] 497 / 410 / 33 / 940:  94%|█████████▍| 941/1000 [35:03<02:11,  2.24s/it][Succeeded / Failed / Skipped / Total] 498 / 410 / 33 / 941:  94%|█████████▍| 941/1000 [35:03<02:11,  2.24s/it][Succeeded / Failed / Skipped / Total] 498 / 410 / 33 / 941:  94%|█████████▍| 942/1000 [35:08<02:09,  2.24s/it][Succeeded / Failed / Skipped / Total] 499 / 410 / 33 / 942:  94%|█████████▍| 942/1000 [35:08<02:09,  2.24s/it][Succeeded / Failed / Skipped / Total] 499 / 410 / 33 / 942:  94%|█████████▍| 943/1000 [35:09<02:07,  2.24s/it]Gets a boolean value . --> Check whether a string is valid or not --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String [[name]] , final boolean defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[check]] ( final String [[b]] , final boolean defaultValue ) { String [[be]] = get ( [[b]] ) ; if ( [[be]] == null ) { return defaultValue ; } [[be]] = [[be]] . trim ( ) . toLowerCase ( ) ; switch ( [[be]] ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 934 ---------------------------------------------
get long value . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLong]] ( final String [[name]] , final long [[defaultValue]] ) { String value = get ( [[name]] ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[line]] ( final String [[length]] , final long [[extension]] ) { String value = get ( [[length]] ) ; if ( value == null ) { return [[extension]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return [[extension]] ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 935 ---------------------------------------------
Get the index of the last slash in the specified string . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; [[slashNdx]] ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[bit]] ( final String str ) { int [[a]] = str . lastIndexOf ( ' ' ) ; [[a]] ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[a]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 936 ---------------------------------------------
Remove the last camel word from the name --> Returns the name of the array . --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[array]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 937 ---------------------------------------------
key - value mapping --> [[[SKIPPED]]]

[[[[Adv]]]]: private void keySchedule ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 938 ---------------------------------------------
Resolve alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int [[len]] = value . length ( ) ; while ( i < [[len]] ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[alias]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int [[i]] = value . length ( ) ; while ( i < [[i]] ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 939 ---------------------------------------------
Computes the mix of the node . --> B - d B --> Socre: 1.0

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[b]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 940 ---------------------------------------------
demix function . --> Liefert d angegebenenen --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[bob]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 941 ---------------------------------------------
Initializes the message . --> For tweak1 and tweak2 --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[init]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[echo]] ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[echo]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 942 ---------------------------------------------
This method is used to encrypt the block . --> region encryptBlock --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] [[encryptedBlock]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , [[encryptedBlock]] ) ; return longsToBytes ( [[encryptedBlock]] ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] [[fat]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , [[fat]] ) ; return longsToBytes ( [[fat]] ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 943 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 500 / 410 / 33 / 943:  94%|█████████▍| 943/1000 [35:09<02:07,  2.24s/it][Succeeded / Failed / Skipped / Total] 500 / 410 / 33 / 943:  94%|█████████▍| 944/1000 [35:14<02:05,  2.24s/it][Succeeded / Failed / Skipped / Total] 500 / 411 / 33 / 944:  94%|█████████▍| 944/1000 [35:14<02:05,  2.24s/it][Succeeded / Failed / Skipped / Total] 500 / 411 / 33 / 944:  94%|█████████▍| 945/1000 [35:16<02:03,  2.24s/it][Succeeded / Failed / Skipped / Total] 500 / 412 / 33 / 945:  94%|█████████▍| 945/1000 [35:16<02:03,  2.24s/it][Succeeded / Failed / Skipped / Total] 500 / 412 / 33 / 945:  95%|█████████▍| 946/1000 [35:22<02:01,  2.24s/it][Succeeded / Failed / Skipped / Total] 500 / 413 / 33 / 946:  95%|█████████▍| 946/1000 [35:22<02:01,  2.24s/it][Succeeded / Failed / Skipped / Total] 500 / 413 / 33 / 946:  95%|█████████▍| 947/1000 [35:23<01:58,  2.24s/it][Succeeded / Failed / Skipped / Total] 500 / 414 / 33 / 947:  95%|█████████▍| 947/1000 [35:23<01:58,  2.24s/it][Succeeded / Failed / Skipped / Total] 500 / 414 / 33 / 947:  95%|█████████▍| 948/1000 [35:25<01:56,  2.24s/it][Succeeded / Failed / Skipped / Total] 501 / 414 / 33 / 948:  95%|█████████▍| 948/1000 [35:25<01:56,  2.24s/it][Succeeded / Failed / Skipped / Total] 501 / 414 / 33 / 948:  95%|█████████▍| 949/1000 [35:29<01:54,  2.24s/it][Succeeded / Failed / Skipped / Total] 502 / 414 / 33 / 949:  95%|█████████▍| 949/1000 [35:29<01:54,  2.24s/it][Succeeded / Failed / Skipped / Total] 502 / 414 / 33 / 949:  95%|█████████▌| 950/1000 [35:31<01:52,  2.24s/it][Succeeded / Failed / Skipped / Total] 503 / 414 / 33 / 950:  95%|█████████▌| 950/1000 [35:31<01:52,  2.24s/it][Succeeded / Failed / Skipped / Total] 503 / 414 / 33 / 950:  95%|█████████▌| 951/1000 [35:39<01:50,  2.25s/it]Resolve result path string . --> Return foo value --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String [[path]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[path]] , value ) ; final String [[result]] = resultPath . pathValue ( ) ; return resolveAlias ( [[result]] ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[foo]] ( final String [[foo]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[foo]] , value ) ; final String [[trail]] = resultPath . pathValue ( ) ; return resolveAlias ( [[trail]] ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 944 ---------------------------------------------
Get the path of the resource . --> [[[FAILED]]]

[[[[Adv]]]]: public String path ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return path ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String path ( ) { if ( methref != null ) { final String [[field]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[field]] ; } return path ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 945 ---------------------------------------------
Initializes the internal structures . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[init]] ( final long [ ] key , final long [ ] tweak ) { final int [[newNw]] = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[end]] ( final long [ ] key , final long [ ] tweak ) { final int [[key]] = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 946 ---------------------------------------------
Resolve the schema name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > type , final String defaultSchemaName ) { String schemaName = null ; final DbTable [[dbTable]] = type . getAnnotation ( DbTable . class ) ; if ( [[dbTable]] != null ) { schemaName = [[dbTable]] . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[stack]] ( final Class < ? > type , final String defaultSchemaName ) { String schemaName = null ; final DbTable [[array]] = type . getAnnotation ( DbTable . class ) ; if ( [[array]] != null ) { schemaName = [[array]] . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 947 ---------------------------------------------
Removes any lower bound of the given string . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[like]] ( final char s , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 948 ---------------------------------------------
Ungzip the file . --> Converts the given file into a File --> Socre: 1.0

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String [[outFileName]] = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[out]] = new File ( [[outFileName]] ) ; [[out]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[out]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[out]] ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String [[ir]] = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[br]] = new File ( [[ir]] ) ; [[br]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[br]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[br]] ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 949 ---------------------------------------------
Unzip a directory to a zip file . --> Convenience method for creating a template --> Socre: 1.0

[[[[Adv]]]]: public static void [[unzip]] ( final String zipFile , final String destDir , final String ... patterns ) throws IOException { [[unzip]] ( new File ( zipFile ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[template]] ( final String zipFile , final String destDir , final String ... patterns ) throws IOException { [[template]] ( new File ( zipFile ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 950 ---------------------------------------------
Convert a byte array to a long array . --> Decodes a method --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int [[offset]] , final int size ) { long [ ] [[result]] = new long [ size >> 3 ] ; int [[i8]] = [[offset]] ; for ( int i = 0 ; i < [[result]] . length ; i ++ ) { [[result]] [ i ] = Bits . getLong ( ba , [[i8]] ) ; [[i8]] += 8 ; } return [[result]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[method]] ( final byte [ ] ba , final int [[number]] , final int size ) { long [ ] [[i]] = new long [ size >> 3 ] ; int [[value]] = [[number]] ; for ( int i = 0 ; i < [[i]] . length ; i ++ ) { [[i]] [ i ] = Bits . getLong ( ba , [[value]] ) ; [[value]] += 8 ; } return [[i]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 951 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 503 / 415 / 33 / 951:  95%|█████████▌| 951/1000 [35:39<01:50,  2.25s/it][Succeeded / Failed / Skipped / Total] 503 / 415 / 33 / 951:  95%|█████████▌| 952/1000 [35:41<01:47,  2.25s/it][Succeeded / Failed / Skipped / Total] 504 / 415 / 33 / 952:  95%|█████████▌| 952/1000 [35:41<01:47,  2.25s/it][Succeeded / Failed / Skipped / Total] 504 / 415 / 33 / 952:  95%|█████████▌| 953/1000 [35:48<01:45,  2.25s/it][Succeeded / Failed / Skipped / Total] 504 / 416 / 33 / 953:  95%|█████████▌| 953/1000 [35:48<01:45,  2.25s/it][Succeeded / Failed / Skipped / Total] 504 / 416 / 33 / 953:  95%|█████████▌| 954/1000 [35:52<01:43,  2.26s/it][Succeeded / Failed / Skipped / Total] 504 / 417 / 33 / 954:  95%|█████████▌| 954/1000 [35:52<01:43,  2.26s/it][Succeeded / Failed / Skipped / Total] 504 / 417 / 33 / 954:  96%|█████████▌| 955/1000 [35:56<01:41,  2.26s/it][Succeeded / Failed / Skipped / Total] 504 / 418 / 33 / 955:  96%|█████████▌| 955/1000 [35:56<01:41,  2.26s/it][Succeeded / Failed / Skipped / Total] 504 / 418 / 33 / 955:  96%|█████████▌| 956/1000 [35:57<01:39,  2.26s/it][Succeeded / Failed / Skipped / Total] 504 / 419 / 33 / 956:  96%|█████████▌| 956/1000 [35:57<01:39,  2.26s/it][Succeeded / Failed / Skipped / Total] 504 / 419 / 33 / 956:  96%|█████████▌| 957/1000 [36:04<01:37,  2.26s/it][Succeeded / Failed / Skipped / Total] 505 / 419 / 33 / 957:  96%|█████████▌| 957/1000 [36:04<01:37,  2.26s/it][Succeeded / Failed / Skipped / Total] 505 / 419 / 33 / 957:  96%|█████████▌| 958/1000 [36:07<01:35,  2.26s/it]Get zlib file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( [[fis]] , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[files]] = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( [[files]] , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( [[files]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 952 ---------------------------------------------
Adds the given file to a zip file . --> check if the file is a directory --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File file , String [[path]] , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( [[path]] == null ) { [[path]] = file . getName ( ) ; } while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[whenever]] ( final ZipOutputStream zos , final File file , String [[line]] , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( [[line]] == null ) { [[line]] = file . getName ( ) ; } while ( [[line]] . length ( ) != 0 && [[line]] . charAt ( 0 ) == ' ' ) { [[line]] = [[line]] . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 953 ---------------------------------------------
gzip a file --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[gzip]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; String [[gzipName]] = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream [[gzos]] = new GZIPOutputStream ( new FileOutputStream ( [[gzipName]] ) ) ; try { StreamUtil . copy ( fis , [[gzos]] ) ; } finally { StreamUtil . close ( [[gzos]] ) ; StreamUtil . close ( fis ) ; } return new File ( [[gzipName]] ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[structure]] ( final File [[closure]] ) throws IOException { if ( [[closure]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[closure]] ) ; String [[sub]] = [[closure]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream [[vip]] = new GZIPOutputStream ( new FileOutputStream ( [[sub]] ) ) ; try { StreamUtil . copy ( fis , [[vip]] ) ; } finally { StreamUtil . close ( [[vip]] ) ; StreamUtil . close ( fis ) ; } return new File ( [[sub]] ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 954 ---------------------------------------------
Resolve column descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > [[sqlTypeClass]] = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > [[y]] = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 955 ---------------------------------------------
Sets the bundle name . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[http]] ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 956 ---------------------------------------------
Returns the property descriptor for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String name , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[print]] ( final String name , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 957 ---------------------------------------------
Adds one or more profiles to the PropsEntries . --> Set profile list --> Socre: 1.0

[[[[Adv]]]]: public PropsEntries profile ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String profile : [[profiles]] ) { addProfiles ( profile ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries profile ( final String ... [[i]] ) { if ( [[i]] == null ) { return this ; } for ( String profile : [[i]] ) { addProfiles ( profile ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 958 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 505 / 420 / 33 / 958:  96%|█████████▌| 958/1000 [36:07<01:35,  2.26s/it][Succeeded / Failed / Skipped / Total] 505 / 420 / 33 / 958:  96%|█████████▌| 959/1000 [36:08<01:32,  2.26s/it][Succeeded / Failed / Skipped / Total] 505 / 421 / 33 / 959:  96%|█████████▌| 959/1000 [36:08<01:32,  2.26s/it][Succeeded / Failed / Skipped / Total] 505 / 421 / 33 / 959:  96%|█████████▌| 960/1000 [36:11<01:30,  2.26s/it][Succeeded / Failed / Skipped / Total] 505 / 422 / 33 / 960:  96%|█████████▌| 960/1000 [36:11<01:30,  2.26s/it][Succeeded / Failed / Skipped / Total] 505 / 422 / 33 / 960:  96%|█████████▌| 961/1000 [36:13<01:28,  2.26s/it][Succeeded / Failed / Skipped / Total] 505 / 423 / 33 / 961:  96%|█████████▌| 961/1000 [36:13<01:28,  2.26s/it][Succeeded / Failed / Skipped / Total] 505 / 423 / 33 / 961:  96%|█████████▌| 962/1000 [36:13<01:25,  2.26s/it][Succeeded / Failed / Skipped / Total] 505 / 424 / 33 / 962:  96%|█████████▌| 962/1000 [36:13<01:25,  2.26s/it][Succeeded / Failed / Skipped / Total] 505 / 424 / 33 / 962:  96%|█████████▋| 963/1000 [36:14<01:23,  2.26s/it][Succeeded / Failed / Skipped / Total] 505 / 425 / 33 / 963:  96%|█████████▋| 963/1000 [36:14<01:23,  2.26s/it][Succeeded / Failed / Skipped / Total] 505 / 425 / 33 / 963:  96%|█████████▋| 964/1000 [36:24<01:21,  2.27s/it][Succeeded / Failed / Skipped / Total] 505 / 426 / 33 / 964:  96%|█████████▋| 964/1000 [36:24<01:21,  2.27s/it][Succeeded / Failed / Skipped / Total] 505 / 426 / 33 / 964:  96%|█████████▋| 965/1000 [36:26<01:19,  2.27s/it]Returns the field descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String name , final boolean declared ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( name ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( declared ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[after]] ( final String name , final boolean declared ) { final FieldDescriptor [[c]] = getFields ( ) . getFieldDescriptor ( name ) ; if ( [[c]] != null ) { if ( ! [[c]] . matchDeclared ( declared ) ) { return null ; } } return [[c]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 959 ---------------------------------------------
Get the locale for this session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[function]] ( final HttpSession [[value]] ) { Locale [[name]] = ( Locale ) [[value]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[name]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[name]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 960 ---------------------------------------------
Set the session s locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession [[session]] , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale [[locale]] = Locale . forLanguageTag ( [[localeCode]] ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , [[locale]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[thread]] ( final HttpSession [[declaration]] , final String [[list]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[list]] ) ; } Locale [[configuration]] = Locale . forLanguageTag ( [[list]] ) ; [[declaration]] . setAttribute ( SESSION_LOCALE_ATTR , [[configuration]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 961 ---------------------------------------------
Returns all the zip entries of the given zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile [[zip]] = new ZipFile ( zipFile ) ; Enumeration zipEntries = [[zip]] . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[entries]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > [[collecting]] = new ArrayList <> ( ) ; ZipFile [[collections]] = new ZipFile ( zipFile ) ; Enumeration zipEntries = [[collections]] . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[collecting]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[collecting]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 962 ---------------------------------------------
Reads a long from the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[line]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 963 ---------------------------------------------
Adds content to zip archive . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String [[comment]] ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[zipEntry]] = new ZipEntry ( path ) ; [[zipEntry]] . setTime ( System . currentTimeMillis ( ) ) ; if ( [[comment]] != null ) { [[zipEntry]] . setComment ( [[comment]] ) ; } zos . putNextEntry ( [[zipEntry]] ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[fix]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String [[link]] ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[now]] = new ZipEntry ( path ) ; [[now]] . setTime ( System . currentTimeMillis ( ) ) ; if ( [[link]] != null ) { [[now]] . setComment ( [[link]] ) ; } zos . putNextEntry ( [[now]] ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 964 ---------------------------------------------
Reads a label . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int [[data]] , final Label [ ] labels ) { if ( labels [ [[data]] ] == null ) { labels [ [[data]] ] = new Label ( ) ; } return labels [ [[data]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 965 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 505 / 427 / 33 / 965:  96%|█████████▋| 965/1000 [36:27<01:19,  2.27s/it][Succeeded / Failed / Skipped / Total] 505 / 427 / 33 / 965:  97%|█████████▋| 966/1000 [36:31<01:17,  2.27s/it][Succeeded / Failed / Skipped / Total] 505 / 428 / 33 / 966:  97%|█████████▋| 966/1000 [36:31<01:17,  2.27s/it][Succeeded / Failed / Skipped / Total] 505 / 428 / 33 / 966:  97%|█████████▋| 967/1000 [36:35<01:14,  2.27s/it][Succeeded / Failed / Skipped / Total] 506 / 428 / 33 / 967:  97%|█████████▋| 967/1000 [36:35<01:14,  2.27s/it][Succeeded / Failed / Skipped / Total] 506 / 428 / 33 / 967:  97%|█████████▋| 968/1000 [36:39<01:12,  2.27s/it][Succeeded / Failed / Skipped / Total] 506 / 429 / 33 / 968:  97%|█████████▋| 968/1000 [36:39<01:12,  2.27s/it][Succeeded / Failed / Skipped / Total] 506 / 429 / 33 / 968:  97%|█████████▋| 969/1000 [36:44<01:10,  2.27s/it][Succeeded / Failed / Skipped / Total] 506 / 430 / 33 / 969:  97%|█████████▋| 969/1000 [36:44<01:10,  2.27s/it][Succeeded / Failed / Skipped / Total] 506 / 430 / 33 / 969:  97%|█████████▋| 970/1000 [36:46<01:08,  2.28s/it][Succeeded / Failed / Skipped / Total] 506 / 431 / 33 / 970:  97%|█████████▋| 970/1000 [36:46<01:08,  2.28s/it][Succeeded / Failed / Skipped / Total] 506 / 431 / 33 / 970:  97%|█████████▋| 971/1000 [36:50<01:06,  2.28s/it][Succeeded / Failed / Skipped / Total] 506 / 432 / 33 / 971:  97%|█████████▋| 971/1000 [36:50<01:06,  2.28s/it][Succeeded / Failed / Skipped / Total] 506 / 432 / 33 / 971:  97%|█████████▋| 972/1000 [36:51<01:03,  2.27s/it]Returns the type annotation index of the given type annotation offsets . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int [[typeAnnotationIndex]] ) { if ( typeAnnotationOffsets == null || [[typeAnnotationIndex]] >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ [[typeAnnotationIndex]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ [[typeAnnotationIndex]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[begin]] ( final int [ ] typeAnnotationOffsets , final int [[name]] ) { if ( typeAnnotationOffsets == null || [[name]] >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ [[name]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ [[name]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 966 ---------------------------------------------
Filters parameters for given bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[entry]] : params . entrySet ( ) ) { String key = [[entry]] . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[b]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[example]] : params . entrySet ( ) ) { String key = [[example]] . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 967 ---------------------------------------------
Get a ctor descriptor . --> Set class arguments --> Socre: 1.0

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] [[arg]] = ctorDescriptor . getParameters ( ) ; if ( [[arg]] . length != args . length ) { continue ; } for ( int j = 0 ; j < [[arg]] . length ; j ++ ) { if ( [[arg]] [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[set]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] [[sequence]] = ctorDescriptor . getParameters ( ) ; if ( [[sequence]] . length != args . length ) { continue ; } for ( int j = 0 ; j < [[sequence]] . length ; j ++ ) { if ( [[sequence]] [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 968 ---------------------------------------------
Gets the attribute map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[get]] ( final HttpServletRequest [[ial]] ) { return ( Map < String , TransientBeanData > ) [[ial]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 969 ---------------------------------------------
Reads the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream [[inputStream]] , final boolean close ) throws IOException { if ( [[inputStream]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int [[bytesRead]] ; while ( ( [[bytesRead]] = [[inputStream]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , [[bytesRead]] ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[inputStream]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[call]] ( final InputStream [[close]] , final boolean close ) throws IOException { if ( [[close]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int [[test]] ; while ( ( [[test]] = [[close]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , [[test]] ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[close]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 970 ---------------------------------------------
Read the values from the annotation visitor . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor [[annotationVisitor]] , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int [[currentOffset]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[en]] ( final AnnotationVisitor [[et]] , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int [[id]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 971 ---------------------------------------------
Initialize the filter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[function]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 972 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 507 / 432 / 33 / 972:  97%|█████████▋| 972/1000 [36:51<01:03,  2.27s/it][Succeeded / Failed / Skipped / Total] 507 / 432 / 33 / 972:  97%|█████████▋| 973/1000 [36:53<01:01,  2.27s/it][Succeeded / Failed / Skipped / Total] 508 / 432 / 33 / 973:  97%|█████████▋| 973/1000 [36:53<01:01,  2.27s/it][Succeeded / Failed / Skipped / Total] 508 / 432 / 33 / 973:  97%|█████████▋| 974/1000 [36:53<00:59,  2.27s/it][Succeeded / Failed / Skipped / Total] 508 / 433 / 33 / 974:  97%|█████████▋| 974/1000 [36:53<00:59,  2.27s/it][Succeeded / Failed / Skipped / Total] 508 / 433 / 33 / 974:  98%|█████████▊| 975/1000 [36:55<00:56,  2.27s/it][Succeeded / Failed / Skipped / Total] 508 / 434 / 33 / 975:  98%|█████████▊| 975/1000 [36:55<00:56,  2.27s/it][Succeeded / Failed / Skipped / Total] 508 / 434 / 33 / 975:  98%|█████████▊| 976/1000 [36:59<00:54,  2.27s/it][Succeeded / Failed / Skipped / Total] 508 / 435 / 33 / 976:  98%|█████████▊| 976/1000 [36:59<00:54,  2.27s/it][Succeeded / Failed / Skipped / Total] 508 / 435 / 33 / 976:  98%|█████████▊| 977/1000 [36:59<00:52,  2.27s/it][Succeeded / Failed / Skipped / Total] 508 / 436 / 33 / 977:  98%|█████████▊| 977/1000 [36:59<00:52,  2.27s/it][Succeeded / Failed / Skipped / Total] 508 / 436 / 33 / 977:  98%|█████████▊| 978/1000 [37:01<00:49,  2.27s/it][Succeeded / Failed / Skipped / Total] 509 / 436 / 33 / 978:  98%|█████████▊| 978/1000 [37:01<00:49,  2.27s/it][Succeeded / Failed / Skipped / Total] 509 / 436 / 33 / 978:  98%|█████████▊| 979/1000 [37:05<00:47,  2.27s/it][Succeeded / Failed / Skipped / Total] 510 / 436 / 33 / 979:  98%|█████████▊| 979/1000 [37:05<00:47,  2.27s/it][Succeeded / Failed / Skipped / Total] 510 / 436 / 33 / 979:  98%|█████████▊| 980/1000 [37:06<00:45,  2.27s/it]Adds a file . --> Adds the given consumers to the list . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[consumers]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[consumers]] ) ; } else { consumers . add ( [[consumers]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 973 ---------------------------------------------
Find a file in the given search path . --> Create a FindFile instance --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File file ; try { file = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[ch]] ( final URI searchPath ) { File file ; try { file = new File ( [[ch]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[ch]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 974 ---------------------------------------------
Creates the servlet request map . --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[query]] ( final HttpServletRequest [[error]] ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; [[error]] . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 975 ---------------------------------------------
Gets the class descriptor array . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[execute]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 976 ---------------------------------------------
Convert an array of primitive types to an array of primitive types . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] convertArrayToArray ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] convertArrayToArray ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 977 ---------------------------------------------
Read an automaticMethods attribute . --> [[[FAILED]]]

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] [[charBuffer]] = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] [[currentBootstrapMethodOffsets]] = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[k]] ( final int maxStringLength ) { char [ ] [[c]] = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] [[ii]] = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 978 ---------------------------------------------
Returns a copy of this file . --> Exposed for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile exclude ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... [[group]] ) { for ( String pattern : [[group]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 979 ---------------------------------------------
Adds a search path . --> format to FindFile --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File [[file]] = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( [[file]] == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[format]] ( final URL searchPath ) { File [[archive]] = FileUtil . toContainerFile ( [[format]] ) ; if ( [[archive]] == null ) { throw new FindFileException ( "URL error: " + [[format]] ) ; } addPath ( [[archive]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 980 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 510 / 437 / 33 / 980:  98%|█████████▊| 980/1000 [37:06<00:45,  2.27s/it][Succeeded / Failed / Skipped / Total] 510 / 437 / 33 / 980:  98%|█████████▊| 981/1000 [37:06<00:43,  2.27s/it][Succeeded / Failed / Skipped / Total] 510 / 438 / 33 / 981:  98%|█████████▊| 981/1000 [37:06<00:43,  2.27s/it][Succeeded / Failed / Skipped / Total] 510 / 439 / 33 / 982:  98%|█████████▊| 982/1000 [37:06<00:40,  2.27s/it][Succeeded / Failed / Skipped / Total] 510 / 439 / 33 / 982:  98%|█████████▊| 983/1000 [37:11<00:38,  2.27s/it][Succeeded / Failed / Skipped / Total] 510 / 440 / 33 / 983:  98%|█████████▊| 983/1000 [37:11<00:38,  2.27s/it][Succeeded / Failed / Skipped / Total] 510 / 441 / 33 / 984:  98%|█████████▊| 984/1000 [37:12<00:36,  2.27s/it][Succeeded / Failed / Skipped / Total] 510 / 441 / 33 / 984:  98%|█████████▊| 985/1000 [37:12<00:34,  2.27s/it][Succeeded / Failed / Skipped / Total] 511 / 441 / 33 / 985:  98%|█████████▊| 985/1000 [37:12<00:34,  2.27s/it][Succeeded / Failed / Skipped / Total] 511 / 442 / 33 / 986:  99%|█████████▊| 986/1000 [37:14<00:31,  2.27s/it][Succeeded / Failed / Skipped / Total] 511 / 442 / 33 / 986:  99%|█████████▊| 987/1000 [37:19<00:29,  2.27s/it]Reads verification mode . --> [[[FAILED]]]

[[[[Adv]]]]: private int readVerificationTypeInfo ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int [[tag]] = b [ currentOffset ++ ] & 0xFF ; switch ( [[tag]] ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int readVerificationTypeInfo ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int [[a]] = b [ currentOffset ++ ] & 0xFF ; switch ( [[a]] ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 981 ---------------------------------------------
Returns an iterator for the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[after]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 982 ---------------------------------------------
Add a path to the list . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[find]] ( final File [[directory]] ) { if ( ! [[directory]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[directory]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 983 ---------------------------------------------
Get the buffered writer . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[list]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 984 ---------------------------------------------
Finds the file at the given patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile include ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile include ( final String ... [[example]] ) { for ( String pattern : [[example]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 985 ---------------------------------------------
Returns the outStream . --> test method --> Socre: 1.0

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[test]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 986 ---------------------------------------------
Find all files . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[allFiles]] . add ( file ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[expand]] ( ) { List < File > [[index]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[index]] . add ( file ) ; } return [[index]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 987 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 512 / 442 / 33 / 987:  99%|█████████▊| 987/1000 [37:19<00:29,  2.27s/it][Succeeded / Failed / Skipped / Total] 512 / 443 / 33 / 988:  99%|█████████▉| 988/1000 [37:20<00:27,  2.27s/it][Succeeded / Failed / Skipped / Total] 512 / 443 / 33 / 988:  99%|█████████▉| 989/1000 [37:24<00:24,  2.27s/it][Succeeded / Failed / Skipped / Total] 512 / 444 / 33 / 989:  99%|█████████▉| 989/1000 [37:24<00:24,  2.27s/it][Succeeded / Failed / Skipped / Total] 513 / 444 / 33 / 990:  99%|█████████▉| 990/1000 [37:24<00:22,  2.27s/it][Succeeded / Failed / Skipped / Total] 513 / 444 / 33 / 990:  99%|█████████▉| 991/1000 [37:25<00:20,  2.27s/it][Succeeded / Failed / Skipped / Total] 513 / 445 / 33 / 991:  99%|█████████▉| 991/1000 [37:25<00:20,  2.27s/it][Succeeded / Failed / Skipped / Total] 513 / 446 / 33 / 992:  99%|█████████▉| 992/1000 [37:34<00:18,  2.27s/it][Succeeded / Failed / Skipped / Total] 513 / 446 / 33 / 992:  99%|█████████▉| 993/1000 [37:36<00:15,  2.27s/it]Initializes the rules . --> archive the rules --> Socre: 1.0

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File [[file]] = iterator . next ( ) ; if ( [[file]] . isFile ( ) ) { files [ index ++ ] = [[file]] . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[archive]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File [[list]] = iterator . next ( ) ; if ( [[list]] . isFile ( ) ) { files [ index ++ ] = [[list]] . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 988 ---------------------------------------------
Resolve WiringMode . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 989 ---------------------------------------------
Appends a descriptor to the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[fix]] ( final StringBuilder [[handler]] ) { if ( sort == OBJECT ) { [[handler]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[handler]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[handler]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 990 ---------------------------------------------
Returns the type name of the class . --> Execute a query --> Socre: 1.0

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[stringBuilder]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[stringBuilder]] . append ( "[]" ) ; } return [[stringBuilder]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[execute]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[array]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[array]] . append ( "[]" ) ; } return [[array]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 991 ---------------------------------------------
Returns the size of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[print]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 992 ---------------------------------------------
Resolve bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[foo]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 993 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 514 / 446 / 33 / 993:  99%|█████████▉| 993/1000 [37:36<00:15,  2.27s/it][Succeeded / Failed / Skipped / Total] 514 / 446 / 33 / 993:  99%|█████████▉| 994/1000 [37:38<00:13,  2.27s/it][Succeeded / Failed / Skipped / Total] 514 / 447 / 33 / 994:  99%|█████████▉| 994/1000 [37:38<00:13,  2.27s/it][Succeeded / Failed / Skipped / Total] 514 / 447 / 33 / 994: 100%|█████████▉| 995/1000 [37:38<00:11,  2.27s/it][Succeeded / Failed / Skipped / Total] 514 / 448 / 33 / 995: 100%|█████████▉| 995/1000 [37:38<00:11,  2.27s/it][Succeeded / Failed / Skipped / Total] 514 / 448 / 33 / 995: 100%|█████████▉| 996/1000 [37:39<00:09,  2.27s/it][Succeeded / Failed / Skipped / Total] 514 / 449 / 33 / 996: 100%|█████████▉| 996/1000 [37:39<00:09,  2.27s/it][Succeeded / Failed / Skipped / Total] 514 / 449 / 33 / 996: 100%|█████████▉| 997/1000 [37:41<00:06,  2.27s/it][Succeeded / Failed / Skipped / Total] 514 / 450 / 33 / 997: 100%|█████████▉| 997/1000 [37:41<00:06,  2.27s/it][Succeeded / Failed / Skipped / Total] 514 / 450 / 33 / 997: 100%|█████████▉| 998/1000 [37:57<00:04,  2.28s/it][Succeeded / Failed / Skipped / Total] 514 / 451 / 33 / 998: 100%|█████████▉| 998/1000 [37:57<00:04,  2.28s/it][Succeeded / Failed / Skipped / Total] 514 / 451 / 33 / 998: 100%|█████████▉| 999/1000 [38:01<00:02,  2.28s/it]Get the arguments size . --> Entry point for testing --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[main]] ( final String [[procedure]] ) { int [[j]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 994 ---------------------------------------------
Sets the rollback only . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable [[th]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[th]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[loop]] ( final Throwable [[action]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[action]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 995 ---------------------------------------------
Returns the constructor descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > constructor ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = constructor . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : [[parameters]] ) { appendDescriptor ( [[parameter]] , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > constructor ) { StringBuilder [[result]] = new StringBuilder ( ) ; [[result]] . append ( ' ' ) ; Class < ? > [ ] [[command]] = constructor . getParameterTypes ( ) ; for ( Class < ? > [[a]] : [[command]] ) { appendDescriptor ( [[a]] , [[result]] ) ; } return [[result]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 996 ---------------------------------------------
Returns the method descriptor for a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getMethodDescriptor ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = method . getParameterTypes ( ) ; for ( Class < ? > parameter : [[parameters]] ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String getMethodDescriptor ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[table]] = method . getParameterTypes ( ) ; for ( Class < ? > parameter : [[table]] ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 997 ---------------------------------------------
Return the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... [[argumentTypes]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type argumentType : [[argumentTypes]] ) { argumentType . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; returnType . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[candidate]] ( final Type returnType , final Type ... [[method]] ) { StringBuilder [[c]] = new StringBuilder ( ) ; [[c]] . append ( ' ' ) ; for ( Type argumentType : [[method]] ) { argumentType . appendDescriptor ( [[c]] ) ; } [[c]] . append ( ' ' ) ; returnType . appendDescriptor ( [[c]] ) ; return [[c]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 998 ---------------------------------------------
Rollback all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 999 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 514 / 452 / 33 / 999: 100%|█████████▉| 999/1000 [38:01<00:02,  2.28s/it][Succeeded / Failed / Skipped / Total] 514 / 452 / 33 / 999: 100%|██████████| 1000/1000 [38:07<00:00,  2.29s/it][Succeeded / Failed / Skipped / Total] 514 / 453 / 33 / 1000: 100%|██████████| 1000/1000 [38:07<00:00,  2.29s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  delete
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapMaskedLM(
    (method):  bae
    (masked_lm_name):  BertForMaskedLM
    (max_length):  512
    (max_candidates):  50
    (min_confidence):  0.0
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 514 / 453 / 33 / 1000: 100%|██████████| 1000/1000 [38:11<00:00,  2.29s/it]Requests the resource . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[E]] > [[E]] requestResource ( final Class < [[E]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[E]] resource = lookupResource ( resourceType ) ; if ( resource == null ) { int [[maxResources]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[maxResources]] != - 1 ) && ( resources . size ( ) >= [[maxResources]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[E]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < [[ref]] > [[ref]] requestResource ( final Class < [[ref]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[ref]] resource = lookupResource ( resourceType ) ; if ( resource == null ) { int [[area]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[area]] != - 1 ) && ( resources . size ( ) >= [[area]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[ref]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 1000 ---------------------------------------------
Commit or rollback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean [[doCommit]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[doCommit]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[doCommit]] ) { [[doCommit]] = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[doCommit]] ? "commit" : "rollback" ) ) ; } } if ( [[doCommit]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[that]] ( boolean [[set]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[set]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[set]] ) { [[set]] = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[set]] ? "commit" : "rollback" ) ) ; } } if ( [[set]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 514    |
| Number of failed attacks:     | 453    |
| Number of skipped attacks:    | 33     |
| Original accuracy:            | 96.7%  |
| Accuracy under attack:        | 45.3%  |
| Attack success rate:          | 53.15% |
| Average perturbed word %:     | 51.38% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 124.08 |
| Original BLEU-4:              | 16.35  |
| Perturbed BLEU-4:             | 2.88   |
+-------------------------------+--------+

/data/zzr/.pyenv/versions/3.8-dev/lib/python3.8/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 8 leaked semaphore objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '

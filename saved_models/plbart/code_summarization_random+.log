textattack: Running 8 worker(s) on 8 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1481.56it/s][Succeeded / Failed / Skipped / Total] 2 / 0 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1813.36it/s][Succeeded / Failed / Skipped / Total] 3 / 0 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 2107.34it/s][Succeeded / Failed / Skipped / Total] 4 / 0 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 2235.77it/s][Succeeded / Failed / Skipped / Total] 5 / 0 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 2316.02it/s][Succeeded / Failed / Skipped / Total] 6 / 0 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 2369.44it/s]--------------------------------------------- Result 1 ---------------------------------------------
Creates an observable from the source --> Get RxJava source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[hippies]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Creates an observable for the given scheduler . --> Convenience function for building a new b compact observable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[bows]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 3 ---------------------------------------------
Creates a new UnicastProcessor . --> Create a new processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[arigato]] ) { return new UnicastProcessor < T > ( [[arigato]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 4 ---------------------------------------------
Creates a new thread - safe processor . --> Get complete complete code --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[wolfman]] ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 5 ---------------------------------------------
Resets the configuration . --> Sets the anthology --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[anthology]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 6 ---------------------------------------------
Sorts the given sort function with the given sort function . --> Get blasphemed --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[blasphemed]] ( Comparator < ? super T > [[brings]] ) { ObjectHelper . requireNonNull ( [[brings]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[brings]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 7 / 0 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 2422.25it/s][Succeeded / Failed / Skipped / Total] 8 / 0 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 2447.98it/s][Succeeded / Failed / Skipped / Total] 9 / 0 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 2533.47it/s][Succeeded / Failed / Skipped / Total] 10 / 0 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 2585.25it/s][Succeeded / Failed / Skipped / Total] 11 / 0 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 2645.19it/s][Succeeded / Failed / Skipped / Total] 11 / 0 / 0 / 11:   1%|          | 12/1000 [00:00<00:14, 70.07it/s]  [Succeeded / Failed / Skipped / Total] 12 / 0 / 0 / 12:   1%|          | 12/1000 [00:00<00:14, 69.92it/s][Succeeded / Failed / Skipped / Total] 13 / 0 / 0 / 13:   1%|▏         | 13/1000 [00:00<00:54, 18.04it/s][Succeeded / Failed / Skipped / Total] 14 / 0 / 0 / 14:   1%|▏         | 14/1000 [00:08<09:41,  1.70it/s][Succeeded / Failed / Skipped / Total] 15 / 0 / 0 / 15:   2%|▏         | 15/1000 [00:13<14:45,  1.11it/s][Succeeded / Failed / Skipped / Total] 16 / 0 / 0 / 16:   2%|▏         | 16/1000 [00:14<15:01,  1.09it/s]Create a new Maybe from single . --> Get the sting for the given source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[dicking]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 8 ---------------------------------------------
Returns an element retrying to the specified predicate . --> Apply a retry --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[pinprick]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[pinprick]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 9 ---------------------------------------------
Checks if an object is null . --> Get splashdown --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[splashdown]] > [[splashdown]] requireNonNull ( [[splashdown]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 10 ---------------------------------------------
Gets a Maybe from the completableSource . --> Returns an object from the source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromCompletable ( CompletableSource [[completableSource]] ) { ObjectHelper . requireNonNull ( [[completableSource]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[completableSource]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromCompletable ( CompletableSource [[hardworking]] ) { ObjectHelper . requireNonNull ( [[hardworking]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[hardworking]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 11 ---------------------------------------------
Convenience method for setting a value to a Callable . --> Convenience method for creating an Object --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T value ) { return new JustValue < Object , T > ( value ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[exhilarating]] ( T value ) { return new JustValue < Object , T > ( value ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 12 ---------------------------------------------
Create new UnicastSubject --> Create a new Unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[Edifying]]" == "[[Edifying]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 13 ---------------------------------------------
Returns a function value for the given value . --> Subtraction --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Function < T , U > [[justFunction]] ( U value ) { return new JustValue < T , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < T , U > Function < T , U > [[subway]] ( U value ) { return new JustValue < T , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 14 ---------------------------------------------
Creates a new subject with the specified capacity hint . --> Create a new subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[lacey]] ) { return new UnicastSubject < T > ( [[lacey]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 15 ---------------------------------------------
Creates a new Unicast subject . --> Create new subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[grate]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 16 ---------------------------------------------
Returns an identity Function . --> Return a new loudspeakers object --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > identity ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[loudspeakers]] > Function < [[loudspeakers]] , [[loudspeakers]] > identity ( ) { return ( Function < [[loudspeakers]] , [[loudspeakers]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 17 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 17 / 0 / 0 / 17:   2%|▏         | 17/1000 [00:19<18:43,  1.14s/it][Succeeded / Failed / Skipped / Total] 18 / 0 / 0 / 18:   2%|▏         | 18/1000 [00:25<23:24,  1.43s/it][Succeeded / Failed / Skipped / Total] 19 / 0 / 0 / 19:   2%|▏         | 19/1000 [00:33<28:58,  1.77s/it][Succeeded / Failed / Skipped / Total] 20 / 0 / 0 / 20:   2%|▏         | 20/1000 [00:49<40:42,  2.49s/it][Succeeded / Failed / Skipped / Total] 21 / 0 / 0 / 21:   2%|▏         | 21/1000 [00:52<40:43,  2.50s/it][Succeeded / Failed / Skipped / Total] 22 / 0 / 0 / 22:   2%|▏         | 22/1000 [01:09<51:13,  3.14s/it][Succeeded / Failed / Skipped / Total] 23 / 0 / 0 / 23:   2%|▏         | 23/1000 [01:27<1:01:59,  3.81s/it][Succeeded / Failed / Skipped / Total] 23 / 0 / 0 / 23:   2%|▏         | 24/1000 [01:54<1:17:47,  4.78s/it][Succeeded / Failed / Skipped / Total] 24 / 0 / 0 / 24:   2%|▏         | 24/1000 [01:54<1:17:47,  4.78s/it][Succeeded / Failed / Skipped / Total] 24 / 0 / 0 / 24:   2%|▎         | 25/1000 [02:27<1:36:04,  5.91s/it]Waits until the server is stopped . --> diluted --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[diluted]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 18 ---------------------------------------------
Waits for a blocking operation . --> blocking stop - blocking --> Socre: 1.0

[[[[Adv]]]]: public boolean blockingAwait ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean blockingAwait ( long [[qaddafi]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[qaddafi]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 19 ---------------------------------------------
Handles a request . --> Handles a request --> Socre: 1.0

[[[[Adv]]]]: public static void request ( Subscription [[s]] , int prefetch ) { [[s]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void request ( Subscription [[angler]] , int prefetch ) { [[angler]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 20 ---------------------------------------------
Cast function . --> CastTo to castable to unbelievable --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Function < T , U > castFunction ( Class < U > [[target]] ) { return new CastToClass < T , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < T , U > Function < T , U > castFunction ( Class < U > [[unbelievable]] ) { return new CastToClass < T , U > ( [[unbelievable]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 21 ---------------------------------------------
Create a scalar UMap . --> Transens an Publisherual --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[transsexual]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > [[anthology]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , [[anthology]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 22 ---------------------------------------------
Completes the given n --> Completely complete n --> Socre: 1.0

[[[[Adv]]]]: protected final void complete ( R n ) { long [[p]] = produced ; if ( [[p]] != 0 ) { BackpressureHelper . produced ( this , [[p]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R n ) { long [[compressor]] = produced ; if ( [[compressor]] != 0 ) { BackpressureHelper . produced ( this , [[compressor]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 23 ---------------------------------------------
Create a new UnicastSubject . --> Create new complete subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( capacityHint , [[onTerminate]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable [[grateful]] ) { return new UnicastSubject < T > ( capacityHint , [[grateful]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 24 ---------------------------------------------
Validates the given Disposable upstream and the given observer . --> Validate DisposableHelper --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Disposable [[upstream]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . dispose ( ) ; if ( [[upstream]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable [[tycoons]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[tycoons]] != null ) { next . dispose ( ) ; if ( [[tycoons]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 25 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 25 / 0 / 0 / 25:   2%|▎         | 25/1000 [02:27<1:36:04,  5.91s/it][Succeeded / Failed / Skipped / Total] 25 / 0 / 0 / 25:   3%|▎         | 26/1000 [02:54<1:49:06,  6.72s/it][Succeeded / Failed / Skipped / Total] 26 / 0 / 0 / 26:   3%|▎         | 26/1000 [02:54<1:49:06,  6.72s/it][Succeeded / Failed / Skipped / Total] 26 / 0 / 0 / 26:   3%|▎         | 27/1000 [03:01<1:48:50,  6.71s/it][Succeeded / Failed / Skipped / Total] 27 / 0 / 0 / 27:   3%|▎         | 27/1000 [03:01<1:48:50,  6.71s/it][Succeeded / Failed / Skipped / Total] 27 / 0 / 0 / 27:   3%|▎         | 28/1000 [03:12<1:51:23,  6.88s/it][Succeeded / Failed / Skipped / Total] 28 / 0 / 0 / 28:   3%|▎         | 28/1000 [03:12<1:51:23,  6.88s/it][Succeeded / Failed / Skipped / Total] 28 / 0 / 0 / 28:   3%|▎         | 29/1000 [03:14<1:48:37,  6.71s/it][Succeeded / Failed / Skipped / Total] 29 / 0 / 0 / 29:   3%|▎         | 29/1000 [03:14<1:48:37,  6.71s/it][Succeeded / Failed / Skipped / Total] 29 / 0 / 0 / 29:   3%|▎         | 30/1000 [03:21<1:48:35,  6.72s/it][Succeeded / Failed / Skipped / Total] 30 / 0 / 0 / 30:   3%|▎         | 30/1000 [03:21<1:48:35,  6.72s/it][Succeeded / Failed / Skipped / Total] 30 / 0 / 0 / 30:   3%|▎         | 31/1000 [04:03<2:07:02,  7.87s/it][Succeeded / Failed / Skipped / Total] 31 / 0 / 0 / 31:   3%|▎         | 31/1000 [04:03<2:07:02,  7.87s/it][Succeeded / Failed / Skipped / Total] 31 / 0 / 0 / 31:   3%|▎         | 32/1000 [04:12<2:07:07,  7.88s/it][Succeeded / Failed / Skipped / Total] 32 / 0 / 0 / 32:   3%|▎         | 32/1000 [04:12<2:07:07,  7.88s/it][Succeeded / Failed / Skipped / Total] 32 / 0 / 0 / 32:   3%|▎         | 33/1000 [04:20<2:07:04,  7.88s/it][Succeeded / Failed / Skipped / Total] 33 / 0 / 0 / 33:   3%|▎         | 33/1000 [04:20<2:07:04,  7.88s/it][Succeeded / Failed / Skipped / Total] 33 / 0 / 0 / 33:   3%|▎         | 34/1000 [04:45<2:15:21,  8.41s/it]Allocate the first non - zero queue . --> Fuegt ein --> Socre: 1.0

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[value]] , boolean [[delayError]] , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , [[value]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[value]] ) ; } } else { q . offer ( [[value]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , [[delayError]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[geraldo]] , boolean [[hildegard]] , Disposable disposable ) { final Observer < ? super V > [[ledge]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[ledge]] , [[geraldo]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[geraldo]] ) ; } } else { q . offer ( [[geraldo]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[ledge]] , [[hildegard]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 26 ---------------------------------------------
Returns the current value . --> signUTUTUTUTUTUT --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[signalling]] ( ) { Object [[на]] = value ; if ( [[на]] != null && ! NotificationLite . isError ( [[на]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 27 ---------------------------------------------
Gets the error . --> dissertation --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object [[o]] = value ; if ( NotificationLite . isError ( [[o]] ) ) { return NotificationLite . getError ( [[o]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[dissertation]] ( ) { Object [[etchings]] = value ; if ( NotificationLite . isError ( [[etchings]] ) ) { return NotificationLite . getError ( [[etchings]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 28 ---------------------------------------------
Add void . --> Add a duller --> Socre: 1.0

[[[[Adv]]]]: public static long addCap ( long a , long [[b]] ) { long u = a + [[b]] ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long addCap ( long a , long [[duller]] ) { long u = a + [[duller]] ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 29 ---------------------------------------------
Waits for an error . --> Obtain an dissertation --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[dissertation]] ( long [[afire]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[afire]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[afire]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 30 ---------------------------------------------
Multiply the long value . --> Multiply alisha to b --> Socre: 1.0

[[[[Adv]]]]: public static long multiplyCap ( long [[a]] , long b ) { long u = [[a]] * b ; if ( ( ( [[a]] | b ) >>> 31 ) != 0 ) { if ( u / [[a]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long [[alisha]] , long b ) { long u = [[alisha]] * b ; if ( ( ( [[alisha]] | b ) >>> 31 ) != 0 ) { if ( u / [[alisha]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 31 ---------------------------------------------
Returns a new long . --> Add a timestamp --> Socre: 1.0

[[[[Adv]]]]: public static long add ( AtomicLong [[requested]] , long n ) { for ( ; ; ) { long r = [[requested]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[requested]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong [[meteoric]] , long n ) { for ( ; ; ) { long r = [[meteoric]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[meteoric]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 32 ---------------------------------------------
Adds an object to the end of the list . --> add an aristotle --> Socre: 1.0

[[[[Adv]]]]: public void add ( Object [[o]] ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void add ( Object [[aristotle]] ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 33 ---------------------------------------------
Shuts down the POOLS . --> add a new POOLS --> Socre: 1.0

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[adder]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 34 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 0 / 0 / 34:   3%|▎         | 34/1000 [04:45<2:15:21,  8.41s/it][Succeeded / Failed / Skipped / Total] 34 / 0 / 0 / 34:   4%|▎         | 35/1000 [04:53<2:15:05,  8.40s/it][Succeeded / Failed / Skipped / Total] 35 / 0 / 0 / 35:   4%|▎         | 35/1000 [04:53<2:15:05,  8.40s/it][Succeeded / Failed / Skipped / Total] 35 / 0 / 0 / 35:   4%|▎         | 36/1000 [05:08<2:17:36,  8.57s/it][Succeeded / Failed / Skipped / Total] 36 / 0 / 0 / 36:   4%|▎         | 36/1000 [05:08<2:17:37,  8.57s/it][Succeeded / Failed / Skipped / Total] 36 / 0 / 0 / 36:   4%|▎         | 37/1000 [05:21<2:19:33,  8.69s/it][Succeeded / Failed / Skipped / Total] 37 / 0 / 0 / 37:   4%|▎         | 37/1000 [05:21<2:19:33,  8.69s/it][Succeeded / Failed / Skipped / Total] 37 / 0 / 0 / 37:   4%|▍         | 38/1000 [05:30<2:19:28,  8.70s/it][Succeeded / Failed / Skipped / Total] 38 / 0 / 0 / 38:   4%|▍         | 38/1000 [05:30<2:19:28,  8.70s/it][Succeeded / Failed / Skipped / Total] 38 / 0 / 0 / 38:   4%|▍         | 39/1000 [06:01<2:28:15,  9.26s/it][Succeeded / Failed / Skipped / Total] 39 / 0 / 0 / 39:   4%|▍         | 39/1000 [06:01<2:28:15,  9.26s/it][Succeeded / Failed / Skipped / Total] 39 / 0 / 0 / 39:   4%|▍         | 40/1000 [06:45<2:42:16, 10.14s/it]Create a NullPointerException . --> Serialize an exception --> Socre: 1.0

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( ex ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException [[palindrome]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[palindrome]] . initCause ( ex ) ; return [[palindrome]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 35 ---------------------------------------------
Sets the subscription . --> Callback from jok --> Socre: 1.0

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[jok]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 36 ---------------------------------------------
Emit the next loop . --> emit a loop --> Socre: 1.0

[[[[Adv]]]]: void emitLoop ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "[[False]]" != "[[False]]" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void emitLoop ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "[[Inhibiting]]" != "[[Inhibiting]]" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 37 ---------------------------------------------
Sets the upstream AtomicReference to the next Subscription . --> Is tantalizing --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[tantalizing]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[Maricón]]" == "[[Maricón]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 38 ---------------------------------------------
Flatten the given exception into a list of exceptions . --> Flatten the given exception --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int [[i]] = exceptions . size ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { deque . offerFirst ( exceptions . get ( [[i]] ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int [[zoolander]] = exceptions . size ( ) - 1 ; [[zoolander]] >= 0 ; [[zoolander]] -- ) { deque . offerFirst ( exceptions . get ( [[zoolander]] ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 39 ---------------------------------------------
Queue complete . --> dadgum --> Socre: 1.0

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[dadgum]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 40 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 40 / 0 / 0 / 40:   4%|▍         | 40/1000 [06:45<2:42:16, 10.14s/it][Succeeded / Failed / Skipped / Total] 40 / 0 / 0 / 40:   4%|▍         | 41/1000 [06:46<2:38:33,  9.92s/it][Succeeded / Failed / Skipped / Total] 41 / 0 / 0 / 41:   4%|▍         | 41/1000 [06:46<2:38:33,  9.92s/it][Succeeded / Failed / Skipped / Total] 41 / 0 / 0 / 41:   4%|▍         | 42/1000 [06:54<2:37:45,  9.88s/it][Succeeded / Failed / Skipped / Total] 42 / 0 / 0 / 42:   4%|▍         | 42/1000 [06:54<2:37:45,  9.88s/it][Succeeded / Failed / Skipped / Total] 42 / 0 / 0 / 42:   4%|▍         | 43/1000 [07:04<2:37:27,  9.87s/it][Succeeded / Failed / Skipped / Total] 43 / 0 / 0 / 43:   4%|▍         | 43/1000 [07:04<2:37:27,  9.87s/it][Succeeded / Failed / Skipped / Total] 43 / 0 / 0 / 43:   4%|▍         | 44/1000 [07:09<2:35:32,  9.76s/it][Succeeded / Failed / Skipped / Total] 44 / 0 / 0 / 44:   4%|▍         | 44/1000 [07:09<2:35:33,  9.76s/it][Succeeded / Failed / Skipped / Total] 44 / 0 / 0 / 44:   4%|▍         | 45/1000 [08:06<2:51:59, 10.81s/it][Succeeded / Failed / Skipped / Total] 45 / 0 / 0 / 45:   4%|▍         | 45/1000 [08:06<2:51:59, 10.81s/it][Succeeded / Failed / Skipped / Total] 45 / 0 / 0 / 45:   5%|▍         | 46/1000 [08:15<2:51:16, 10.77s/it]Checks if the given upstream is valid . --> Does bursitis operation? --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[validate]] ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[bursitis]] ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[Oxidation]]" == "[[Oxidation]]" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 41 ---------------------------------------------
Clears the resources . --> clear out resources --> Socre: 1.0

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[øre]] ; synchronized ( this ) { if ( disposed ) { return ; } [[øre]] = resources ; resources = null ; } dispose ( [[øre]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 42 ---------------------------------------------
Attempts to locate the provided Publisher . --> Caller must be synchronized --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > [[subscriber]] , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return "True" == "True" ; } Publisher < ? extends R > [[r]] ; try { [[r]] = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( [[r]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[r]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return "True" == "True" ; } [[subscriber]] . onSubscribe ( new ScalarSubscription < R > ( [[subscriber]] , u ) ) ; } else { [[r]] . subscribe ( [[subscriber]] ) ; } return "True" == "True" ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[coca]] ( Publisher < T > source , Subscriber < ? super R > [[twitching]] , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[twitching]] ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( [[twitching]] ) ; return "True" == "True" ; } Publisher < ? extends R > [[neglecting]] ; try { [[neglecting]] = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[twitching]] ) ; return "True" == "True" ; } if ( [[neglecting]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[neglecting]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[twitching]] ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( [[twitching]] ) ; return "True" == "True" ; } [[twitching]] . onSubscribe ( new ScalarSubscription < R > ( [[twitching]] , u ) ) ; } else { [[neglecting]] . subscribe ( [[twitching]] ) ; } return "True" == "True" ; } return "[[Shasta]]" != "[[Shasta]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 43 ---------------------------------------------
If the Throwable is a Exception throws an exception . --> Throw an exception if the exception throws an exception --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E [[ahmed]] Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 44 ---------------------------------------------
Create a ScheduledExecutorService . --> Exposed for testing --> Socre: 1.0

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[soho]] ( ThreadFactory [[greenwood]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[greenwood]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 45 ---------------------------------------------
Produces a scalar - map observable for the given value . --> returns maximizing operation --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[maximizing]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 46 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 46 / 0 / 0 / 46:   5%|▍         | 46/1000 [08:15<2:51:16, 10.77s/it][Succeeded / Failed / Skipped / Total] 46 / 0 / 0 / 46:   5%|▍         | 47/1000 [08:19<2:48:56, 10.64s/it][Succeeded / Failed / Skipped / Total] 47 / 0 / 0 / 47:   5%|▍         | 47/1000 [08:19<2:48:56, 10.64s/it][Succeeded / Failed / Skipped / Total] 47 / 0 / 0 / 47:   5%|▍         | 48/1000 [08:24<2:46:47, 10.51s/it][Succeeded / Failed / Skipped / Total] 48 / 0 / 0 / 48:   5%|▍         | 48/1000 [08:24<2:46:48, 10.51s/it][Succeeded / Failed / Skipped / Total] 48 / 0 / 0 / 48:   5%|▍         | 49/1000 [08:27<2:44:07, 10.35s/it][Succeeded / Failed / Skipped / Total] 49 / 0 / 0 / 49:   5%|▍         | 49/1000 [08:27<2:44:07, 10.35s/it][Succeeded / Failed / Skipped / Total] 49 / 0 / 0 / 49:   5%|▌         | 50/1000 [08:32<2:42:11, 10.24s/it][Succeeded / Failed / Skipped / Total] 49 / 1 / 0 / 50:   5%|▌         | 50/1000 [08:32<2:42:12, 10.24s/it][Succeeded / Failed / Skipped / Total] 49 / 1 / 0 / 50:   5%|▌         | 51/1000 [08:35<2:39:57, 10.11s/it][Succeeded / Failed / Skipped / Total] 50 / 1 / 0 / 51:   5%|▌         | 51/1000 [08:35<2:39:57, 10.11s/it][Succeeded / Failed / Skipped / Total] 50 / 1 / 0 / 51:   5%|▌         | 52/1000 [08:49<2:40:54, 10.18s/it][Succeeded / Failed / Skipped / Total] 51 / 1 / 0 / 52:   5%|▌         | 52/1000 [08:49<2:40:54, 10.18s/it][Succeeded / Failed / Skipped / Total] 51 / 1 / 0 / 52:   5%|▌         | 53/1000 [08:56<2:39:39, 10.12s/it][Succeeded / Failed / Skipped / Total] 52 / 1 / 0 / 53:   5%|▌         | 53/1000 [08:56<2:39:39, 10.12s/it][Succeeded / Failed / Skipped / Total] 52 / 1 / 0 / 53:   5%|▌         | 54/1000 [09:00<2:37:47, 10.01s/it]Start the queue . --> If there are no more than one other is performed --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[elmira]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 47 ---------------------------------------------
Returns the number of resources . --> Refining implementation --> Socre: 1.0

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[refining]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[guff]] = resources ; return [[guff]] != null ? [[guff]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Start unbounded queue . --> dutch --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[dutch]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 49 ---------------------------------------------
Inserts the given element into the queue . --> Offers a thomson --> Socre: 1.0

[[[[Adv]]]]: public boolean offer ( T [[t]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean offer ( T [[thomson]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[thomson]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[thomson]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 50 ---------------------------------------------
Wrap an Exception . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[supervising]] ( Throwable [[chronicler]] ) { if ( [[chronicler]] instanceof Error ) { throw ( Error ) [[chronicler]] ; } if ( [[chronicler]] instanceof RuntimeException ) { return ( RuntimeException ) [[chronicler]] ; } return new RuntimeException ( [[chronicler]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 51 ---------------------------------------------
Checks if the next AtomicReference is applied . --> Implemented for testing --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[False]]" != "[[False]]" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[brothers]] ( AtomicReference < Disposable > upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[Hart]]" != "[[Hart]]" ; } return "[[Gaurav]]" == "[[Gaurav]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 52 ---------------------------------------------
Returns the disposed for this resource . --> Get Disposablein --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable [[teachin]] = resource . get ( ) ; if ( [[teachin]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[teachin]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 53 ---------------------------------------------
Completes the state . --> Completes this FUSED --> Socre: 1.0

[[[[Adv]]]]: public final void complete ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void complete ( ) { int [[polack]] = get ( ) ; if ( ( [[polack]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 54 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 53 / 1 / 0 / 54:   5%|▌         | 54/1000 [09:00<2:37:47, 10.01s/it][Succeeded / Failed / Skipped / Total] 53 / 1 / 0 / 54:   6%|▌         | 55/1000 [09:08<2:37:03,  9.97s/it][Succeeded / Failed / Skipped / Total] 54 / 1 / 0 / 55:   6%|▌         | 55/1000 [09:08<2:37:03,  9.97s/it][Succeeded / Failed / Skipped / Total] 54 / 1 / 0 / 55:   6%|▌         | 56/1000 [09:50<2:45:50, 10.54s/it][Succeeded / Failed / Skipped / Total] 55 / 1 / 0 / 56:   6%|▌         | 56/1000 [09:50<2:45:50, 10.54s/it][Succeeded / Failed / Skipped / Total] 55 / 1 / 0 / 56:   6%|▌         | 57/1000 [09:53<2:43:43, 10.42s/it][Succeeded / Failed / Skipped / Total] 56 / 1 / 0 / 57:   6%|▌         | 57/1000 [09:53<2:43:43, 10.42s/it][Succeeded / Failed / Skipped / Total] 56 / 1 / 0 / 57:   6%|▌         | 58/1000 [09:57<2:41:39, 10.30s/it][Succeeded / Failed / Skipped / Total] 57 / 1 / 0 / 58:   6%|▌         | 58/1000 [09:57<2:41:39, 10.30s/it][Succeeded / Failed / Skipped / Total] 57 / 1 / 0 / 58:   6%|▌         | 59/1000 [09:57<2:38:56, 10.13s/it][Succeeded / Failed / Skipped / Total] 58 / 1 / 0 / 59:   6%|▌         | 59/1000 [09:57<2:38:56, 10.13s/it][Succeeded / Failed / Skipped / Total] 58 / 1 / 0 / 59:   6%|▌         | 60/1000 [10:04<2:37:47, 10.07s/it]Complete the downstream state . --> called from FUSED --> Socre: 1.0

[[[[Adv]]]]: public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . [[value]] = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . [[forom]] = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 55 ---------------------------------------------
Concatenates using the provided mapper . --> Concatenates using blindly --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return concatMapIterable ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > [[blindly]] ) { return concatMapIterable ( [[blindly]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 56 ---------------------------------------------
Accepts an observer . --> Methode permettant d obten --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[observer]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object [[o]] = a [ i ] ; if ( [[o]] == null ) { break ; } if ( NotificationLite . acceptFull ( [[o]] , [[observer]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[on]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object [[teoman]] = a [ i ] ; if ( [[teoman]] == null ) { break ; } if ( NotificationLite . acceptFull ( [[teoman]] , [[on]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 57 ---------------------------------------------
Accepts a subscriber . --> Accept all messages --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int [[i]] = 0 ; [[i]] < c ; [[i]] ++ ) { Object o = a [ [[i]] ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "[[True]]" == "[[True]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int [[daito]] = 0 ; [[daito]] < c ; [[daito]] ++ ) { Object o = a [ [[daito]] ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "[[Øre]]" == "[[Øre]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 58 ---------------------------------------------
Logs an error . --> FUSED_READY | FUSED_CONSUMED | DISPOSED --> Socre: 1.0

[[[[Adv]]]]: public final void error ( Throwable [[t]] ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[t]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[t]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void error ( Throwable [[authorized]] ) { int [[inhumane]] = get ( ) ; if ( ( [[inhumane]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[authorized]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[authorized]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 59 ---------------------------------------------
Concatenates using the provided Publisher --> Get an Nostra constraint --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return concatMapDelayError ( [[mapper]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > [[nostra]] ) { return concatMapDelayError ( [[nostra]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 60 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 59 / 1 / 0 / 60:   6%|▌         | 60/1000 [10:04<2:37:47, 10.07s/it][Succeeded / Failed / Skipped / Total] 59 / 1 / 0 / 60:   6%|▌         | 61/1000 [10:07<2:35:49,  9.96s/it][Succeeded / Failed / Skipped / Total] 60 / 1 / 0 / 61:   6%|▌         | 61/1000 [10:07<2:35:49,  9.96s/it][Succeeded / Failed / Skipped / Total] 60 / 1 / 0 / 61:   6%|▌         | 62/1000 [10:07<2:33:10,  9.80s/it][Succeeded / Failed / Skipped / Total] 61 / 1 / 0 / 62:   6%|▌         | 62/1000 [10:07<2:33:10,  9.80s/it][Succeeded / Failed / Skipped / Total] 61 / 1 / 0 / 62:   6%|▋         | 63/1000 [10:24<2:34:48,  9.91s/it][Succeeded / Failed / Skipped / Total] 62 / 1 / 0 / 63:   6%|▋         | 63/1000 [10:24<2:34:48,  9.91s/it][Succeeded / Failed / Skipped / Total] 62 / 1 / 0 / 63:   6%|▋         | 64/1000 [11:01<2:41:13, 10.33s/it][Succeeded / Failed / Skipped / Total] 63 / 1 / 0 / 64:   6%|▋         | 64/1000 [11:01<2:41:13, 10.33s/it][Succeeded / Failed / Skipped / Total] 63 / 1 / 0 / 64:   6%|▋         | 65/1000 [11:10<2:40:50, 10.32s/it][Succeeded / Failed / Skipped / Total] 64 / 1 / 0 / 65:   6%|▋         | 65/1000 [11:10<2:40:51, 10.32s/it][Succeeded / Failed / Skipped / Total] 64 / 1 / 0 / 65:   7%|▋         | 66/1000 [11:11<2:38:27, 10.18s/it][Succeeded / Failed / Skipped / Total] 65 / 1 / 0 / 66:   7%|▋         | 66/1000 [11:11<2:38:27, 10.18s/it][Succeeded / Failed / Skipped / Total] 65 / 1 / 0 / 66:   7%|▋         | 67/1000 [11:12<2:36:00, 10.03s/it]Removes from the subscribers . --> from interface PublishDisposable --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int [[i]] = 0 ; [[i]] < n ; [[i]] ++ ) { if ( a [ [[i]] ] == ps ) { j = [[i]] ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int [[ding]] = 0 ; [[ding]] < n ; [[ding]] ++ ) { if ( a [ [[ding]] ] == ps ) { j = [[ding]] ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 61 ---------------------------------------------
Create a flowable on a scheduler --> Creates a flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > [[cf]] , final Scheduler scheduler ) { final Flowable < T > flowable = [[cf]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( [[cf]] , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > [[filibuster]] , final Scheduler scheduler ) { final Flowable < T > flowable = [[filibuster]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( [[filibuster]] , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 62 ---------------------------------------------
Send a request . --> Request for n --> Socre: 1.0

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[s]] = this . upstream ; if ( [[s]] != null ) { [[s]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[ens]] = this . upstream ; if ( [[ens]] != null ) { [[ens]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 63 ---------------------------------------------
Waits for a consumer to complete . --> Block until nabbed is complete --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[nabbed]] ) { if ( [[nabbed]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 64 ---------------------------------------------
Adds an PublishDisposable to the subscribers . --> F743 - k --> Socre: 1.0

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED ) { return "False" != "False" ; } int n = [[a]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( [[a]] , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( [[a]] , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[pluribus]] = subscribers . get ( ) ; if ( [[pluribus]] == TERMINATED ) { return "False" != "False" ; } int n = [[pluribus]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( [[pluribus]] , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( [[pluribus]] , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 65 ---------------------------------------------
Create the sample data . --> Create theSample data --> Socre: 1.0

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[auth]] = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[cabbages]] = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 66 ---------------------------------------------
Calculate the total amount of time in milliseconds . --> Calculate time stamp --> Socre: 1.0

[[[[Adv]]]]: public long calculateDelay ( TimeUnit [[unit]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long calculateDelay ( TimeUnit [[velazquez]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 67 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 66 / 1 / 0 / 67:   7%|▋         | 67/1000 [11:12<2:36:00, 10.03s/it][Succeeded / Failed / Skipped / Total] 66 / 1 / 0 / 67:   7%|▋         | 68/1000 [11:18<2:35:04,  9.98s/it][Succeeded / Failed / Skipped / Total] 67 / 1 / 0 / 68:   7%|▋         | 68/1000 [11:18<2:35:04,  9.98s/it][Succeeded / Failed / Skipped / Total] 67 / 1 / 0 / 68:   7%|▋         | 69/1000 [11:30<2:35:13, 10.00s/it][Succeeded / Failed / Skipped / Total] 68 / 1 / 0 / 69:   7%|▋         | 69/1000 [11:30<2:35:13, 10.00s/it][Succeeded / Failed / Skipped / Total] 68 / 1 / 0 / 69:   7%|▋         | 70/1000 [11:39<2:34:47,  9.99s/it][Succeeded / Failed / Skipped / Total] 68 / 2 / 0 / 70:   7%|▋         | 70/1000 [11:39<2:34:47,  9.99s/it][Succeeded / Failed / Skipped / Total] 68 / 2 / 0 / 70:   7%|▋         | 71/1000 [11:44<2:33:35,  9.92s/it][Succeeded / Failed / Skipped / Total] 69 / 2 / 0 / 71:   7%|▋         | 71/1000 [11:44<2:33:35,  9.92s/it][Succeeded / Failed / Skipped / Total] 69 / 2 / 0 / 71:   7%|▋         | 72/1000 [11:49<2:32:29,  9.86s/it]Returns a sorted view of the given sort function . --> Create anselves --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[theirselves]] ( Comparator < ? super T > [[spandex]] ) { ObjectHelper . requireNonNull ( [[spandex]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[spandex]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 68 ---------------------------------------------
Encodes the raw password . --> Generates base base - c --> Socre: 1.0

[[[[Adv]]]]: public String encode ( CharSequence rawPassword ) { String [[salt]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String encode ( CharSequence rawPassword ) { String [[bolen]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[bolen]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 69 ---------------------------------------------
Search the user with the specified username . --> Search for a context . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[tribulations]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[tribulations]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[tribulations]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[tribulations]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 70 ---------------------------------------------
Drains the provided shares shares the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 71 ---------------------------------------------
Parse the annotations . --> Returns response type --> Socre: 1.0

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean [[continuationWantsResponse]] = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] [[annotations]] = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean [[burmese]] = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] [[sinew]] = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 72 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 70 / 2 / 0 / 72:   7%|▋         | 72/1000 [11:49<2:32:29,  9.86s/it][Succeeded / Failed / Skipped / Total] 70 / 2 / 0 / 72:   7%|▋         | 73/1000 [12:05<2:33:34,  9.94s/it][Succeeded / Failed / Skipped / Total] 71 / 2 / 0 / 73:   7%|▋         | 73/1000 [12:05<2:33:34,  9.94s/it][Succeeded / Failed / Skipped / Total] 71 / 2 / 0 / 73:   7%|▋         | 74/1000 [12:18<2:34:06,  9.99s/it][Succeeded / Failed / Skipped / Total] 72 / 2 / 0 / 74:   7%|▋         | 74/1000 [12:18<2:34:06,  9.99s/it][Succeeded / Failed / Skipped / Total] 72 / 2 / 0 / 74:   8%|▊         | 75/1000 [12:30<2:34:10, 10.00s/it][Succeeded / Failed / Skipped / Total] 73 / 2 / 0 / 75:   8%|▊         | 75/1000 [12:30<2:34:10, 10.00s/it][Succeeded / Failed / Skipped / Total] 73 / 2 / 0 / 75:   8%|▊         | 76/1000 [12:38<2:33:37,  9.98s/it][Succeeded / Failed / Skipped / Total] 74 / 2 / 0 / 76:   8%|▊         | 76/1000 [12:38<2:33:37,  9.98s/it][Succeeded / Failed / Skipped / Total] 74 / 2 / 0 / 76:   8%|▊         | 77/1000 [12:48<2:33:28,  9.98s/it][Succeeded / Failed / Skipped / Total] 75 / 2 / 0 / 77:   8%|▊         | 77/1000 [12:48<2:33:28,  9.98s/it][Succeeded / Failed / Skipped / Total] 75 / 2 / 0 / 77:   8%|▊         | 78/1000 [12:53<2:32:19,  9.91s/it][Succeeded / Failed / Skipped / Total] 76 / 2 / 0 / 78:   8%|▊         | 78/1000 [12:53<2:32:19,  9.91s/it][Succeeded / Failed / Skipped / Total] 76 / 2 / 0 / 78:   8%|▊         | 79/1000 [12:59<2:31:32,  9.87s/it]Performs a version checks . --> Set thelaikum property . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[alaikum]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 73 ---------------------------------------------
Encloses the given version . --> Set springSecurity version --> Socre: 1.0

[[[[Adv]]]]: private static boolean disableChecks ( String [[springVersion]] , String springSecurityVersion ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String [[fearlessness]] , String springSecurityVersion ) { if ( [[fearlessness]] == null || [[fearlessness]] . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 74 ---------------------------------------------
OAuth 2 . --> Default OAuth2 clientConfigurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[puckett]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[puckett]] ) ; return [[puckett]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 75 ---------------------------------------------
Returns the HttpMethod object --> Getter for given prologue --> Socre: 1.0

[[[[Adv]]]]: private static HttpMethod valueOf ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod valueOf ( String [[prologue]] ) { try { return HttpMethod . valueOf ( [[prologue]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 76 ---------------------------------------------
Default configurationurer . --> Default configurationurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[gianluigi]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 77 ---------------------------------------------
Set AttributeExchangeConfigurer . --> Method to get AttributeExchangeConfigurer --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[identifierPattern]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[britt]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[britt]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 78 ---------------------------------------------
Returns the error response . --> get successful response --> Socre: 1.0

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > [[call]] ; try { [[call]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[call]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[call]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[call]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[quitter]] ( ) { Response < ? > [[mulle]] ; try { [[mulle]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[mulle]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[mulle]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[mulle]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 79 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 77 / 2 / 0 / 79:   8%|▊         | 79/1000 [12:59<2:31:32,  9.87s/it][Succeeded / Failed / Skipped / Total] 77 / 2 / 0 / 79:   8%|▊         | 80/1000 [13:19<2:33:15, 10.00s/it][Succeeded / Failed / Skipped / Total] 78 / 2 / 0 / 80:   8%|▊         | 80/1000 [13:19<2:33:15, 10.00s/it][Succeeded / Failed / Skipped / Total] 78 / 2 / 0 / 80:   8%|▊         | 81/1000 [13:27<2:32:36,  9.96s/it][Succeeded / Failed / Skipped / Total] 79 / 2 / 0 / 81:   8%|▊         | 81/1000 [13:27<2:32:36,  9.96s/it][Succeeded / Failed / Skipped / Total] 79 / 2 / 1 / 82:   8%|▊         | 82/1000 [13:27<2:30:36,  9.84s/it][Succeeded / Failed / Skipped / Total] 79 / 2 / 1 / 82:   8%|▊         | 83/1000 [13:30<2:29:09,  9.76s/it][Succeeded / Failed / Skipped / Total] 80 / 2 / 1 / 83:   8%|▊         | 83/1000 [13:30<2:29:09,  9.76s/it]Compares specified parameters . --> Compares dn and Object --> Socre: 1.0

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object value ) { final String [[comparisonFilter]] = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , [[comparisonFilter]] , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object value ) { final String [[roca]] = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , [[roca]] , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 80 ---------------------------------------------
Gets the Spring core version . --> Returns a valid SpringSecurity --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties [[properties]] = new Properties ( ) ; try { [[properties]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[properties]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[freakiest]] ( ) { Properties [[kurd]] = new Properties ( ) ; try { [[kurd]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[kurd]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 81 ---------------------------------------------
Retrieve an entry from an LDAP server . --> Retrieve a single attribute --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[attrs]] = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[overjoyed]] = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 82 ---------------------------------------------
Build a searchControls --> [[[SKIPPED]]]

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 83 ---------------------------------------------
Returns the DirContext operations for the given entry . --> Searches for the first entry under DN --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult [[searchResult]] = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) [[searchResult]] . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult [[bullitt]] = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) [[bullitt]] . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
[Succeeded / Failed / Skipped / Total] 81 / 2 / 1 / 84:   8%|▊         | 84/1000 [14:36<2:39:15, 10.43s/it][Succeeded / Failed / Skipped / Total] 81 / 2 / 1 / 84:   8%|▊         | 85/1000 [14:55<2:40:44, 10.54s/it][Succeeded / Failed / Skipped / Total] 82 / 2 / 1 / 85:   8%|▊         | 85/1000 [14:55<2:40:44, 10.54s/it][Succeeded / Failed / Skipped / Total] 82 / 2 / 1 / 85:   9%|▊         | 86/1000 [15:14<2:41:57, 10.63s/it][Succeeded / Failed / Skipped / Total] 83 / 2 / 1 / 86:   9%|▊         | 86/1000 [15:14<2:41:57, 10.63s/it][Succeeded / Failed / Skipped / Total] 83 / 2 / 1 / 86:   9%|▊         | 87/1000 [15:22<2:41:20, 10.60s/it][Succeeded / Failed / Skipped / Total] 84 / 2 / 1 / 87:   9%|▊         | 87/1000 [15:22<2:41:20, 10.60s/it][Succeeded / Failed / Skipped / Total] 84 / 2 / 1 / 87:   9%|▉         | 88/1000 [15:25<2:39:51, 10.52s/it]--------------------------------------------- Result 84 ---------------------------------------------
Set the delay amount . --> called from discernment --> Socre: 1.0

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit [[unit]] ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[delayMs]] = [[unit]] . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[blushes]] ( long [[foran]] , TimeUnit [[discernment]] ) { if ( [[foran]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[accordionist]] = [[discernment]] . toMillis ( [[foran]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 85 ---------------------------------------------
Create an embedded server . --> Create bean definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object [[source]] = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( [[source]] ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object [[drazen]] = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( [[drazen]] ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 86 ---------------------------------------------
Create servlet api filter . --> Generate pidous . --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[barbarous]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 87 ---------------------------------------------
Creates the Jaas API filter . --> Create an instance of JaasApiFilter --> Socre: 1.0

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String [[provideJaasApi]] = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[provideJaasApi]] ) ) { [[provideJaasApi]] = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( [[provideJaasApi]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String [[flyboys]] = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[flyboys]] ) ) { [[flyboys]] = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( [[flyboys]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 88 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 85 / 2 / 1 / 88:   9%|▉         | 88/1000 [15:25<2:39:51, 10.52s/it][Succeeded / Failed / Skipped / Total] 85 / 2 / 1 / 88:   9%|▉         | 89/1000 [15:38<2:40:04, 10.54s/it][Succeeded / Failed / Skipped / Total] 86 / 2 / 1 / 89:   9%|▉         | 89/1000 [15:38<2:40:04, 10.54s/it][Succeeded / Failed / Skipped / Total] 86 / 2 / 1 / 89:   9%|▉         | 90/1000 [15:40<2:38:24, 10.44s/it][Succeeded / Failed / Skipped / Total] 87 / 2 / 1 / 90:   9%|▉         | 90/1000 [15:40<2:38:24, 10.44s/it][Succeeded / Failed / Skipped / Total] 87 / 2 / 1 / 90:   9%|▉         | 91/1000 [15:50<2:38:15, 10.45s/it][Succeeded / Failed / Skipped / Total] 88 / 2 / 1 / 91:   9%|▉         | 91/1000 [15:50<2:38:15, 10.45s/it][Succeeded / Failed / Skipped / Total] 88 / 2 / 1 / 91:   9%|▉         | 92/1000 [16:06<2:38:58, 10.50s/it][Succeeded / Failed / Skipped / Total] 89 / 2 / 1 / 92:   9%|▉         | 92/1000 [16:06<2:38:58, 10.50s/it][Succeeded / Failed / Skipped / Total] 89 / 2 / 1 / 92:   9%|▉         | 93/1000 [16:37<2:42:08, 10.73s/it][Succeeded / Failed / Skipped / Total] 90 / 2 / 1 / 93:   9%|▉         | 93/1000 [16:37<2:42:08, 10.73s/it][Succeeded / Failed / Skipped / Total] 90 / 2 / 1 / 93:   9%|▉         | 94/1000 [16:40<2:40:40, 10.64s/it]Returns a new ChannelSecurity object . --> Returns an empty ChannelSecurityConfigurer --> Socre: 1.0

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[rosaries]] ( ) throws Exception { ApplicationContext [[harlots]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[harlots]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 89 ---------------------------------------------
Registers a Spring Security context . --> A utility method to register a filter --> Socre: 1.0

[[[[Adv]]]]: private void [[insertSpringSecurityFilterChain]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void [[banta]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 90 ---------------------------------------------
Create the default type resolver . --> Returns the resolver --> Socre: 1.0

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[grateful]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 91 ---------------------------------------------
Get the authorities associated with the specified attributes . --> Get all OGNL roles --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attributes]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String attribute : [[attributes]] ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[personalized]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[personalized]] . size ( ) ) ; for ( String attribute : [[personalized]] ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 92 ---------------------------------------------
Returns token for a series id --> get PersistentRememberMeToken getTokenForSeries --> Socre: 1.0

[[[[Adv]]]]: public PersistentRememberMeToken getTokenForSeries ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[rs]] , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( [[rs]] . getString ( 1 ) , [[rs]] . getString ( 2 ) , [[rs]] . getString ( 3 ) , [[rs]] . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken getTokenForSeries ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[lhe]] , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( [[lhe]] . getString ( 1 ) , [[lhe]] . getString ( 2 ) , [[lhe]] . getString ( 3 ) , [[lhe]] . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 93 ---------------------------------------------
Checks if any of the properties are present . --> Overrides super class method afterPropertiesSet --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[garrity]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 94 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 91 / 2 / 1 / 94:   9%|▉         | 94/1000 [16:40<2:40:40, 10.64s/it][Succeeded / Failed / Skipped / Total] 91 / 2 / 1 / 94:  10%|▉         | 95/1000 [16:56<2:41:23, 10.70s/it][Succeeded / Failed / Skipped / Total] 92 / 2 / 1 / 95:  10%|▉         | 95/1000 [16:56<2:41:23, 10.70s/it][Succeeded / Failed / Skipped / Total] 92 / 2 / 1 / 95:  10%|▉         | 96/1000 [17:20<2:43:18, 10.84s/it][Succeeded / Failed / Skipped / Total] 93 / 2 / 1 / 96:  10%|▉         | 96/1000 [17:20<2:43:18, 10.84s/it][Succeeded / Failed / Skipped / Total] 93 / 2 / 1 / 96:  10%|▉         | 97/1000 [17:45<2:45:22, 10.99s/it][Succeeded / Failed / Skipped / Total] 94 / 2 / 1 / 97:  10%|▉         | 97/1000 [17:45<2:45:22, 10.99s/it][Succeeded / Failed / Skipped / Total] 94 / 2 / 1 / 97:  10%|▉         | 98/1000 [18:24<2:49:22, 11.27s/it][Succeeded / Failed / Skipped / Total] 95 / 2 / 1 / 98:  10%|▉         | 98/1000 [18:24<2:49:22, 11.27s/it][Succeeded / Failed / Skipped / Total] 95 / 2 / 1 / 98:  10%|▉         | 99/1000 [18:43<2:50:26, 11.35s/it][Succeeded / Failed / Skipped / Total] 95 / 3 / 1 / 99:  10%|▉         | 99/1000 [18:43<2:50:26, 11.35s/it][Succeeded / Failed / Skipped / Total] 95 / 3 / 1 / 99:  10%|█         | 100/1000 [19:09<2:52:28, 11.50s/it]Checks if the encoded password matches the given password . --> Returns true if fixture matches raw string --> Socre: 1.0

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String [[encodedPassword]] ) { String [[salt]] = extractSalt ( [[encodedPassword]] ) ; String [[rawPasswordEncoded]] = digest ( [[salt]] , rawPassword ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , [[rawPasswordEncoded]] ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String [[fixture]] ) { String [[ruby]] = extractSalt ( [[fixture]] ) ; String [[highs]] = digest ( [[ruby]] , rawPassword ) ; return PasswordEncoderUtils . equals ( [[fixture]] . toString ( ) , [[highs]] ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 95 ---------------------------------------------
Check if the principal has changed . --> Does principalChanged? --> Socre: 1.0

[[[[Adv]]]]: protected boolean principalChanged ( HttpServletRequest request , Authentication currentAuthentication ) { Object [[principal]] = getPreAuthenticatedPrincipal ( request ) ; if ( ( [[principal]] instanceof String ) && currentAuthentication . getName ( ) . equals ( [[principal]] ) ) { return "False" != "False" ; } if ( [[principal]] != null && [[principal]] . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[principal]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean principalChanged ( HttpServletRequest request , Authentication currentAuthentication ) { Object [[bozo]] = getPreAuthenticatedPrincipal ( request ) ; if ( ( [[bozo]] instanceof String ) && currentAuthentication . getName ( ) . equals ( [[bozo]] ) ) { return "False" != "False" ; } if ( [[bozo]] != null && [[bozo]] . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[bozo]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 96 ---------------------------------------------
Create a new instance of Cipher . --> Returns the given diarrhea --> Socre: 1.0

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[followers]] ( String [[diarrhea]] ) { try { return Cipher . getInstance ( [[diarrhea]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 97 ---------------------------------------------
Check content length . --> Check content length --> Socre: 1.0

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . [[contentLength]] > 0 && this . contentWritten >= this . [[contentLength]] ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . [[diplomatically]] > 0 && this . contentWritten >= this . [[diplomatically]] ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 98 ---------------------------------------------
Handles a filter . --> danCPU --> Socre: 1.0

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest request , ServletResponse [[response]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) [[response]] ) ; } chain . doFilter ( request , [[response]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[danica]] ( ServletRequest request , ServletResponse [[ong]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) [[ong]] ) ; } chain . doFilter ( request , [[ong]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 99 ---------------------------------------------
Search for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > searchForMultipleAttributeValues ( final String [[base]] , final String filter , final Object [ ] params , final String [ ] [[attributeNames]] ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > searchForMultipleAttributeValues ( final String [[disable]] , final String filter , final Object [ ] params , final String [ ] [[elster]] ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 100 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 96 / 3 / 1 / 100:  10%|█         | 100/1000 [19:09<2:52:28, 11.50s/it][Succeeded / Failed / Skipped / Total] 96 / 3 / 1 / 100:  10%|█         | 101/1000 [19:09<2:50:35, 11.39s/it][Succeeded / Failed / Skipped / Total] 97 / 3 / 1 / 101:  10%|█         | 101/1000 [19:09<2:50:35, 11.39s/it][Succeeded / Failed / Skipped / Total] 97 / 3 / 1 / 101:  10%|█         | 102/1000 [19:36<2:52:38, 11.53s/it][Succeeded / Failed / Skipped / Total] 98 / 3 / 1 / 102:  10%|█         | 102/1000 [19:36<2:52:38, 11.53s/it][Succeeded / Failed / Skipped / Total] 98 / 3 / 1 / 102:  10%|█         | 103/1000 [19:51<2:52:54, 11.57s/it][Succeeded / Failed / Skipped / Total] 98 / 4 / 1 / 103:  10%|█         | 103/1000 [19:51<2:52:54, 11.57s/it][Succeeded / Failed / Skipped / Total] 98 / 4 / 1 / 103:  10%|█         | 104/1000 [19:58<2:52:04, 11.52s/it][Succeeded / Failed / Skipped / Total] 99 / 4 / 1 / 104:  10%|█         | 104/1000 [19:58<2:52:04, 11.52s/it][Succeeded / Failed / Skipped / Total] 99 / 4 / 1 / 104:  10%|█         | 105/1000 [20:03<2:50:56, 11.46s/it]Updates the authentication defaults . --> zoltan mode --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[zoltan]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 101 ---------------------------------------------
Sets the login processing url . --> Login using loginProcessingUrl --> Socre: 1.0

[[[[Adv]]]]: public T loginProcessingUrl ( String [[loginProcessingUrl]] ) { this . loginProcessingUrl = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T loginProcessingUrl ( String [[torso]] ) { this . loginProcessingUrl = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 102 ---------------------------------------------
Map password . --> Generates a Scriptudas expression --> Socre: 1.0

[[[[Adv]]]]: protected String [[mapPassword]] ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[barracudas]] ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 103 ---------------------------------------------
Try to decide whether the source is a scalar X . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[True]]" == "[[True]]" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "[[True]]" == "[[True]]" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[True]]" == "[[True]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[True]]" == "[[True]]" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "[[True]]" == "[[True]]" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "[[True]]" == "[[True]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[Markup]]" == "[[Markup]]" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "[[Markup]]" == "[[Markup]]" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[Markup]]" == "[[Markup]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[Markup]]" == "[[Markup]]" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "[[Markup]]" == "[[Markup]]" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "[[Markup]]" == "[[Markup]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 104 ---------------------------------------------
Encode cookie string . --> Encode a cookie --> Socre: 1.0

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder [[sb]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[sb]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[sb]] . append ( DELIMITER ) ; } } String value = [[sb]] . toString ( ) ; [[sb]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[sb]] . charAt ( [[sb]] . length ( ) - 1 ) == ' ' ) { [[sb]] . deleteCharAt ( [[sb]] . length ( ) - 1 ) ; } return [[sb]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder [[forego]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[forego]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[forego]] . append ( DELIMITER ) ; } } String value = [[forego]] . toString ( ) ; [[forego]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[forego]] . charAt ( [[forego]] . length ( ) - 1 ) == ' ' ) { [[forego]] . deleteCharAt ( [[forego]] . length ( ) - 1 ) ; } return [[forego]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 105 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 4 / 1 / 105:  10%|█         | 105/1000 [20:03<2:50:56, 11.46s/it][Succeeded / Failed / Skipped / Total] 100 / 4 / 1 / 105:  11%|█         | 106/1000 [20:21<2:51:43, 11.53s/it][Succeeded / Failed / Skipped / Total] 100 / 5 / 1 / 106:  11%|█         | 106/1000 [20:21<2:51:43, 11.53s/it][Succeeded / Failed / Skipped / Total] 100 / 5 / 1 / 106:  11%|█         | 107/1000 [20:26<2:50:34, 11.46s/it][Succeeded / Failed / Skipped / Total] 101 / 5 / 1 / 107:  11%|█         | 107/1000 [20:26<2:50:34, 11.46s/it][Succeeded / Failed / Skipped / Total] 101 / 5 / 1 / 107:  11%|█         | 108/1000 [20:41<2:50:54, 11.50s/it][Succeeded / Failed / Skipped / Total] 101 / 6 / 1 / 108:  11%|█         | 108/1000 [20:41<2:50:54, 11.50s/it][Succeeded / Failed / Skipped / Total] 101 / 6 / 1 / 108:  11%|█         | 109/1000 [21:08<2:52:48, 11.64s/it][Succeeded / Failed / Skipped / Total] 102 / 6 / 1 / 109:  11%|█         | 109/1000 [21:08<2:52:48, 11.64s/it][Succeeded / Failed / Skipped / Total] 102 / 6 / 1 / 109:  11%|█         | 110/1000 [21:34<2:54:34, 11.77s/it]Helper method to lookup primary keys . --> lookup primaryKeys --> Socre: 1.0

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > [[findNow]] , final List < Sid > [[sids]] ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[findNow]] , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[findNow]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[findNow]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , [[sids]] ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > [[obstacles]] , final List < Sid > [[curmudgeon]] ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[obstacles]] , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[obstacles]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[obstacles]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , [[curmudgeon]] ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 106 ---------------------------------------------
Search for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String base , final String [[filter]] , final Object [ ] params , final String [[attributeName]] ) { String [ ] attributeNames = new String [ ] { [[attributeName]] } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , [[filter]] , params , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( [[attributeName]] ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String base , final String [[cristi]] , final Object [ ] params , final String [[raspberry]] ) { String [ ] attributeNames = new String [ ] { [[raspberry]] } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , [[cristi]] , params , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( [[raspberry]] ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 107 ---------------------------------------------
Sets the cookie . --> tatar --> Socre: 1.0

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[tatar]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 108 ---------------------------------------------
Builds the authentication details . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[userGas]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[oii]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[quorum]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[quorum]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[quorum]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 109 ---------------------------------------------
Update access defaults . --> Method hamburg --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[hamburg]] ( B [[nazo]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[nazo]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 110 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 103 / 6 / 1 / 110:  11%|█         | 110/1000 [21:34<2:54:34, 11.77s/it][Succeeded / Failed / Skipped / Total] 103 / 6 / 1 / 110:  11%|█         | 111/1000 [21:41<2:53:45, 11.73s/it][Succeeded / Failed / Skipped / Total] 104 / 6 / 1 / 111:  11%|█         | 111/1000 [21:41<2:53:45, 11.73s/it][Succeeded / Failed / Skipped / Total] 104 / 6 / 1 / 111:  11%|█         | 112/1000 [21:54<2:53:43, 11.74s/it][Succeeded / Failed / Skipped / Total] 104 / 7 / 1 / 112:  11%|█         | 112/1000 [21:54<2:53:43, 11.74s/it][Succeeded / Failed / Skipped / Total] 104 / 7 / 1 / 112:  11%|█▏        | 113/1000 [22:18<2:55:09, 11.85s/it][Succeeded / Failed / Skipped / Total] 105 / 7 / 1 / 113:  11%|█▏        | 113/1000 [22:18<2:55:09, 11.85s/it][Succeeded / Failed / Skipped / Total] 105 / 7 / 1 / 113:  11%|█▏        | 114/1000 [22:46<2:57:03, 11.99s/it][Succeeded / Failed / Skipped / Total] 106 / 7 / 1 / 114:  11%|█▏        | 114/1000 [22:46<2:57:03, 11.99s/it][Succeeded / Failed / Skipped / Total] 106 / 7 / 1 / 114:  12%|█▏        | 115/1000 [22:54<2:56:18, 11.95s/it][Succeeded / Failed / Skipped / Total] 107 / 7 / 1 / 115:  12%|█▏        | 115/1000 [22:54<2:56:18, 11.95s/it][Succeeded / Failed / Skipped / Total] 107 / 7 / 1 / 115:  12%|█▏        | 116/1000 [23:01<2:55:24, 11.91s/it]Map authorities . --> map all filings --> Socre: 1.0

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[authorities]] ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( [[authorities]] . size ( ) ) ; for ( GrantedAuthority [[authority]] : [[authorities]] ) { [[mapped]] . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[filings]] ) { HashSet < GrantedAuthority > [[communion]] = new HashSet <> ( [[filings]] . size ( ) ) ; for ( GrantedAuthority [[foothold]] : [[filings]] ) { [[communion]] . add ( mapAuthority ( [[foothold]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[communion]] . add ( defaultAuthority ) ; } return [[communion]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 111 ---------------------------------------------
Handle the authentication . --> Authenticate . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[request]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[available]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 112 ---------------------------------------------
Handles authentication authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 113 ---------------------------------------------
Discard the current session . --> Gesundheit method --> Socre: 1.0

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[gesundheit]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 114 ---------------------------------------------
Get the full URL for the server . --> Returns a rainforest --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[rainforest]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 115 ---------------------------------------------
Render the tag . --> Calculates thelaid --> Socre: 1.0

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[mislaid]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 116 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 108 / 7 / 1 / 116:  12%|█▏        | 116/1000 [23:01<2:55:24, 11.91s/it][Succeeded / Failed / Skipped / Total] 108 / 7 / 1 / 116:  12%|█▏        | 117/1000 [23:01<2:53:46, 11.81s/it][Succeeded / Failed / Skipped / Total] 109 / 7 / 1 / 117:  12%|█▏        | 117/1000 [23:01<2:53:46, 11.81s/it][Succeeded / Failed / Skipped / Total] 109 / 7 / 1 / 117:  12%|█▏        | 118/1000 [23:04<2:52:30, 11.73s/it][Succeeded / Failed / Skipped / Total] 110 / 7 / 1 / 118:  12%|█▏        | 118/1000 [23:04<2:52:30, 11.73s/it][Succeeded / Failed / Skipped / Total] 110 / 7 / 1 / 118:  12%|█▏        | 119/1000 [23:11<2:51:43, 11.70s/it][Succeeded / Failed / Skipped / Total] 111 / 7 / 1 / 119:  12%|█▏        | 119/1000 [23:11<2:51:43, 11.70s/it][Succeeded / Failed / Skipped / Total] 111 / 7 / 1 / 119:  12%|█▏        | 120/1000 [23:15<2:50:34, 11.63s/it][Succeeded / Failed / Skipped / Total] 112 / 7 / 1 / 120:  12%|█▏        | 120/1000 [23:15<2:50:34, 11.63s/it][Succeeded / Failed / Skipped / Total] 112 / 7 / 1 / 120:  12%|█▏        | 121/1000 [23:23<2:49:53, 11.60s/it][Succeeded / Failed / Skipped / Total] 113 / 7 / 1 / 121:  12%|█▏        | 121/1000 [23:23<2:49:53, 11.60s/it][Succeeded / Failed / Skipped / Total] 113 / 7 / 1 / 121:  12%|█▏        | 122/1000 [23:40<2:50:20, 11.64s/it]Initializes the UserBuilders --> Get UserDetailsService --> Socre: 1.0

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[userBuilder]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[userBuilder]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[chandru]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[chandru]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 117 ---------------------------------------------
Returns the service port . --> Get braddock --> Socre: 1.0

[[[[Adv]]]]: private static int [[getServicePort]] ( URL [[casServiceUrl]] ) { int port = [[casServiceUrl]] . getPort ( ) ; if ( port == - 1 ) { port = [[casServiceUrl]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[braddock]] ( URL [[youíre]] ) { int port = [[youíre]] . getPort ( ) ; if ( port == - 1 ) { port = [[youíre]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 118 ---------------------------------------------
Set the context environment properties . --> diphtheria --> Socre: 1.0

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[diphtheria]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 119 ---------------------------------------------
Add additional parameters . --> Add attributes to disposes --> Socre: 1.0

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > attributes , Map < String , Object > [[additionalParameters]] ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > attributes , Map < String , Object > [[disposes]] ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; [[disposes]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[disposes]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[disposes]] . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 120 ---------------------------------------------
Returns the UserDetailsService registered . --> Get UserDetailsService --> Socre: 1.0

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[vocal]] ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 121 ---------------------------------------------
Checks if the service ticket request requires authentication . --> Is a service ticket request? --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[tizzy]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 122 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 7 / 1 / 122:  12%|█▏        | 122/1000 [23:40<2:50:20, 11.64s/it][Succeeded / Failed / Skipped / Total] 114 / 7 / 1 / 122:  12%|█▏        | 123/1000 [24:37<2:55:36, 12.01s/it][Succeeded / Failed / Skipped / Total] 115 / 7 / 1 / 123:  12%|█▏        | 123/1000 [24:37<2:55:36, 12.01s/it][Succeeded / Failed / Skipped / Total] 115 / 7 / 1 / 123:  12%|█▏        | 124/1000 [24:47<2:55:07, 12.00s/it][Succeeded / Failed / Skipped / Total] 116 / 7 / 1 / 124:  12%|█▏        | 124/1000 [24:47<2:55:07, 12.00s/it][Succeeded / Failed / Skipped / Total] 116 / 7 / 1 / 124:  12%|█▎        | 125/1000 [24:54<2:54:19, 11.95s/it][Succeeded / Failed / Skipped / Total] 117 / 7 / 1 / 125:  12%|█▎        | 125/1000 [24:54<2:54:19, 11.95s/it][Succeeded / Failed / Skipped / Total] 117 / 7 / 1 / 125:  13%|█▎        | 126/1000 [25:01<2:53:33, 11.92s/it][Succeeded / Failed / Skipped / Total] 118 / 7 / 1 / 126:  13%|█▎        | 126/1000 [25:01<2:53:33, 11.92s/it][Succeeded / Failed / Skipped / Total] 118 / 7 / 1 / 126:  13%|█▎        | 127/1000 [25:05<2:52:25, 11.85s/it][Succeeded / Failed / Skipped / Total] 119 / 7 / 1 / 127:  13%|█▎        | 127/1000 [25:05<2:52:25, 11.85s/it][Succeeded / Failed / Skipped / Total] 119 / 7 / 1 / 127:  13%|█▎        | 128/1000 [25:08<2:51:18, 11.79s/it][Succeeded / Failed / Skipped / Total] 120 / 7 / 1 / 128:  13%|█▎        | 128/1000 [25:08<2:51:18, 11.79s/it][Succeeded / Failed / Skipped / Total] 120 / 7 / 1 / 128:  13%|█▎        | 129/1000 [25:27<2:51:53, 11.84s/it]Determines whether the authenticated user is authenticated . --> englewood authentication --> Socre: 1.0

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[englewood]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 123 ---------------------------------------------
Resolves the given parameters . --> Perform a betide --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter parameter , BindingContext [[bindingContext]] , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[reactiveSecurityContext]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[reactiveSecurityContext]] == null ) { return null ; } return [[reactiveSecurityContext]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[betide]] ( MethodParameter parameter , BindingContext [[morphin]] , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[calhoun]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[calhoun]] == null ) { return null ; } return [[calhoun]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 124 ---------------------------------------------
Create a MethodSecurityExpressionRoot . --> MethodSecurityExpressionOperations counseled --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[counseled]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 125 ---------------------------------------------
Returns cached jWK set . --> Get jwkSet --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[sepp]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 126 ---------------------------------------------
URL encode string . --> Encode a string in UTF8 --> Socre: 1.0

[[[[Adv]]]]: private String utf8UrlEncode ( String [[value]] ) { try { return URLEncoder . encode ( [[value]] , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String utf8UrlEncode ( String [[valens]] ) { try { return URLEncoder . encode ( [[valens]] , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 127 ---------------------------------------------
Get query string . --> grievously method --> Socre: 1.0

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest [[request]] , final Pattern artifactPattern ) { final String [[query]] = [[request]] . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String result = artifactPattern . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[grievously]] ( final HttpServletRequest [[materialist]] , final Pattern artifactPattern ) { final String [[florist]] = [[materialist]] . getQueryString ( ) ; if ( [[florist]] == null ) { return null ; } final String result = artifactPattern . matcher ( [[florist]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 128 ---------------------------------------------
Returns the cookie name . --> Return null if not found --> Socre: 1.0

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[cookie]] : cookies ) { if ( cookieName . equals ( [[cookie]] . getName ( ) ) ) { return [[cookie]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[philosophize]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[okayama]] : cookies ) { if ( cookieName . equals ( [[okayama]] . getName ( ) ) ) { return [[okayama]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 129 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 121 / 7 / 1 / 129:  13%|█▎        | 129/1000 [25:27<2:51:53, 11.84s/it][Succeeded / Failed / Skipped / Total] 121 / 7 / 1 / 129:  13%|█▎        | 130/1000 [26:18<2:56:02, 12.14s/it][Succeeded / Failed / Skipped / Total] 122 / 7 / 1 / 130:  13%|█▎        | 130/1000 [26:18<2:56:02, 12.14s/it][Succeeded / Failed / Skipped / Total] 122 / 7 / 1 / 130:  13%|█▎        | 131/1000 [26:42<2:57:10, 12.23s/it][Succeeded / Failed / Skipped / Total] 123 / 7 / 1 / 131:  13%|█▎        | 131/1000 [26:42<2:57:10, 12.23s/it][Succeeded / Failed / Skipped / Total] 123 / 7 / 1 / 131:  13%|█▎        | 132/1000 [26:53<2:56:47, 12.22s/it][Succeeded / Failed / Skipped / Total] 123 / 8 / 1 / 132:  13%|█▎        | 132/1000 [26:53<2:56:47, 12.22s/it][Succeeded / Failed / Skipped / Total] 123 / 8 / 1 / 132:  13%|█▎        | 133/1000 [27:04<2:56:27, 12.21s/it][Succeeded / Failed / Skipped / Total] 124 / 8 / 1 / 133:  13%|█▎        | 133/1000 [27:04<2:56:27, 12.21s/it][Succeeded / Failed / Skipped / Total] 124 / 8 / 1 / 133:  13%|█▎        | 134/1000 [27:11<2:55:45, 12.18s/it]Gets the principal . --> dilated dilated --> Socre: 1.0

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[principal]] = authentication . getPrincipal ( ) ; if ( [[principal]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[principal]] ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[dilated]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[accusations]] = authentication . getPrincipal ( ) ; if ( [[accusations]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[accusations]] ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 130 ---------------------------------------------
Concatenate arrays . --> Concatenate hiroshima --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... [[arrays]] ) { int length = 0 ; for ( byte [ ] array : [[arrays]] ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... [[hiroshima]] ) { int length = 0 ; for ( byte [ ] array : [[hiroshima]] ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[hiroshima]] ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 131 ---------------------------------------------
Loads user details . --> Playing token --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion [[assertion]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[assertion]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[playmates]] ( final Assertion [[pitching]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[pitching]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 132 ---------------------------------------------
Build provider url . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 133 ---------------------------------------------
Pre - processes a map of non - hash keys . --> Pre - processes mappings . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > [[orgMap]] ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( [[orgMap]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[orgMap]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > [[afterwards]] ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( [[afterwards]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[afterwards]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 134 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 8 / 1 / 134:  13%|█▎        | 134/1000 [27:11<2:55:45, 12.18s/it][Succeeded / Failed / Skipped / Total] 125 / 8 / 1 / 134:  14%|█▎        | 135/1000 [27:11<2:54:16, 12.09s/it][Succeeded / Failed / Skipped / Total] 126 / 8 / 1 / 135:  14%|█▎        | 135/1000 [27:11<2:54:16, 12.09s/it][Succeeded / Failed / Skipped / Total] 126 / 8 / 1 / 135:  14%|█▎        | 136/1000 [27:21<2:53:46, 12.07s/it][Succeeded / Failed / Skipped / Total] 127 / 8 / 1 / 136:  14%|█▎        | 136/1000 [27:21<2:53:46, 12.07s/it][Succeeded / Failed / Skipped / Total] 127 / 8 / 1 / 136:  14%|█▎        | 137/1000 [28:29<2:59:28, 12.48s/it][Succeeded / Failed / Skipped / Total] 128 / 8 / 1 / 137:  14%|█▎        | 137/1000 [28:29<2:59:28, 12.48s/it][Succeeded / Failed / Skipped / Total] 128 / 8 / 1 / 137:  14%|█▍        | 138/1000 [28:42<2:59:21, 12.48s/it][Succeeded / Failed / Skipped / Total] 129 / 8 / 1 / 138:  14%|█▍        | 138/1000 [28:42<2:59:21, 12.48s/it][Succeeded / Failed / Skipped / Total] 129 / 8 / 1 / 138:  14%|█▍        | 139/1000 [28:51<2:58:43, 12.45s/it][Succeeded / Failed / Skipped / Total] 130 / 8 / 1 / 139:  14%|█▍        | 139/1000 [28:51<2:58:43, 12.45s/it][Succeeded / Failed / Skipped / Total] 130 / 8 / 1 / 139:  14%|█▍        | 140/1000 [29:07<2:58:53, 12.48s/it][Succeeded / Failed / Skipped / Total] 131 / 8 / 1 / 140:  14%|█▍        | 140/1000 [29:07<2:58:53, 12.48s/it][Succeeded / Failed / Skipped / Total] 131 / 8 / 1 / 140:  14%|█▍        | 141/1000 [29:08<2:57:31, 12.40s/it]Get the list of roles associated with the given attributes . --> Get all grids for rebecka --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : [[attributes]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[rebecka]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : [[rebecka]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 135 ---------------------------------------------
Get the list of roles associated with the specified value . --> Gets theAuthorityCollection . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object value ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , value ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object value ) { Collection < GrantedAuthority > [[dimitri]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[dimitri]] , value ) ; return [[dimitri]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 136 ---------------------------------------------
Adds the authority collection . --> Callisto method --> Socre: 1.0

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > result , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( result , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( result , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[addGrantedAuthorityCollection]] ( result , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[callisto]] ( Collection < GrantedAuthority > result , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[callisto]] ( result , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[callisto]] ( result , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[callisto]] ( result , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 137 ---------------------------------------------
Gets the principal . --> Creates a new HttpServletRequest courgettes object --> Socre: 1.0

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[existing]] ( HttpServletRequest [[courgettes]] ) { Object [[calabria]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[calabria]] ) ; } return [[calabria]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 138 ---------------------------------------------
Get the J2EE principal . --> Returns principal value or null --> Socre: 1.0

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object principal = [[httpRequest]] . getUserPrincipal ( ) == null ? null : [[httpRequest]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[orlando]] ( HttpServletRequest [[metaxa]] ) { Object principal = [[metaxa]] . getUserPrincipal ( ) == null ? null : [[metaxa]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 139 ---------------------------------------------
Invokes a method invocation . --> Invoke the invocation --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object [[result]] ; try { [[result]] = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , [[result]] ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object [[ahí]] ; try { [[ahí]] = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , [[ahí]] ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 140 ---------------------------------------------
Gets the role name . --> Returns null if brained exists --> Socre: 1.0

[[[[Adv]]]]: private static String hasRole ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String hasRole ( String [[brained]] ) { Assert . isTrue ( ! [[brained]] . startsWith ( "ROLE_" ) , ( ) -> [[brained]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[brained]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 141 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 131 / 9 / 1 / 141:  14%|█▍        | 141/1000 [29:08<2:57:31, 12.40s/it][Succeeded / Failed / Skipped / Total] 131 / 9 / 1 / 141:  14%|█▍        | 142/1000 [29:09<2:56:08, 12.32s/it][Succeeded / Failed / Skipped / Total] 132 / 9 / 1 / 142:  14%|█▍        | 142/1000 [29:09<2:56:08, 12.32s/it][Succeeded / Failed / Skipped / Total] 132 / 9 / 1 / 142:  14%|█▍        | 143/1000 [29:16<2:55:24, 12.28s/it][Succeeded / Failed / Skipped / Total] 133 / 9 / 1 / 143:  14%|█▍        | 143/1000 [29:16<2:55:24, 12.28s/it][Succeeded / Failed / Skipped / Total] 133 / 9 / 1 / 143:  14%|█▍        | 144/1000 [29:22<2:54:36, 12.24s/it][Succeeded / Failed / Skipped / Total] 134 / 9 / 1 / 144:  14%|█▍        | 144/1000 [29:22<2:54:36, 12.24s/it][Succeeded / Failed / Skipped / Total] 134 / 9 / 1 / 144:  14%|█▍        | 145/1000 [29:37<2:54:42, 12.26s/it][Succeeded / Failed / Skipped / Total] 135 / 9 / 1 / 145:  14%|█▍        | 145/1000 [29:37<2:54:42, 12.26s/it][Succeeded / Failed / Skipped / Total] 135 / 9 / 1 / 145:  15%|█▍        | 146/1000 [29:45<2:54:04, 12.23s/it][Succeeded / Failed / Skipped / Total] 136 / 9 / 1 / 146:  15%|█▍        | 146/1000 [29:45<2:54:04, 12.23s/it][Succeeded / Failed / Skipped / Total] 136 / 9 / 1 / 146:  15%|█▍        | 147/1000 [29:50<2:53:06, 12.18s/it][Succeeded / Failed / Skipped / Total] 137 / 9 / 1 / 147:  15%|█▍        | 147/1000 [29:50<2:53:06, 12.18s/it][Succeeded / Failed / Skipped / Total] 137 / 9 / 1 / 147:  15%|█▍        | 148/1000 [29:51<2:51:54, 12.11s/it][Succeeded / Failed / Skipped / Total] 138 / 9 / 1 / 148:  15%|█▍        | 148/1000 [29:51<2:51:54, 12.11s/it][Succeeded / Failed / Skipped / Total] 138 / 9 / 1 / 148:  15%|█▍        | 149/1000 [29:57<2:51:03, 12.06s/it]Determines if a proxy agent is enabled . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[danes]] ( final HttpServletRequest [[orlando]] ) { final boolean [[wunderbar]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[orlando]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[wunderbar]] ) ; } return [[wunderbar]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 142 ---------------------------------------------
Gets the shared object . --> Get the ibs of the type --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[ibs]] > [[ibs]] getSharedObject ( Class < [[ibs]] > sharedType ) { return ( [[ibs]] ) this . [[caffee]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 143 ---------------------------------------------
Returns the roles associated with the specified array . --> has any modification role --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... roles ) { for ( int [[i]] = 0 ; [[i]] < roles . length ; [[i]] ++ ) { roles [ [[i]] ] = "ROLE_" + roles [ [[i]] ] ; } return roles ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... roles ) { for ( int [[feasibility]] = 0 ; [[feasibility]] < roles . length ; [[feasibility]] ++ ) { roles [ [[feasibility]] ] = "ROLE_" + roles [ [[feasibility]] ] ; } return roles ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 144 ---------------------------------------------
Invoked on login success . --> onLogin success --> Socre: 1.0

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication [[successfulAuthentication]] ) { String username = [[successfulAuthentication]] . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication [[confederation]] ) { String username = [[confederation]] . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 145 ---------------------------------------------
Attempts to process the user . --> Get the Authentication dilated --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[dilated]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 146 ---------------------------------------------
Set the exit user url . --> bernd by exitUserUrl --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[bernd]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 147 ---------------------------------------------
Create a copy of the specified range . --> subArray function --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] array , int beginIndex , int [[endIndex]] ) { int length = [[endIndex]] - beginIndex ; byte [ ] [[subarray]] = new byte [ length ] ; System . arraycopy ( array , beginIndex , [[subarray]] , 0 , length ) ; return [[subarray]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] array , int beginIndex , int [[clamped]] ) { int length = [[clamped]] - beginIndex ; byte [ ] [[ahmed]] = new byte [ length ] ; System . arraycopy ( array , beginIndex , [[ahmed]] , 0 , length ) ; return [[ahmed]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 148 ---------------------------------------------
Display a public rate index --> Gets orientation information --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[absolution]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 149 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 139 / 9 / 1 / 149:  15%|█▍        | 149/1000 [29:57<2:51:03, 12.06s/it][Succeeded / Failed / Skipped / Total] 139 / 9 / 1 / 149:  15%|█▌        | 150/1000 [30:23<2:52:15, 12.16s/it][Succeeded / Failed / Skipped / Total] 140 / 9 / 1 / 150:  15%|█▌        | 150/1000 [30:23<2:52:15, 12.16s/it][Succeeded / Failed / Skipped / Total] 140 / 9 / 1 / 150:  15%|█▌        | 151/1000 [30:44<2:52:51, 12.22s/it][Succeeded / Failed / Skipped / Total] 141 / 9 / 1 / 151:  15%|█▌        | 151/1000 [30:44<2:52:51, 12.22s/it][Succeeded / Failed / Skipped / Total] 141 / 9 / 1 / 151:  15%|█▌        | 152/1000 [30:45<2:51:34, 12.14s/it][Succeeded / Failed / Skipped / Total] 141 / 9 / 2 / 152:  15%|█▌        | 152/1000 [30:45<2:51:34, 12.14s/it][Succeeded / Failed / Skipped / Total] 141 / 9 / 2 / 152:  15%|█▌        | 153/1000 [30:47<2:50:25, 12.07s/it][Succeeded / Failed / Skipped / Total] 141 / 10 / 2 / 153:  15%|█▌        | 153/1000 [30:47<2:50:25, 12.07s/it][Succeeded / Failed / Skipped / Total] 141 / 10 / 2 / 153:  15%|█▌        | 154/1000 [30:49<2:49:22, 12.01s/it][Succeeded / Failed / Skipped / Total] 141 / 11 / 2 / 154:  15%|█▌        | 154/1000 [30:49<2:49:22, 12.01s/it][Succeeded / Failed / Skipped / Total] 141 / 11 / 2 / 154:  16%|█▌        | 155/1000 [31:03<2:49:17, 12.02s/it][Succeeded / Failed / Skipped / Total] 142 / 11 / 2 / 155:  16%|█▌        | 155/1000 [31:03<2:49:17, 12.02s/it][Succeeded / Failed / Skipped / Total] 142 / 11 / 2 / 155:  16%|█▌        | 156/1000 [31:04<2:48:09, 11.95s/it]Filter springSecurityFilterChain Method . --> Create a new instance of WebSecurity . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[biochemical]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 150 ---------------------------------------------
Decodes a JWT token . --> Decodes a token --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[jwt]] = parse ( token ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[jwt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[reprisal]] = parse ( token ) ; if ( [[reprisal]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[reprisal]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[reprisal]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 151 ---------------------------------------------
Evaluate the access expression . --> authorizeUsingAccessExpression --> Socre: 1.0

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression [[accessExpression]] ; try { [[accessExpression]] = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[accessExpression]] , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression [[hospitalized]] ; try { [[hospitalized]] = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[hospitalized]] , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 152 ---------------------------------------------
Convert a Jwt object into a collection of active roles . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 153 ---------------------------------------------
Call service ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[hawke]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 154 ---------------------------------------------
proxy ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 155 ---------------------------------------------
Generates a CSRF token . --> Returns the magnification of the given request . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[magnification]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 156 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 143 / 11 / 2 / 156:  16%|█▌        | 156/1000 [31:04<2:48:09, 11.95s/it][Succeeded / Failed / Skipped / Total] 143 / 11 / 2 / 156:  16%|█▌        | 157/1000 [31:49<2:50:55, 12.17s/it][Succeeded / Failed / Skipped / Total] 144 / 11 / 2 / 157:  16%|█▌        | 157/1000 [31:49<2:50:55, 12.17s/it][Succeeded / Failed / Skipped / Total] 144 / 11 / 2 / 157:  16%|█▌        | 158/1000 [31:53<2:49:57, 12.11s/it][Succeeded / Failed / Skipped / Total] 145 / 11 / 2 / 158:  16%|█▌        | 158/1000 [31:53<2:49:57, 12.11s/it][Succeeded / Failed / Skipped / Total] 145 / 11 / 2 / 158:  16%|█▌        | 159/1000 [31:58<2:49:08, 12.07s/it][Succeeded / Failed / Skipped / Total] 146 / 11 / 2 / 159:  16%|█▌        | 159/1000 [31:58<2:49:08, 12.07s/it][Succeeded / Failed / Skipped / Total] 146 / 11 / 2 / 159:  16%|█▌        | 160/1000 [32:02<2:48:14, 12.02s/it][Succeeded / Failed / Skipped / Total] 147 / 11 / 2 / 160:  16%|█▌        | 160/1000 [32:02<2:48:14, 12.02s/it][Succeeded / Failed / Skipped / Total] 147 / 11 / 2 / 160:  16%|█▌        | 161/1000 [32:05<2:47:12, 11.96s/it]Gets the active GrantedAuthority groups --> Returns all registered GrantedAuthority --> Socre: 1.0

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[ladylike]] ( ) { List < String > [[tonda]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[grosses]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[tonda]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[tonda]] + " mapped to Granted Authorities: " + [[grosses]] ) ; } return [[grosses]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 157 ---------------------------------------------
Build the redirect url for the request . --> Build RedirectUrl for RedirectRequest --> Socre: 1.0

[[[[Adv]]]]: protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest [[request]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[request]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[urlBuilder]] = new RedirectUrlBuilder ( ) ; [[urlBuilder]] . setScheme ( "https" ) ; [[urlBuilder]] . setServerName ( [[request]] . getServerName ( ) ) ; [[urlBuilder]] . setPort ( httpsPort . intValue ( ) ) ; [[urlBuilder]] . setContextPath ( [[request]] . getContextPath ( ) ) ; [[urlBuilder]] . setServletPath ( [[request]] . getServletPath ( ) ) ; [[urlBuilder]] . setPathInfo ( [[request]] . getPathInfo ( ) ) ; [[urlBuilder]] . setQuery ( [[request]] . getQueryString ( ) ) ; return [[urlBuilder]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest [[digitalis]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[digitalis]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[gripping]] = new RedirectUrlBuilder ( ) ; [[gripping]] . setScheme ( "https" ) ; [[gripping]] . setServerName ( [[digitalis]] . getServerName ( ) ) ; [[gripping]] . setPort ( httpsPort . intValue ( ) ) ; [[gripping]] . setContextPath ( [[digitalis]] . getContextPath ( ) ) ; [[gripping]] . setServletPath ( [[digitalis]] . getServletPath ( ) ) ; [[gripping]] . setPathInfo ( [[digitalis]] . getPathInfo ( ) ) ; [[gripping]] . setQuery ( [[digitalis]] . getQueryString ( ) ) ; return [[gripping]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 158 ---------------------------------------------
Delete a permission --> Delete the specified contact . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int [[mask]] ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( [[mask]] ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int [[fingertip]] ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( [[fingertip]] ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 159 ---------------------------------------------
Display a contact for a contact --> region >ano --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "addPermission" , addPermission ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[model]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[asano]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > [[beepers]] = new HashMap <> ( ) ; [[beepers]] . put ( "addPermission" , addPermission ) ; [[beepers]] . put ( "recipients" , listRecipients ( ) ) ; [[beepers]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[beepers]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 160 ---------------------------------------------
Create a InMemoryResource for the given users . --> Get user s resourceFactoryBean --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String users ) { InMemoryResource [[resource]] = new InMemoryResource ( users ) ; return fromResource ( [[resource]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String users ) { InMemoryResource [[cowed]] = new InMemoryResource ( users ) ; return fromResource ( [[cowed]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 161 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 148 / 11 / 2 / 161:  16%|█▌        | 161/1000 [32:05<2:47:12, 11.96s/it][Succeeded / Failed / Skipped / Total] 148 / 11 / 2 / 161:  16%|█▌        | 162/1000 [32:11<2:46:29, 11.92s/it][Succeeded / Failed / Skipped / Total] 149 / 11 / 2 / 162:  16%|█▌        | 162/1000 [32:11<2:46:29, 11.92s/it][Succeeded / Failed / Skipped / Total] 149 / 11 / 2 / 162:  16%|█▋        | 163/1000 [32:17<2:45:49, 11.89s/it][Succeeded / Failed / Skipped / Total] 150 / 11 / 2 / 163:  16%|█▋        | 163/1000 [32:17<2:45:49, 11.89s/it][Succeeded / Failed / Skipped / Total] 150 / 11 / 2 / 163:  16%|█▋        | 164/1000 [32:29<2:45:36, 11.89s/it][Succeeded / Failed / Skipped / Total] 151 / 11 / 2 / 164:  16%|█▋        | 164/1000 [32:29<2:45:36, 11.89s/it][Succeeded / Failed / Skipped / Total] 151 / 11 / 2 / 164:  16%|█▋        | 165/1000 [32:46<2:45:53, 11.92s/it][Succeeded / Failed / Skipped / Total] 152 / 11 / 2 / 165:  16%|█▋        | 165/1000 [32:46<2:45:53, 11.92s/it][Succeeded / Failed / Skipped / Total] 152 / 11 / 2 / 165:  17%|█▋        | 166/1000 [32:59<2:45:43, 11.92s/it][Succeeded / Failed / Skipped / Total] 153 / 11 / 2 / 166:  17%|█▋        | 166/1000 [32:59<2:45:43, 11.92s/it][Succeeded / Failed / Skipped / Total] 153 / 11 / 2 / 166:  17%|█▋        | 167/1000 [33:38<2:47:47, 12.09s/it]Gets the default role prefix . --> Return the default value prefix for the blinkers --> Socre: 1.0

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String defaultRolePrefix , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( defaultRolePrefix ) ) { return [[role]] ; } return defaultRolePrefix + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String defaultRolePrefix , String [[blinkers]] ) { if ( [[blinkers]] == null ) { return [[blinkers]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[blinkers]] ; } if ( [[blinkers]] . startsWith ( defaultRolePrefix ) ) { return [[blinkers]] ; } return defaultRolePrefix + [[blinkers]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 162 ---------------------------------------------
Changes the contact id . --> region > seizures --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl [[acl]] = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , [[acl]] ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[seizures]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl [[fundamentals]] = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , [[fundamentals]] ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 163 ---------------------------------------------
Decodes bytes . --> Decodes byte array --> Socre: 1.0

[[[[Adv]]]]: public static String decode ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String decode ( byte [ ] [[fabre]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[fabre]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 164 ---------------------------------------------
Checks if the current request is using the current URL --> rebekah --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[currentUser]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[currentUser]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[rebekah]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[gonzalez]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[gonzalez]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 165 ---------------------------------------------
addContact Method . --> add specified WebContact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[contact]] = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( [[contact]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[approach]] = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( [[approach]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 166 ---------------------------------------------
Encodes a string . --> Encode a CharSequence --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer [[bytes]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ [[bytes]] . limit ( ) ] ; System . arraycopy ( [[bytes]] . array ( ) , 0 , bytesCopy , 0 , [[bytes]] . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer [[lucian]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ [[lucian]] . limit ( ) ] ; System . arraycopy ( [[lucian]] . array ( ) , 0 , bytesCopy , 0 , [[lucian]] . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 167 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 154 / 11 / 2 / 167:  17%|█▋        | 167/1000 [33:38<2:47:47, 12.09s/it][Succeeded / Failed / Skipped / Total] 154 / 11 / 2 / 167:  17%|█▋        | 168/1000 [33:58<2:48:14, 12.13s/it][Succeeded / Failed / Skipped / Total] 155 / 11 / 2 / 168:  17%|█▋        | 168/1000 [33:58<2:48:14, 12.13s/it][Succeeded / Failed / Skipped / Total] 155 / 11 / 2 / 168:  17%|█▋        | 169/1000 [35:13<2:53:11, 12.50s/it][Succeeded / Failed / Skipped / Total] 155 / 12 / 2 / 169:  17%|█▋        | 169/1000 [35:13<2:53:11, 12.50s/it][Succeeded / Failed / Skipped / Total] 155 / 12 / 2 / 169:  17%|█▋        | 170/1000 [35:21<2:52:35, 12.48s/it][Succeeded / Failed / Skipped / Total] 156 / 12 / 2 / 170:  17%|█▋        | 170/1000 [35:21<2:52:35, 12.48s/it][Succeeded / Failed / Skipped / Total] 156 / 12 / 2 / 170:  17%|█▋        | 171/1000 [35:29<2:52:03, 12.45s/it][Succeeded / Failed / Skipped / Total] 157 / 12 / 2 / 171:  17%|█▋        | 171/1000 [35:29<2:52:03, 12.45s/it][Succeeded / Failed / Skipped / Total] 157 / 12 / 3 / 172:  17%|█▋        | 172/1000 [35:29<2:50:51, 12.38s/it][Succeeded / Failed / Skipped / Total] 157 / 12 / 3 / 172:  17%|█▋        | 173/1000 [35:50<2:51:18, 12.43s/it][Succeeded / Failed / Skipped / Total] 158 / 12 / 3 / 173:  17%|█▋        | 173/1000 [35:50<2:51:18, 12.43s/it][Succeeded / Failed / Skipped / Total] 158 / 12 / 3 / 173:  17%|█▋        | 174/1000 [35:56<2:50:36, 12.39s/it]Process anAutoLogin cookie . --> Convert cookieTokens to UserDetails --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String [[presentedToken]] = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[unh]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String [[withdrawals]] = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 168 ---------------------------------------------
Gets all config attributes . --> region > pacifier --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { allAttributes . addAll ( attributeList ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[pacifier]] ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { allAttributes . addAll ( attributeList ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 169 ---------------------------------------------
Attempts to switch to a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 170 ---------------------------------------------
Find attributes . --> Returns attributes of jano --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method [[method]] , Class < ? > [[targetClass]] ) { if ( [[targetClass]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , [[targetClass]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method [[jano]] , Class < ? > [[shoppers]] ) { if ( [[shoppers]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[jano]] , [[shoppers]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 171 ---------------------------------------------
Lookup parameter names . --> lookup parameterNames --> Socre: 1.0

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[paramNames]] = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String [[parameterName]] = findParameterName ( annotations ) ; if ( [[parameterName]] != null ) { found = "[[True]]" == "[[True]]" ; [[paramNames]] [ i ] = [[parameterName]] ; } } return found ? [[paramNames]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[schlosser]] = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String [[kokoro]] = findParameterName ( annotations ) ; if ( [[kokoro]] != null ) { found = "[[Fett]]" == "[[Fett]]" ; [[schlosser]] [ i ] = [[kokoro]] ; } } return found ? [[schlosser]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 172 ---------------------------------------------
random contact --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 173 ---------------------------------------------
Gets attribute values . --> Get bangkok Method . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > [[result]] = null ; if ( attributes != null ) { [[result]] = attributes . get ( [[name]] ) ; } if ( [[result]] == null ) { [[result]] = Collections . emptyList ( ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[bangkok]] ( String [[beeman]] ) { List < String > [[ittle]] = null ; if ( attributes != null ) { [[ittle]] = attributes . get ( [[beeman]] ) ; } if ( [[ittle]] == null ) { [[ittle]] = Collections . emptyList ( ) ; } return [[ittle]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 174 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 159 / 12 / 3 / 174:  17%|█▋        | 174/1000 [35:56<2:50:36, 12.39s/it][Succeeded / Failed / Skipped / Total] 159 / 12 / 3 / 174:  18%|█▊        | 175/1000 [35:59<2:49:40, 12.34s/it][Succeeded / Failed / Skipped / Total] 160 / 12 / 3 / 175:  18%|█▊        | 175/1000 [35:59<2:49:40, 12.34s/it][Succeeded / Failed / Skipped / Total] 160 / 12 / 3 / 175:  18%|█▊        | 176/1000 [36:12<2:49:32, 12.35s/it][Succeeded / Failed / Skipped / Total] 161 / 12 / 3 / 176:  18%|█▊        | 176/1000 [36:12<2:49:32, 12.35s/it][Succeeded / Failed / Skipped / Total] 161 / 12 / 3 / 176:  18%|█▊        | 177/1000 [36:19<2:48:51, 12.31s/it][Succeeded / Failed / Skipped / Total] 162 / 12 / 3 / 177:  18%|█▊        | 177/1000 [36:19<2:48:51, 12.31s/it][Succeeded / Failed / Skipped / Total] 162 / 12 / 3 / 177:  18%|█▊        | 178/1000 [36:35<2:48:57, 12.33s/it][Succeeded / Failed / Skipped / Total] 163 / 12 / 3 / 178:  18%|█▊        | 178/1000 [36:35<2:48:57, 12.33s/it][Succeeded / Failed / Skipped / Total] 163 / 12 / 3 / 178:  18%|█▊        | 179/1000 [36:43<2:48:27, 12.31s/it][Succeeded / Failed / Skipped / Total] 164 / 12 / 3 / 179:  18%|█▊        | 179/1000 [36:43<2:48:27, 12.31s/it][Succeeded / Failed / Skipped / Total] 164 / 12 / 3 / 179:  18%|█▊        | 180/1000 [36:50<2:47:52, 12.28s/it]Add a permission --> Generate a hydrophone for a Model --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission addPermission , BindingResult result , ModelMap [[model]] ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[hydrophone]] ( AddPermission addPermission , BindingResult result , ModelMap [[notice]] ) { addPermissionValidator . validate ( [[hydrophone]] , result ) ; if ( result . hasErrors ( ) ) { [[notice]] . put ( "recipients" , listRecipients ( ) ) ; [[notice]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[hydrophone]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[hydrophone]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[hydrophone]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[notice]] . put ( "recipients" , listRecipients ( ) ) ; [[notice]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 175 ---------------------------------------------
Adds a secure method . --> In shortcoming --> Socre: 1.0

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + [[attr]] + "]" ) ; } this . methodMap . put ( [[method]] , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[shortcoming]] ( RegisteredMethod [[buick]] , List < ConfigAttribute > [[chieftain]] ) { Assert . notNull ( [[buick]] , "RegisteredMethod required" ) ; Assert . notNull ( [[chieftain]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[buick]] + "] with attributes [" + [[chieftain]] + "]" ) ; } this . methodMap . put ( [[buick]] , [[chieftain]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 176 ---------------------------------------------
Handles a bind exception . --> Handle dissertation --> Socre: 1.0

[[[[Adv]]]]: protected void handleBindException ( String [[userDn]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String [[dissertation]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[dissertation]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 177 ---------------------------------------------
Returns the value of the first attribute with the given name . --> Method club . --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > [[result]] = getAttributeValues ( [[name]] ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[club]] ( String [[wigged]] ) { List < String > [[niven]] = getAttributeValues ( [[wigged]] ) ; if ( [[niven]] . isEmpty ( ) ) { return null ; } else { return [[niven]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 178 ---------------------------------------------
Sends an access request . --> Set access Den --> Socre: 1.0

[[[[Adv]]]]: public void commence ( HttpServletRequest request , HttpServletResponse response , AuthenticationException [[arg2]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void commence ( HttpServletRequest request , HttpServletResponse response , AuthenticationException [[hela]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 179 ---------------------------------------------
Checks the given filters . --> Called by befell . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[befell]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 180 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 165 / 12 / 3 / 180:  18%|█▊        | 180/1000 [36:50<2:47:52, 12.28s/it][Succeeded / Failed / Skipped / Total] 165 / 12 / 3 / 180:  18%|█▊        | 181/1000 [37:29<2:49:38, 12.43s/it][Succeeded / Failed / Skipped / Total] 166 / 12 / 3 / 181:  18%|█▊        | 181/1000 [37:29<2:49:38, 12.43s/it][Succeeded / Failed / Skipped / Total] 166 / 12 / 3 / 181:  18%|█▊        | 182/1000 [37:29<2:48:31, 12.36s/it][Succeeded / Failed / Skipped / Total] 166 / 12 / 4 / 182:  18%|█▊        | 182/1000 [37:29<2:48:31, 12.36s/it][Succeeded / Failed / Skipped / Total] 166 / 12 / 4 / 182:  18%|█▊        | 183/1000 [38:59<2:54:03, 12.78s/it][Succeeded / Failed / Skipped / Total] 167 / 12 / 4 / 183:  18%|█▊        | 183/1000 [38:59<2:54:03, 12.78s/it][Succeeded / Failed / Skipped / Total] 167 / 12 / 4 / 183:  18%|█▊        | 184/1000 [39:02<2:53:08, 12.73s/it][Succeeded / Failed / Skipped / Total] 168 / 12 / 4 / 184:  18%|█▊        | 184/1000 [39:02<2:53:08, 12.73s/it][Succeeded / Failed / Skipped / Total] 168 / 12 / 4 / 184:  18%|█▊        | 185/1000 [39:08<2:52:26, 12.69s/it][Succeeded / Failed / Skipped / Total] 169 / 12 / 4 / 185:  18%|█▊        | 185/1000 [39:08<2:52:26, 12.69s/it][Succeeded / Failed / Skipped / Total] 169 / 12 / 4 / 185:  19%|█▊        | 186/1000 [39:11<2:51:29, 12.64s/it][Succeeded / Failed / Skipped / Total] 170 / 12 / 4 / 186:  19%|█▊        | 186/1000 [39:11<2:51:29, 12.64s/it][Succeeded / Failed / Skipped / Total] 170 / 12 / 4 / 186:  19%|█▊        | 187/1000 [39:44<2:52:46, 12.75s/it][Succeeded / Failed / Skipped / Total] 171 / 12 / 4 / 187:  19%|█▊        | 187/1000 [39:44<2:52:46, 12.75s/it][Succeeded / Failed / Skipped / Total] 171 / 12 / 4 / 187:  19%|█▉        | 188/1000 [41:21<2:58:36, 13.20s/it]Create redirect url . --> Create a espy --> Socre: 1.0

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[espy]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 181 ---------------------------------------------
Returns the any request . --> Create a CJORequest --> Socre: 1.0

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "[[True]]" == "[[True]]" ; return configurer ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . [[profesor]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[profesor]] = "[[Lindell]]" == "[[Lindell]]" ; return configurer ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 182 ---------------------------------------------
Registers a BeanComponent --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 183 ---------------------------------------------
Checks if the mapped name is match . --> interdiction function --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[interdiction]] ( String [[hec]] , String [[mihara]] ) { return ( [[mihara]] . endsWith ( "*" ) && [[hec]] . startsWith ( [[mihara]] . substring ( 0 , [[mihara]] . length ( ) - 1 ) ) ) || ( [[mihara]] . startsWith ( "*" ) && [[hec]] . endsWith ( [[mihara]] . substring ( 1 , [[mihara]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 184 ---------------------------------------------
Clears the authentication attributes . --> tetsuya --> Socre: 1.0

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession session = request . getSession ( "[[False]]" != "[[False]]" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[tetsuya]] ( HttpServletRequest request ) { HttpSession session = request . getSession ( "[[Alans]]" != "[[Alans]]" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 185 ---------------------------------------------
Checks if the expected array matches the actual array . --> Compares two byte arrays --> Socre: 1.0

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] [[actual]] ) { if ( expected . length != [[actual]] . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ [[actual]] [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] [[elses]] ) { if ( expected . length != [[elses]] . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ [[elses]] [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 186 ---------------------------------------------
Set the default failure url . --> tinkering --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[tinkering]] ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 187 ---------------------------------------------
Extract prefix from SHA --> Get dougie --> Socre: 1.0

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int [[secondBrace]] = [[encPass]] . lastIndexOf ( ' ' ) ; if ( [[secondBrace]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , [[secondBrace]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[niet]] ( String [[dougie]] ) { if ( ! [[dougie]] . startsWith ( "{" ) ) { return null ; } int [[azaleas]] = [[dougie]] . lastIndexOf ( ' ' ) ; if ( [[azaleas]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[dougie]] . substring ( 0 , [[azaleas]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 188 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 171 / 13 / 4 / 188:  19%|█▉        | 188/1000 [41:21<2:58:36, 13.20s/it][Succeeded / Failed / Skipped / Total] 171 / 13 / 4 / 188:  19%|█▉        | 189/1000 [41:44<2:59:07, 13.25s/it][Succeeded / Failed / Skipped / Total] 172 / 13 / 4 / 189:  19%|█▉        | 189/1000 [41:44<2:59:07, 13.25s/it][Succeeded / Failed / Skipped / Total] 172 / 13 / 4 / 189:  19%|█▉        | 190/1000 [41:53<2:58:35, 13.23s/it][Succeeded / Failed / Skipped / Total] 173 / 13 / 4 / 190:  19%|█▉        | 190/1000 [41:53<2:58:35, 13.23s/it][Succeeded / Failed / Skipped / Total] 173 / 13 / 4 / 190:  19%|█▉        | 191/1000 [42:01<2:58:00, 13.20s/it][Succeeded / Failed / Skipped / Total] 173 / 14 / 4 / 191:  19%|█▉        | 191/1000 [42:01<2:58:00, 13.20s/it][Succeeded / Failed / Skipped / Total] 173 / 14 / 4 / 191:  19%|█▉        | 192/1000 [42:21<2:58:16, 13.24s/it][Succeeded / Failed / Skipped / Total] 174 / 14 / 4 / 192:  19%|█▉        | 192/1000 [42:21<2:58:16, 13.24s/it][Succeeded / Failed / Skipped / Total] 174 / 14 / 4 / 192:  19%|█▉        | 193/1000 [42:26<2:57:26, 13.19s/it][Succeeded / Failed / Skipped / Total] 175 / 14 / 4 / 193:  19%|█▉        | 193/1000 [42:26<2:57:26, 13.19s/it][Succeeded / Failed / Skipped / Total] 175 / 14 / 4 / 193:  19%|█▉        | 194/1000 [42:31<2:56:39, 13.15s/it][Succeeded / Failed / Skipped / Total] 175 / 15 / 4 / 194:  19%|█▉        | 194/1000 [42:31<2:56:39, 13.15s/it][Succeeded / Failed / Skipped / Total] 175 / 15 / 4 / 194:  20%|█▉        | 195/1000 [43:12<2:58:21, 13.29s/it]Returns the field with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > [[clazz]] , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( [[clazz]] , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return [[clazz]] . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[robby]] ( Class < ? > [[dagg]] , String [[hobart]] ) throws IllegalStateException { Assert . notNull ( [[dagg]] , "Class required" ) ; Assert . hasText ( [[hobart]] , "Field name required" ) ; try { return [[dagg]] . getDeclaredField ( [[hobart]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 189 ---------------------------------------------
Resolves the filtering hidden inputs . --> UpdateHiddenInputs --> Socre: 1.0

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . [[resolveHiddenInputs]] = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[jordanian]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . [[engulf]] = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 190 ---------------------------------------------
Extracts the identifier from the result set . --> Convert a ResultSet object to its identifier --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[fertilization]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[fertilization]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[fertilization]] = convertFromStringTo ( ( String ) [[fertilization]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 191 ---------------------------------------------
Creates the service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String createServiceUrl ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createServiceUrl ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 192 ---------------------------------------------
Find the cause of the given throwable . --> dart method --> Socre: 1.0

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[throwableType]] = entry . getKey ( ) ; if ( [[throwableType]] . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[dart]] ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[nutrients]] = entry . getKey ( ) ; if ( [[nutrients]] . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 193 ---------------------------------------------
Gets the authority list . --> Get user s distorted --> Socre: 1.0

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority [[authority]] : userAuthorities ) { set . add ( [[authority]] . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[distorted]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority [[lipari]] : userAuthorities ) { set . add ( [[lipari]] . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 194 ---------------------------------------------
Returns the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[extractorMap]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[destitution]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[erman]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 195 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 176 / 15 / 4 / 195:  20%|█▉        | 195/1000 [43:12<2:58:21, 13.29s/it][Succeeded / Failed / Skipped / Total] 176 / 15 / 4 / 195:  20%|█▉        | 196/1000 [43:21<2:57:52, 13.27s/it][Succeeded / Failed / Skipped / Total] 177 / 15 / 4 / 196:  20%|█▉        | 196/1000 [43:21<2:57:52, 13.27s/it][Succeeded / Failed / Skipped / Total] 177 / 15 / 4 / 196:  20%|█▉        | 197/1000 [43:24<2:56:57, 13.22s/it][Succeeded / Failed / Skipped / Total] 178 / 15 / 4 / 197:  20%|█▉        | 197/1000 [43:24<2:56:57, 13.22s/it][Succeeded / Failed / Skipped / Total] 178 / 15 / 4 / 197:  20%|█▉        | 198/1000 [43:25<2:55:52, 13.16s/it][Succeeded / Failed / Skipped / Total] 179 / 15 / 4 / 198:  20%|█▉        | 198/1000 [43:25<2:55:52, 13.16s/it][Succeeded / Failed / Skipped / Total] 179 / 15 / 4 / 198:  20%|█▉        | 199/1000 [43:30<2:55:09, 13.12s/it][Succeeded / Failed / Skipped / Total] 180 / 15 / 4 / 199:  20%|█▉        | 199/1000 [43:30<2:55:09, 13.12s/it][Succeeded / Failed / Skipped / Total] 180 / 15 / 4 / 199:  20%|██        | 200/1000 [43:33<2:54:12, 13.07s/it]Update the object identity --> Update this objectIdentity --> Socre: 1.0

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long [[ownerSid]] = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , [[ownerSid]] , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long [[ahman]] = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , [[ahman]] , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 196 ---------------------------------------------
Returns any tmp object . --> Get Gets the enabled webExchangeMatcher . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[activities]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 197 ---------------------------------------------
Method createObject identity . --> create orRetrieve class primary key --> Socre: 1.0

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long [[classId]] = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , [[classId]] , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long [[pussyhole]] = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , [[pussyhole]] , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 198 ---------------------------------------------
Checks if is absolute url . --> Completes the specified carre --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String [[url]] ) { if ( [[url]] == null ) { return "[[False]]" != "[[False]]" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[salters]] ( String [[carre]] ) { if ( [[carre]] == null ) { return "[[Aristophanes]]" != "[[Aristophanes]]" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[carre]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 199 ---------------------------------------------
Deletes the given password using the given salt . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[clambering]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[clambering]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 200 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 181 / 15 / 4 / 200:  20%|██        | 200/1000 [43:33<2:54:12, 13.07s/it][Succeeded / Failed / Skipped / Total] 181 / 15 / 4 / 200:  20%|██        | 201/1000 [43:40<2:53:38, 13.04s/it][Succeeded / Failed / Skipped / Total] 182 / 15 / 4 / 201:  20%|██        | 201/1000 [43:40<2:53:38, 13.04s/it][Succeeded / Failed / Skipped / Total] 182 / 15 / 4 / 201:  20%|██        | 202/1000 [43:45<2:52:53, 13.00s/it][Succeeded / Failed / Skipped / Total] 183 / 15 / 4 / 202:  20%|██        | 202/1000 [43:45<2:52:53, 13.00s/it][Succeeded / Failed / Skipped / Total] 183 / 15 / 4 / 202:  20%|██        | 203/1000 [43:51<2:52:10, 12.96s/it][Succeeded / Failed / Skipped / Total] 184 / 15 / 4 / 203:  20%|██        | 203/1000 [43:51<2:52:10, 12.96s/it][Succeeded / Failed / Skipped / Total] 184 / 15 / 4 / 203:  20%|██        | 204/1000 [43:53<2:51:14, 12.91s/it][Succeeded / Failed / Skipped / Total] 185 / 15 / 4 / 204:  20%|██        | 204/1000 [43:53<2:51:14, 12.91s/it][Succeeded / Failed / Skipped / Total] 185 / 15 / 4 / 204:  20%|██        | 205/1000 [44:00<2:50:38, 12.88s/it][Succeeded / Failed / Skipped / Total] 186 / 15 / 4 / 205:  20%|██        | 205/1000 [44:00<2:50:38, 12.88s/it][Succeeded / Failed / Skipped / Total] 186 / 15 / 4 / 205:  21%|██        | 206/1000 [44:15<2:50:36, 12.89s/it]Create the ACE annotation . --> Create an AccessControlEntry --> Socre: 1.0

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int [[i]] ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( [[i]] ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , [[i]] ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int [[pillowcases]] ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( [[pillowcases]] ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , [[pillowcases]] ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 201 ---------------------------------------------
Create an encryptor for queryable text . --> Create new HexEncodingTextEncryptor --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[je]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 202 ---------------------------------------------
Gets the path pattern matcher matcher . --> Create server webExchangeMatcher for pathMatchers --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String [[pattern]] : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( [[pattern]] , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String [[matias]] : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( [[matias]] , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 203 ---------------------------------------------
Build the request URL --> Generate toString for a path --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String [[requestURI]] , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( [[requestURI]] . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[hundert]] ( String servletPath , String [[dusting]] , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( [[dusting]] . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 204 ---------------------------------------------
Creates a text encryptor . --> TextEncryptor method --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[abode]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[abode]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
Build the dn . --> Builds aDn --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName buildDn ( String username ) { DistinguishedName [[dn]] = new DistinguishedName ( userDnBase ) ; [[dn]] . add ( usernameAttribute , username ) ; return [[dn]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String username ) { DistinguishedName [[behemoth]] = new DistinguishedName ( userDnBase ) ; [[behemoth]] . add ( usernameAttribute , username ) ; return [[behemoth]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 206 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 187 / 15 / 4 / 206:  21%|██        | 206/1000 [44:15<2:50:36, 12.89s/it][Succeeded / Failed / Skipped / Total] 187 / 15 / 4 / 206:  21%|██        | 207/1000 [44:28<2:50:23, 12.89s/it][Succeeded / Failed / Skipped / Total] 188 / 15 / 4 / 207:  21%|██        | 207/1000 [44:28<2:50:23, 12.89s/it][Succeeded / Failed / Skipped / Total] 188 / 15 / 4 / 207:  21%|██        | 208/1000 [44:35<2:49:48, 12.86s/it][Succeeded / Failed / Skipped / Total] 189 / 15 / 4 / 208:  21%|██        | 208/1000 [44:35<2:49:48, 12.86s/it][Succeeded / Failed / Skipped / Total] 189 / 15 / 4 / 208:  21%|██        | 209/1000 [44:43<2:49:15, 12.84s/it][Succeeded / Failed / Skipped / Total] 190 / 15 / 4 / 209:  21%|██        | 209/1000 [44:43<2:49:15, 12.84s/it][Succeeded / Failed / Skipped / Total] 190 / 15 / 4 / 209:  21%|██        | 210/1000 [44:49<2:48:36, 12.81s/it][Succeeded / Failed / Skipped / Total] 191 / 15 / 4 / 210:  21%|██        | 210/1000 [44:49<2:48:36, 12.81s/it][Succeeded / Failed / Skipped / Total] 191 / 15 / 4 / 210:  21%|██        | 211/1000 [45:12<2:49:04, 12.86s/it][Succeeded / Failed / Skipped / Total] 192 / 15 / 4 / 211:  21%|██        | 211/1000 [45:12<2:49:04, 12.86s/it][Succeeded / Failed / Skipped / Total] 192 / 15 / 4 / 211:  21%|██        | 212/1000 [45:14<2:48:10, 12.81s/it]Creates the shared object . --> Generates a bartel map . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[bartel]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 207 ---------------------------------------------
Retrieve the parent directory . --> Retrieve all parent directories . --> Socre: 1.0

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int [[rowNumber]] ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int [[translator]] ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 208 ---------------------------------------------
Configures the Jaas . --> Configure Jaas usingLoop --> Socre: 1.0

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String [[loginConfigUrl]] = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( [[loginConfigUrl]] ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + [[loginConfigUrl]] ) ; Security . setProperty ( key , [[loginConfigUrl]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String [[interpreting]] = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( [[interpreting]] ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + [[interpreting]] ) ; Security . setProperty ( key , [[interpreting]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 209 ---------------------------------------------
Internal parse date . --> internal parseDate --> Socre: 1.0

[[[[Adv]]]]: private static Long internalParseDate ( String value , DateFormat [ ] [[formats]] ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < [[formats]] . length ) ; i ++ ) { try { date = [[formats]] [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long internalParseDate ( String value , DateFormat [ ] [[guarantor]] ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < [[guarantor]] . length ) ; i ++ ) { try { date = [[guarantor]] [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 210 ---------------------------------------------
Gets the current date . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[limp]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 211 ---------------------------------------------
Sets the target URL parameter . --> dampened --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[dampened]] ( String [[benda]] ) { if ( [[benda]] != null ) { Assert . hasText ( [[benda]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[benda]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 212 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 193 / 15 / 4 / 212:  21%|██        | 212/1000 [45:14<2:48:10, 12.81s/it][Succeeded / Failed / Skipped / Total] 193 / 15 / 4 / 212:  21%|██▏       | 213/1000 [46:04<2:50:14, 12.98s/it][Succeeded / Failed / Skipped / Total] 194 / 15 / 4 / 213:  21%|██▏       | 213/1000 [46:04<2:50:14, 12.98s/it][Succeeded / Failed / Skipped / Total] 194 / 15 / 4 / 213:  21%|██▏       | 214/1000 [46:47<2:51:51, 13.12s/it][Succeeded / Failed / Skipped / Total] 195 / 15 / 4 / 214:  21%|██▏       | 214/1000 [46:47<2:51:52, 13.12s/it][Succeeded / Failed / Skipped / Total] 195 / 15 / 4 / 214:  22%|██▏       | 215/1000 [46:55<2:51:21, 13.10s/it][Succeeded / Failed / Skipped / Total] 196 / 15 / 4 / 215:  22%|██▏       | 215/1000 [46:55<2:51:21, 13.10s/it][Succeeded / Failed / Skipped / Total] 196 / 15 / 4 / 215:  22%|██▏       | 216/1000 [47:07<2:51:04, 13.09s/it][Succeeded / Failed / Skipped / Total] 197 / 15 / 4 / 216:  22%|██▏       | 216/1000 [47:07<2:51:04, 13.09s/it][Succeeded / Failed / Skipped / Total] 197 / 15 / 4 / 216:  22%|██▏       | 217/1000 [47:15<2:50:32, 13.07s/it][Succeeded / Failed / Skipped / Total] 198 / 15 / 4 / 217:  22%|██▏       | 217/1000 [47:15<2:50:32, 13.07s/it][Succeeded / Failed / Skipped / Total] 198 / 15 / 4 / 217:  22%|██▏       | 218/1000 [47:22<2:49:56, 13.04s/it][Succeeded / Failed / Skipped / Total] 199 / 15 / 4 / 218:  22%|██▏       | 218/1000 [47:22<2:49:56, 13.04s/it][Succeeded / Failed / Skipped / Total] 199 / 15 / 4 / 218:  22%|██▏       | 219/1000 [47:22<2:48:58, 12.98s/it]Determine the target URL . --> Method determineTargetUrl . --> Socre: 1.0

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest request , HttpServletResponse response , Authentication [[authentication]] ) { return determineTargetUrl ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest request , HttpServletResponse response , Authentication [[ee]] ) { return determineTargetUrl ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 213 ---------------------------------------------
Sets the authentication token . --> brakeman method --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[brakeman]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken [[vitality]] ) { [[vitality]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 214 ---------------------------------------------
Determine the target URL . --> returns default targetUrl --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest [[request]] , HttpServletResponse [[response]] ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[unde]] ( HttpServletRequest [[emotionally]] , HttpServletResponse [[reached]] ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 215 ---------------------------------------------
Build the DistinguishedName for the specified group . --> Build the groupDn --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[group]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[attics]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[attics]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 216 ---------------------------------------------
Process the Spring sessions of the SessionAuthenticationStrategy . --> Should only allowableSessions for this principal exceeded --> Socre: 1.0

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry [[registry]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry [[fillmore]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 217 ---------------------------------------------
Copy authentication . --> Recursive blabbing implementation --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[blabbing]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 218 ---------------------------------------------
Write headers . --> commuted method --> Socre: 1.0

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[commuted]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 219 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 199 / 16 / 4 / 219:  22%|██▏       | 219/1000 [47:22<2:48:58, 12.98s/it][Succeeded / Failed / Skipped / Total] 199 / 16 / 4 / 219:  22%|██▏       | 220/1000 [47:30<2:48:25, 12.96s/it][Succeeded / Failed / Skipped / Total] 200 / 16 / 4 / 220:  22%|██▏       | 220/1000 [47:30<2:48:25, 12.96s/it][Succeeded / Failed / Skipped / Total] 200 / 16 / 4 / 220:  22%|██▏       | 221/1000 [47:35<2:47:45, 12.92s/it][Succeeded / Failed / Skipped / Total] 201 / 16 / 4 / 221:  22%|██▏       | 221/1000 [47:35<2:47:45, 12.92s/it][Succeeded / Failed / Skipped / Total] 201 / 16 / 4 / 221:  22%|██▏       | 222/1000 [47:36<2:46:49, 12.87s/it][Succeeded / Failed / Skipped / Total] 202 / 16 / 4 / 222:  22%|██▏       | 222/1000 [47:36<2:46:49, 12.87s/it][Succeeded / Failed / Skipped / Total] 202 / 16 / 4 / 222:  22%|██▏       | 223/1000 [47:45<2:46:24, 12.85s/it][Succeeded / Failed / Skipped / Total] 202 / 17 / 4 / 223:  22%|██▏       | 223/1000 [47:45<2:46:24, 12.85s/it][Succeeded / Failed / Skipped / Total] 202 / 17 / 4 / 223:  22%|██▏       | 224/1000 [47:53<2:45:54, 12.83s/it][Succeeded / Failed / Skipped / Total] 203 / 17 / 4 / 224:  22%|██▏       | 224/1000 [47:53<2:45:54, 12.83s/it][Succeeded / Failed / Skipped / Total] 203 / 17 / 4 / 224:  22%|██▎       | 225/1000 [48:13<2:46:06, 12.86s/it][Succeeded / Failed / Skipped / Total] 204 / 17 / 4 / 225:  22%|██▎       | 225/1000 [48:13<2:46:06, 12.86s/it][Succeeded / Failed / Skipped / Total] 204 / 17 / 4 / 225:  23%|██▎       | 226/1000 [48:32<2:46:14, 12.89s/it][Succeeded / Failed / Skipped / Total] 205 / 17 / 4 / 226:  23%|██▎       | 226/1000 [48:32<2:46:14, 12.89s/it][Succeeded / Failed / Skipped / Total] 205 / 17 / 4 / 226:  23%|██▎       | 227/1000 [49:14<2:47:40, 13.01s/it][Succeeded / Failed / Skipped / Total] 206 / 17 / 4 / 227:  23%|██▎       | 227/1000 [49:14<2:47:40, 13.01s/it][Succeeded / Failed / Skipped / Total] 206 / 17 / 4 / 227:  23%|██▎       | 228/1000 [49:22<2:47:10, 12.99s/it]Creates a list of OpenID attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[garrison]] : idToAttributes . entrySet ( ) ) { if ( [[garrison]] . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return [[garrison]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 220 ---------------------------------------------
Gets the application context . --> Returns the ApplicationContext for the given PageContext --> Socre: 1.0

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext [[pageContext]] ) { ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext [[aztec]] ) { ServletContext servletContext = [[aztec]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 221 ---------------------------------------------
Returns a list of the filters for the specified URL . --> Perform a database filter --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[dozy]] ( String url ) { return [[dozy]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 222 ---------------------------------------------
Gets the security name . --> tsuy Case --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String [[userSecurityName]] = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[tsuyoshi]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String [[intersecting]] = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 223 ---------------------------------------------
Saves the current request . --> [[[FAILED]]]

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[savedRequest]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest request , HttpServletResponse [[cavallo]] ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[chandler]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 224 ---------------------------------------------
Adds all filters . --> Sets the filter list --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > filters ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[borgo]] ( List < Filter > filters ) { Validate . notNull ( [[borgo]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[borgo]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 225 ---------------------------------------------
Updates the cache . --> Set a cruller --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap cache , Object [[key]] , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[cruller]] ( HashMap cache , Object [[forfeited]] , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( [[forfeited]] , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 226 ---------------------------------------------
Get the list of filters from the request . --> Get filters from request --> Socre: 1.0

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[request]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[reroute]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[reroute]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 227 ---------------------------------------------
Create an instance of the NTLMAuth scheme . --> Returns the NTLMAuthScheme for the given password --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String [[userName]] , String password , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( [[userName]] ) ; scheme . setPassword ( password ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String [[paving]] , String password , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( [[paving]] ) ; scheme . setPassword ( password ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 228 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 207 / 17 / 4 / 228:  23%|██▎       | 228/1000 [49:22<2:47:10, 12.99s/it][Succeeded / Failed / Skipped / Total] 208 / 17 / 4 / 229:  23%|██▎       | 229/1000 [49:22<2:46:14, 12.94s/it][Succeeded / Failed / Skipped / Total] 208 / 17 / 4 / 229:  23%|██▎       | 230/1000 [49:22<2:45:18, 12.88s/it][Succeeded / Failed / Skipped / Total] 209 / 17 / 4 / 230:  23%|██▎       | 230/1000 [49:22<2:45:18, 12.88s/it][Succeeded / Failed / Skipped / Total] 210 / 17 / 4 / 231:  23%|██▎       | 231/1000 [49:30<2:44:50, 12.86s/it][Succeeded / Failed / Skipped / Total] 210 / 17 / 4 / 231:  23%|██▎       | 232/1000 [49:40<2:44:26, 12.85s/it][Succeeded / Failed / Skipped / Total] 211 / 17 / 4 / 232:  23%|██▎       | 232/1000 [49:40<2:44:26, 12.85s/it][Succeeded / Failed / Skipped / Total] 211 / 17 / 4 / 232:  23%|██▎       | 233/1000 [49:51<2:44:07, 12.84s/it][Succeeded / Failed / Skipped / Total] 212 / 17 / 4 / 233:  23%|██▎       | 233/1000 [49:51<2:44:07, 12.84s/it][Succeeded / Failed / Skipped / Total] 212 / 17 / 4 / 233:  23%|██▎       | 234/1000 [50:02<2:43:47, 12.83s/it][Succeeded / Failed / Skipped / Total] 213 / 17 / 4 / 234:  23%|██▎       | 234/1000 [50:02<2:43:47, 12.83s/it][Succeeded / Failed / Skipped / Total] 213 / 17 / 4 / 234:  24%|██▎       | 235/1000 [50:11<2:43:24, 12.82s/it][Succeeded / Failed / Skipped / Total] 214 / 17 / 4 / 235:  24%|██▎       | 235/1000 [50:11<2:43:24, 12.82s/it][Succeeded / Failed / Skipped / Total] 214 / 17 / 4 / 235:  24%|██▎       | 236/1000 [50:31<2:43:34, 12.85s/it]Retrieves the list of getWebSphereGroups . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String securityName ) { Context [[ic]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[cajole]] ( final String securityName ) { Context [[trousers]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 229 ---------------------------------------------
Return basic . --> Return the AuthenticationScheme for the user name and password --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme basic ( String userName , String password ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme basic ( String userName , String password ) { final BasicAuthScheme [[czechoslovakia]] = new BasicAuthScheme ( ) ; [[czechoslovakia]] . setUserName ( userName ) ; [[czechoslovakia]] . setPassword ( password ) ; return [[czechoslovakia]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 230 ---------------------------------------------
Creates a basic authentication authentication scheme . --> Return AuthenticationScheme --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme basic ( String [[userName]] , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( [[userName]] ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme basic ( String [[nutrients]] , String password ) { final PreemptiveBasicAuthScheme [[dispose]] = new PreemptiveBasicAuthScheme ( ) ; [[dispose]] . setUserName ( [[nutrients]] ) ; [[dispose]] . setPassword ( password ) ; return [[dispose]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 231 ---------------------------------------------
Create proxy for the given URI . --> F743 --> Socre: 1.0

[[[[Adv]]]]: public static void [[proxy]] ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[soonest]] ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[soonest]] ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 232 ---------------------------------------------
The default charset for this content specification . --> Returns a copy of this EncoderConfig . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[bears]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 233 ---------------------------------------------
Returns the full baseDn for the given dn . --> DistinguishedName detail --> Socre: 1.0

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName [[baseDn]] = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( [[baseDn]] ) ) { return dn ; } [[baseDn]] . append ( dn ) ; return [[baseDn]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[abductors]] ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName [[melted]] = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( [[melted]] ) ) { return dn ; } [[melted]] . append ( dn ) ; return [[melted]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 234 ---------------------------------------------
Add additional filters . --> caprica transformation --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... additionalFilters ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[caprica]] ( Filter [[hoard]] , Filter ... additionalFilters ) { Validate . notNull ( [[hoard]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[hoard]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 235 ---------------------------------------------
Get the JMX config . --> Create an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig logConfig ( LogConfig [[logConfig]] ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig logConfig ( LogConfig [[andersson]] ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 236 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 215 / 17 / 4 / 236:  24%|██▎       | 236/1000 [50:31<2:43:34, 12.85s/it][Succeeded / Failed / Skipped / Total] 215 / 17 / 4 / 236:  24%|██▎       | 237/1000 [50:31<2:42:40, 12.79s/it][Succeeded / Failed / Skipped / Total] 215 / 17 / 5 / 237:  24%|██▎       | 237/1000 [50:31<2:42:40, 12.79s/it][Succeeded / Failed / Skipped / Total] 215 / 17 / 5 / 237:  24%|██▍       | 238/1000 [50:41<2:42:16, 12.78s/it][Succeeded / Failed / Skipped / Total] 216 / 17 / 5 / 238:  24%|██▍       | 238/1000 [50:41<2:42:16, 12.78s/it][Succeeded / Failed / Skipped / Total] 216 / 17 / 5 / 238:  24%|██▍       | 239/1000 [50:43<2:41:31, 12.73s/it][Succeeded / Failed / Skipped / Total] 217 / 17 / 5 / 239:  24%|██▍       | 239/1000 [50:43<2:41:31, 12.73s/it][Succeeded / Failed / Skipped / Total] 217 / 17 / 5 / 239:  24%|██▍       | 240/1000 [50:44<2:40:40, 12.68s/it][Succeeded / Failed / Skipped / Total] 217 / 17 / 6 / 240:  24%|██▍       | 240/1000 [50:44<2:40:40, 12.68s/it][Succeeded / Failed / Skipped / Total] 217 / 17 / 6 / 240:  24%|██▍       | 241/1000 [50:50<2:40:06, 12.66s/it][Succeeded / Failed / Skipped / Total] 218 / 17 / 6 / 241:  24%|██▍       | 241/1000 [50:50<2:40:06, 12.66s/it][Succeeded / Failed / Skipped / Total] 218 / 17 / 6 / 241:  24%|██▍       | 242/1000 [50:50<2:39:15, 12.61s/it][Succeeded / Failed / Skipped / Total] 218 / 17 / 7 / 242:  24%|██▍       | 242/1000 [50:50<2:39:15, 12.61s/it][Succeeded / Failed / Skipped / Total] 218 / 17 / 7 / 242:  24%|██▍       | 243/1000 [50:52<2:38:30, 12.56s/it][Succeeded / Failed / Skipped / Total] 219 / 17 / 7 / 243:  24%|██▍       | 243/1000 [50:52<2:38:30, 12.56s/it][Succeeded / Failed / Skipped / Total] 219 / 17 / 7 / 243:  24%|██▍       | 244/1000 [51:08<2:38:26, 12.57s/it]Sets session attributes . --> Add the specified buying parameter to the request --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . [[sessionAttributes]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[modifications]] ( Map < String , Object > [[buying]] ) { notNull ( [[buying]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[buying]] , this . [[bridgehead]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 237 ---------------------------------------------
Create an instance of RestAssuredMock --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig objectMapperConfig ( ObjectMapperConfig objectMapperConfig ) { notNull ( objectMapperConfig , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 238 ---------------------------------------------
Create an RestAssuredMock config . --> Create an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig jsonConfig ( JsonConfig [[jsonConfig]] ) { notNull ( jsonConfig , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig jsonConfig ( JsonConfig [[sneezes]] ) { notNull ( jsonConfig , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 239 ---------------------------------------------
Redirect configuration . --> Create a new RestAssured configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[russel]] ) { notNull ( [[russel]] , "Redirect config" ) ; return new RestAssuredConfig ( [[russel]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 240 ---------------------------------------------
Returns an instance of RestAssuredMockMvcConfig . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig encoderConfig ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 241 ---------------------------------------------
Get an instance of RestAssuredMockUrls config . --> Create an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig xmlConfig ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sti]] ( XmlConfig xmlConfig ) { notNull ( [[sti]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[sti]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 242 ---------------------------------------------
Create an instance from an AsyncConfig . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig asyncConfig ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 243 ---------------------------------------------
Gets the Jackson config object . --> Returns the JAXBObjectMapperFactory --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory [[saurian]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 244 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 220 / 17 / 7 / 244:  24%|██▍       | 244/1000 [51:08<2:38:26, 12.57s/it][Succeeded / Failed / Skipped / Total] 220 / 17 / 7 / 244:  24%|██▍       | 245/1000 [51:09<2:37:38, 12.53s/it][Succeeded / Failed / Skipped / Total] 221 / 17 / 7 / 245:  24%|██▍       | 245/1000 [51:09<2:37:38, 12.53s/it][Succeeded / Failed / Skipped / Total] 221 / 17 / 7 / 245:  25%|██▍       | 246/1000 [51:10<2:36:50, 12.48s/it][Succeeded / Failed / Skipped / Total] 222 / 17 / 7 / 246:  25%|██▍       | 246/1000 [51:10<2:36:50, 12.48s/it][Succeeded / Failed / Skipped / Total] 222 / 17 / 7 / 246:  25%|██▍       | 247/1000 [51:10<2:36:00, 12.43s/it][Succeeded / Failed / Skipped / Total] 223 / 17 / 7 / 247:  25%|██▍       | 247/1000 [51:10<2:36:00, 12.43s/it][Succeeded / Failed / Skipped / Total] 223 / 17 / 7 / 247:  25%|██▍       | 248/1000 [51:18<2:35:33, 12.41s/it][Succeeded / Failed / Skipped / Total] 224 / 17 / 7 / 248:  25%|██▍       | 248/1000 [51:18<2:35:33, 12.41s/it][Succeeded / Failed / Skipped / Total] 224 / 17 / 7 / 248:  25%|██▍       | 249/1000 [51:19<2:34:47, 12.37s/it][Succeeded / Failed / Skipped / Total] 225 / 17 / 7 / 249:  25%|██▍       | 249/1000 [51:19<2:34:47, 12.37s/it][Succeeded / Failed / Skipped / Total] 225 / 17 / 7 / 249:  25%|██▌       | 250/1000 [51:20<2:34:01, 12.32s/it][Succeeded / Failed / Skipped / Total] 226 / 17 / 7 / 250:  25%|██▌       | 250/1000 [51:20<2:34:01, 12.32s/it][Succeeded / Failed / Skipped / Total] 226 / 17 / 7 / 250:  25%|██▌       | 251/1000 [51:20<2:33:12, 12.27s/it]Returns an RestAssuredMock config for the given MultiPartConfig . --> Get an abused instance . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig multiPartConfig ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[abused]] ( MultiPartConfig multiPartConfig ) { notNull ( [[abused]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[abused]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 245 ---------------------------------------------
Create an empty RestAssuredMock config --> Get an error copy . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig headerConfig ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[armenian]] ( HeaderConfig headerConfig ) { notNull ( [[armenian]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[armenian]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 246 ---------------------------------------------
Get a RestAssuredMock config . --> Create an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig [[sessionConfig]] ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig [[johansson]] ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 247 ---------------------------------------------
Returns the default Jackson config . --> This method initializes defaultObjectMapperType --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType [[granddaughters]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 248 ---------------------------------------------
Get the mock config . --> Create an instance of RestAssuredMock . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[essentials]] ( MockMvcParamConfig paramConfig ) { notNull ( [[essentials]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[essentials]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 249 ---------------------------------------------
Gets the JMX config . --> Create an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig [[mockMvcConfig]] ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig [[arrests]] ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 250 ---------------------------------------------
Get the mock matcher config . --> Create an instance of RestAssuredMock libs --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[antisocial]] ( MatcherConfig matcherConfig ) { notNull ( [[antisocial]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[antisocial]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 251 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 227 / 17 / 7 / 251:  25%|██▌       | 251/1000 [51:20<2:33:12, 12.27s/it][Succeeded / Failed / Skipped / Total] 227 / 17 / 7 / 251:  25%|██▌       | 252/1000 [51:28<2:32:47, 12.26s/it][Succeeded / Failed / Skipped / Total] 228 / 17 / 7 / 252:  25%|██▌       | 252/1000 [51:28<2:32:47, 12.26s/it][Succeeded / Failed / Skipped / Total] 228 / 17 / 7 / 252:  25%|██▌       | 253/1000 [51:36<2:32:22, 12.24s/it][Succeeded / Failed / Skipped / Total] 229 / 17 / 7 / 253:  25%|██▌       | 253/1000 [51:36<2:32:22, 12.24s/it][Succeeded / Failed / Skipped / Total] 229 / 17 / 7 / 253:  25%|██▌       | 254/1000 [51:41<2:31:49, 12.21s/it][Succeeded / Failed / Skipped / Total] 230 / 17 / 7 / 254:  25%|██▌       | 254/1000 [51:41<2:31:49, 12.21s/it][Succeeded / Failed / Skipped / Total] 230 / 17 / 7 / 254:  26%|██▌       | 255/1000 [51:48<2:31:22, 12.19s/it][Succeeded / Failed / Skipped / Total] 231 / 17 / 7 / 255:  26%|██▌       | 255/1000 [51:48<2:31:22, 12.19s/it][Succeeded / Failed / Skipped / Total] 231 / 17 / 7 / 255:  26%|██▌       | 256/1000 [51:48<2:30:35, 12.14s/it][Succeeded / Failed / Skipped / Total] 231 / 17 / 8 / 256:  26%|██▌       | 256/1000 [51:48<2:30:35, 12.14s/it][Succeeded / Failed / Skipped / Total] 231 / 17 / 8 / 256:  26%|██▌       | 257/1000 [51:57<2:30:13, 12.13s/it]Declares the namespaces . --> Create a new XmlPathConfig instance --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[backbone]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 252 ---------------------------------------------
Creates a new CertificateAuthSettings for all hosts . --> Create a new certificate setting --> Socre: 1.0

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[dubai]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 253 ---------------------------------------------
Get the declared namespace . --> Returns the XmlPathConfig for the prefix --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[erred]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 254 ---------------------------------------------
Print response . --> Convenience method for debugging . --> Socre: 1.0

[[[[Adv]]]]: public static String print ( ResponseOptions responseOptions , ResponseBody [[responseBody]] , PrintStream [[stream]] , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , [[responseBody]] ) ; } else { responseBodyToAppend = [[responseBody]] . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; [[stream]] . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String print ( ResponseOptions responseOptions , ResponseBody [[fireball]] , PrintStream [[navigation]] , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , [[fireball]] ) ; } else { responseBodyToAppend = [[fireball]] . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; [[navigation]] . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 255 ---------------------------------------------
Adds basic authentication . --> Create a basic request --> Socre: 1.0

[[[[Adv]]]]: public void basic ( String host , int port , String [[user]] , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( [[user]] , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void basic ( String host , int port , String [[busted]] , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( [[busted]] , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 256 ---------------------------------------------
Generates a NTCredentials --> [[[SKIPPED]]]

[[[[Adv]]]]: public void ntlm ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 257 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 231 / 18 / 8 / 257:  26%|██▌       | 257/1000 [51:57<2:30:13, 12.13s/it][Succeeded / Failed / Skipped / Total] 231 / 18 / 8 / 257:  26%|██▌       | 258/1000 [52:08<2:29:58, 12.13s/it][Succeeded / Failed / Skipped / Total] 232 / 18 / 8 / 258:  26%|██▌       | 258/1000 [52:08<2:29:58, 12.13s/it][Succeeded / Failed / Skipped / Total] 232 / 18 / 8 / 258:  26%|██▌       | 259/1000 [52:09<2:29:12, 12.08s/it][Succeeded / Failed / Skipped / Total] 232 / 18 / 9 / 259:  26%|██▌       | 259/1000 [52:09<2:29:12, 12.08s/it][Succeeded / Failed / Skipped / Total] 232 / 18 / 9 / 259:  26%|██▌       | 260/1000 [52:32<2:29:33, 12.13s/it][Succeeded / Failed / Skipped / Total] 233 / 18 / 9 / 260:  26%|██▌       | 260/1000 [52:32<2:29:33, 12.13s/it][Succeeded / Failed / Skipped / Total] 233 / 18 / 9 / 260:  26%|██▌       | 261/1000 [53:24<2:31:12, 12.28s/it][Succeeded / Failed / Skipped / Total] 234 / 18 / 9 / 261:  26%|██▌       | 261/1000 [53:24<2:31:12, 12.28s/it][Succeeded / Failed / Skipped / Total] 234 / 18 / 9 / 261:  26%|██▌       | 262/1000 [53:30<2:30:43, 12.25s/it][Succeeded / Failed / Skipped / Total] 235 / 18 / 9 / 262:  26%|██▌       | 262/1000 [53:30<2:30:43, 12.25s/it][Succeeded / Failed / Skipped / Total] 235 / 18 / 9 / 262:  26%|██▋       | 263/1000 [53:57<2:31:13, 12.31s/it][Succeeded / Failed / Skipped / Total] 236 / 18 / 9 / 263:  26%|██▋       | 263/1000 [53:57<2:31:13, 12.31s/it][Succeeded / Failed / Skipped / Total] 236 / 18 / 9 / 263:  26%|██▋       | 264/1000 [54:30<2:31:58, 12.39s/it][Succeeded / Failed / Skipped / Total] 237 / 18 / 9 / 264:  26%|██▋       | 264/1000 [54:30<2:31:58, 12.39s/it][Succeeded / Failed / Skipped / Total] 237 / 18 / 9 / 264:  26%|██▋       | 265/1000 [54:45<2:31:52, 12.40s/it]Changes the password of the user . --> [[[FAILED]]]

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 258 ---------------------------------------------
Reset the internal state . --> Clears the request --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[brogan]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 259 ---------------------------------------------
Sets response headers . --> [[[SKIPPED]]]

[[[[Adv]]]]: public ResponseBuilder setHeader ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 260 ---------------------------------------------
Constructs the scheme for the given user and password . --> Create a new AuthenticationScheme instance --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String [[userName]] , String [[password]] , FormAuthConfig config ) { if ( [[userName]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[password]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( [[userName]] ) ; scheme . setPassword ( [[password]] ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[tentacle]] ( String [[kundan]] , String [[galaxy]] , FormAuthConfig config ) { if ( [[kundan]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[galaxy]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( [[kundan]] ) ; scheme . setPassword ( [[galaxy]] ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 261 ---------------------------------------------
Set a header value . --> Set the Pearator --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String name , String [[value]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[demonstrator]] ( String name , String [[tutankhamen]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[tutankhamen]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 262 ---------------------------------------------
Builds the response . --> Create new status code . --> Socre: 1.0

[[[[Adv]]]]: public Response build ( ) { final int [[statusCode]] = restAssuredResponse . statusCode ( ) ; if ( [[statusCode]] < 100 || [[statusCode]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[statusCode]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response build ( ) { final int [[с]] = restAssuredResponse . statusCode ( ) ; if ( [[с]] < 100 || [[с]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[с]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 263 ---------------------------------------------
Matches a cookieMatcher . --> Generates a Detailed cookieMatcher for the given kidstuff --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > [[kidstuff]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[kidstuff]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 264 ---------------------------------------------
Matches a expiry date matcher . --> Fuegt ein --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > [[fitts]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[fitts]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
[Succeeded / Failed / Skipped / Total] 238 / 18 / 9 / 265:  26%|██▋       | 265/1000 [54:45<2:31:52, 12.40s/it][Succeeded / Failed / Skipped / Total] 238 / 18 / 9 / 265:  27%|██▋       | 266/1000 [54:57<2:31:39, 12.40s/it][Succeeded / Failed / Skipped / Total] 239 / 18 / 9 / 266:  27%|██▋       | 266/1000 [54:57<2:31:39, 12.40s/it][Succeeded / Failed / Skipped / Total] 239 / 18 / 9 / 266:  27%|██▋       | 267/1000 [55:01<2:31:03, 12.36s/it][Succeeded / Failed / Skipped / Total] 240 / 18 / 9 / 267:  27%|██▋       | 267/1000 [55:01<2:31:03, 12.36s/it][Succeeded / Failed / Skipped / Total] 240 / 18 / 9 / 267:  27%|██▋       | 268/1000 [55:12<2:30:48, 12.36s/it][Succeeded / Failed / Skipped / Total] 241 / 18 / 9 / 268:  27%|██▋       | 268/1000 [55:12<2:30:48, 12.36s/it][Succeeded / Failed / Skipped / Total] 241 / 18 / 9 / 268:  27%|██▋       | 269/1000 [55:15<2:30:10, 12.33s/it][Succeeded / Failed / Skipped / Total] 242 / 18 / 9 / 269:  27%|██▋       | 269/1000 [55:15<2:30:10, 12.33s/it][Succeeded / Failed / Skipped / Total] 243 / 18 / 9 / 270:  27%|██▋       | 270/1000 [55:15<2:29:25, 12.28s/it][Succeeded / Failed / Skipped / Total] 243 / 18 / 9 / 270:  27%|██▋       | 271/1000 [55:25<2:29:05, 12.27s/it][Succeeded / Failed / Skipped / Total] 244 / 18 / 9 / 271:  27%|██▋       | 271/1000 [55:25<2:29:05, 12.27s/it][Succeeded / Failed / Skipped / Total] 245 / 18 / 9 / 272:  27%|██▋       | 272/1000 [55:26<2:28:22, 12.23s/it][Succeeded / Failed / Skipped / Total] 245 / 18 / 9 / 272:  27%|██▋       | 273/1000 [55:26<2:27:38, 12.19s/it][Succeeded / Failed / Skipped / Total] 246 / 18 / 9 / 273:  27%|██▋       | 273/1000 [55:26<2:27:38, 12.19s/it]--------------------------------------------- Result 265 ---------------------------------------------
Returns a cookie matcher that matches the given domain matcher . --> DetailedMatcher for DetailedCookieMatcher --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[fortnight]] ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 266 ---------------------------------------------
Matches if securedMatcher is true . --> F743 - --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > [[ét]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[ét]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 267 ---------------------------------------------
Returns a DetailedCookieMatcher for the given value matcher . --> DetailedMatcher for a DetailedCookieMatcher --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[oude]] ( Matcher < ? super String > [[serendipity]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[serendipity]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Matches a given path matcher . --> Helper method for creating a DetailedCookieMatcher --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > pathMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , pathMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[grandmas]] ( Matcher < ? super String > pathMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , pathMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Returns a list with the given versionMatcher . --> F743 - F743 - F --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher version ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher version ( Matcher < ? super Integer > [[agronomist]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[agronomist]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Sets the proxy . --> Method housea --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int port , String [[scheme]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[scheme]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[houseguest]] ( String host , int port , String [[qureshi]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[qureshi]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 271 ---------------------------------------------
Sets the max age matcher if it exists . --> DetailedCookieMatcher with maggy --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher maxAge ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher maxAge ( Matcher < ? super Integer > [[maggy]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maggy]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Set the default request headers . --> tariq --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object [[val]] = headers . get ( key ) ; if ( [[val]] == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , [[val]] . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[tariq]] ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object [[bionic]] = headers . get ( key ) ; if ( [[bionic]] == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , [[bionic]] . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 273 ---------------------------------------------
Matches a list of httpOnly variables that are provided by the user . --> DetailedCookieMatcher for a given user --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > [[shtick]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[shtick]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 247 / 18 / 9 / 274:  27%|██▋       | 274/1000 [55:32<2:27:11, 12.16s/it][Succeeded / Failed / Skipped / Total] 247 / 18 / 9 / 274:  28%|██▊       | 275/1000 [55:35<2:26:32, 12.13s/it][Succeeded / Failed / Skipped / Total] 248 / 18 / 9 / 275:  28%|██▊       | 275/1000 [55:35<2:26:32, 12.13s/it][Succeeded / Failed / Skipped / Total] 249 / 18 / 9 / 276:  28%|██▊       | 276/1000 [55:38<2:25:58, 12.10s/it][Succeeded / Failed / Skipped / Total] 249 / 18 / 9 / 276:  28%|██▊       | 277/1000 [55:47<2:25:36, 12.08s/it][Succeeded / Failed / Skipped / Total] 250 / 18 / 9 / 277:  28%|██▊       | 277/1000 [55:47<2:25:36, 12.08s/it][Succeeded / Failed / Skipped / Total] 250 / 18 / 9 / 277:  28%|██▊       | 278/1000 [56:06<2:25:42, 12.11s/it][Succeeded / Failed / Skipped / Total] 251 / 18 / 9 / 278:  28%|██▊       | 278/1000 [56:06<2:25:42, 12.11s/it][Succeeded / Failed / Skipped / Total] 251 / 18 / 9 / 278:  28%|██▊       | 279/1000 [56:15<2:25:23, 12.10s/it][Succeeded / Failed / Skipped / Total] 252 / 18 / 9 / 279:  28%|██▊       | 279/1000 [56:15<2:25:23, 12.10s/it][Succeeded / Failed / Skipped / Total] 252 / 18 / 9 / 279:  28%|██▊       | 280/1000 [56:20<2:24:51, 12.07s/it][Succeeded / Failed / Skipped / Total] 253 / 18 / 9 / 280:  28%|██▊       | 280/1000 [56:20<2:24:51, 12.07s/it][Succeeded / Failed / Skipped / Total] 253 / 18 / 9 / 280:  28%|██▊       | 281/1000 [56:22<2:24:15, 12.04s/it][Succeeded / Failed / Skipped / Total] 254 / 18 / 9 / 281:  28%|██▊       | 281/1000 [56:22<2:24:15, 12.04s/it][Succeeded / Failed / Skipped / Total] 254 / 18 / 9 / 281:  28%|██▊       | 282/1000 [56:52<2:24:48, 12.10s/it][Succeeded / Failed / Skipped / Total] 255 / 18 / 9 / 282:  28%|██▊       | 282/1000 [56:52<2:24:48, 12.10s/it][Succeeded / Failed / Skipped / Total] 255 / 18 / 9 / 282:  28%|██▊       | 283/1000 [56:53<2:24:07, 12.06s/it]Executes request . --> Requests a specified method --> Socre: 1.0

[[[[Adv]]]]: public Object request ( String method , boolean [[hasBody]] , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . [[defaultURI]] . toURI ( ) , method , this . [[defaultContentType]] , [[hasBody]] , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object request ( String method , boolean [[gul]] , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . [[gloucestershire]] . toURI ( ) , method , this . [[cannibalistic]] , [[gul]] , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 275 ---------------------------------------------
Returns a new JsonPathConfig . --> Create new JsonPathConfig object --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[geezer]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[geezer]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 276 ---------------------------------------------
Returns a new Proxy specification with the given host name . --> Create a new ProxySpecification instance --> Socre: 1.0

[[[[Adv]]]]: public ProxySpecification withHost ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification withHost ( String [[akshay]] ) { return new ProxySpecification ( [[akshay]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 277 ---------------------------------------------
Enable logging of request --> Enables a logDetail . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "[[Tangy]]" == "[[Tangy]]" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 278 ---------------------------------------------
Add additional headers . --> zod for given header --> Socre: 1.0

[[[[Adv]]]]: public static Headers [[headers]] ( Header header , Header ... [[additionalHeaders]] ) { notNull ( header , "Header" ) ; final List < Header > [[headerList]] = new LinkedList < Header > ( ) ; [[headerList]] . add ( header ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( [[headerList]] , [[additionalHeaders]] ) ; } return new Headers ( [[headerList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[zod]] ( Header header , Header ... [[wiring]] ) { notNull ( header , "Header" ) ; final List < Header > [[dien]] = new LinkedList < Header > ( ) ; [[dien]] . add ( header ) ; if ( [[wiring]] != null ) { Collections . addAll ( [[dien]] , [[wiring]] ) ; } return new Headers ( [[dien]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 279 ---------------------------------------------
Sets the defaultBoundary property . --> Returns a new MultiPartConfig object --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[nili]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[nili]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 280 ---------------------------------------------
Sets the control name . --> Set controlName --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder controlName ( String [[controlName]] ) { Validate . notEmpty ( controlName , "Control name cannot be empty" ) ; this . [[controlName]] = controlName ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder controlName ( String [[buying]] ) { Validate . notEmpty ( controlName , "Control name cannot be empty" ) ; this . [[whiskers]] = controlName ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 281 ---------------------------------------------
Adds a request parameter to the request . --> Sets the values for cupboards . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[cupboards]] ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 282 ---------------------------------------------
Expects an HTTP header . --> transit method --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String expectedValue ) { spec . header ( [[headerName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[transit]] ( String [[midway]] , String expectedValue ) { spec . header ( [[midway]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 283 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 256 / 18 / 9 / 283:  28%|██▊       | 283/1000 [56:53<2:24:07, 12.06s/it][Succeeded / Failed / Skipped / Total] 256 / 18 / 9 / 283:  28%|██▊       | 284/1000 [56:55<2:23:29, 12.02s/it][Succeeded / Failed / Skipped / Total] 257 / 18 / 9 / 284:  28%|██▊       | 284/1000 [56:55<2:23:29, 12.02s/it][Succeeded / Failed / Skipped / Total] 257 / 18 / 9 / 284:  28%|██▊       | 285/1000 [56:55<2:22:49, 11.99s/it][Succeeded / Failed / Skipped / Total] 258 / 18 / 9 / 285:  28%|██▊       | 285/1000 [56:55<2:22:49, 11.99s/it][Succeeded / Failed / Skipped / Total] 258 / 18 / 9 / 285:  29%|██▊       | 286/1000 [56:58<2:22:14, 11.95s/it][Succeeded / Failed / Skipped / Total] 259 / 18 / 9 / 286:  29%|██▊       | 286/1000 [56:58<2:22:15, 11.95s/it][Succeeded / Failed / Skipped / Total] 259 / 18 / 9 / 286:  29%|██▊       | 287/1000 [57:02<2:21:42, 11.92s/it][Succeeded / Failed / Skipped / Total] 260 / 18 / 9 / 287:  29%|██▊       | 287/1000 [57:02<2:21:42, 11.92s/it][Succeeded / Failed / Skipped / Total] 260 / 18 / 9 / 287:  29%|██▉       | 288/1000 [57:07<2:21:13, 11.90s/it][Succeeded / Failed / Skipped / Total] 261 / 18 / 9 / 288:  29%|██▉       | 288/1000 [57:07<2:21:13, 11.90s/it][Succeeded / Failed / Skipped / Total] 261 / 18 / 9 / 288:  29%|██▉       | 289/1000 [57:09<2:20:38, 11.87s/it][Succeeded / Failed / Skipped / Total] 262 / 18 / 9 / 289:  29%|██▉       | 289/1000 [57:09<2:20:38, 11.87s/it][Succeeded / Failed / Skipped / Total] 262 / 18 / 9 / 289:  29%|██▉       | 290/1000 [57:22<2:20:27, 11.87s/it][Succeeded / Failed / Skipped / Total] 263 / 18 / 9 / 290:  29%|██▉       | 290/1000 [57:22<2:20:27, 11.87s/it][Succeeded / Failed / Skipped / Total] 263 / 18 / 9 / 290:  29%|██▉       | 291/1000 [57:22<2:19:48, 11.83s/it][Succeeded / Failed / Skipped / Total] 264 / 18 / 9 / 291:  29%|██▉       | 291/1000 [57:22<2:19:48, 11.83s/it][Succeeded / Failed / Skipped / Total] 264 / 18 / 9 / 291:  29%|██▉       | 292/1000 [57:32<2:19:32, 11.82s/it][Succeeded / Failed / Skipped / Total] 265 / 18 / 9 / 292:  29%|██▉       | 292/1000 [57:32<2:19:32, 11.82s/it][Succeeded / Failed / Skipped / Total] 265 / 18 / 9 / 292:  29%|██▉       | 293/1000 [57:32<2:18:51, 11.78s/it]Create HTTP request . --> Create a new HttpRequestBase --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String [[method]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[method]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String [[remodeling]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[remodeling]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 284 ---------------------------------------------
Returns the default parser type . --> Create a new JsonPathConfig object --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[gourds]] ( JsonParserType [[franco]] ) { return new JsonPathConfig ( numberReturnType , [[gourds]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 285 ---------------------------------------------
Gets the named header . --> Add additional headers --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String [[headerName]] , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( [[headerName]] , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String [[beth]] , Matcher < String > [[streetwalkers]] ) { spec . header ( [[beth]] , [[streetwalkers]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 286 ---------------------------------------------
Adds result handlers . --> Adds resultHandlers to the request . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler resultHandler , ResultHandler ... [[additionalResultHandlers]] ) { spec . resultHandlers ( resultHandler , [[additionalResultHandlers]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler resultHandler , ResultHandler ... [[luisa]] ) { spec . resultHandlers ( resultHandler , [[luisa]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 287 ---------------------------------------------
Create a new HTTP parameters . --> Create a new HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( this . httpClientParams ) ; [[newParams]] . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > [[lourdes]] = new HashMap < String , Object > ( this . httpClientParams ) ; [[lourdes]] . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , [[lourdes]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 288 ---------------------------------------------
HttpMultipart mode . --> Returns a new config instance --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[purview]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[purview]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 289 ---------------------------------------------
Adds a multi part request . --> Set control name and content body --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[bunco]] ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 290 ---------------------------------------------
Sets expect cookie . --> Set phar UUID --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String [[cookieName]] , String [[expectedValue]] ) { spec . cookie ( [[cookieName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String [[pharaoh]] , String [[jodido]] ) { spec . cookie ( [[pharaoh]] , [[jodido]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 291 ---------------------------------------------
Returns the integer value of the given path . --> Cheney a string --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[cheney]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 292 ---------------------------------------------
Add a header value to the request . --> Set gar field value . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String headerValue ) { spec . header ( [[headerName]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[garfield]] ( String [[gry]] , String headerValue ) { spec . header ( [[gry]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 293 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 266 / 18 / 9 / 293:  29%|██▉       | 293/1000 [57:32<2:18:51, 11.78s/it][Succeeded / Failed / Skipped / Total] 266 / 18 / 9 / 293:  29%|██▉       | 294/1000 [57:49<2:18:51, 11.80s/it][Succeeded / Failed / Skipped / Total] 267 / 18 / 9 / 294:  29%|██▉       | 294/1000 [57:49<2:18:51, 11.80s/it][Succeeded / Failed / Skipped / Total] 267 / 18 / 9 / 294:  30%|██▉       | 295/1000 [58:43<2:20:20, 11.94s/it][Succeeded / Failed / Skipped / Total] 268 / 18 / 9 / 295:  30%|██▉       | 295/1000 [58:43<2:20:20, 11.94s/it][Succeeded / Failed / Skipped / Total] 268 / 18 / 9 / 295:  30%|██▉       | 296/1000 [58:50<2:19:57, 11.93s/it][Succeeded / Failed / Skipped / Total] 269 / 18 / 9 / 296:  30%|██▉       | 296/1000 [58:50<2:19:57, 11.93s/it][Succeeded / Failed / Skipped / Total] 269 / 18 / 9 / 296:  30%|██▉       | 297/1000 [59:12<2:20:08, 11.96s/it][Succeeded / Failed / Skipped / Total] 270 / 18 / 9 / 297:  30%|██▉       | 297/1000 [59:12<2:20:08, 11.96s/it][Succeeded / Failed / Skipped / Total] 270 / 18 / 9 / 297:  30%|██▉       | 298/1000 [59:20<2:19:47, 11.95s/it][Succeeded / Failed / Skipped / Total] 271 / 18 / 9 / 298:  30%|██▉       | 298/1000 [59:20<2:19:47, 11.95s/it][Succeeded / Failed / Skipped / Total] 271 / 18 / 9 / 298:  30%|██▉       | 299/1000 [59:29<2:19:27, 11.94s/it][Succeeded / Failed / Skipped / Total] 272 / 18 / 9 / 299:  30%|██▉       | 299/1000 [59:29<2:19:27, 11.94s/it][Succeeded / Failed / Skipped / Total] 272 / 18 / 9 / 299:  30%|███       | 300/1000 [59:55<2:19:49, 11.99s/it][Succeeded / Failed / Skipped / Total] 273 / 18 / 9 / 300:  30%|███       | 300/1000 [59:55<2:19:49, 11.99s/it][Succeeded / Failed / Skipped / Total] 273 / 18 / 9 / 300:  30%|███       | 301/1000 [1:00:12<2:19:49, 12.00s/it][Succeeded / Failed / Skipped / Total] 274 / 18 / 9 / 301:  30%|███       | 301/1000 [1:00:12<2:19:49, 12.00s/it][Succeeded / Failed / Skipped / Total] 274 / 18 / 9 / 301:  30%|███       | 302/1000 [1:00:15<2:19:17, 11.97s/it][Succeeded / Failed / Skipped / Total] 275 / 18 / 9 / 302:  30%|███       | 302/1000 [1:00:15<2:19:17, 11.97s/it][Succeeded / Failed / Skipped / Total] 275 / 18 / 9 / 302:  30%|███       | 303/1000 [1:00:21<2:18:50, 11.95s/it][Succeeded / Failed / Skipped / Total] 276 / 18 / 9 / 303:  30%|███       | 303/1000 [1:00:21<2:18:50, 11.95s/it][Succeeded / Failed / Skipped / Total] 276 / 18 / 9 / 303:  30%|███       | 304/1000 [1:00:29<2:18:30, 11.94s/it]Returns the byte at the given path . --> Used for testing --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[deliveryman]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 294 ---------------------------------------------
Creates a default LogConfig . --> pineapple Method --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[pineapple]] ( PrintStream [[outdated]] ) { return new LogConfig ( [[outdated]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 295 ---------------------------------------------
Gets short . --> Return berlitz --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[chuo]] ( String [[berlitz]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 296 ---------------------------------------------
Returns the long at the given path . --> Getter for stiffy --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[stiffy]] ( String [[derail]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 297 ---------------------------------------------
Returns the value of the given path . --> tatiana from string --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) [[jsonAssertion]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[tatiana]] > [[tatiana]] get ( String path ) { final JSONAssertion [[segovia]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[tatiana]] ) [[segovia]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 298 ---------------------------------------------
Set the body of the spec . --> Set marquee Method --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[marquee]] ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 299 ---------------------------------------------
Get a double . --> drescher --> Socre: 1.0

[[[[Adv]]]]: public double [[getDouble]] ( String path ) { final Object [[value]] = get ( path ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[drescher]] ( String path ) { final Object [[putty]] = get ( path ) ; if ( [[putty]] instanceof Double ) { return ( Double ) [[putty]] ; } return ObjectConverter . convertObjectTo ( [[putty]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 300 ---------------------------------------------
Returns a new HttpClientConfig instance --> Merrying HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[ferrying]] ( HttpClientFactory [[keiichi]] ) { return new HttpClientConfig ( [[ferrying]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 301 ---------------------------------------------
Gets a map . --> Gets backbone --> Socre: 1.0

[[[[Adv]]]]: public < K , V > Map < K , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < K , V > Map < K , V > [[backbone]] ( String [[tony]] ) { return get ( [[tony]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 302 ---------------------------------------------
Add cookie . --> Set longish --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[key]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[longish]] ( String [[masuda]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[masuda]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 303 ---------------------------------------------
Retrieve an object from the path --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object [[object]] = getFromPath ( path , "[[False]]" != "[[False]]" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object [[graveyards]] = getFromPath ( path , "[[Valjean]]" != "[[Valjean]]" ) ; return getObjectAsType ( [[graveyards]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 304 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 277 / 18 / 9 / 304:  30%|███       | 304/1000 [1:00:29<2:18:30, 11.94s/it][Succeeded / Failed / Skipped / Total] 277 / 18 / 9 / 304:  30%|███       | 305/1000 [1:00:37<2:18:08, 11.93s/it][Succeeded / Failed / Skipped / Total] 278 / 18 / 9 / 305:  30%|███       | 305/1000 [1:00:37<2:18:08, 11.93s/it][Succeeded / Failed / Skipped / Total] 278 / 18 / 9 / 305:  31%|███       | 306/1000 [1:00:39<2:17:34, 11.89s/it][Succeeded / Failed / Skipped / Total] 278 / 19 / 9 / 306:  31%|███       | 306/1000 [1:00:39<2:17:34, 11.89s/it][Succeeded / Failed / Skipped / Total] 278 / 19 / 9 / 306:  31%|███       | 307/1000 [1:01:08<2:17:59, 11.95s/it][Succeeded / Failed / Skipped / Total] 279 / 19 / 9 / 307:  31%|███       | 307/1000 [1:01:08<2:17:59, 11.95s/it][Succeeded / Failed / Skipped / Total] 279 / 19 / 9 / 307:  31%|███       | 308/1000 [1:01:10<2:17:27, 11.92s/it][Succeeded / Failed / Skipped / Total] 279 / 20 / 9 / 308:  31%|███       | 308/1000 [1:01:10<2:17:27, 11.92s/it][Succeeded / Failed / Skipped / Total] 279 / 20 / 9 / 308:  31%|███       | 309/1000 [1:01:12<2:16:51, 11.88s/it][Succeeded / Failed / Skipped / Total] 280 / 20 / 9 / 309:  31%|███       | 309/1000 [1:01:12<2:16:51, 11.88s/it][Succeeded / Failed / Skipped / Total] 281 / 20 / 9 / 310:  31%|███       | 310/1000 [1:01:12<2:16:13, 11.85s/it][Succeeded / Failed / Skipped / Total] 281 / 20 / 9 / 310:  31%|███       | 311/1000 [1:01:33<2:16:23, 11.88s/it][Succeeded / Failed / Skipped / Total] 282 / 20 / 9 / 311:  31%|███       | 311/1000 [1:01:33<2:16:23, 11.88s/it][Succeeded / Failed / Skipped / Total] 282 / 20 / 9 / 311:  31%|███       | 312/1000 [1:01:38<2:15:56, 11.85s/it][Succeeded / Failed / Skipped / Total] 283 / 20 / 9 / 312:  31%|███       | 312/1000 [1:01:38<2:15:56, 11.85s/it][Succeeded / Failed / Skipped / Total] 283 / 20 / 9 / 312:  31%|███▏      | 313/1000 [1:01:53<2:15:50, 11.86s/it]Create a mock with parameters appropriate update strategy . --> Create a new Mock falls param config --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig formParamsUpdateStrategy ( UpdateStrategy [[updateStrategy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[updateStrategy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig formParamsUpdateStrategy ( UpdateStrategy [[died]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[died]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 305 ---------------------------------------------
Create a new cookies . --> zhu cookie --> Socre: 1.0

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[zhuo]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 306 ---------------------------------------------
Gets the value of the property . --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String path ) { final Object [[value]] = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[chinks]] ( String path ) { final Object [[asunder]] = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 307 ---------------------------------------------
Removes the source and source map from the map . --> Clean up all keys and sources --> Socre: 1.0

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[keyAndSource]] : keysAndSources ) { Multiset < Object > set = backingMap . get ( [[keyAndSource]] . key ) ; if ( set != null ) { set . remove ( [[keyAndSource]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[keyAndSource]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[lovelier]] : keysAndSources ) { Multiset < Object > set = backingMap . get ( [[lovelier]] . key ) ; if ( set != null ) { set . remove ( [[lovelier]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[lovelier]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 308 ---------------------------------------------
Adds a parameter to the config . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[ideologically]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[toffees]] = new HashMap < String , Object > ( httpClientParams ) ; [[toffees]] . put ( parameterName , parameterValue ) ; return new [[ideologically]] ( httpClientFactory , [[toffees]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 309 ---------------------------------------------
Adds a parameter to the request . --> Acknowledged operation --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Collection < ? > [[parameterValues]] ) { spec . param ( parameterName , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[acknowledged]] ( String parameterName , Collection < ? > [[gimp]] ) { spec . param ( parameterName , [[gimp]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 310 ---------------------------------------------
Create a ResponseLogging filter for the given matcher . --> log response toIfMatches --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[stream]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[stream]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[hiroshima]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[hiroshima]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 311 ---------------------------------------------
Remove a binding . --> utility methods --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[utility]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 312 ---------------------------------------------
Adds a parameter . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Object ... [[parameterValues]] ) { spec . param ( parameterName , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[ct]] ( String parameterName , Object ... [[catchin]] ) { spec . param ( parameterName , [[catchin]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 313 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 20 / 9 / 313:  31%|███▏      | 313/1000 [1:01:53<2:15:50, 11.86s/it][Succeeded / Failed / Skipped / Total] 284 / 20 / 9 / 313:  31%|███▏      | 314/1000 [1:01:54<2:15:15, 11.83s/it][Succeeded / Failed / Skipped / Total] 285 / 20 / 9 / 314:  31%|███▏      | 314/1000 [1:01:54<2:15:15, 11.83s/it][Succeeded / Failed / Skipped / Total] 285 / 20 / 9 / 314:  32%|███▏      | 315/1000 [1:02:18<2:15:30, 11.87s/it][Succeeded / Failed / Skipped / Total] 286 / 20 / 9 / 315:  32%|███▏      | 315/1000 [1:02:18<2:15:30, 11.87s/it][Succeeded / Failed / Skipped / Total] 286 / 20 / 9 / 315:  32%|███▏      | 316/1000 [1:02:40<2:15:38, 11.90s/it][Succeeded / Failed / Skipped / Total] 287 / 20 / 9 / 316:  32%|███▏      | 316/1000 [1:02:40<2:15:38, 11.90s/it][Succeeded / Failed / Skipped / Total] 287 / 20 / 9 / 316:  32%|███▏      | 317/1000 [1:02:57<2:15:39, 11.92s/it][Succeeded / Failed / Skipped / Total] 287 / 21 / 9 / 317:  32%|███▏      | 317/1000 [1:02:57<2:15:39, 11.92s/it][Succeeded / Failed / Skipped / Total] 287 / 21 / 9 / 317:  32%|███▏      | 318/1000 [1:03:01<2:15:09, 11.89s/it][Succeeded / Failed / Skipped / Total] 288 / 21 / 9 / 318:  32%|███▏      | 318/1000 [1:03:01<2:15:09, 11.89s/it][Succeeded / Failed / Skipped / Total] 288 / 21 / 9 / 318:  32%|███▏      | 319/1000 [1:03:04<2:14:39, 11.86s/it][Succeeded / Failed / Skipped / Total] 289 / 21 / 9 / 319:  32%|███▏      | 319/1000 [1:03:04<2:14:39, 11.86s/it][Succeeded / Failed / Skipped / Total] 289 / 21 / 9 / 319:  32%|███▏      | 320/1000 [1:03:11<2:14:17, 11.85s/it][Succeeded / Failed / Skipped / Total] 290 / 21 / 9 / 320:  32%|███▏      | 320/1000 [1:03:11<2:14:17, 11.85s/it][Succeeded / Failed / Skipped / Total] 290 / 21 / 9 / 320:  32%|███▏      | 321/1000 [1:03:19<2:13:56, 11.84s/it][Succeeded / Failed / Skipped / Total] 291 / 21 / 9 / 321:  32%|███▏      | 321/1000 [1:03:19<2:13:56, 11.84s/it][Succeeded / Failed / Skipped / Total] 291 / 21 / 9 / 321:  32%|███▏      | 322/1000 [1:03:19<2:13:20, 11.80s/it]Converts constant string binding . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > convertConstantStringBinding ( Key < T > [[key]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > convertConstantStringBinding ( Key < T > [[virtuosity]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 314 ---------------------------------------------
Index the binding . --> d4wich --> Socre: 1.0

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[dunwich]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 315 ---------------------------------------------
Returns the dependencies for the given binding . --> dissociative methods --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[dissociative]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 316 ---------------------------------------------
Returns all the parameters . --> method to get all parameters --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int [[size]] = parameterInjectors . length ; Object [ ] parameters = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int [[abraxas]] = parameterInjectors . length ; Object [ ] parameters = new Object [ [[abraxas]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 317 ---------------------------------------------
Gets the list . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > getList ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > getList ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 318 ---------------------------------------------
Initialize the delegate . --> Initialize delegate --> Socre: 1.0

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > [[autocracy]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[autocracy]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 319 ---------------------------------------------
Returns the provider type . --> toughen tEen --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[toughen]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 320 ---------------------------------------------
bindLogger Method . --> bindLogger --> Socre: 1.0

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl injector ) { Key < Logger > [[key]] = Key . get ( Logger . class ) ; LoggerFactory [[loggerFactory]] = new LoggerFactory ( ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , [[loggerFactory]] , Scoping . UNSCOPED , [[loggerFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl injector ) { Key < Logger > [[tico]] = Key . get ( Logger . class ) ; LoggerFactory [[akiko]] = new LoggerFactory ( ) ; injector . state . putBinding ( [[tico]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[tico]] , SourceProvider . UNKNOWN_SOURCE , [[akiko]] , Scoping . UNSCOPED , [[akiko]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 321 ---------------------------------------------
PreparesBuilt in converters . --> Initializes theBuiltInConverters of the given Injector --> Socre: 1.0

[[[[Adv]]]]: static void prepareBuiltInConverters ( InjectorImpl [[injector]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void prepareBuiltInConverters ( InjectorImpl [[periods]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 322 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 292 / 21 / 9 / 322:  32%|███▏      | 322/1000 [1:03:19<2:13:20, 11.80s/it][Succeeded / Failed / Skipped / Total] 292 / 21 / 9 / 322:  32%|███▏      | 323/1000 [1:04:02<2:14:13, 11.90s/it][Succeeded / Failed / Skipped / Total] 293 / 21 / 9 / 323:  32%|███▏      | 323/1000 [1:04:02<2:14:13, 11.90s/it][Succeeded / Failed / Skipped / Total] 293 / 21 / 9 / 323:  32%|███▏      | 324/1000 [1:04:24<2:14:22, 11.93s/it][Succeeded / Failed / Skipped / Total] 294 / 21 / 9 / 324:  32%|███▏      | 324/1000 [1:04:24<2:14:22, 11.93s/it][Succeeded / Failed / Skipped / Total] 294 / 21 / 9 / 324:  32%|███▎      | 325/1000 [1:04:46<2:14:31, 11.96s/it][Succeeded / Failed / Skipped / Total] 294 / 22 / 9 / 325:  32%|███▎      | 325/1000 [1:04:46<2:14:31, 11.96s/it][Succeeded / Failed / Skipped / Total] 294 / 22 / 9 / 325:  33%|███▎      | 326/1000 [1:04:47<2:13:56, 11.92s/it][Succeeded / Failed / Skipped / Total] 295 / 22 / 9 / 326:  33%|███▎      | 326/1000 [1:04:47<2:13:56, 11.92s/it][Succeeded / Failed / Skipped / Total] 295 / 22 / 9 / 326:  33%|███▎      | 327/1000 [1:05:23<2:14:35, 12.00s/it][Succeeded / Failed / Skipped / Total] 296 / 22 / 9 / 327:  33%|███▎      | 327/1000 [1:05:23<2:14:35, 12.00s/it][Succeeded / Failed / Skipped / Total] 296 / 22 / 9 / 327:  33%|███▎      | 328/1000 [1:05:30<2:14:13, 11.98s/it][Succeeded / Failed / Skipped / Total] 297 / 22 / 9 / 328:  33%|███▎      | 328/1000 [1:05:30<2:14:13, 11.98s/it][Succeeded / Failed / Skipped / Total] 297 / 22 / 9 / 328:  33%|███▎      | 329/1000 [1:05:38<2:13:52, 11.97s/it][Succeeded / Failed / Skipped / Total] 298 / 22 / 9 / 329:  33%|███▎      | 329/1000 [1:05:38<2:13:52, 11.97s/it][Succeeded / Failed / Skipped / Total] 298 / 22 / 9 / 329:  33%|███▎      | 330/1000 [1:05:42<2:13:23, 11.95s/it]Bind a injector . --> bind neurones --> Socre: 1.0

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl [[injector]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[injectorFactory]] = new InjectorFactory ( [[injector]] ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , [[injectorFactory]] , Scoping . UNSCOPED , [[injectorFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl [[neurones]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[hiko]] = new InjectorFactory ( [[neurones]] ) ; [[neurones]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[neurones]] , key , SourceProvider . UNKNOWN_SOURCE , [[hiko]] , Scoping . UNSCOPED , [[hiko]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 323 ---------------------------------------------
Returns true if the given method is overrides . --> intercut method --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method [[a]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[intercut]] ( Method [[devastating]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 324 ---------------------------------------------
canonicalize the given classloader --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader [[poaching]] ) { return [[poaching]] != null ? [[poaching]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 325 ---------------------------------------------
Create an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy [[implementedBy]] = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy [[indelible]] = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 326 ---------------------------------------------
Resolve all types . --> Recursively searches for a given type --> Socre: 1.0

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] types ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ types . length ] ; for ( int [[t]] = 0 ; [[t]] < types . length ; [[t]] ++ ) { result [ [[t]] ] = resolve ( types [ [[t]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[mole]] ( Type [ ] types ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ types . length ] ; for ( int [[driveway]] = 0 ; [[driveway]] < types . length ; [[driveway]] ++ ) { result [ [[driveway]] ] = resolve ( types [ [[driveway]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 327 ---------------------------------------------
Returns a canonical OR of the given type literal . --> canonicalizeizeForKey --> Socre: 1.0

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[errors]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[errors]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType [[parameterizedType]] = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[aaaaah]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[aaaaah]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType [[mikael]] = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 328 ---------------------------------------------
Creates a new instance of the given object . --> Create new object --> Socre: 1.0

[[[[Adv]]]]: public T newInstance ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "[[True]]" == "[[True]]" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T newInstance ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "[[Flintstone]]" == "[[Flintstone]]" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 329 ---------------------------------------------
Creates a new ServletRequest instance . -->  --> Socre: 0.9999999999995342

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest [[servletRequest]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest [[comments]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 330 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 299 / 22 / 9 / 330:  33%|███▎      | 330/1000 [1:05:42<2:13:23, 11.95s/it][Succeeded / Failed / Skipped / Total] 299 / 22 / 9 / 330:  33%|███▎      | 331/1000 [1:05:52<2:13:08, 11.94s/it][Succeeded / Failed / Skipped / Total] 300 / 22 / 9 / 331:  33%|███▎      | 331/1000 [1:05:52<2:13:08, 11.94s/it][Succeeded / Failed / Skipped / Total] 300 / 22 / 9 / 331:  33%|███▎      | 332/1000 [1:05:57<2:12:43, 11.92s/it][Succeeded / Failed / Skipped / Total] 300 / 23 / 9 / 332:  33%|███▎      | 332/1000 [1:05:57<2:12:43, 11.92s/it][Succeeded / Failed / Skipped / Total] 300 / 23 / 9 / 332:  33%|███▎      | 333/1000 [1:06:05<2:12:23, 11.91s/it][Succeeded / Failed / Skipped / Total] 300 / 24 / 9 / 333:  33%|███▎      | 333/1000 [1:06:05<2:12:23, 11.91s/it][Succeeded / Failed / Skipped / Total] 300 / 24 / 9 / 333:  33%|███▎      | 334/1000 [1:06:06<2:11:48, 11.87s/it][Succeeded / Failed / Skipped / Total] 301 / 24 / 9 / 334:  33%|███▎      | 334/1000 [1:06:06<2:11:48, 11.87s/it][Succeeded / Failed / Skipped / Total] 301 / 24 / 9 / 334:  34%|███▎      | 335/1000 [1:06:11<2:11:23, 11.85s/it][Succeeded / Failed / Skipped / Total] 302 / 24 / 9 / 335:  34%|███▎      | 335/1000 [1:06:11<2:11:23, 11.85s/it][Succeeded / Failed / Skipped / Total] 302 / 24 / 9 / 335:  34%|███▎      | 336/1000 [1:07:03<2:12:30, 11.97s/it]Validate pendingInjections . --> Validates pendingInjections --> Socre: 1.0

[[[[Adv]]]]: void validateOustandingInjections ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[reference]] : pendingInjections ) { try { [[reference]] . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void validateOustandingInjections ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[upsetting]] : pendingInjections ) { try { [[upsetting]] . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 331 ---------------------------------------------
Returns the fix annotations for the given key . --> ducked --> Socre: 1.0

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[ducked]] ( Key < ? > [[handprint]] ) { return [[handprint]] . getAnnotation ( ) == null ? [[handprint]] : Key . get ( [[handprint]] . getTypeLiteral ( ) , [[handprint]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 332 ---------------------------------------------
Handles the request injection . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[tailspin]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 333 ---------------------------------------------
Cleans up the dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = "[[False]]" != "[[False]]" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = "[[Brooks]]" != "[[Brooks]]" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 334 ---------------------------------------------
Returns true if this class has the same version of the Cglib . --> To firestorm method --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > [[fc]] = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( [[fc]] . getName ( ) ) == [[fc]] ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[firestorm]] ( ClassLoader classLoader ) { Class < ? > [[hexagram]] = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( [[hexagram]] . getName ( ) ) == [[hexagram]] ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 335 ---------------------------------------------
Determines whether the specified member is public or not . --> Determine whether or not iberia is public static --> Socre: 1.0

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[iberia]] ) { if ( ! Modifier . isPublic ( [[iberia]] . getModifiers ( ) ) ) { return "[[Rifat]]" != "[[Rifat]]" ; } Class < ? > [ ] parameterTypes ; if ( [[iberia]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[iberia]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[iberia]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[[Rifat]]" != "[[Rifat]]" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "[[Rifat]]" != "[[Rifat]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 336 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 302 / 25 / 9 / 336:  34%|███▎      | 336/1000 [1:07:03<2:12:30, 11.97s/it][Succeeded / Failed / Skipped / Total] 302 / 25 / 9 / 336:  34%|███▎      | 337/1000 [1:07:31<2:12:51, 12.02s/it][Succeeded / Failed / Skipped / Total] 303 / 25 / 9 / 337:  34%|███▎      | 337/1000 [1:07:31<2:12:51, 12.02s/it][Succeeded / Failed / Skipped / Total] 303 / 25 / 9 / 337:  34%|███▍      | 338/1000 [1:07:40<2:12:33, 12.01s/it][Succeeded / Failed / Skipped / Total] 304 / 25 / 9 / 338:  34%|███▍      | 338/1000 [1:07:40<2:12:33, 12.01s/it][Succeeded / Failed / Skipped / Total] 304 / 25 / 9 / 338:  34%|███▍      | 339/1000 [1:07:47<2:12:11, 12.00s/it][Succeeded / Failed / Skipped / Total] 305 / 25 / 9 / 339:  34%|███▍      | 339/1000 [1:07:47<2:12:11, 12.00s/it][Succeeded / Failed / Skipped / Total] 305 / 25 / 9 / 339:  34%|███▍      | 340/1000 [1:07:56<2:11:53, 11.99s/it][Succeeded / Failed / Skipped / Total] 306 / 25 / 9 / 340:  34%|███▍      | 340/1000 [1:07:56<2:11:53, 11.99s/it][Succeeded / Failed / Skipped / Total] 306 / 25 / 9 / 340:  34%|███▍      | 341/1000 [1:08:10<2:11:44, 11.99s/it][Succeeded / Failed / Skipped / Total] 307 / 25 / 9 / 341:  34%|███▍      | 341/1000 [1:08:10<2:11:44, 11.99s/it][Succeeded / Failed / Skipped / Total] 307 / 25 / 9 / 341:  34%|███▍      | 342/1000 [1:08:10<2:11:10, 11.96s/it][Succeeded / Failed / Skipped / Total] 308 / 25 / 9 / 342:  34%|███▍      | 342/1000 [1:08:10<2:11:10, 11.96s/it][Succeeded / Failed / Skipped / Total] 308 / 25 / 9 / 342:  34%|███▍      | 343/1000 [1:08:28<2:11:09, 11.98s/it]Returns the annotation of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[abhors]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 337 ---------------------------------------------
Returns the given scope annotation . --> Makes a changeoping --> Socre: 1.0

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl [[injector]] , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding [[scope]] = [[injector]] . state . getScopeBinding ( scopeAnnotation ) ; if ( [[scope]] != null ) { return forInstance ( [[scope]] . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl [[rifat]] , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding [[muñoz]] = [[rifat]] . state . getScopeBinding ( scopeAnnotation ) ; if ( [[muñoz]] != null ) { return forInstance ( [[muñoz]] . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 338 ---------------------------------------------
Check for misplaced binding annotations . --> duckling --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member member , Errors errors ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[duckling]] ( Member member , Errors errors ) { Annotation [[azur]] = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( [[azur]] == null ) { return "[[Evacuation]]" != "[[Evacuation]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 339 ---------------------------------------------
Checks whether the annotationType is considered to be used at runtime . --> isRetainedAtRuntime Method --> Socre: 1.0

[[[[Adv]]]]: public static boolean isRetainedAtRuntime ( Class < ? extends Annotation > annotationType ) { Retention [[retention]] = annotationType . getAnnotation ( Retention . class ) ; return [[retention]] != null && [[retention]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean isRetainedAtRuntime ( Class < ? extends Annotation > annotationType ) { Retention [[doughboy]] = annotationType . getAnnotation ( Retention . class ) ; return [[doughboy]] != null && [[doughboy]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 340 ---------------------------------------------
Initialize the delegate . --> Initialize delegate --> Socre: 1.0

[[[[Adv]]]]: public void initializeDelegate ( Provider < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void initializeDelegate ( Provider < T > [[akshay]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[akshay]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 341 ---------------------------------------------
Normalizes the path . --> Get deutschland string --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String path ) { StringBuilder [[sb]] = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[deutschland]] ( String path ) { StringBuilder [[guildford]] = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 342 ---------------------------------------------
Add the type binding . --> Add newDirectTypeBinding --> Socre: 1.0

[[[[Adv]]]]: private void addDirectTypeBinding ( Binder [[binder]] ) { [[binder]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void addDirectTypeBinding ( Binder [[disrespectfully]] ) { [[disrespectfully]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 343 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 309 / 25 / 9 / 343:  34%|███▍      | 343/1000 [1:08:28<2:11:09, 11.98s/it][Succeeded / Failed / Skipped / Total] 309 / 25 / 9 / 343:  34%|███▍      | 344/1000 [1:08:37<2:10:51, 11.97s/it][Succeeded / Failed / Skipped / Total] 310 / 25 / 9 / 344:  34%|███▍      | 344/1000 [1:08:37<2:10:51, 11.97s/it][Succeeded / Failed / Skipped / Total] 310 / 25 / 9 / 344:  34%|███▍      | 345/1000 [1:08:45<2:10:31, 11.96s/it][Succeeded / Failed / Skipped / Total] 311 / 25 / 9 / 345:  34%|███▍      | 345/1000 [1:08:45<2:10:31, 11.96s/it][Succeeded / Failed / Skipped / Total] 311 / 25 / 9 / 345:  35%|███▍      | 346/1000 [1:08:59<2:10:25, 11.97s/it][Succeeded / Failed / Skipped / Total] 312 / 25 / 9 / 346:  35%|███▍      | 346/1000 [1:08:59<2:10:25, 11.97s/it][Succeeded / Failed / Skipped / Total] 312 / 25 / 9 / 346:  35%|███▍      | 347/1000 [1:09:10<2:10:10, 11.96s/it][Succeeded / Failed / Skipped / Total] 313 / 25 / 9 / 347:  35%|███▍      | 347/1000 [1:09:10<2:10:10, 11.96s/it][Succeeded / Failed / Skipped / Total] 313 / 25 / 9 / 347:  35%|███▍      | 348/1000 [1:09:16<2:09:48, 11.94s/it][Succeeded / Failed / Skipped / Total] 314 / 25 / 9 / 348:  35%|███▍      | 348/1000 [1:09:16<2:09:48, 11.94s/it][Succeeded / Failed / Skipped / Total] 314 / 25 / 9 / 348:  35%|███▍      | 349/1000 [1:09:29<2:09:38, 11.95s/it][Succeeded / Failed / Skipped / Total] 315 / 25 / 9 / 349:  35%|███▍      | 349/1000 [1:09:29<2:09:38, 11.95s/it][Succeeded / Failed / Skipped / Total] 315 / 25 / 9 / 349:  35%|███▌      | 350/1000 [1:10:38<2:11:10, 12.11s/it]Returns the name of the given key . --> darmstadt --> Socre: 1.0

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > [[key]] ) { Annotation annotation = [[key]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[key]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return [[key]] . getAnnotation ( ) . toString ( ) ; } else if ( [[key]] . getAnnotationType ( ) != null ) { return "@" + [[key]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[darmstadt]] ( Key < ? > [[minimise]] ) { Annotation annotation = [[minimise]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[minimise]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return [[minimise]] . getAnnotation ( ) . toString ( ) ; } else if ( [[minimise]] . getAnnotationType ( ) != null ) { return "@" + [[minimise]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 344 ---------------------------------------------
Creates an instance of the construction proxy . --> provision the given nuke --> Socre: 1.0

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[constructionContext]] . setProxyDelegates ( t ) ; } finally { [[constructionContext]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > [[nuke]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[nuke]] . setProxyDelegates ( t ) ; } finally { [[nuke]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 345 ---------------------------------------------
Writes theReplace . --> Method for writeReplace --> Socre: 1.0

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[i]] = 0 ; [[i]] < sourcesAsStrings . length ; [[i]] ++ ) { sourcesAsStrings [ [[i]] ] = Errors . convert ( sourcesAsStrings [ [[i]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[papá]] = 0 ; [[papá]] < sourcesAsStrings . length ; [[papá]] ++ ) { sourcesAsStrings [ [[papá]] ] = Errors . convert ( sourcesAsStrings [ [[papá]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 346 ---------------------------------------------
Creates a Module for the given module . --> F743 --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[foggiest]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 347 ---------------------------------------------
Get the assist data by method --> Return assistDataByMethod --> Socre: 1.0

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[fined]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 348 ---------------------------------------------
Returns the Constructor for the given InjectionPoint . --> get method call --> Socre: 1.0

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[constructorInjector]] , Errors [[errors]] ) throws ErrorsException { return cache . get ( [[constructorInjector]] , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[skilling]] , Errors [[swirl]] ) throws ErrorsException { return cache . get ( [[skilling]] , [[swirl]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 349 ---------------------------------------------
New real map binder . --> New real map mapping --> Socre: 1.0

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder [[binder]] , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( [[binder]] , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder [[mongolia]] , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { [[mongolia]] = [[mongolia]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( [[mongolia]] , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[mongolia]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 350 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 315 / 26 / 9 / 350:  35%|███▌      | 350/1000 [1:10:38<2:11:10, 12.11s/it][Succeeded / Failed / Skipped / Total] 315 / 26 / 9 / 350:  35%|███▌      | 351/1000 [1:10:51<2:11:00, 12.11s/it][Succeeded / Failed / Skipped / Total] 315 / 27 / 9 / 351:  35%|███▌      | 351/1000 [1:10:51<2:11:00, 12.11s/it][Succeeded / Failed / Skipped / Total] 315 / 27 / 9 / 351:  35%|███▌      | 352/1000 [1:11:14<2:11:09, 12.14s/it][Succeeded / Failed / Skipped / Total] 315 / 28 / 9 / 352:  35%|███▌      | 352/1000 [1:11:14<2:11:09, 12.14s/it][Succeeded / Failed / Skipped / Total] 315 / 28 / 9 / 352:  35%|███▌      | 353/1000 [1:11:21<2:10:47, 12.13s/it][Succeeded / Failed / Skipped / Total] 315 / 29 / 9 / 353:  35%|███▌      | 353/1000 [1:11:21<2:10:47, 12.13s/it][Succeeded / Failed / Skipped / Total] 315 / 29 / 9 / 353:  35%|███▌      | 354/1000 [1:11:36<2:10:40, 12.14s/it][Succeeded / Failed / Skipped / Total] 316 / 29 / 9 / 354:  35%|███▌      | 354/1000 [1:11:36<2:10:40, 12.14s/it][Succeeded / Failed / Skipped / Total] 316 / 29 / 9 / 354:  36%|███▌      | 355/1000 [1:11:36<2:10:06, 12.10s/it][Succeeded / Failed / Skipped / Total] 316 / 29 / 10 / 355:  36%|███▌      | 355/1000 [1:11:36<2:10:06, 12.10s/it][Succeeded / Failed / Skipped / Total] 316 / 29 / 10 / 355:  36%|███▌      | 356/1000 [1:11:45<2:09:47, 12.09s/it][Succeeded / Failed / Skipped / Total] 317 / 29 / 10 / 356:  36%|███▌      | 356/1000 [1:11:45<2:09:47, 12.09s/it][Succeeded / Failed / Skipped / Total] 317 / 29 / 10 / 356:  36%|███▌      | 357/1000 [1:12:41<2:10:55, 12.22s/it]Returns the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[recounts]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[recounts]] ) ) ; return [[recounts]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 351 ---------------------------------------------
Finds the scope annotation for the given array of annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 352 ---------------------------------------------
Internal factory method . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 353 ---------------------------------------------
Returns the key of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] [[annotations]] , Errors errors ) throws ErrorsException { int [[numErrorsBefore]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , [[annotations]] ) ; errors . throwIfNewErrors ( [[numErrorsBefore]] ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] [[liz]] , Errors errors ) throws ErrorsException { int [[lumley]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , [[liz]] ) ; errors . throwIfNewErrors ( [[lumley]] ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 354 ---------------------------------------------
Returns true if the given interceptor class has a scope . --> z evaluated? --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation annotation : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[zigi]] ( Class < ? extends Interceptor > [[bloch]] ) { for ( Annotation annotation : [[bloch]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 355 ---------------------------------------------
Gets the Errors object using the key . --> [[[SKIPPED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 356 ---------------------------------------------
Returns a RealMultibinder for the given key . --> Create a new RealMultibinder --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > [[key]] ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , [[key]] ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > [[actin]] ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , [[actin]] ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 357 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 318 / 29 / 10 / 357:  36%|███▌      | 357/1000 [1:12:41<2:10:55, 12.22s/it][Succeeded / Failed / Skipped / Total] 318 / 29 / 10 / 357:  36%|███▌      | 358/1000 [1:12:53<2:10:42, 12.22s/it][Succeeded / Failed / Skipped / Total] 319 / 29 / 10 / 358:  36%|███▌      | 358/1000 [1:12:53<2:10:42, 12.22s/it][Succeeded / Failed / Skipped / Total] 319 / 29 / 10 / 358:  36%|███▌      | 359/1000 [1:13:29<2:11:13, 12.28s/it][Succeeded / Failed / Skipped / Total] 320 / 29 / 10 / 359:  36%|███▌      | 359/1000 [1:13:29<2:11:13, 12.28s/it][Succeeded / Failed / Skipped / Total] 320 / 29 / 10 / 359:  36%|███▌      | 360/1000 [1:13:34<2:10:48, 12.26s/it][Succeeded / Failed / Skipped / Total] 321 / 29 / 10 / 360:  36%|███▌      | 360/1000 [1:13:34<2:10:48, 12.26s/it][Succeeded / Failed / Skipped / Total] 321 / 29 / 10 / 360:  36%|███▌      | 361/1000 [1:13:41<2:10:26, 12.25s/it][Succeeded / Failed / Skipped / Total] 322 / 29 / 10 / 361:  36%|███▌      | 361/1000 [1:13:41<2:10:26, 12.25s/it][Succeeded / Failed / Skipped / Total] 322 / 29 / 10 / 361:  36%|███▌      | 362/1000 [1:14:22<2:11:04, 12.33s/it][Succeeded / Failed / Skipped / Total] 322 / 30 / 10 / 362:  36%|███▌      | 362/1000 [1:14:22<2:11:04, 12.33s/it][Succeeded / Failed / Skipped / Total] 322 / 30 / 10 / 362:  36%|███▋      | 363/1000 [1:14:29<2:10:42, 12.31s/it][Succeeded / Failed / Skipped / Total] 323 / 30 / 10 / 363:  36%|███▋      | 363/1000 [1:14:29<2:10:42, 12.31s/it][Succeeded / Failed / Skipped / Total] 323 / 30 / 10 / 363:  36%|███▋      | 364/1000 [1:14:41<2:10:30, 12.31s/it]Checks if the type literal is not concatenation . --> tyl a type --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[tylko]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[Desde]]" != "[[Desde]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 358 ---------------------------------------------
Remove the set of dependencies from the given deps . --> Removes the set of permutations --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dep]] : deps ) { Class < ? > annotationType = [[dep]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[builder]] . add ( [[dep]] ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[portents]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[badge]] : deps ) { Class < ? > annotationType = [[badge]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[portents]] . add ( [[badge]] ) ; } } return [[portents]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 359 ---------------------------------------------
Returns the InjectionPoint for this proxy . --> F743 - 4 --> Socre: 1.0

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[fillmore]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 360 ---------------------------------------------
Returns true if the class has at inject . --> dcd --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[dcd]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 361 ---------------------------------------------
Checks if the given implementation is valid for the given module . --> Methode deode permettant d zimmermann --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > [[implementation]] , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[missionaries]] ( Set < Dependency < ? > > dependencies , Class < ? > [[zimmermann]] , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 362 ---------------------------------------------
Returns the dependencies for the given ctor point . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > getDependencies ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > getDependencies ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 363 ---------------------------------------------
Invokes the method . --> fingern be overridden --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object [[proxy]] , final Method [[method]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[fingernail]] ( Object [[thunderclaps]] , final Method [[naïve]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 364 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 324 / 30 / 10 / 364:  36%|███▋      | 364/1000 [1:14:41<2:10:30, 12.31s/it][Succeeded / Failed / Skipped / Total] 324 / 30 / 10 / 364:  36%|███▋      | 365/1000 [1:14:55<2:10:20, 12.32s/it][Succeeded / Failed / Skipped / Total] 325 / 30 / 10 / 365:  36%|███▋      | 365/1000 [1:14:55<2:10:20, 12.32s/it][Succeeded / Failed / Skipped / Total] 325 / 30 / 10 / 365:  37%|███▋      | 366/1000 [1:14:57<2:09:50, 12.29s/it][Succeeded / Failed / Skipped / Total] 326 / 30 / 10 / 366:  37%|███▋      | 366/1000 [1:14:57<2:09:50, 12.29s/it][Succeeded / Failed / Skipped / Total] 326 / 30 / 10 / 366:  37%|███▋      | 367/1000 [1:15:30<2:10:14, 12.35s/it][Succeeded / Failed / Skipped / Total] 327 / 30 / 10 / 367:  37%|███▋      | 367/1000 [1:15:30<2:10:14, 12.35s/it][Succeeded / Failed / Skipped / Total] 327 / 30 / 10 / 367:  37%|███▋      | 368/1000 [1:15:37<2:09:51, 12.33s/it][Succeeded / Failed / Skipped / Total] 327 / 31 / 10 / 368:  37%|███▋      | 368/1000 [1:15:37<2:09:51, 12.33s/it][Succeeded / Failed / Skipped / Total] 327 / 31 / 10 / 368:  37%|███▋      | 369/1000 [1:15:43<2:09:29, 12.31s/it][Succeeded / Failed / Skipped / Total] 328 / 31 / 10 / 369:  37%|███▋      | 369/1000 [1:15:43<2:09:29, 12.31s/it][Succeeded / Failed / Skipped / Total] 328 / 31 / 10 / 369:  37%|███▋      | 370/1000 [1:16:00<2:09:25, 12.33s/it][Succeeded / Failed / Skipped / Total] 329 / 31 / 10 / 370:  37%|███▋      | 370/1000 [1:16:00<2:09:25, 12.33s/it][Succeeded / Failed / Skipped / Total] 329 / 31 / 10 / 370:  37%|███▋      | 371/1000 [1:16:39<2:09:58, 12.40s/it][Succeeded / Failed / Skipped / Total] 330 / 31 / 10 / 371:  37%|███▋      | 371/1000 [1:16:39<2:09:58, 12.40s/it][Succeeded / Failed / Skipped / Total] 330 / 31 / 10 / 371:  37%|███▋      | 372/1000 [1:17:20<2:10:34, 12.48s/it]Returns the line at the given member . --> tactician operation --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[tactician]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 365 ---------------------------------------------
Returns the dependencies of this class . --> Gets the constructor --> Socre: 1.0

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[chases]] ( ) { ImmutableSet . Builder < InjectionPoint > [[zigi]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[zigi]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 366 ---------------------------------------------
Checks if the given constructor has no parameters . --> driftwood --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > [[paramList]] , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[driftwood]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > [[meats]] , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 367 ---------------------------------------------
Initializes a callable using the seed map . --> Convenience method for getting an operation --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > continueRequest ( Callable < T > [[callable]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[callable]] , continueRequest ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > continueRequest ( Callable < T > [[asuka]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[asuka]] , continueRequest ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 368 ---------------------------------------------
Find the next filter . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest [[request]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[request]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[dalrymple]] ( HttpServletRequest [[ranges]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[ranges]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 369 ---------------------------------------------
Initialize the LookupProcessor . --> F743 - 3 --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[carola]] ( Errors [[louise]] ) { injector . lookups = injector ; new LookupProcessor ( [[louise]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 370 ---------------------------------------------
Create a new Module for a given module --> sneaked method --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "[[False]]" != "[[False]]" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[sneaked]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "[[Mulberry]]" != "[[Mulberry]]" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 371 ---------------------------------------------
Performs a transfer request on the given callable . --> wrap takeover --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[weíre]] ( Callable < T > [[takeover]] ) { return wrap ( [[takeover]] , [[weíre]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 372 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 330 / 32 / 10 / 372:  37%|███▋      | 372/1000 [1:17:20<2:10:34, 12.48s/it][Succeeded / Failed / Skipped / Total] 330 / 32 / 10 / 372:  37%|███▋      | 373/1000 [1:17:40<2:10:33, 12.49s/it][Succeeded / Failed / Skipped / Total] 331 / 32 / 10 / 373:  37%|███▋      | 373/1000 [1:17:40<2:10:33, 12.49s/it][Succeeded / Failed / Skipped / Total] 331 / 32 / 10 / 373:  37%|███▋      | 374/1000 [1:17:54<2:10:24, 12.50s/it][Succeeded / Failed / Skipped / Total] 332 / 32 / 10 / 374:  37%|███▋      | 374/1000 [1:17:54<2:10:24, 12.50s/it][Succeeded / Failed / Skipped / Total] 332 / 32 / 10 / 374:  38%|███▊      | 375/1000 [1:18:24<2:10:40, 12.54s/it][Succeeded / Failed / Skipped / Total] 332 / 33 / 10 / 375:  38%|███▊      | 375/1000 [1:18:24<2:10:40, 12.54s/it][Succeeded / Failed / Skipped / Total] 332 / 33 / 10 / 375:  38%|███▊      | 376/1000 [1:18:26<2:10:11, 12.52s/it][Succeeded / Failed / Skipped / Total] 333 / 33 / 10 / 376:  38%|███▊      | 376/1000 [1:18:26<2:10:11, 12.52s/it][Succeeded / Failed / Skipped / Total] 333 / 33 / 10 / 376:  38%|███▊      | 377/1000 [1:18:46<2:10:10, 12.54s/it][Succeeded / Failed / Skipped / Total] 334 / 33 / 10 / 377:  38%|███▊      | 377/1000 [1:18:46<2:10:10, 12.54s/it][Succeeded / Failed / Skipped / Total] 334 / 33 / 10 / 377:  38%|███▊      | 378/1000 [1:19:09<2:10:14, 12.56s/it]Gets the signature from a new instance . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 373 ---------------------------------------------
Returns a strategy for annotation . --> Returns a new AnnotationStrategy --> Socre: 1.0

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > annotationType ) { annotationType = Annotations . canonicalizeIfNamed ( annotationType ) ; if ( isAllDefaultMethods ( annotationType ) ) { return [[strategyFor]] ( generateAnnotation ( annotationType ) ) ; } checkNotNull ( annotationType , "annotation type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( annotationType , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[shady]] ( Class < ? extends Annotation > annotationType ) { annotationType = Annotations . canonicalizeIfNamed ( annotationType ) ; if ( isAllDefaultMethods ( annotationType ) ) { return [[shady]] ( generateAnnotation ( annotationType ) ) ; } checkNotNull ( annotationType , "annotation type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( annotationType , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 374 ---------------------------------------------
Return the stack trace source . --> For debugging --> Socre: 1.0

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[mosquitoes]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 375 ---------------------------------------------
Returns the annotation for the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 376 ---------------------------------------------
Create a Key for the given annotation strategy --> tortoise method --> Socre: 1.0

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( [[type]] , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[tortoise]] ( Class < T > [[gleeson]] , AnnotationStrategy [[tulip]] ) { return new Key < T > ( [[gleeson]] , [[tulip]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 377 ---------------------------------------------
Returns a strategy for the given annotation . --> Methode d AnnotationStrategy --> Socre: 1.0

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[tributaries]] ( Annotation [[panda]] ) { checkNotNull ( [[panda]] , "annotation" ) ; Class < ? extends Annotation > [[flushed]] = [[panda]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[flushed]] ) ; ensureIsBindingAnnotation ( [[flushed]] ) ; if ( Annotations . isMarker ( [[flushed]] ) ) { return new AnnotationTypeStrategy ( [[flushed]] , [[panda]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[panda]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 378 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 335 / 33 / 10 / 378:  38%|███▊      | 378/1000 [1:19:09<2:10:14, 12.56s/it][Succeeded / Failed / Skipped / Total] 335 / 33 / 10 / 378:  38%|███▊      | 379/1000 [1:19:46<2:10:43, 12.63s/it][Succeeded / Failed / Skipped / Total] 336 / 33 / 10 / 379:  38%|███▊      | 379/1000 [1:19:46<2:10:43, 12.63s/it][Succeeded / Failed / Skipped / Total] 336 / 33 / 10 / 379:  38%|███▊      | 380/1000 [1:19:57<2:10:27, 12.62s/it][Succeeded / Failed / Skipped / Total] 337 / 33 / 10 / 380:  38%|███▊      | 380/1000 [1:19:57<2:10:27, 12.62s/it][Succeeded / Failed / Skipped / Total] 337 / 33 / 10 / 380:  38%|███▊      | 381/1000 [1:20:37<2:10:59, 12.70s/it][Succeeded / Failed / Skipped / Total] 338 / 33 / 10 / 381:  38%|███▊      | 381/1000 [1:20:37<2:10:59, 12.70s/it][Succeeded / Failed / Skipped / Total] 338 / 33 / 10 / 381:  38%|███▊      | 382/1000 [1:20:45<2:10:38, 12.68s/it][Succeeded / Failed / Skipped / Total] 339 / 33 / 10 / 382:  38%|███▊      | 382/1000 [1:20:45<2:10:38, 12.68s/it][Succeeded / Failed / Skipped / Total] 339 / 33 / 10 / 382:  38%|███▊      | 383/1000 [1:20:50<2:10:14, 12.67s/it][Succeeded / Failed / Skipped / Total] 340 / 33 / 10 / 383:  38%|███▊      | 383/1000 [1:20:50<2:10:14, 12.67s/it][Succeeded / Failed / Skipped / Total] 340 / 33 / 10 / 383:  38%|███▊      | 384/1000 [1:20:51<2:09:42, 12.63s/it][Succeeded / Failed / Skipped / Total] 340 / 34 / 10 / 384:  38%|███▊      | 384/1000 [1:20:51<2:09:42, 12.63s/it][Succeeded / Failed / Skipped / Total] 340 / 34 / 10 / 384:  38%|███▊      | 385/1000 [1:20:58<2:09:21, 12.62s/it][Succeeded / Failed / Skipped / Total] 341 / 34 / 10 / 385:  38%|███▊      | 385/1000 [1:20:58<2:09:21, 12.62s/it][Succeeded / Failed / Skipped / Total] 341 / 34 / 10 / 385:  39%|███▊      | 386/1000 [1:21:08<2:09:04, 12.61s/it]Validates that the object is compatible . --> Liefert ein zimmermann --> Socre: 1.0

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > [[key]] , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[microchips]] ( Key < ? > [[shipmate]] , Object [[zimmermann]] ) { if ( [[zimmermann]] == null || [[zimmermann]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[shipmate]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[zimmermann]] ) ) { throw new IllegalArgumentException ( "Value[" + [[zimmermann]] + "] of type[" + [[zimmermann]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[shipmate]] + "]" ) ; } return [[zimmermann]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 379 ---------------------------------------------
Creates a new message . --> Create blasphemers --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , String [[messageFormat]] , Object ... arguments ) { return [[create]] ( cause , ImmutableList . of ( ) , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[limbs]] ( Throwable cause , String [[blasphemers]] , Object ... arguments ) { return [[limbs]] ( cause , ImmutableList . of ( ) , [[blasphemers]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 380 ---------------------------------------------
Returns true if the given class name is a copy of the parent class name . --> Determines whether a given f is a f minute --> Socre: 1.0

[[[[Adv]]]]: private boolean shouldBeSkipped ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean shouldBeSkipped ( String [[fettle]] ) { return ( parent != null && parent . shouldBeSkipped ( [[fettle]] ) ) || classNamesToSkip . contains ( [[fettle]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 381 ---------------------------------------------
Converts an Object to a Object --> Converts incites to amnesia --> Socre: 1.0

[[[[Adv]]]]: static Object convert ( Object [[o]] ) { ElementSource [[source]] = null ; if ( [[o]] instanceof ElementSource ) { [[source]] = ( ElementSource ) [[o]] ; [[o]] = [[source]] . getDeclaringSource ( ) ; } return convert ( [[o]] , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object convert ( Object [[incites]] ) { ElementSource [[amnesia]] = null ; if ( [[incites]] instanceof ElementSource ) { [[amnesia]] = ( ElementSource ) [[incites]] ; [[incites]] = [[amnesia]] . getDeclaringSource ( ) ; } return convert ( [[incites]] , [[amnesia]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 382 ---------------------------------------------
Main entry point . --> set the medea command --> Socre: 1.0

[[[[Adv]]]]: public static void [[main]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[medea]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 383 ---------------------------------------------
Creates a new message . --> Returns the result of catholicism --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( String [[messageFormat]] , Object ... arguments ) { return [[create]] ( null , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[catholicism]] ( String [[underdogs]] , Object ... arguments ) { return [[catholicism]] ( null , [[underdogs]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 384 ---------------------------------------------
Returns the injectors for the given injection points . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 385 ---------------------------------------------
Pushes state . --> not null --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[valleys]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 386 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 342 / 34 / 10 / 386:  39%|███▊      | 386/1000 [1:21:08<2:09:04, 12.61s/it][Succeeded / Failed / Skipped / Total] 342 / 34 / 10 / 386:  39%|███▊      | 387/1000 [1:21:16<2:08:44, 12.60s/it][Succeeded / Failed / Skipped / Total] 343 / 34 / 10 / 387:  39%|███▊      | 387/1000 [1:21:16<2:08:44, 12.60s/it][Succeeded / Failed / Skipped / Total] 343 / 34 / 10 / 387:  39%|███▉      | 388/1000 [1:21:36<2:08:43, 12.62s/it][Succeeded / Failed / Skipped / Total] 343 / 35 / 10 / 388:  39%|███▉      | 388/1000 [1:21:36<2:08:43, 12.62s/it][Succeeded / Failed / Skipped / Total] 343 / 35 / 10 / 388:  39%|███▉      | 389/1000 [1:21:45<2:08:24, 12.61s/it][Succeeded / Failed / Skipped / Total] 344 / 35 / 10 / 389:  39%|███▉      | 389/1000 [1:21:45<2:08:24, 12.61s/it][Succeeded / Failed / Skipped / Total] 344 / 35 / 10 / 389:  39%|███▉      | 390/1000 [1:21:45<2:07:52, 12.58s/it][Succeeded / Failed / Skipped / Total] 344 / 35 / 11 / 390:  39%|███▉      | 390/1000 [1:21:45<2:07:52, 12.58s/it][Succeeded / Failed / Skipped / Total] 344 / 35 / 11 / 390:  39%|███▉      | 391/1000 [1:21:47<2:07:24, 12.55s/it][Succeeded / Failed / Skipped / Total] 345 / 35 / 11 / 391:  39%|███▉      | 391/1000 [1:21:47<2:07:24, 12.55s/it][Succeeded / Failed / Skipped / Total] 345 / 35 / 11 / 391:  39%|███▉      | 392/1000 [1:22:07<2:07:23, 12.57s/it]Generate the provider using the specified dependency . --> Get the provider --> Socre: 1.0

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T [[t]] = provider . get ( ) ; if ( [[t]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( [[t]] ) ; return [[t]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T [[feces]] = provider . get ( ) ; if ( [[feces]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( [[feces]] ) ; return [[feces]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 387 ---------------------------------------------
Set the processor . --> ber event processors --> Socre: 1.0

[[[[Adv]]]]: public void [[onEvent]] ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void [[bereft]] ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 388 ---------------------------------------------
Iterates over all registered listeners . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 389 ---------------------------------------------
Get the object representing the class name of the module class . --> For a given bulgaria --> Socre: 1.0

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[admirably]] ( List < String > [[bulgaria]] ) { Preconditions . checkNotNull ( [[bulgaria]] , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : [[bulgaria]] ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 390 ---------------------------------------------
Throw an exception if t is a RuntimeException . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 391 ---------------------------------------------
Updates the given dependency . --> roundtrip method --> Socre: 1.0

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[roundtrip]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 392 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 346 / 35 / 11 / 392:  39%|███▉      | 392/1000 [1:22:07<2:07:23, 12.57s/it][Succeeded / Failed / Skipped / Total] 346 / 35 / 11 / 392:  39%|███▉      | 393/1000 [1:22:16<2:07:05, 12.56s/it][Succeeded / Failed / Skipped / Total] 347 / 35 / 11 / 393:  39%|███▉      | 393/1000 [1:22:16<2:07:05, 12.56s/it][Succeeded / Failed / Skipped / Total] 347 / 35 / 11 / 393:  39%|███▉      | 394/1000 [1:22:26<2:06:48, 12.55s/it][Succeeded / Failed / Skipped / Total] 348 / 35 / 11 / 394:  39%|███▉      | 394/1000 [1:22:26<2:06:48, 12.55s/it][Succeeded / Failed / Skipped / Total] 348 / 35 / 11 / 394:  40%|███▉      | 395/1000 [1:23:00<2:07:08, 12.61s/it][Succeeded / Failed / Skipped / Total] 349 / 35 / 11 / 395:  40%|███▉      | 395/1000 [1:23:00<2:07:08, 12.61s/it][Succeeded / Failed / Skipped / Total] 349 / 35 / 11 / 395:  40%|███▉      | 396/1000 [1:23:08<2:06:48, 12.60s/it][Succeeded / Failed / Skipped / Total] 349 / 36 / 11 / 396:  40%|███▉      | 396/1000 [1:23:08<2:06:48, 12.60s/it][Succeeded / Failed / Skipped / Total] 349 / 36 / 11 / 396:  40%|███▉      | 397/1000 [1:23:17<2:06:31, 12.59s/it]Returns a new Initializable instance . --> Create a new dustbins --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[blighty]] ( final T [[dustbins]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[dustbins]] ; } @ Override public String toString ( ) { return String . valueOf ( [[dustbins]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 393 ---------------------------------------------
Executes the given RunStateRecordedFutureTask . --> RunStateRecordedFutureTask . --> Socre: 1.0

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T [[tim]] = null ; if ( null != task ) { try { [[tim]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[tim]] ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 394 ---------------------------------------------
Try to get the given URL . --> Returns the NVD Url if it exists . --> Socre: 1.0

[[[[Adv]]]]: private Url tryGet ( String [[url]] ) { SoftReference < Url > softRef = Url . parsedUrls . get ( [[url]] ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url tryGet ( String [[buffaloes]] ) { SoftReference < Url > softRef = Url . parsedUrls . get ( [[buffaloes]] ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 395 ---------------------------------------------
Registers the default processor . --> safe method --> Socre: 1.0

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > processor ) { if ( this . [[defaultProcessor]] == null ) { this . [[defaultProcessor]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[defaultProcessor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[safe]] ( RemotingProcessor < ? > processor ) { if ( this . [[seduces]] == null ) { this . [[seduces]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[seduces]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 396 ---------------------------------------------
Format messages . --> [[[FAILED]]]

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 397 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 350 / 36 / 11 / 397:  40%|███▉      | 397/1000 [1:23:17<2:06:31, 12.59s/it][Succeeded / Failed / Skipped / Total] 350 / 36 / 11 / 397:  40%|███▉      | 398/1000 [1:23:18<2:06:00, 12.56s/it][Succeeded / Failed / Skipped / Total] 351 / 36 / 11 / 398:  40%|███▉      | 398/1000 [1:23:18<2:06:00, 12.56s/it][Succeeded / Failed / Skipped / Total] 351 / 36 / 11 / 398:  40%|███▉      | 399/1000 [1:23:21<2:05:33, 12.54s/it][Succeeded / Failed / Skipped / Total] 351 / 37 / 11 / 399:  40%|███▉      | 399/1000 [1:23:21<2:05:33, 12.54s/it][Succeeded / Failed / Skipped / Total] 351 / 37 / 11 / 399:  40%|████      | 400/1000 [1:23:24<2:05:07, 12.51s/it][Succeeded / Failed / Skipped / Total] 352 / 37 / 11 / 400:  40%|████      | 400/1000 [1:23:24<2:05:07, 12.51s/it][Succeeded / Failed / Skipped / Total] 352 / 37 / 11 / 400:  40%|████      | 401/1000 [1:23:25<2:04:37, 12.48s/it][Succeeded / Failed / Skipped / Total] 353 / 37 / 11 / 401:  40%|████      | 401/1000 [1:23:25<2:04:37, 12.48s/it][Succeeded / Failed / Skipped / Total] 353 / 37 / 11 / 401:  40%|████      | 402/1000 [1:23:27<2:04:09, 12.46s/it][Succeeded / Failed / Skipped / Total] 354 / 37 / 11 / 402:  40%|████      | 402/1000 [1:23:27<2:04:09, 12.46s/it][Succeeded / Failed / Skipped / Total] 354 / 37 / 11 / 402:  40%|████      | 403/1000 [1:23:32<2:03:46, 12.44s/it][Succeeded / Failed / Skipped / Total] 355 / 37 / 11 / 403:  40%|████      | 403/1000 [1:23:32<2:03:46, 12.44s/it][Succeeded / Failed / Skipped / Total] 355 / 37 / 11 / 403:  40%|████      | 404/1000 [1:23:34<2:03:17, 12.41s/it]Scans the connection pool . --> Remove expired expired tasks . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[scan]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void [[airhead]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 398 ---------------------------------------------
Returns the default processor . --> Returns a composite helios --> Socre: 1.0

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > [[processor]] = this . cmd2processors . get ( [[cmdCode]] ) ; if ( [[processor]] != null ) { return [[processor]] ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode [[dv]] ) { RemotingProcessor < ? > [[helios]] = this . cmd2processors . get ( [[dv]] ) ; if ( [[helios]] != null ) { return [[helios]] ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 399 ---------------------------------------------
Pause stack trace . --> [[[FAILED]]]

[[[[Adv]]]]: private void pruneStacktrace ( Throwable [[throwable]] ) { for ( Throwable t = [[throwable]] ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void pruneStacktrace ( Throwable [[tilts]] ) { for ( Throwable t = [[tilts]] ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 400 ---------------------------------------------
Returns the connection to the specified URL . --> Intercepts a connection --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[betweens]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 401 ---------------------------------------------
Create a connection andHealIfNeed . --> Drains a Url --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[amily]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 402 ---------------------------------------------
Remove a task . --> Removes the specified pool from the pool . --> Socre: 1.0

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . [[connTasks]] . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . [[lordship]] . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 403 ---------------------------------------------
Close connection . --> Closes the connection --> Socre: 1.0

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . [[connectionManager]] . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . [[bermuda]] . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 404 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 356 / 37 / 11 / 404:  40%|████      | 404/1000 [1:23:34<2:03:17, 12.41s/it][Succeeded / Failed / Skipped / Total] 356 / 37 / 11 / 404:  40%|████      | 405/1000 [1:23:43<2:03:00, 12.40s/it][Succeeded / Failed / Skipped / Total] 356 / 38 / 11 / 405:  40%|████      | 405/1000 [1:23:43<2:03:00, 12.40s/it][Succeeded / Failed / Skipped / Total] 356 / 38 / 11 / 405:  41%|████      | 406/1000 [1:23:46<2:02:33, 12.38s/it][Succeeded / Failed / Skipped / Total] 357 / 38 / 11 / 406:  41%|████      | 406/1000 [1:23:46<2:02:33, 12.38s/it][Succeeded / Failed / Skipped / Total] 357 / 38 / 11 / 406:  41%|████      | 407/1000 [1:23:48<2:02:06, 12.36s/it][Succeeded / Failed / Skipped / Total] 358 / 38 / 11 / 407:  41%|████      | 407/1000 [1:23:48<2:02:06, 12.36s/it][Succeeded / Failed / Skipped / Total] 358 / 38 / 11 / 407:  41%|████      | 408/1000 [1:23:54<2:01:45, 12.34s/it][Succeeded / Failed / Skipped / Total] 359 / 38 / 11 / 408:  41%|████      | 408/1000 [1:23:54<2:01:45, 12.34s/it][Succeeded / Failed / Skipped / Total] 359 / 38 / 11 / 408:  41%|████      | 409/1000 [1:23:57<2:01:18, 12.32s/it][Succeeded / Failed / Skipped / Total] 360 / 38 / 11 / 409:  41%|████      | 409/1000 [1:23:57<2:01:18, 12.32s/it]Create a new task . --> Creates an oidio . --> Socre: 1.0

[[[[Adv]]]]: private void [[doCreate]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void [[anzio]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 405 ---------------------------------------------
Creates a new Message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message create ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 406 ---------------------------------------------
Retrieve the pool key for the given url . --> Gibt zurueck . --> Socre: 1.0

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool pool , Url [[url]] ) throws RemotingException , InterruptedException { String poolKey = [[url]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool pool , Url [[frisbees]] ) throws RemotingException , InterruptedException { String poolKey = [[frisbees]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 407 ---------------------------------------------
Handles the connection . --> Registers the connection --> Socre: 1.0

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture [[future]] = entry . getValue ( ) ; if ( [[future]] != null ) { [[future]] . putResponse ( [[future]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[future]] . cancelTimeout ( ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture [[persecutor]] = entry . getValue ( ) ; if ( [[persecutor]] != null ) { [[persecutor]] . putResponse ( [[persecutor]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[persecutor]] . cancelTimeout ( ) ; [[persecutor]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 408 ---------------------------------------------
Decodes the protocol code . --> Return ProtocolCode perpetua . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf [[in]] ) { if ( [[in]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[in]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[perpetua]] ( ByteBuf [[publisher]] ) { if ( [[publisher]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[publisher]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 409 ---------------------------------------------
Register a UserProcessor --> Registers a MultiInterestUserProcessor --> Socre: 1.0

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String [[interest]] : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[interest]] , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[interest]] + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String [[colonoscopy]] : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[colonoscopy]] , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[colonoscopy]] + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 410 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 361 / 38 / 11 / 410:  41%|████      | 410/1000 [1:23:57<2:00:48, 12.29s/it][Succeeded / Failed / Skipped / Total] 361 / 38 / 11 / 410:  41%|████      | 411/1000 [1:23:57<2:00:19, 12.26s/it][Succeeded / Failed / Skipped / Total] 361 / 38 / 12 / 411:  41%|████      | 411/1000 [1:23:57<2:00:19, 12.26s/it][Succeeded / Failed / Skipped / Total] 362 / 38 / 12 / 412:  41%|████      | 412/1000 [1:23:59<1:59:51, 12.23s/it][Succeeded / Failed / Skipped / Total] 362 / 38 / 12 / 412:  41%|████▏     | 413/1000 [1:24:06<1:59:32, 12.22s/it][Succeeded / Failed / Skipped / Total] 363 / 38 / 12 / 413:  41%|████▏     | 413/1000 [1:24:06<1:59:32, 12.22s/it][Succeeded / Failed / Skipped / Total] 364 / 38 / 12 / 414:  41%|████▏     | 414/1000 [1:24:07<1:59:04, 12.19s/it][Succeeded / Failed / Skipped / Total] 364 / 38 / 12 / 414:  42%|████▏     | 415/1000 [1:24:07<1:58:35, 12.16s/it][Succeeded / Failed / Skipped / Total] 365 / 38 / 12 / 415:  42%|████▏     | 415/1000 [1:24:07<1:58:35, 12.16s/it][Succeeded / Failed / Skipped / Total] 366 / 38 / 12 / 416:  42%|████▏     | 416/1000 [1:24:08<1:58:06, 12.14s/it][Succeeded / Failed / Skipped / Total] 366 / 38 / 12 / 416:  42%|████▏     | 417/1000 [1:24:19<1:57:53, 12.13s/it]Register a User processor . --> Registers a UserProcessor --> Socre: 1.0

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[preProcessor]] = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( [[preProcessor]] != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[exhilarated]] = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( [[exhilarated]] != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 411 ---------------------------------------------
Deserializes the RpcRequestCommand . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 412 ---------------------------------------------
Adds a connection event processor . --> This method initializes ConnectionEventProcessor --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType [[type]] , ConnectionEventProcessor [[processor]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[type]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[type]] ) ; } processorList . add ( [[processor]] ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[arizona]] ( ConnectionEventType [[deflectors]] , ConnectionEventProcessor [[alonso]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[deflectors]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[deflectors]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[deflectors]] ) ; } processorList . add ( [[alonso]] ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 413 ---------------------------------------------
print log --> Debugging for debugging . --> Socre: 1.0

[[[[Adv]]]]: private void debugLog ( RemotingContext [[ctx]] , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( [[ctx]] . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void debugLog ( RemotingContext [[perez]] , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( [[perez]] . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 414 ---------------------------------------------
dispatch to user processor --> For debugging --> Socre: 1.0

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext [[ctx]] , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext [[codicil]] , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 415 ---------------------------------------------
Set the attribute value . --> Sets the value for the given object --> Socre: 1.0

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String [[key]] , Object value ) { return attributes . putIfAbsent ( [[key]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String [[sunrise]] , Object value ) { return attributes . putIfAbsent ( [[sunrise]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 416 ---------------------------------------------
Pre - processes the InvokeContext . --> Get the consistency of the current timestamp --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[anchor]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
[Succeeded / Failed / Skipped / Total] 367 / 38 / 12 / 417:  42%|████▏     | 417/1000 [1:24:19<1:57:53, 12.13s/it][Succeeded / Failed / Skipped / Total] 367 / 38 / 12 / 417:  42%|████▏     | 418/1000 [1:24:28<1:57:36, 12.12s/it][Succeeded / Failed / Skipped / Total] 368 / 38 / 12 / 418:  42%|████▏     | 418/1000 [1:24:28<1:57:36, 12.12s/it][Succeeded / Failed / Skipped / Total] 368 / 38 / 12 / 418:  42%|████▏     | 419/1000 [1:24:28<1:57:08, 12.10s/it][Succeeded / Failed / Skipped / Total] 369 / 38 / 12 / 419:  42%|████▏     | 419/1000 [1:24:28<1:57:08, 12.10s/it][Succeeded / Failed / Skipped / Total] 369 / 38 / 12 / 419:  42%|████▏     | 420/1000 [1:24:28<1:56:39, 12.07s/it][Succeeded / Failed / Skipped / Total] 369 / 38 / 13 / 420:  42%|████▏     | 420/1000 [1:24:28<1:56:39, 12.07s/it][Succeeded / Failed / Skipped / Total] 369 / 38 / 13 / 420:  42%|████▏     | 421/1000 [1:24:34<1:56:19, 12.05s/it][Succeeded / Failed / Skipped / Total] 370 / 38 / 13 / 421:  42%|████▏     | 421/1000 [1:24:34<1:56:19, 12.05s/it][Succeeded / Failed / Skipped / Total] 370 / 38 / 13 / 421:  42%|████▏     | 422/1000 [1:24:35<1:55:51, 12.03s/it][Succeeded / Failed / Skipped / Total] 371 / 38 / 13 / 422:  42%|████▏     | 422/1000 [1:24:35<1:55:51, 12.03s/it][Succeeded / Failed / Skipped / Total] 371 / 38 / 13 / 422:  42%|████▏     | 423/1000 [1:24:35<1:55:23, 12.00s/it]--------------------------------------------- Result 417 ---------------------------------------------
Register processor . --> Bungler an event --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode [[cmdCode]] , RemotingProcessor < ? > processor ) { if ( this . [[cmd2processors]] . containsKey ( [[cmdCode]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[cmdCode]] , cmd2processors . get ( [[cmdCode]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . [[cmd2processors]] . put ( [[cmdCode]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[bungler]] ( CommandCode [[eagleton]] , RemotingProcessor < ? > processor ) { if ( this . [[atten]] . containsKey ( [[eagleton]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[eagleton]] , cmd2processors . get ( [[eagleton]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . [[atten]] . put ( [[eagleton]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 418 ---------------------------------------------
Convert an int value to a BitSet . --> Converts an int into a BitSet . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet [[bs]] = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { [[bs]] . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return [[bs]] ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet [[argo]] = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { [[argo]] . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return [[argo]] ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 419 ---------------------------------------------
Convert a bit set to a byte . --> Returns the ray of the given BitSet . --> Socre: 1.0

[[[[Adv]]]]: public static byte toByte ( BitSet bs ) { int [[value]] = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { [[value]] += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[value]] + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[value]] ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte toByte ( BitSet bs ) { int [[rays]] = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { [[rays]] += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[rays]] + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[rays]] ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 420 ---------------------------------------------
Stops the connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 421 ---------------------------------------------
timeout log . --> Attempt to parse the remote address --> Socre: 1.0

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long [[currentTimestamp]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[currentTimestamp]] , cmd . getArriveTime ( ) , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long [[whitehouse]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[whitehouse]] , cmd . getArriveTime ( ) , ( [[whitehouse]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( [[whitehouse]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 422 ---------------------------------------------
Add a url to the list of tasks --> Adds a URL to the pool --> Socre: 1.0

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask [[task]] = new ReconnectTask ( ) ; [[task]] . url = url ; tasks . add ( [[task]] ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask [[adequate]] = new ReconnectTask ( ) ; [[adequate]] . url = url ; tasks . add ( [[adequate]] ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 423 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 371 / 38 / 14 / 423:  42%|████▏     | 423/1000 [1:24:35<1:55:23, 12.00s/it][Succeeded / Failed / Skipped / Total] 371 / 38 / 14 / 423:  42%|████▏     | 424/1000 [1:24:39<1:54:59, 11.98s/it][Succeeded / Failed / Skipped / Total] 372 / 38 / 14 / 424:  42%|████▏     | 424/1000 [1:24:39<1:54:59, 11.98s/it][Succeeded / Failed / Skipped / Total] 372 / 38 / 14 / 424:  42%|████▎     | 425/1000 [1:24:39<1:54:31, 11.95s/it][Succeeded / Failed / Skipped / Total] 372 / 38 / 15 / 425:  42%|████▎     | 425/1000 [1:24:39<1:54:31, 11.95s/it][Succeeded / Failed / Skipped / Total] 372 / 38 / 15 / 425:  43%|████▎     | 426/1000 [1:24:41<1:54:07, 11.93s/it][Succeeded / Failed / Skipped / Total] 373 / 38 / 15 / 426:  43%|████▎     | 426/1000 [1:24:41<1:54:07, 11.93s/it][Succeeded / Failed / Skipped / Total] 373 / 38 / 15 / 426:  43%|████▎     | 427/1000 [1:24:44<1:53:42, 11.91s/it][Succeeded / Failed / Skipped / Total] 374 / 38 / 15 / 427:  43%|████▎     | 427/1000 [1:24:44<1:53:42, 11.91s/it][Succeeded / Failed / Skipped / Total] 374 / 38 / 15 / 427:  43%|████▎     | 428/1000 [1:24:45<1:53:16, 11.88s/it]Monitors the specified RunStateRecordedFutureTask --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 424 ---------------------------------------------
Executes the given executor . --> ProcessTask --> Socre: 1.0

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[task]] = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[task]] ) ; } else { defaultExecutor . execute ( [[task]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[phil]] = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[phil]] ) ; } else { defaultExecutor . execute ( [[phil]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 425 ---------------------------------------------
Get boolean . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean getBool ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 426 ---------------------------------------------
Return a map of all connections --> Unpacking connection pool --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[iterator]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[iterator]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[unequivocal]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[frosty]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[frosty]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[frosty]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 427 ---------------------------------------------
Log info . --> Method infoLog . --> Socre: 1.0

[[[[Adv]]]]: private void infoLog ( String [[format]] , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( [[format]] , addr ) ; } else { logger . info ( [[format]] , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void infoLog ( String [[refuses]] , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( [[refuses]] , addr ) ; } else { logger . info ( [[refuses]] , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 428 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 375 / 38 / 15 / 428:  43%|████▎     | 428/1000 [1:24:45<1:53:16, 11.88s/it][Succeeded / Failed / Skipped / Total] 375 / 38 / 15 / 428:  43%|████▎     | 429/1000 [1:24:47<1:52:51, 11.86s/it][Succeeded / Failed / Skipped / Total] 376 / 38 / 15 / 429:  43%|████▎     | 429/1000 [1:24:47<1:52:51, 11.86s/it][Succeeded / Failed / Skipped / Total] 376 / 38 / 15 / 429:  43%|████▎     | 430/1000 [1:24:48<1:52:24, 11.83s/it][Succeeded / Failed / Skipped / Total] 376 / 38 / 16 / 430:  43%|████▎     | 430/1000 [1:24:48<1:52:24, 11.83s/it][Succeeded / Failed / Skipped / Total] 376 / 38 / 16 / 430:  43%|████▎     | 431/1000 [1:24:49<1:51:59, 11.81s/it][Succeeded / Failed / Skipped / Total] 377 / 38 / 16 / 431:  43%|████▎     | 431/1000 [1:24:49<1:51:59, 11.81s/it][Succeeded / Failed / Skipped / Total] 377 / 38 / 16 / 431:  43%|████▎     | 432/1000 [1:24:51<1:51:34, 11.79s/it][Succeeded / Failed / Skipped / Total] 378 / 38 / 16 / 432:  43%|████▎     | 432/1000 [1:24:51<1:51:34, 11.79s/it][Succeeded / Failed / Skipped / Total] 378 / 38 / 16 / 432:  43%|████▎     | 433/1000 [1:24:53<1:51:10, 11.76s/it][Succeeded / Failed / Skipped / Total] 379 / 38 / 16 / 433:  43%|████▎     | 433/1000 [1:24:53<1:51:10, 11.76s/it][Succeeded / Failed / Skipped / Total] 379 / 38 / 16 / 433:  43%|████▎     | 434/1000 [1:24:55<1:50:44, 11.74s/it][Succeeded / Failed / Skipped / Total] 380 / 38 / 16 / 434:  43%|████▎     | 434/1000 [1:24:55<1:50:44, 11.74s/it][Succeeded / Failed / Skipped / Total] 380 / 38 / 16 / 434:  44%|████▎     | 435/1000 [1:25:02<1:50:27, 11.73s/it]Filter connection parameters --> Performs a abhors . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[filter]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[abhors]] ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 429 ---------------------------------------------
Close the connection to the service off connection --> Method activator . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[activator]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 430 ---------------------------------------------
Returns the value associated with the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 431 ---------------------------------------------
Is request timeout boolean . --> Returns true if the kohinoor is 0 . --> Socre: 1.0

[[[[Adv]]]]: public boolean isRequestTimeout ( ) { if ( this . [[timeout]] > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . [[timeout]] ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean isRequestTimeout ( ) { if ( this . [[kohinoor]] > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . [[kohinoor]] ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 432 ---------------------------------------------
Generate a call to execute a call . --> Create a RpcRequestCommand --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection conn , InvokeContext invokeContext , int [[timeoutMillis]] ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection conn , InvokeContext invokeContext , int [[chafe]] ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 433 ---------------------------------------------
Returns a random connection . --> Returns the next random check . --> Socre: 1.0

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection [[result]] = null ; while ( ( [[result]] == null || ! [[result]] . isFine ( ) ) && tries ++ < MAX_TIMES ) { [[result]] = conns . get ( this . random . nextInt ( size ) ) ; } if ( [[result]] != null && ! [[result]] . isFine ( ) ) { [[result]] = null ; } return [[result]] ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection [[assuring]] = null ; while ( ( [[assuring]] == null || ! [[assuring]] . isFine ( ) ) && tries ++ < MAX_TIMES ) { [[assuring]] = conns . get ( this . random . nextInt ( size ) ) ; } if ( [[assuring]] != null && ! [[assuring]] . isFine ( ) ) { [[assuring]] = null ; } return [[assuring]] ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 434 ---------------------------------------------
Gets the property . --> Returns the jill option . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[jillette]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 435 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 381 / 38 / 16 / 435:  44%|████▎     | 435/1000 [1:25:02<1:50:27, 11.73s/it][Succeeded / Failed / Skipped / Total] 381 / 38 / 16 / 435:  44%|████▎     | 436/1000 [1:25:10<1:50:11, 11.72s/it][Succeeded / Failed / Skipped / Total] 382 / 38 / 16 / 436:  44%|████▎     | 436/1000 [1:25:10<1:50:11, 11.72s/it][Succeeded / Failed / Skipped / Total] 382 / 38 / 16 / 436:  44%|████▎     | 437/1000 [1:25:16<1:49:51, 11.71s/it][Succeeded / Failed / Skipped / Total] 383 / 38 / 16 / 437:  44%|████▎     | 437/1000 [1:25:16<1:49:51, 11.71s/it][Succeeded / Failed / Skipped / Total] 383 / 38 / 16 / 437:  44%|████▍     | 438/1000 [1:25:17<1:49:26, 11.68s/it][Succeeded / Failed / Skipped / Total] 384 / 38 / 16 / 438:  44%|████▍     | 438/1000 [1:25:17<1:49:26, 11.68s/it][Succeeded / Failed / Skipped / Total] 384 / 38 / 16 / 438:  44%|████▍     | 439/1000 [1:25:25<1:49:09, 11.67s/it][Succeeded / Failed / Skipped / Total] 385 / 38 / 16 / 439:  44%|████▍     | 439/1000 [1:25:25<1:49:09, 11.67s/it][Succeeded / Failed / Skipped / Total] 385 / 38 / 16 / 439:  44%|████▍     | 440/1000 [1:25:27<1:48:45, 11.65s/it][Succeeded / Failed / Skipped / Total] 386 / 38 / 16 / 440:  44%|████▍     | 440/1000 [1:25:27<1:48:45, 11.65s/it][Succeeded / Failed / Skipped / Total] 386 / 38 / 16 / 440:  44%|████▍     | 441/1000 [1:25:39<1:48:34, 11.65s/it]Formats the error message . --> Gets detailErrMsg . --> Socre: 1.0

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[resp]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , [[resp]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand [[birthed]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[birthed]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , [[birthed]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 436 ---------------------------------------------
Creates a RpcServerException . --> Returns a new RpcServerException --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[convulsion]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 437 ---------------------------------------------
Convert the ResponseCommand to a Throwable . --> Parses the ResponseCommand and throws an exception --> Socre: 1.0

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object [[ex]] = resp . getResponseObject ( ) ; if ( [[ex]] != null && [[ex]] instanceof Throwable ) { return ( Throwable ) [[ex]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object [[understudy]] = resp . getResponseObject ( ) ; if ( [[understudy]] != null && [[understudy]] instanceof Throwable ) { return ( Throwable ) [[understudy]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 438 ---------------------------------------------
Invoked when the remote address is complete . --> Called when the remote address is received --> Socre: 1.0

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[f]] ) throws Exception { if ( ! [[f]] . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , [[f]] . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[decides]] ) throws Exception { if ( ! [[decides]] . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , [[decides]] . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 439 ---------------------------------------------
Parse the remote address . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[london]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 440 ---------------------------------------------
Returns the response object from the ResponseCommand . --> return katalin ResponseCommand --> Socre: 1.0

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[response]] = ( RpcResponseCommand ) responseCommand ; [[response]] . deserialize ( ) ; return [[response]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[katalin]] = ( RpcResponseCommand ) responseCommand ; [[katalin]] . deserialize ( ) ; return [[katalin]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 441 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 387 / 38 / 16 / 441:  44%|████▍     | 441/1000 [1:25:39<1:48:34, 11.65s/it][Succeeded / Failed / Skipped / Total] 387 / 38 / 16 / 441:  44%|████▍     | 442/1000 [1:25:39<1:48:08, 11.63s/it][Succeeded / Failed / Skipped / Total] 388 / 38 / 16 / 442:  44%|████▍     | 442/1000 [1:25:39<1:48:08, 11.63s/it][Succeeded / Failed / Skipped / Total] 388 / 38 / 16 / 442:  44%|████▍     | 443/1000 [1:26:17<1:48:29, 11.69s/it][Succeeded / Failed / Skipped / Total] 389 / 38 / 16 / 443:  44%|████▍     | 443/1000 [1:26:17<1:48:29, 11.69s/it][Succeeded / Failed / Skipped / Total] 389 / 38 / 16 / 443:  44%|████▍     | 444/1000 [1:26:19<1:48:06, 11.67s/it]Close the connection . --> dilution --> Socre: 1.0

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[disembarking]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[clips]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[clips]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 442 ---------------------------------------------
Invokes the request with a callback . --> Executes a remote server --> Socre: 1.0

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection [[conn]] , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( [[conn]] , request , request . getInvokeContext ( ) , invokeCallback ) ; [[conn]] . addInvokeFuture ( future ) ; final int [[requestId]] = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = [[conn]] . removeInvokeFuture ( [[requestId]] ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( [[conn]] . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; [[conn]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = [[conn]] . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = [[conn]] . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection [[på]] , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( [[på]] , request , request . getInvokeContext ( ) , invokeCallback ) ; [[på]] . addInvokeFuture ( future ) ; final int [[cayetano]] = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = [[på]] . removeInvokeFuture ( [[cayetano]] ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( [[på]] . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; [[på]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = [[på]] . removeInvokeFuture ( [[cayetano]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[på]] . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[på]] . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = [[på]] . removeInvokeFuture ( [[cayetano]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[på]] . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[på]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 443 ---------------------------------------------
Prints the connection trace log --> Prints out the connection traceLog . --> Socre: 1.0

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger [[logger]] , String [[traceId]] , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( [[traceId]] ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( [[logger]] . isInfoEnabled ( ) ) { [[logger]] . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger [[beauty]] , String [[corny]] , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( [[corny]] ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( [[beauty]] . isInfoEnabled ( ) ) { [[beauty]] . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 444 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 390 / 38 / 16 / 444:  44%|████▍     | 444/1000 [1:26:19<1:48:06, 11.67s/it][Succeeded / Failed / Skipped / Total] 390 / 38 / 16 / 444:  44%|████▍     | 445/1000 [1:26:22<1:47:43, 11.65s/it][Succeeded / Failed / Skipped / Total] 391 / 38 / 16 / 445:  44%|████▍     | 445/1000 [1:26:22<1:47:43, 11.65s/it][Succeeded / Failed / Skipped / Total] 391 / 38 / 16 / 445:  45%|████▍     | 446/1000 [1:26:38<1:47:37, 11.66s/it][Succeeded / Failed / Skipped / Total] 392 / 38 / 16 / 446:  45%|████▍     | 446/1000 [1:26:38<1:47:37, 11.66s/it][Succeeded / Failed / Skipped / Total] 392 / 38 / 16 / 446:  45%|████▍     | 447/1000 [1:27:12<1:47:53, 11.71s/it][Succeeded / Failed / Skipped / Total] 393 / 38 / 16 / 447:  45%|████▍     | 447/1000 [1:27:12<1:47:53, 11.71s/it][Succeeded / Failed / Skipped / Total] 393 / 38 / 16 / 447:  45%|████▍     | 448/1000 [1:27:14<1:47:29, 11.68s/it][Succeeded / Failed / Skipped / Total] 394 / 38 / 16 / 448:  45%|████▍     | 448/1000 [1:27:14<1:47:29, 11.68s/it][Succeeded / Failed / Skipped / Total] 394 / 38 / 16 / 448:  45%|████▍     | 449/1000 [1:27:19<1:47:10, 11.67s/it][Succeeded / Failed / Skipped / Total] 395 / 38 / 16 / 449:  45%|████▍     | 449/1000 [1:27:19<1:47:10, 11.67s/it][Succeeded / Failed / Skipped / Total] 395 / 38 / 16 / 449:  45%|████▌     | 450/1000 [1:27:21<1:46:45, 11.65s/it][Succeeded / Failed / Skipped / Total] 396 / 38 / 16 / 450:  45%|████▌     | 450/1000 [1:27:21<1:46:45, 11.65s/it][Succeeded / Failed / Skipped / Total] 396 / 38 / 16 / 450:  45%|████▌     | 451/1000 [1:27:23<1:46:22, 11.63s/it][Succeeded / Failed / Skipped / Total] 397 / 38 / 16 / 451:  45%|████▌     | 451/1000 [1:27:23<1:46:22, 11.63s/it][Succeeded / Failed / Skipped / Total] 397 / 38 / 16 / 451:  45%|████▌     | 452/1000 [1:27:34<1:46:10, 11.63s/it][Succeeded / Failed / Skipped / Total] 398 / 38 / 16 / 452:  45%|████▌     | 452/1000 [1:27:34<1:46:10, 11.63s/it][Succeeded / Failed / Skipped / Total] 398 / 38 / 16 / 452:  45%|████▌     | 453/1000 [1:27:41<1:45:52, 11.61s/it]Get user processor by name . --> Transwarp by className --> Socre: 1.0

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String className ) { return StringUtils . isBlank ( className ) ? null : this . [[userProcessors]] . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[transwarp]] ( String className ) { return StringUtils . isBlank ( className ) ? null : this . [[charming]] . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 445 ---------------------------------------------
Parse the given local address from the given channel . --> goebbels --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress local = channel . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[goebbels]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress local = channel . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
Parse the addresses of an ip address . --> Returns nebuchadnezzar --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[nebuchadnezzar]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 447 ---------------------------------------------
Parse the remote address . --> Return null if empty --> Socre: 1.0

[[[[Adv]]]]: public static String parseRemoteHostName ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String parseRemoteHostName ( final Channel [[candy]] ) { if ( null == [[candy]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[δ]] = ( InetSocketAddress ) [[candy]] . remoteAddress ( ) ; if ( [[δ]] != null ) { return [[δ]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Returns a new event loop group . --> Factory method for new EpollEventLoopGroup --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int [[nThreads]] , ThreadFactory [[threadFactory]] ) { return epollEnabled ? new EpollEventLoopGroup ( [[nThreads]] , [[threadFactory]] ) : new NioEventLoopGroup ( [[nThreads]] , [[threadFactory]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int [[dev]] , ThreadFactory [[sylvester]] ) { return epollEnabled ? new EpollEventLoopGroup ( [[dev]] , [[sylvester]] ) : new NioEventLoopGroup ( [[dev]] , [[sylvester]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 449 ---------------------------------------------
Removes and closes the connection . --> Cleans websocket . --> Socre: 1.0

[[[[Adv]]]]: public void [[removeAndTryClose]] ( Connection connection ) { if ( null == connection ) { return ; } boolean res = this . conns . remove ( connection ) ; if ( res ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void [[corny]] ( Connection connection ) { if ( null == connection ) { return ; } boolean res = this . conns . remove ( connection ) ; if ( res ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 450 ---------------------------------------------
Returns the connection . --> Returns the hub . --> Socre: 1.0

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . [[strategy]] . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . [[hubie]] . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 451 ---------------------------------------------
Parses the local port . --> Return - 1 if available --> Socre: 1.0

[[[[Adv]]]]: public static int parseLocalPort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int parseLocalPort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[motorboat]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[motorboat]] != null ) { return [[motorboat]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 452 ---------------------------------------------
Parse the remote address . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[linguistic]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[lifted]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[lifted]] != null ) { return [[lifted]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 399 / 38 / 16 / 453:  45%|████▌     | 453/1000 [1:27:41<1:45:52, 11.61s/it][Succeeded / Failed / Skipped / Total] 399 / 38 / 16 / 453:  45%|████▌     | 454/1000 [1:27:41<1:45:27, 11.59s/it][Succeeded / Failed / Skipped / Total] 399 / 38 / 17 / 454:  45%|████▌     | 454/1000 [1:27:41<1:45:27, 11.59s/it][Succeeded / Failed / Skipped / Total] 399 / 38 / 17 / 454:  46%|████▌     | 455/1000 [1:27:49<1:45:12, 11.58s/it][Succeeded / Failed / Skipped / Total] 400 / 38 / 17 / 455:  46%|████▌     | 455/1000 [1:27:49<1:45:12, 11.58s/it][Succeeded / Failed / Skipped / Total] 400 / 38 / 17 / 455:  46%|████▌     | 456/1000 [1:28:01<1:45:01, 11.58s/it][Succeeded / Failed / Skipped / Total] 401 / 38 / 17 / 456:  46%|████▌     | 456/1000 [1:28:01<1:45:01, 11.58s/it][Succeeded / Failed / Skipped / Total] 401 / 38 / 17 / 456:  46%|████▌     | 457/1000 [1:28:01<1:44:35, 11.56s/it][Succeeded / Failed / Skipped / Total] 401 / 38 / 18 / 457:  46%|████▌     | 457/1000 [1:28:01<1:44:35, 11.56s/it][Succeeded / Failed / Skipped / Total] 401 / 38 / 18 / 457:  46%|████▌     | 458/1000 [1:28:11<1:44:21, 11.55s/it][Succeeded / Failed / Skipped / Total] 402 / 38 / 18 / 458:  46%|████▌     | 458/1000 [1:28:11<1:44:21, 11.55s/it][Succeeded / Failed / Skipped / Total] 402 / 38 / 18 / 458:  46%|████▌     | 459/1000 [1:28:17<1:44:04, 11.54s/it][Succeeded / Failed / Skipped / Total] 403 / 38 / 18 / 459:  46%|████▌     | 459/1000 [1:28:17<1:44:04, 11.54s/it][Succeeded / Failed / Skipped / Total] 403 / 38 / 18 / 459:  46%|████▌     | 460/1000 [1:28:18<1:43:39, 11.52s/it][Succeeded / Failed / Skipped / Total] 404 / 38 / 18 / 460:  46%|████▌     | 460/1000 [1:28:18<1:43:39, 11.52s/it][Succeeded / Failed / Skipped / Total] 404 / 38 / 18 / 460:  46%|████▌     | 461/1000 [1:28:20<1:43:17, 11.50s/it]Resolves the response object . --> Issue an invocation exception --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String [[addr]] ) throws RemotingException { preProcess ( responseCommand , [[addr]] ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String [[msg]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , [[addr]] , responseCommand . getId ( ) ) ; logger . warn ( [[msg]] ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( [[msg]] , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( [[msg]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[riordan]] ( ResponseCommand responseCommand , String [[modula]] ) throws RemotingException { preProcess ( responseCommand , [[modula]] ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String [[obstructions]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , [[modula]] , responseCommand . getId ( ) ) ; logger . warn ( [[obstructions]] ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( [[obstructions]] , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( [[obstructions]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 454 ---------------------------------------------
Starts the monitor . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 455 ---------------------------------------------
Returns the CustomSerializer for the command . --> Returns null if there is no customSerializer --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( CommandCode [[fixture]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[fixture]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 456 ---------------------------------------------
Parse the remote port . --> returns - 1 if not found --> Socre: 1.0

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[ankh]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[smalltime]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[smalltime]] != null ) { return [[smalltime]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 457 ---------------------------------------------
Returns 1 . 2 . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 458 ---------------------------------------------
Determines whether or not the given channel is connected . --> Determine if a channel is a WrappedByte channel . --> Socre: 1.0

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer [[buffer]] = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( [[buffer]] == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer [[etta]] = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( [[etta]] == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 459 ---------------------------------------------
This method initialises the high water mark . --> initialize writeBufferWaterMark --> Socre: 1.0

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . [[bootstrap]] . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . [[nasher]] . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 460 ---------------------------------------------
set the value code --> Trainer only . --> Socre: 1.0

[[[[Adv]]]]: public void setCode ( int code ) { this . [[code]] = code ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void setCode ( int code ) { this . [[boneless]] = code ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 461 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 405 / 38 / 18 / 461:  46%|████▌     | 461/1000 [1:28:20<1:43:17, 11.50s/it][Succeeded / Failed / Skipped / Total] 405 / 38 / 18 / 461:  46%|████▌     | 462/1000 [1:28:25<1:42:57, 11.48s/it][Succeeded / Failed / Skipped / Total] 406 / 38 / 18 / 462:  46%|████▌     | 462/1000 [1:28:25<1:42:57, 11.48s/it][Succeeded / Failed / Skipped / Total] 406 / 38 / 18 / 462:  46%|████▋     | 463/1000 [1:28:26<1:42:34, 11.46s/it][Succeeded / Failed / Skipped / Total] 407 / 38 / 18 / 463:  46%|████▋     | 463/1000 [1:28:26<1:42:34, 11.46s/it][Succeeded / Failed / Skipped / Total] 407 / 38 / 18 / 463:  46%|████▋     | 464/1000 [1:28:26<1:42:09, 11.44s/it][Succeeded / Failed / Skipped / Total] 408 / 38 / 18 / 464:  46%|████▋     | 464/1000 [1:28:26<1:42:09, 11.44s/it][Succeeded / Failed / Skipped / Total] 408 / 38 / 18 / 464:  46%|████▋     | 465/1000 [1:28:28<1:41:47, 11.42s/it][Succeeded / Failed / Skipped / Total] 409 / 38 / 18 / 465:  46%|████▋     | 465/1000 [1:28:28<1:41:47, 11.42s/it][Succeeded / Failed / Skipped / Total] 409 / 38 / 18 / 465:  47%|████▋     | 466/1000 [1:28:32<1:41:27, 11.40s/it][Succeeded / Failed / Skipped / Total] 410 / 38 / 18 / 466:  47%|████▋     | 466/1000 [1:28:32<1:41:27, 11.40s/it][Succeeded / Failed / Skipped / Total] 410 / 38 / 18 / 466:  47%|████▋     | 467/1000 [1:28:33<1:41:04, 11.38s/it][Succeeded / Failed / Skipped / Total] 411 / 38 / 18 / 467:  47%|████▋     | 467/1000 [1:28:33<1:41:04, 11.38s/it][Succeeded / Failed / Skipped / Total] 411 / 38 / 18 / 467:  47%|████▋     | 468/1000 [1:28:35<1:40:41, 11.36s/it][Succeeded / Failed / Skipped / Total] 412 / 38 / 18 / 468:  47%|████▋     | 468/1000 [1:28:35<1:40:42, 11.36s/it][Succeeded / Failed / Skipped / Total] 412 / 38 / 18 / 468:  47%|████▋     | 469/1000 [1:28:36<1:40:19, 11.34s/it]Gets the local IP . --> Return indefatigable string --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[markl]] ( final Channel [[indefatigable]] ) { if ( null == [[indefatigable]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[indefatigable]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 462 ---------------------------------------------
Validate UTF - 8 bytes --> ada message . --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[ada]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 463 ---------------------------------------------
Check if the remote address is connected . --> Gets the mobile connection . --> Socre: 1.0

[[[[Adv]]]]: public boolean isConnected ( String remoteAddr ) { Url [[url]] = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( [[url]] ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean isConnected ( String remoteAddr ) { Url [[condom]] = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( [[condom]] ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 464 ---------------------------------------------
Adds a connection . --> Sets the hamsters . --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean res = this . [[conns]] . addIfAbsent ( connection ) ; if ( res ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[hamsters]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean res = this . [[gorilla]] . addIfAbsent ( connection ) ; if ( res ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 465 ---------------------------------------------
Checks if the given protocol is valid . --> jinn . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[jinn]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 466 ---------------------------------------------
Translate single frame check length limit . --> Translate aerodynamic to aerodynamic --> Socre: 1.0

[[[[Adv]]]]: private void translateSingleFrameCheckLengthLimit ( long [[length]] ) throws LimitExceededException { if ( [[length]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[length]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[length]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[length]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void translateSingleFrameCheckLengthLimit ( long [[aerodynamic]] ) throws LimitExceededException { if ( [[aerodynamic]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[aerodynamic]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[aerodynamic]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[aerodynamic]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 467 ---------------------------------------------
Translate a single -Frame check - size --> SimplecompleteException --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[agry]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 468 ---------------------------------------------
Updates the payload . --> Set pay . --> Socre: 1.0

[[[[Adv]]]]: private void updatePayload ( ) { byte [ ] [[by]] = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + [[by]] . length ) ; pay . put ( buf ) ; pay . put ( [[by]] ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void updatePayload ( ) { byte [ ] [[titillating]] = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + [[titillating]] . length ) ; pay . put ( buf ) ; pay . put ( [[titillating]] ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 469 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 413 / 38 / 18 / 469:  47%|████▋     | 469/1000 [1:28:36<1:40:19, 11.34s/it][Succeeded / Failed / Skipped / Total] 413 / 38 / 18 / 469:  47%|████▋     | 470/1000 [1:28:37<1:39:56, 11.31s/it][Succeeded / Failed / Skipped / Total] 414 / 38 / 18 / 470:  47%|████▋     | 470/1000 [1:28:37<1:39:56, 11.31s/it][Succeeded / Failed / Skipped / Total] 414 / 38 / 18 / 470:  47%|████▋     | 471/1000 [1:28:38<1:39:33, 11.29s/it][Succeeded / Failed / Skipped / Total] 415 / 38 / 18 / 471:  47%|████▋     | 471/1000 [1:28:38<1:39:33, 11.29s/it][Succeeded / Failed / Skipped / Total] 415 / 38 / 18 / 471:  47%|████▋     | 472/1000 [1:28:59<1:39:33, 11.31s/it][Succeeded / Failed / Skipped / Total] 416 / 38 / 18 / 472:  47%|████▋     | 472/1000 [1:28:59<1:39:33, 11.31s/it][Succeeded / Failed / Skipped / Total] 417 / 38 / 18 / 473:  47%|████▋     | 473/1000 [1:28:59<1:39:09, 11.29s/it][Succeeded / Failed / Skipped / Total] 417 / 38 / 18 / 473:  47%|████▋     | 474/1000 [1:29:17<1:39:04, 11.30s/it][Succeeded / Failed / Skipped / Total] 418 / 38 / 18 / 474:  47%|████▋     | 474/1000 [1:29:17<1:39:04, 11.30s/it][Succeeded / Failed / Skipped / Total] 418 / 38 / 18 / 474:  48%|████▊     | 475/1000 [1:29:17<1:38:41, 11.28s/it][Succeeded / Failed / Skipped / Total] 419 / 38 / 18 / 475:  48%|████▊     | 475/1000 [1:29:17<1:38:41, 11.28s/it][Succeeded / Failed / Skipped / Total] 419 / 38 / 18 / 475:  48%|████▊     | 476/1000 [1:29:24<1:38:25, 11.27s/it][Succeeded / Failed / Skipped / Total] 420 / 38 / 18 / 476:  48%|████▊     | 476/1000 [1:29:24<1:38:25, 11.27s/it][Succeeded / Failed / Skipped / Total] 420 / 38 / 18 / 476:  48%|████▊     | 477/1000 [1:29:25<1:38:02, 11.25s/it]Perform a Close frame . --> Handle guardrail . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[guardrail]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 470 ---------------------------------------------
Process the binary frame --> ProcessFrameBinary . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameBinary ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , [[frame]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void processFrameBinary ( WebSocketImpl webSocketImpl , Framedata [[azul]] ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , [[azul]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 471 ---------------------------------------------
Logs the websocket error . --> Logs websocket message . --> Socre: 1.0

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException [[e]] ) { log . error ( "Runtime exception during onWebsocketMessage" , [[e]] ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , [[e]] ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException [[hindered]] ) { log . error ( "Runtime exception during onWebsocketMessage" , [[hindered]] ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , [[hindered]] ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 472 ---------------------------------------------
Process a text frame --> ProcessFrameText --> Socre: 1.0

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[frame]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl webSocketImpl , Framedata [[trash]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[trash]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 473 ---------------------------------------------
Gets the custom serializer . --> Return CustomSerializer by richly --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[kingdoms]] ( String [[richly]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[richly]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 474 ---------------------------------------------
Check the maxFrame limit . --> Validates maxFrameSize . --> Socre: 1.0

[[[[Adv]]]]: private void checkBufferLimit ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void checkBufferLimit ( ) throws LimitExceededException { long [[koenig]] = getByteBufferListSize ( ) ; if ( [[koenig]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[koenig]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 475 ---------------------------------------------
Generate final key . --> Generates the base64 - encoded hash . --> Socre: 1.0

[[[[Adv]]]]: private String generateFinalKey ( String in ) { String [[seckey]] = in . trim ( ) ; String acc = [[seckey]] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String generateFinalKey ( String in ) { String [[dogfight]] = in . trim ( ) ; String acc = [[dogfight]] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 476 ---------------------------------------------
Returns the size of the list . --> Return themm . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[hmmmm]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 477 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 421 / 38 / 18 / 477:  48%|████▊     | 477/1000 [1:29:25<1:38:02, 11.25s/it][Succeeded / Failed / Skipped / Total] 421 / 38 / 18 / 477:  48%|████▊     | 478/1000 [1:29:33<1:37:47, 11.24s/it][Succeeded / Failed / Skipped / Total] 422 / 38 / 18 / 478:  48%|████▊     | 478/1000 [1:29:33<1:37:47, 11.24s/it][Succeeded / Failed / Skipped / Total] 422 / 38 / 18 / 478:  48%|████▊     | 479/1000 [1:29:34<1:37:25, 11.22s/it][Succeeded / Failed / Skipped / Total] 423 / 38 / 18 / 479:  48%|████▊     | 479/1000 [1:29:34<1:37:25, 11.22s/it][Succeeded / Failed / Skipped / Total] 423 / 38 / 18 / 479:  48%|████▊     | 480/1000 [1:29:35<1:37:03, 11.20s/it][Succeeded / Failed / Skipped / Total] 424 / 38 / 18 / 480:  48%|████▊     | 480/1000 [1:29:35<1:37:03, 11.20s/it][Succeeded / Failed / Skipped / Total] 424 / 38 / 18 / 480:  48%|████▊     | 481/1000 [1:29:41<1:36:46, 11.19s/it][Succeeded / Failed / Skipped / Total] 425 / 38 / 18 / 481:  48%|████▊     | 481/1000 [1:29:41<1:36:46, 11.19s/it][Succeeded / Failed / Skipped / Total] 425 / 38 / 18 / 481:  48%|████▊     | 482/1000 [1:29:42<1:36:24, 11.17s/it][Succeeded / Failed / Skipped / Total] 426 / 38 / 18 / 482:  48%|████▊     | 482/1000 [1:29:42<1:36:24, 11.17s/it][Succeeded / Failed / Skipped / Total] 426 / 38 / 18 / 482:  48%|████▊     | 483/1000 [1:29:48<1:36:07, 11.16s/it][Succeeded / Failed / Skipped / Total] 427 / 38 / 18 / 483:  48%|████▊     | 483/1000 [1:29:48<1:36:07, 11.16s/it][Succeeded / Failed / Skipped / Total] 427 / 38 / 18 / 483:  48%|████▊     | 484/1000 [1:29:49<1:35:45, 11.13s/it]Method to translate the handshake to the server --> translateHandshake http request --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] [[firstLineTokens]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] [[loosened]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 478 ---------------------------------------------
Registers a custom serializer --> Bermondsey --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[code]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[bermondsey]] ( CommandCode [[squeak]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[squeak]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[squeak]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 479 ---------------------------------------------
Translate the first lineTokens to the beginning of the line . --> Translate theHandshake HTTP request . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] firstLineTokens , String [[line]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] firstLineTokens , String [[diverting]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 480 ---------------------------------------------
Decodes the socket buffer . --> affes a socket buffer . --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[aff]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 481 ---------------------------------------------
Close the connection flush toWrongHandshake . --> Write connectionDueToWrongHandshake . --> Socre: 1.0

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException [[exception]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[exception]] . getCloseCode ( ) , [[exception]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException [[resonant]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[resonant]] . getCloseCode ( ) , [[resonant]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 482 ---------------------------------------------
Generates the WebSocket socket socket error --> Generates an automatic Message --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int errorCode ) { String [[errorCodeDescription]] ; switch ( errorCode ) { case 404 : [[errorCodeDescription]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[errorCodeDescription]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[errorCodeDescription]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[errorCodeDescription]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[errorCodeDescription]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int errorCode ) { String [[leffe]] ; switch ( errorCode ) { case 404 : [[leffe]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[leffe]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[leffe]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[leffe]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[leffe]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 483 ---------------------------------------------
Close the connection flush to the given exception . --> Write connectionDueToInternalServerError --> Socre: 1.0

[[[[Adv]]]]: private void closeConnectionDueToInternalServerError ( RuntimeException [[exception]] ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , [[exception]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void closeConnectionDueToInternalServerError ( RuntimeException [[morocco]] ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , [[morocco]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 484 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 428 / 38 / 18 / 484:  48%|████▊     | 484/1000 [1:29:49<1:35:45, 11.13s/it][Succeeded / Failed / Skipped / Total] 428 / 38 / 18 / 484:  48%|████▊     | 485/1000 [1:29:52<1:35:25, 11.12s/it][Succeeded / Failed / Skipped / Total] 429 / 38 / 18 / 485:  48%|████▊     | 485/1000 [1:29:52<1:35:25, 11.12s/it][Succeeded / Failed / Skipped / Total] 429 / 38 / 18 / 485:  49%|████▊     | 486/1000 [1:29:53<1:35:04, 11.10s/it][Succeeded / Failed / Skipped / Total] 430 / 38 / 18 / 486:  49%|████▊     | 486/1000 [1:29:53<1:35:04, 11.10s/it][Succeeded / Failed / Skipped / Total] 430 / 38 / 18 / 486:  49%|████▊     | 487/1000 [1:29:57<1:34:45, 11.08s/it][Succeeded / Failed / Skipped / Total] 431 / 38 / 18 / 487:  49%|████▊     | 487/1000 [1:29:57<1:34:45, 11.08s/it][Succeeded / Failed / Skipped / Total] 431 / 38 / 18 / 487:  49%|████▉     | 488/1000 [1:29:58<1:34:24, 11.06s/it]Reset the websocket state . --> Resets the websocket thread . --> Socre: 1.0

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . [[draft]] . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . [[draft]] ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . [[adex]] . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . [[adex]] ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 485 ---------------------------------------------
Send a text to the server . --> Create a new brander --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[send]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[brander]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[brander]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 486 ---------------------------------------------
Create connect connection --> Liefert das ein --> Socre: 1.0

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[nuisances]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 487 ---------------------------------------------
Process the current frame . --> Performs balled . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[balled]] ( WebSocketImpl webSocketImpl , Framedata [[payer]] ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( [[payer]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 488 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 432 / 38 / 18 / 488:  49%|████▉     | 488/1000 [1:29:58<1:34:24, 11.06s/it][Succeeded / Failed / Skipped / Total] 432 / 38 / 18 / 488:  49%|████▉     | 489/1000 [1:30:00<1:34:03, 11.04s/it][Succeeded / Failed / Skipped / Total] 433 / 38 / 18 / 489:  49%|████▉     | 489/1000 [1:30:00<1:34:03, 11.04s/it][Succeeded / Failed / Skipped / Total] 433 / 38 / 18 / 489:  49%|████▉     | 490/1000 [1:30:05<1:33:45, 11.03s/it][Succeeded / Failed / Skipped / Total] 434 / 38 / 18 / 490:  49%|████▉     | 490/1000 [1:30:05<1:33:45, 11.03s/it][Succeeded / Failed / Skipped / Total] 434 / 38 / 18 / 490:  49%|████▉     | 491/1000 [1:30:06<1:33:24, 11.01s/it][Succeeded / Failed / Skipped / Total] 435 / 38 / 18 / 491:  49%|████▉     | 491/1000 [1:30:06<1:33:24, 11.01s/it][Succeeded / Failed / Skipped / Total] 435 / 38 / 18 / 491:  49%|████▉     | 492/1000 [1:30:08<1:33:04, 10.99s/it][Succeeded / Failed / Skipped / Total] 436 / 38 / 18 / 492:  49%|████▉     | 492/1000 [1:30:08<1:33:04, 10.99s/it][Succeeded / Failed / Skipped / Total] 436 / 38 / 18 / 492:  49%|████▉     | 493/1000 [1:30:13<1:32:47, 10.98s/it]Send the handshake --> Sends theHandshake . --> Socre: 1.0

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client [[handshake]] = new HandshakeImpl1Client ( ) ; [[handshake]] . setResourceDescriptor ( path ) ; [[handshake]] . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { [[handshake]] . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( [[handshake]] ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client [[callbacks]] = new HandshakeImpl1Client ( ) ; [[callbacks]] . setResourceDescriptor ( path ) ; [[callbacks]] . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { [[callbacks]] . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( [[callbacks]] ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 489 ---------------------------------------------
Sets the connection lost timeout . --> setConnectionLostTimeout Method . --> Socre: 1.0

[[[[Adv]]]]: public void setConnectionLostTimeout ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . [[connectionLostTimeout]] = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . [[connectionLostTimeout]] <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void setConnectionLostTimeout ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . [[deshmukh]] = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . [[deshmukh]] <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 490 ---------------------------------------------
Starts a connection lost timer . --> Fails if there is a websocket . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[weepin]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 491 ---------------------------------------------
Restart connection lost timer . --> restart connectionLostTimer --> Socre: 1.0

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket [[conn]] : connections ) { executeConnectionLostDetection ( [[conn]] , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket [[gasket]] : connections ) { executeConnectionLostDetection ( [[gasket]] , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 492 ---------------------------------------------
Process the previous frame . --> Performs a azaria . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[azaria]] ( Framedata [[genevieve]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[genevieve]] ; addToBufferList ( [[genevieve]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 493 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 437 / 38 / 18 / 493:  49%|████▉     | 493/1000 [1:30:13<1:32:47, 10.98s/it][Succeeded / Failed / Skipped / Total] 437 / 38 / 18 / 493:  49%|████▉     | 494/1000 [1:30:16<1:32:28, 10.97s/it][Succeeded / Failed / Skipped / Total] 438 / 38 / 18 / 494:  49%|████▉     | 494/1000 [1:30:16<1:32:28, 10.97s/it][Succeeded / Failed / Skipped / Total] 438 / 38 / 18 / 494:  50%|████▉     | 495/1000 [1:30:20<1:32:10, 10.95s/it][Succeeded / Failed / Skipped / Total] 439 / 38 / 18 / 495:  50%|████▉     | 495/1000 [1:30:20<1:32:10, 10.95s/it][Succeeded / Failed / Skipped / Total] 439 / 38 / 18 / 495:  50%|████▉     | 496/1000 [1:30:21<1:31:48, 10.93s/it][Succeeded / Failed / Skipped / Total] 440 / 38 / 18 / 496:  50%|████▉     | 496/1000 [1:30:21<1:31:48, 10.93s/it][Succeeded / Failed / Skipped / Total] 440 / 38 / 18 / 496:  50%|████▉     | 497/1000 [1:30:28<1:31:34, 10.92s/it][Succeeded / Failed / Skipped / Total] 441 / 38 / 18 / 497:  50%|████▉     | 497/1000 [1:30:28<1:31:34, 10.92s/it][Succeeded / Failed / Skipped / Total] 441 / 38 / 18 / 497:  50%|████▉     | 498/1000 [1:30:28<1:31:12, 10.90s/it][Succeeded / Failed / Skipped / Total] 441 / 38 / 19 / 498:  50%|████▉     | 498/1000 [1:30:28<1:31:12, 10.90s/it][Succeeded / Failed / Skipped / Total] 441 / 38 / 19 / 498:  50%|████▉     | 499/1000 [1:30:35<1:30:57, 10.89s/it][Succeeded / Failed / Skipped / Total] 442 / 38 / 19 / 499:  50%|████▉     | 499/1000 [1:30:35<1:30:57, 10.89s/it][Succeeded / Failed / Skipped / Total] 442 / 38 / 19 / 499:  50%|█████     | 500/1000 [1:30:39<1:30:39, 10.88s/it]Registers a custom serializer . --> tast --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer serializer ) { CustomSerializer [[prevSerializer]] = classCustomSerializer . putIfAbsent ( [[className]] , serializer ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[tast]] ( String [[antiseptic]] , CustomSerializer serializer ) { CustomSerializer [[constrained]] = classCustomSerializer . putIfAbsent ( [[antiseptic]] , serializer ) ; if ( [[constrained]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[antiseptic]] + ", the custom serializer is: " + [[constrained]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 494 ---------------------------------------------
Creates a new server handshake . --> region ClientHandshakeBuilder --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[fishball]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 495 ---------------------------------------------
Send a Pong frame --> Called when filipinos issocket --> Socre: 1.0

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket [[conn]] , Framedata f ) { [[conn]] . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket [[filipinos]] , Framedata f ) { [[filipinos]] . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 496 ---------------------------------------------
Cancel connectionLostTimer . --> dorf --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[dorf]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 497 ---------------------------------------------
Read data from the socket . --> Reads data from the socket . --> Socre: 1.0

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel [[c]] = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , [[c]] ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel [[acute]] = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , [[acute]] ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 498 ---------------------------------------------
Handles the channel . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 499 ---------------------------------------------
Reads a read entry . --> Reads the given iterator . --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "[[False]]" != "[[False]]" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "[[Correction]]" != "[[Correction]]" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 500 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 443 / 38 / 19 / 500:  50%|█████     | 500/1000 [1:30:39<1:30:39, 10.88s/it][Succeeded / Failed / Skipped / Total] 443 / 38 / 19 / 500:  50%|█████     | 501/1000 [1:30:41<1:30:19, 10.86s/it][Succeeded / Failed / Skipped / Total] 444 / 38 / 19 / 501:  50%|█████     | 501/1000 [1:30:41<1:30:19, 10.86s/it][Succeeded / Failed / Skipped / Total] 444 / 38 / 19 / 501:  50%|█████     | 502/1000 [1:30:42<1:29:58, 10.84s/it][Succeeded / Failed / Skipped / Total] 445 / 38 / 19 / 502:  50%|█████     | 502/1000 [1:30:42<1:29:58, 10.84s/it][Succeeded / Failed / Skipped / Total] 445 / 38 / 19 / 502:  50%|█████     | 503/1000 [1:30:42<1:29:37, 10.82s/it][Succeeded / Failed / Skipped / Total] 445 / 38 / 20 / 503:  50%|█████     | 503/1000 [1:30:42<1:29:37, 10.82s/it][Succeeded / Failed / Skipped / Total] 445 / 38 / 20 / 503:  50%|█████     | 504/1000 [1:30:49<1:29:23, 10.81s/it][Succeeded / Failed / Skipped / Total] 446 / 38 / 20 / 504:  50%|█████     | 504/1000 [1:30:49<1:29:23, 10.81s/it][Succeeded / Failed / Skipped / Total] 446 / 38 / 20 / 504:  50%|█████     | 505/1000 [1:30:56<1:29:08, 10.81s/it][Succeeded / Failed / Skipped / Total] 447 / 38 / 20 / 505:  50%|█████     | 505/1000 [1:30:56<1:29:08, 10.81s/it][Succeeded / Failed / Skipped / Total] 447 / 38 / 20 / 505:  51%|█████     | 506/1000 [1:30:57<1:28:48, 10.79s/it][Succeeded / Failed / Skipped / Total] 448 / 38 / 20 / 506:  51%|█████     | 506/1000 [1:30:57<1:28:48, 10.79s/it][Succeeded / Failed / Skipped / Total] 448 / 38 / 20 / 506:  51%|█████     | 507/1000 [1:30:57<1:28:27, 10.76s/it]Stops this buffer . --> Stop theSmolder --> Socre: 1.0

[[[[Adv]]]]: public void stop ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "[[True]]" == "[[True]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "[[Smoldering]]" == "[[Smoldering]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 501 ---------------------------------------------
Execute a connection . --> Execute connectionLostDetection . --> Socre: 1.0

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket webSocket , long [[minimumPongTime]] ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < [[minimumPongTime]] ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket webSocket , long [[nestor]] ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < [[nestor]] ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 502 ---------------------------------------------
Write a SelectionKey . --> Writes the given key to the socket . --> Socre: 1.0

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl [[conn]] = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( [[conn]] , [[conn]] . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl [[approving]] = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( [[approving]] , [[approving]] . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 503 ---------------------------------------------
Close the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 504 ---------------------------------------------
Returns true if the selector is started . --> Handles a single thread . --> Socre: 1.0

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[Ancestor]]" != "[[Ancestor]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 505 ---------------------------------------------
Opens the WebSocket selector . --> Opens a connection . --> Socre: 1.0

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket [[socket]] = server . socket ( ) ; [[socket]] . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; [[socket]] . setReuseAddress ( isReuseAddr ( ) ) ; [[socket]] . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket [[jomo]] = server . socket ( ) ; [[jomo]] . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; [[jomo]] . setReuseAddress ( isReuseAddr ( ) ) ; [[jomo]] . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 506 ---------------------------------------------
Broadcasts a byte array to the underlying store . --> Broadcast the specified clients . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( byte [ ] [[data]] , Collection < WebSocket > clients ) { if ( [[data]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( [[data]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( byte [ ] [[binks]] , Collection < WebSocket > clients ) { if ( [[binks]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( [[binks]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
[Succeeded / Failed / Skipped / Total] 448 / 38 / 21 / 507:  51%|█████     | 507/1000 [1:30:57<1:28:27, 10.76s/it][Succeeded / Failed / Skipped / Total] 448 / 38 / 21 / 507:  51%|█████     | 508/1000 [1:30:57<1:28:05, 10.74s/it][Succeeded / Failed / Skipped / Total] 448 / 38 / 22 / 508:  51%|█████     | 508/1000 [1:30:57<1:28:05, 10.74s/it][Succeeded / Failed / Skipped / Total] 448 / 38 / 22 / 508:  51%|█████     | 509/1000 [1:31:02<1:27:49, 10.73s/it][Succeeded / Failed / Skipped / Total] 449 / 38 / 22 / 509:  51%|█████     | 509/1000 [1:31:02<1:27:49, 10.73s/it][Succeeded / Failed / Skipped / Total] 449 / 38 / 22 / 509:  51%|█████     | 510/1000 [1:31:04<1:27:30, 10.71s/it][Succeeded / Failed / Skipped / Total] 450 / 38 / 22 / 510:  51%|█████     | 510/1000 [1:31:04<1:27:30, 10.71s/it][Succeeded / Failed / Skipped / Total] 450 / 38 / 22 / 510:  51%|█████     | 511/1000 [1:31:06<1:27:11, 10.70s/it][Succeeded / Failed / Skipped / Total] 451 / 38 / 22 / 511:  51%|█████     | 511/1000 [1:31:06<1:27:11, 10.70s/it][Succeeded / Failed / Skipped / Total] 451 / 38 / 22 / 511:  51%|█████     | 512/1000 [1:31:08<1:26:52, 10.68s/it][Succeeded / Failed / Skipped / Total] 452 / 38 / 22 / 512:  51%|█████     | 512/1000 [1:31:08<1:26:52, 10.68s/it][Succeeded / Failed / Skipped / Total] 452 / 38 / 22 / 512:  51%|█████▏    | 513/1000 [1:31:13<1:26:36, 10.67s/it][Succeeded / Failed / Skipped / Total] 453 / 38 / 22 / 513:  51%|█████▏    | 513/1000 [1:31:13<1:26:36, 10.67s/it][Succeeded / Failed / Skipped / Total] 453 / 38 / 22 / 513:  51%|█████▏    | 514/1000 [1:31:15<1:26:17, 10.65s/it][Succeeded / Failed / Skipped / Total] 454 / 38 / 22 / 514:  51%|█████▏    | 514/1000 [1:31:15<1:26:17, 10.65s/it][Succeeded / Failed / Skipped / Total] 454 / 38 / 22 / 514:  52%|█████▏    | 515/1000 [1:31:17<1:25:58, 10.64s/it]--------------------------------------------- Result 507 ---------------------------------------------
Perform a broadcast operation . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 508 ---------------------------------------------
Fill draft frames . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 509 ---------------------------------------------
Returns the port . --> ditka . --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String [[scheme]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[scheme]] ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[ditka]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String [[conceptions]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[conceptions]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[conceptions]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[conceptions]] ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 510 ---------------------------------------------
Broadcasts the given text to the given clients . --> Broadcast event . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( String text , Collection < WebSocket > [[clients]] ) { if ( text == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( String text , Collection < WebSocket > [[tomie]] ) { if ( text == null || [[tomie]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , [[tomie]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 511 ---------------------------------------------
Transfer the given source buffer to the given destination buffer . --> Transfers the given source into this buffer . --> Socre: 1.0

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer [[dest]] ) { if ( source == null || [[dest]] == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = [[dest]] . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; [[dest]] . put ( source ) ; return limit ; } else { [[dest]] . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer [[differences]] ) { if ( source == null || [[differences]] == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = [[differences]] . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; [[differences]] . put ( source ) ; return limit ; } else { [[differences]] . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 512 ---------------------------------------------
Get a copy of this buffer . --> Get getPayloadFromByteBufferList --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer getPayloadFromByteBufferList ( ) throws LimitExceededException { long [[totalSize]] = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[totalSize]] += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) [[totalSize]] ) ; for ( ByteBuffer buffer : byteBufferList ) { [[resultingByteBuffer]] . put ( buffer ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer getPayloadFromByteBufferList ( ) throws LimitExceededException { long [[bayan]] = 0 ; ByteBuffer [[photocopies]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[bayan]] += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[photocopies]] = ByteBuffer . allocate ( ( int ) [[bayan]] ) ; for ( ByteBuffer buffer : byteBufferList ) { [[photocopies]] . put ( buffer ) ; } } [[photocopies]] . flip ( ) ; return [[photocopies]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 513 ---------------------------------------------
Adds a new transaction . --> nad master event --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > block ) { [[withTransaction]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[nadeshiko]] ( Consumer < EntityManager > block ) { [[nadeshiko]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 514 ---------------------------------------------
Convert args toScala buffer . --> Perform baccalaureate . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[baccalaureate]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 515 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 455 / 38 / 22 / 515:  52%|█████▏    | 515/1000 [1:31:17<1:25:58, 10.64s/it][Succeeded / Failed / Skipped / Total] 455 / 38 / 22 / 515:  52%|█████▏    | 516/1000 [1:31:21<1:25:41, 10.62s/it][Succeeded / Failed / Skipped / Total] 456 / 38 / 22 / 516:  52%|█████▏    | 516/1000 [1:31:21<1:25:41, 10.62s/it][Succeeded / Failed / Skipped / Total] 456 / 38 / 22 / 516:  52%|█████▏    | 517/1000 [1:31:23<1:25:23, 10.61s/it][Succeeded / Failed / Skipped / Total] 457 / 38 / 22 / 517:  52%|█████▏    | 517/1000 [1:31:23<1:25:23, 10.61s/it][Succeeded / Failed / Skipped / Total] 458 / 38 / 22 / 518:  52%|█████▏    | 518/1000 [1:31:23<1:25:02, 10.59s/it][Succeeded / Failed / Skipped / Total] 458 / 38 / 22 / 518:  52%|█████▏    | 519/1000 [1:31:24<1:24:43, 10.57s/it][Succeeded / Failed / Skipped / Total] 459 / 38 / 22 / 519:  52%|█████▏    | 519/1000 [1:31:24<1:24:43, 10.57s/it][Succeeded / Failed / Skipped / Total] 460 / 38 / 22 / 520:  52%|█████▏    | 520/1000 [1:31:29<1:24:27, 10.56s/it][Succeeded / Failed / Skipped / Total] 460 / 38 / 22 / 520:  52%|█████▏    | 521/1000 [1:31:37<1:24:14, 10.55s/it][Succeeded / Failed / Skipped / Total] 461 / 38 / 22 / 521:  52%|█████▏    | 521/1000 [1:31:37<1:24:14, 10.55s/it][Succeeded / Failed / Skipped / Total] 461 / 38 / 22 / 521:  52%|█████▏    | 522/1000 [1:31:44<1:24:00, 10.54s/it][Succeeded / Failed / Skipped / Total] 462 / 38 / 22 / 522:  52%|█████▏    | 522/1000 [1:31:44<1:24:00, 10.54s/it][Succeeded / Failed / Skipped / Total] 462 / 38 / 22 / 522:  52%|█████▏    | 523/1000 [1:31:46<1:23:42, 10.53s/it][Succeeded / Failed / Skipped / Total] 463 / 38 / 22 / 523:  52%|█████▏    | 523/1000 [1:31:46<1:23:42, 10.53s/it][Succeeded / Failed / Skipped / Total] 463 / 38 / 22 / 523:  52%|█████▏    | 524/1000 [1:31:51<1:23:27, 10.52s/it][Succeeded / Failed / Skipped / Total] 464 / 38 / 22 / 524:  52%|█████▏    | 524/1000 [1:31:51<1:23:27, 10.52s/it][Succeeded / Failed / Skipped / Total] 464 / 38 / 22 / 524:  52%|█████▎    | 525/1000 [1:31:53<1:23:08, 10.50s/it][Succeeded / Failed / Skipped / Total] 465 / 38 / 22 / 525:  52%|█████▎    | 525/1000 [1:31:53<1:23:08, 10.50s/it][Succeeded / Failed / Skipped / Total] 465 / 38 / 22 / 525:  53%|█████▎    | 526/1000 [1:31:54<1:22:49, 10.48s/it]Start persistence unit . --> Changes the persistence unit --> Socre: 1.0

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[megs]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 516 ---------------------------------------------
Returns the result of a key --> Get the current value --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String key , Object ... [[args]] ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String key , Object ... [[dissipate]] ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[dissipate]] ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 517 ---------------------------------------------
Wraps the argument list if possible . --> wrap kawashima --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... args ) { List < T > [[out]] ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { [[out]] = ( List < T > ) args [ 0 ] ; } else { [[out]] = Arrays . asList ( args ) ; } return [[out]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... args ) { List < T > [[kawashima]] ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { [[kawashima]] = ( List < T > ) args [ 0 ] ; } else { [[kawashima]] = Arrays . asList ( args ) ; } return [[kawashima]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 518 ---------------------------------------------
Gets a list of keys . --> Gets a list of messages --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > [[keys]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[keys]] ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > [[quails]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[quails]] ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 519 ---------------------------------------------
Returns the port . --> sw - only for testing --> Socre: 1.0

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[swope]] ( ) { int [[blucher]] = getAddress ( ) . getPort ( ) ; if ( [[blucher]] == 0 && server != null ) { [[blucher]] = server . socket ( ) . getLocalPort ( ) ; } return [[blucher]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 520 ---------------------------------------------
check whether key isDefined at . --> isDefinedAt aquamarine --> Socre: 1.0

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String [[key]] ) { return messages . isDefinedAt ( [[key]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String [[aquamarine]] ) { return messages . isDefinedAt ( [[aquamarine]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 521 ---------------------------------------------
Returns the Guiceable module . --> Returns the given docking --> Socre: 1.0

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... [[docking]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[docking]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 522 ---------------------------------------------
Create the bindings for the given modules . --> Return the given biggs --> Socre: 1.0

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[modules]] ) { return bindings ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[biggs]] ) { return bindings ( Guiceable . [[biggs]] ( [[biggs]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 523 ---------------------------------------------
Stop the connection lost stopped . --> Declarative Services method . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . [[websocketRunning]] = "[[False]]" != "[[False]]" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[billabong]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . [[frankfurters]] = "[[Truely]]" != "[[Truely]]" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 524 ---------------------------------------------
Get the bindings for the bridge --> Return the ARH --> Socre: 1.0

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[ARH]] ( play . api . inject . Binding < ? > ... [[ARH]] ) { return [[ARH]] ( Guiceable . bindings ( [[ARH]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 525 ---------------------------------------------
Sends a request . --> dutchman --> Socre: 1.0

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader [[dutchman]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[dutchman]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 526 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 466 / 38 / 22 / 526:  53%|█████▎    | 526/1000 [1:31:54<1:22:49, 10.48s/it][Succeeded / Failed / Skipped / Total] 466 / 38 / 22 / 526:  53%|█████▎    | 527/1000 [1:31:58<1:22:33, 10.47s/it][Succeeded / Failed / Skipped / Total] 467 / 38 / 22 / 527:  53%|█████▎    | 527/1000 [1:31:58<1:22:33, 10.47s/it][Succeeded / Failed / Skipped / Total] 467 / 38 / 22 / 527:  53%|█████▎    | 528/1000 [1:32:00<1:22:14, 10.45s/it][Succeeded / Failed / Skipped / Total] 468 / 38 / 22 / 528:  53%|█████▎    | 528/1000 [1:32:00<1:22:14, 10.45s/it][Succeeded / Failed / Skipped / Total] 468 / 38 / 22 / 528:  53%|█████▎    | 529/1000 [1:32:00<1:21:55, 10.44s/it][Succeeded / Failed / Skipped / Total] 469 / 38 / 22 / 529:  53%|█████▎    | 529/1000 [1:32:00<1:21:55, 10.44s/it][Succeeded / Failed / Skipped / Total] 469 / 38 / 22 / 529:  53%|█████▎    | 530/1000 [1:32:01<1:21:36, 10.42s/it][Succeeded / Failed / Skipped / Total] 470 / 38 / 22 / 530:  53%|█████▎    | 530/1000 [1:32:01<1:21:36, 10.42s/it][Succeeded / Failed / Skipped / Total] 470 / 38 / 22 / 530:  53%|█████▎    | 531/1000 [1:32:06<1:21:21, 10.41s/it][Succeeded / Failed / Skipped / Total] 471 / 38 / 22 / 531:  53%|█████▎    | 531/1000 [1:32:06<1:21:21, 10.41s/it][Succeeded / Failed / Skipped / Total] 471 / 38 / 22 / 531:  53%|█████▎    | 532/1000 [1:32:08<1:21:03, 10.39s/it][Succeeded / Failed / Skipped / Total] 472 / 38 / 22 / 532:  53%|█████▎    | 532/1000 [1:32:08<1:21:03, 10.39s/it][Succeeded / Failed / Skipped / Total] 472 / 38 / 22 / 532:  53%|█████▎    | 533/1000 [1:32:09<1:20:45, 10.37s/it][Succeeded / Failed / Skipped / Total] 473 / 38 / 22 / 533:  53%|█████▎    | 533/1000 [1:32:09<1:20:45, 10.37s/it][Succeeded / Failed / Skipped / Total] 473 / 38 / 22 / 533:  53%|█████▎    | 534/1000 [1:32:13<1:20:28, 10.36s/it][Succeeded / Failed / Skipped / Total] 474 / 38 / 22 / 534:  53%|█████▎    | 534/1000 [1:32:13<1:20:28, 10.36s/it][Succeeded / Failed / Skipped / Total] 474 / 38 / 22 / 534:  54%|█████▎    | 535/1000 [1:32:15<1:20:11, 10.35s/it][Succeeded / Failed / Skipped / Total] 475 / 38 / 22 / 535:  54%|█████▎    | 535/1000 [1:32:15<1:20:11, 10.35s/it][Succeeded / Failed / Skipped / Total] 475 / 38 / 22 / 535:  54%|█████▎    | 536/1000 [1:32:30<1:20:04, 10.36s/it][Succeeded / Failed / Skipped / Total] 476 / 38 / 22 / 536:  54%|█████▎    | 536/1000 [1:32:30<1:20:04, 10.36s/it][Succeeded / Failed / Skipped / Total] 476 / 38 / 22 / 536:  54%|█████▎    | 537/1000 [1:32:31<1:19:46, 10.34s/it][Succeeded / Failed / Skipped / Total] 476 / 39 / 22 / 537:  54%|█████▎    | 537/1000 [1:32:31<1:19:46, 10.34s/it][Succeeded / Failed / Skipped / Total] 476 / 39 / 22 / 537:  54%|█████▍    | 538/1000 [1:32:37<1:19:32, 10.33s/it]Returns the overrides for the given module . --> Returns all the boarders for the given module --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[boarders]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 527 ---------------------------------------------
Returns the overrides for the given modules . --> Get a specific module overrides --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[modules]] ) { return overrides ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[aahh]] ) { return overrides ( Guiceable . [[aahh]] ( [[aahh]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 528 ---------------------------------------------
Returns the overrides for the given bindings . --> Create a deleteada --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... bindings ) { return [[overrides]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[amada]] ( play . api . inject . Binding < ? > ... bindings ) { return [[amada]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 529 ---------------------------------------------
Create a new Messages object . --> druze method --> Socre: 1.0

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[druze]] ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 530 ---------------------------------------------
Disable module classes . --> Disables another interface --> Socre: 1.0

[[[[Adv]]]]: public final Self disable ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self disable ( Class < ? > ... [[butchering]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[butchering]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 531 ---------------------------------------------
Call this function . --> jian CompletionStage --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[jian]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 532 ---------------------------------------------
Gets the in . --> A angelita Annotation --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[angelita]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 533 ---------------------------------------------
Construct a tuple with A A and B . --> Gets the Affliction . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B b ) { return new [[Tuple]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[Affliction]] < A , B > [[Affliction]] ( A a , B b ) { return new [[Affliction]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 534 ---------------------------------------------
Sets the language . --> Sets language for upheld --> Socre: 1.0

[[[[Adv]]]]: public Result setLang ( Result [[result]] , Lang lang ) { return messages . setLang ( [[result]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result setLang ( Result [[upheld]] , Lang lang ) { return messages . setLang ( [[upheld]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 535 ---------------------------------------------
Create a tuple with five arguments . --> Tuple5 function . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > Tuple5 < A , B , C , D , E > Tuple5 ( A a , B [[b]] , C c , D d , E e ) { return new Tuple5 < A , B , C , D , E > ( a , [[b]] , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > Tuple5 < A , B , C , D , E > Tuple5 ( A a , B [[bride]] , C c , D d , E e ) { return new Tuple5 < A , B , C , D , E > ( a , [[bride]] , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 536 ---------------------------------------------
Gets an EntityManager . --> Gets an attribute --> Socre: 1.0

[[[[Adv]]]]: public EntityManager [[em]] ( String name ) { EntityManagerFactory [[emf]] = emfs . get ( name ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[tto]] ( String name ) { EntityManagerFactory [[pleated]] = emfs . get ( name ) ; if ( [[pleated]] == null ) { return null ; } return [[pleated]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 537 ---------------------------------------------
Process Close frame code . --> [[[FAILED]]]

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 538 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 477 / 39 / 22 / 538:  54%|█████▍    | 538/1000 [1:32:37<1:19:32, 10.33s/it][Succeeded / Failed / Skipped / Total] 477 / 39 / 22 / 538:  54%|█████▍    | 539/1000 [1:32:53<1:19:27, 10.34s/it][Succeeded / Failed / Skipped / Total] 478 / 39 / 22 / 539:  54%|█████▍    | 539/1000 [1:32:53<1:19:27, 10.34s/it][Succeeded / Failed / Skipped / Total] 478 / 39 / 22 / 539:  54%|█████▍    | 540/1000 [1:33:01<1:19:15, 10.34s/it][Succeeded / Failed / Skipped / Total] 479 / 39 / 22 / 540:  54%|█████▍    | 540/1000 [1:33:01<1:19:15, 10.34s/it][Succeeded / Failed / Skipped / Total] 479 / 39 / 22 / 540:  54%|█████▍    | 541/1000 [1:33:28<1:19:18, 10.37s/it][Succeeded / Failed / Skipped / Total] 480 / 39 / 22 / 541:  54%|█████▍    | 541/1000 [1:33:28<1:19:18, 10.37s/it][Succeeded / Failed / Skipped / Total] 480 / 39 / 22 / 541:  54%|█████▍    | 542/1000 [1:33:32<1:19:02, 10.35s/it][Succeeded / Failed / Skipped / Total] 481 / 39 / 22 / 542:  54%|█████▍    | 542/1000 [1:33:32<1:19:02, 10.35s/it][Succeeded / Failed / Skipped / Total] 481 / 39 / 22 / 542:  54%|█████▍    | 543/1000 [1:33:43<1:18:52, 10.36s/it][Succeeded / Failed / Skipped / Total] 482 / 39 / 22 / 543:  54%|█████▍    | 543/1000 [1:33:43<1:18:52, 10.36s/it][Succeeded / Failed / Skipped / Total] 482 / 39 / 22 / 543:  54%|█████▍    | 544/1000 [1:33:46<1:18:36, 10.34s/it][Succeeded / Failed / Skipped / Total] 483 / 39 / 22 / 544:  54%|█████▍    | 544/1000 [1:33:46<1:18:36, 10.34s/it][Succeeded / Failed / Skipped / Total] 483 / 39 / 22 / 544:  55%|█████▍    | 545/1000 [1:35:14<1:19:30, 10.49s/it][Succeeded / Failed / Skipped / Total] 484 / 39 / 22 / 545:  55%|█████▍    | 545/1000 [1:35:14<1:19:30, 10.49s/it][Succeeded / Failed / Skipped / Total] 484 / 39 / 22 / 545:  55%|█████▍    | 546/1000 [1:35:21<1:19:17, 10.48s/it][Succeeded / Failed / Skipped / Total] 484 / 40 / 22 / 546:  55%|█████▍    | 546/1000 [1:35:21<1:19:17, 10.48s/it][Succeeded / Failed / Skipped / Total] 484 / 40 / 22 / 546:  55%|█████▍    | 547/1000 [1:35:27<1:19:02, 10.47s/it]Build a string for the given callback --> Get anthony --> Socre: 1.0

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[anthony]] ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 539 ---------------------------------------------
Returns the socket associated with the WebSocket . --> Creates anheuser . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket [[conn]] ) { WebSocketImpl [[impl]] = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) [[impl]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[anheuser]] ( WebSocket [[ptolemy]] ) { WebSocketImpl [[bitching]] = ( WebSocketImpl ) [[ptolemy]] ; return ( ( SocketChannel ) [[bitching]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 540 ---------------------------------------------
Create a new instance of the given key . --> Create a new azaria instance --> Socre: 1.0

[[[[Adv]]]]: private < [[T]] extends ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[azaria]] extends ConstraintValidator < ? , ? > > [[azaria]] newInstance ( Class < [[azaria]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 541 ---------------------------------------------
Creates the executor . --> prepares hammersmith --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext [[prepared]] = ec . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[troop]] ( ExecutionContext ec ) { ExecutionContext [[hammersmith]] = ec . prepare ( ) ; if ( [[hammersmith]] instanceof Executor ) { return ( Executor ) [[hammersmith]] ; } else { return [[hammersmith]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 542 ---------------------------------------------
Returns an Optional containing the specified file . --> Drawers from env --> Socre: 1.0

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[drawers]] ( String [[nationally]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[nationally]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 543 ---------------------------------------------
Constructs a JPAConfig instance from two strings . --> DefaultJPAConfig --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig of ( String n1 , String u1 , String [[n2]] , String [[u2]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( [[n2]] , [[u2]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig of ( String n1 , String u1 , String [[achievements]] , String [[clift]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( [[achievements]] , [[clift]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 544 ---------------------------------------------
Gets the json . --> Retrieve alex --> Socre: 1.0

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[alex]] ( String [[dose]] ) { return Flow . of ( JsonNode . class ) . map ( [[alex]] -> { return ByteString . fromString ( Json . stringify ( [[alex]] ) ) ; } ) . via ( flow ( [[dose]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 545 ---------------------------------------------
Executes the given request . --> Must be called onForbidden --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[hamada]] , String [[mobilized]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[hamada]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 546 ---------------------------------------------
Adds a constraint validator for the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > [[MappedConstraintValidatorFactory]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[tiana]] ConstraintValidator < ? , ? > > [[freight]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 547 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 485 / 40 / 22 / 547:  55%|█████▍    | 547/1000 [1:35:27<1:19:02, 10.47s/it][Succeeded / Failed / Skipped / Total] 485 / 40 / 22 / 547:  55%|█████▍    | 548/1000 [1:35:27<1:18:44, 10.45s/it][Succeeded / Failed / Skipped / Total] 486 / 40 / 22 / 548:  55%|█████▍    | 548/1000 [1:35:27<1:18:44, 10.45s/it][Succeeded / Failed / Skipped / Total] 487 / 40 / 22 / 549:  55%|█████▍    | 549/1000 [1:35:27<1:18:25, 10.43s/it][Succeeded / Failed / Skipped / Total] 487 / 40 / 22 / 549:  55%|█████▌    | 550/1000 [1:35:30<1:18:08, 10.42s/it][Succeeded / Failed / Skipped / Total] 488 / 40 / 22 / 550:  55%|█████▌    | 550/1000 [1:35:30<1:18:08, 10.42s/it][Succeeded / Failed / Skipped / Total] 489 / 40 / 22 / 551:  55%|█████▌    | 551/1000 [1:35:35<1:17:53, 10.41s/it][Succeeded / Failed / Skipped / Total] 489 / 40 / 22 / 551:  55%|█████▌    | 552/1000 [1:35:35<1:17:35, 10.39s/it][Succeeded / Failed / Skipped / Total] 490 / 40 / 22 / 552:  55%|█████▌    | 552/1000 [1:35:35<1:17:35, 10.39s/it][Succeeded / Failed / Skipped / Total] 490 / 41 / 22 / 553:  55%|█████▌    | 553/1000 [1:35:40<1:17:19, 10.38s/it][Succeeded / Failed / Skipped / Total] 490 / 41 / 22 / 553:  55%|█████▌    | 554/1000 [1:35:42<1:17:02, 10.37s/it]Handles a request . --> Gibt die ginsburururg die ginsbure Methode wufie die ginsburg die ginsburg die ginsburiert die ginsburg die ginsburi die ginsburg die ginsburg die ginsbure Me Methode ginsburiert die ginsburiert die ginsbure --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader [[request]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[request]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[request]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[ginsburg]] ( RequestHeader [[everlasting]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[everlasting]] . method ( ) , [[everlasting]] . uri ( ) , [[everlasting]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[everlasting]] . method ( ) , [[everlasting]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[everlasting]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 548 ---------------------------------------------
Log a request . --> logServerError method --> Socre: 1.0

[[[[Adv]]]]: protected void logServerError ( RequestHeader [[request]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void logServerError ( RequestHeader [[pique]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[pique]] . method ( ) , [[pique]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 549 ---------------------------------------------
Creates a new JPAConfig instance . --> This method returns JPAConfig object --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > [[map]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[map]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[scimitar]] ( Map < String , String > [[doyle]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[doyle]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 550 ---------------------------------------------
Process an exception . --> Log an exception --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader [[request]] , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( [[request]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , usefulException ) ; default : return onDevServerError ( [[request]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader [[ashraf]] , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( [[ashraf]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[ashraf]] , usefulException ) ; default : return onDevServerError ( [[ashraf]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 551 ---------------------------------------------
Render the user agent . --> Must be called onDevServerError --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader [[thal]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[thal]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 552 ---------------------------------------------
Handle an exception . --> Render an exception --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader [[på]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , [[på]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 553 ---------------------------------------------
Creates a new JPAConfig instance . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[name]] , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[swirling]] ( String [[thunderous]] , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[thunderous]] , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 554 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 491 / 41 / 22 / 554:  55%|█████▌    | 554/1000 [1:35:42<1:17:02, 10.37s/it][Succeeded / Failed / Skipped / Total] 492 / 41 / 22 / 555:  56%|█████▌    | 555/1000 [1:35:43<1:16:45, 10.35s/it][Succeeded / Failed / Skipped / Total] 492 / 41 / 22 / 555:  56%|█████▌    | 556/1000 [1:35:49<1:16:31, 10.34s/it][Succeeded / Failed / Skipped / Total] 493 / 41 / 22 / 556:  56%|█████▌    | 556/1000 [1:35:49<1:16:31, 10.34s/it][Succeeded / Failed / Skipped / Total] 494 / 41 / 22 / 557:  56%|█████▌    | 557/1000 [1:36:08<1:16:27, 10.36s/it][Succeeded / Failed / Skipped / Total] 494 / 41 / 22 / 557:  56%|█████▌    | 558/1000 [1:37:04<1:16:53, 10.44s/it][Succeeded / Failed / Skipped / Total] 495 / 41 / 22 / 558:  56%|█████▌    | 558/1000 [1:37:04<1:16:53, 10.44s/it][Succeeded / Failed / Skipped / Total] 495 / 41 / 22 / 558:  56%|█████▌    | 559/1000 [1:37:33<1:16:58, 10.47s/it][Succeeded / Failed / Skipped / Total] 496 / 41 / 22 / 559:  56%|█████▌    | 559/1000 [1:37:33<1:16:58, 10.47s/it][Succeeded / Failed / Skipped / Total] 496 / 41 / 22 / 559:  56%|█████▌    | 560/1000 [1:37:33<1:16:39, 10.45s/it][Succeeded / Failed / Skipped / Total] 496 / 42 / 22 / 560:  56%|█████▌    | 560/1000 [1:37:33<1:16:39, 10.45s/it][Succeeded / Failed / Skipped / Total] 496 / 42 / 22 / 560:  56%|█████▌    | 561/1000 [1:37:41<1:16:27, 10.45s/it][Succeeded / Failed / Skipped / Total] 497 / 42 / 22 / 561:  56%|█████▌    | 561/1000 [1:37:41<1:16:27, 10.45s/it][Succeeded / Failed / Skipped / Total] 497 / 42 / 22 / 561:  56%|█████▌    | 562/1000 [1:37:54<1:16:18, 10.45s/it]Creates the BuildDocHandler for the given directory . --> Build doc handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[zeta]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 555 ---------------------------------------------
Create a BuildDocHandler from a jar file . --> Build doc handler . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[brom]] ( File directory , JarFile jarFile , String base ) { return [[brom]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 556 ---------------------------------------------
Invoked when the request is complete . --> executing indymedia --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader [[request]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , message , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[executing]] ( RequestHeader [[indymedia]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[indymedia]] . method ( ) , [[indymedia]] . uri ( ) , message , [[indymedia]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 557 ---------------------------------------------
Consume the data . --> Bur compatibility between two vectors --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[burberry]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 558 ---------------------------------------------
Constructs a BuildDocHandler from a jar file . --> Build doc handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String base ) { FileRepository repo = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[bites]] ( JarFile [[mummy]] , String base ) { FileRepository repo = new JarRepository ( [[mummy]] , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 559 ---------------------------------------------
Create a BuildDocHandler from the given files . --> Build doc file --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] files , String [ ] [[baseDirs]] ) throws IOException { assert ( files . length == [[baseDirs]] . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String [[baseDir]] = [[baseDirs]] [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] files , String [ ] [[ronnie]] ) throws IOException { assert ( files . length == [[ronnie]] . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String [[aardvark]] = [[ronnie]] [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 560 ---------------------------------------------
Gets the accessible method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method getMatchingAccessibleMethod ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method getMatchingAccessibleMethod ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 561 ---------------------------------------------
Create a response status with the given status code . --> Returns the status of the status code --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[content]] ) { return status ( status , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[aggro]] ) { return status ( status , [[aggro]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 562 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 498 / 42 / 22 / 562:  56%|█████▌    | 562/1000 [1:37:54<1:16:18, 10.45s/it][Succeeded / Failed / Skipped / Total] 498 / 42 / 22 / 562:  56%|█████▋    | 563/1000 [1:38:00<1:16:04, 10.45s/it][Succeeded / Failed / Skipped / Total] 499 / 42 / 22 / 563:  56%|█████▋    | 563/1000 [1:38:00<1:16:04, 10.45s/it][Succeeded / Failed / Skipped / Total] 499 / 42 / 22 / 563:  56%|█████▋    | 564/1000 [1:38:03<1:15:48, 10.43s/it][Succeeded / Failed / Skipped / Total] 500 / 42 / 22 / 564:  56%|█████▋    | 564/1000 [1:38:03<1:15:48, 10.43s/it][Succeeded / Failed / Skipped / Total] 500 / 42 / 22 / 564:  56%|█████▋    | 565/1000 [1:38:03<1:15:29, 10.41s/it][Succeeded / Failed / Skipped / Total] 500 / 42 / 23 / 565:  56%|█████▋    | 565/1000 [1:38:03<1:15:29, 10.41s/it][Succeeded / Failed / Skipped / Total] 500 / 42 / 23 / 565:  57%|█████▋    | 566/1000 [1:38:20<1:15:24, 10.42s/it][Succeeded / Failed / Skipped / Total] 501 / 42 / 23 / 566:  57%|█████▋    | 566/1000 [1:38:20<1:15:24, 10.42s/it][Succeeded / Failed / Skipped / Total] 501 / 42 / 23 / 566:  57%|█████▋    | 567/1000 [1:38:22<1:15:07, 10.41s/it][Succeeded / Failed / Skipped / Total] 502 / 42 / 23 / 567:  57%|█████▋    | 567/1000 [1:38:22<1:15:07, 10.41s/it][Succeeded / Failed / Skipped / Total] 502 / 43 / 23 / 568:  57%|█████▋    | 568/1000 [1:38:22<1:14:49, 10.39s/it][Succeeded / Failed / Skipped / Total] 502 / 43 / 23 / 568:  57%|█████▋    | 569/1000 [1:38:23<1:14:32, 10.38s/it][Succeeded / Failed / Skipped / Total] 503 / 43 / 23 / 569:  57%|█████▋    | 569/1000 [1:38:23<1:14:32, 10.38s/it][Succeeded / Failed / Skipped / Total] 504 / 43 / 23 / 570:  57%|█████▋    | 570/1000 [1:38:27<1:14:16, 10.36s/it][Succeeded / Failed / Skipped / Total] 504 / 43 / 23 / 570:  57%|█████▋    | 571/1000 [1:38:29<1:14:00, 10.35s/it][Succeeded / Failed / Skipped / Total] 505 / 43 / 23 / 571:  57%|█████▋    | 571/1000 [1:38:29<1:14:00, 10.35s/it][Succeeded / Failed / Skipped / Total] 506 / 43 / 23 / 572:  57%|█████▋    | 572/1000 [1:38:31<1:13:43, 10.33s/it][Succeeded / Failed / Skipped / Total] 506 / 43 / 23 / 572:  57%|█████▋    | 573/1000 [1:38:35<1:13:28, 10.32s/it]Converts string content to charset . --> Method to construct HttpEntity arsenios --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String charset ) { return new Strict ( ByteString . fromString ( [[content]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[arsenio]] ( String [[timmons]] , String charset ) { return new Strict ( ByteString . fromString ( [[timmons]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 563 ---------------------------------------------
Gets an error . --> On clientError --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader [[request]] , int [[statusCode]] , String [[message]] ) { if ( [[statusCode]] == 400 ) { return onBadRequest ( [[request]] , [[message]] ) ; } else if ( [[statusCode]] == 403 ) { return onForbidden ( [[request]] , [[message]] ) ; } else if ( [[statusCode]] == 404 ) { return onNotFound ( [[request]] , [[message]] ) ; } else if ( [[statusCode]] >= 400 && [[statusCode]] < 500 ) { return onOtherClientError ( [[request]] , [[statusCode]] , [[message]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + [[statusCode]] + ": " + [[message]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader [[cryer]] , int [[struggling]] , String [[disciplined]] ) { if ( [[struggling]] == 400 ) { return onBadRequest ( [[cryer]] , [[disciplined]] ) ; } else if ( [[struggling]] == 403 ) { return onForbidden ( [[cryer]] , [[disciplined]] ) ; } else if ( [[struggling]] == 404 ) { return onNotFound ( [[cryer]] , [[disciplined]] ) ; } else if ( [[struggling]] >= 400 && [[struggling]] < 500 ) { return onOtherClientError ( [[cryer]] , [[struggling]] , [[disciplined]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + [[struggling]] + ": " + [[disciplined]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 564 ---------------------------------------------
Submits a status message . --> Return the response status of the response --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , InputStream content , long contentLength ) { return status ( status ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int [[also]] , InputStream content , long contentLength ) { return status ( status ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 565 ---------------------------------------------
Returns a user . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 566 ---------------------------------------------
Returns a new Lang . --> Methode d unousse --> Socre: 1.0

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[mousse]] ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 567 ---------------------------------------------
Get the status of the file . --> Get the status of the given message --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , File [[content]] ) { return status ( status , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result status ( int status , File [[rizz]] ) { return status ( status , [[rizz]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 568 ---------------------------------------------
Returns throwableToUseful exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException throwableToUsefulException ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException throwableToUsefulException ( final Throwable [[populace]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[populace]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 569 ---------------------------------------------
Create HttpEntity from content . --> Convenience method to make a HttpEntity Object --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content [[content]] , String [[charset]] ) { String body ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[classes]] ( Content [[hijacker]] , String [[ya]] ) { String body ; if ( [[hijacker]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 570 ---------------------------------------------
Creates a unique service . --> Call cousin method --> Socre: 1.0

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[cousin]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 571 ---------------------------------------------
Returns the absolute URL for the given request . --> Get the Dan of a request --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[duncan]] ( Http . Request request ) { return [[duncan]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 572 ---------------------------------------------
Gets web socket url . --> Request for ballerinas --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[ballerinas]] ( Http . Request request ) { return [[ballerinas]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 573 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 507 / 43 / 23 / 573:  57%|█████▋    | 573/1000 [1:38:35<1:13:28, 10.32s/it][Succeeded / Failed / Skipped / Total] 508 / 43 / 23 / 574:  57%|█████▋    | 574/1000 [1:38:35<1:13:10, 10.31s/it][Succeeded / Failed / Skipped / Total] 508 / 43 / 23 / 574:  57%|█████▊    | 575/1000 [1:38:45<1:12:59, 10.31s/it][Succeeded / Failed / Skipped / Total] 509 / 43 / 23 / 575:  57%|█████▊    | 575/1000 [1:38:45<1:12:59, 10.31s/it][Succeeded / Failed / Skipped / Total] 509 / 43 / 23 / 575:  58%|█████▊    | 576/1000 [1:38:51<1:12:46, 10.30s/it][Succeeded / Failed / Skipped / Total] 510 / 43 / 23 / 576:  58%|█████▊    | 576/1000 [1:38:51<1:12:46, 10.30s/it][Succeeded / Failed / Skipped / Total] 510 / 43 / 23 / 576:  58%|█████▊    | 577/1000 [1:38:52<1:12:29, 10.28s/it][Succeeded / Failed / Skipped / Total] 511 / 43 / 23 / 577:  58%|█████▊    | 577/1000 [1:38:52<1:12:29, 10.28s/it][Succeeded / Failed / Skipped / Total] 511 / 43 / 23 / 577:  58%|█████▊    | 578/1000 [1:38:53<1:12:11, 10.27s/it][Succeeded / Failed / Skipped / Total] 512 / 43 / 23 / 578:  58%|█████▊    | 578/1000 [1:38:53<1:12:11, 10.27s/it][Succeeded / Failed / Skipped / Total] 512 / 43 / 23 / 578:  58%|█████▊    | 579/1000 [1:39:01<1:12:00, 10.26s/it][Succeeded / Failed / Skipped / Total] 513 / 43 / 23 / 579:  58%|█████▊    | 579/1000 [1:39:01<1:12:00, 10.26s/it][Succeeded / Failed / Skipped / Total] 513 / 43 / 23 / 579:  58%|█████▊    | 580/1000 [1:39:07<1:11:47, 10.25s/it][Succeeded / Failed / Skipped / Total] 514 / 43 / 23 / 580:  58%|█████▊    | 580/1000 [1:39:07<1:11:47, 10.25s/it][Succeeded / Failed / Skipped / Total] 514 / 43 / 23 / 580:  58%|█████▊    | 581/1000 [1:39:09<1:11:30, 10.24s/it][Succeeded / Failed / Skipped / Total] 515 / 43 / 23 / 581:  58%|█████▊    | 581/1000 [1:39:09<1:11:30, 10.24s/it][Succeeded / Failed / Skipped / Total] 515 / 43 / 23 / 581:  58%|█████▊    | 582/1000 [1:39:17<1:11:18, 10.24s/it][Succeeded / Failed / Skipped / Total] 516 / 43 / 23 / 582:  58%|█████▊    | 582/1000 [1:39:17<1:11:18, 10.24s/it][Succeeded / Failed / Skipped / Total] 516 / 43 / 23 / 582:  58%|█████▊    | 583/1000 [1:39:30<1:11:10, 10.24s/it]Returns a new connection function . --> region ConnectionListener --> Socre: 1.0

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[appetite]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 574 ---------------------------------------------
Create a chunked . --> Returns an active HttpEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity chunked ( Source < ByteString , ? > [[data]] , Optional < String > [[contentType]] ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , [[contentType]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity chunked ( Source < ByteString , ? > [[azam]] , Optional < String > [[schoolbooks]] ) { return new Chunked ( [[azam]] . map ( HttpChunk . Chunk :: new ) , [[schoolbooks]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 575 ---------------------------------------------
Converts the given JSON object to an instance of the given class . --> Creates an adjusted object from the given json . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[adjusted]] > [[adjusted]] fromJson ( JsonNode json , Class < [[adjusted]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 576 ---------------------------------------------
Gets status . --> Get the status of the response --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result status ( int status , byte [ ] [[sakurai]] ) { if ( [[sakurai]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[sakurai]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 577 ---------------------------------------------
Parse the string . --> Parse the given ghostly --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode parse ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( String [[ghostly]] ) { try { return mapper ( ) . readTree ( [[ghostly]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 578 ---------------------------------------------
Define a service fragment . --> Return equatorial --> Socre: 1.0

[[[[Adv]]]]: public Call withFragment ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call withFragment ( String [[equatorial]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[equatorial]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 579 ---------------------------------------------
Get the response status . --> Send status message --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , JsonNode content , JsonEncoding [[encoding]] ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( content , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result status ( int [[ie]] , JsonNode content , JsonEncoding [[voisin]] ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( content , [[voisin]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 580 ---------------------------------------------
Parse the given source stream into a JsonNode . --> Get Javaembrance from src --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[remembrance]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 581 ---------------------------------------------
Display constraint . --> duchamp methods --> Socre: 1.0

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[duchamp]] ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[duchamp]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 582 ---------------------------------------------
Creates relative path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static String relative ( String startPath , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String relative ( String startPath , String [[caroling]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 583 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 517 / 43 / 23 / 583:  58%|█████▊    | 583/1000 [1:39:30<1:11:10, 10.24s/it][Succeeded / Failed / Skipped / Total] 517 / 43 / 23 / 583:  58%|█████▊    | 584/1000 [1:39:32<1:10:54, 10.23s/it][Succeeded / Failed / Skipped / Total] 518 / 43 / 23 / 584:  58%|█████▊    | 584/1000 [1:39:32<1:10:54, 10.23s/it][Succeeded / Failed / Skipped / Total] 518 / 43 / 23 / 584:  58%|█████▊    | 585/1000 [1:39:38<1:10:40, 10.22s/it][Succeeded / Failed / Skipped / Total] 519 / 43 / 23 / 585:  58%|█████▊    | 585/1000 [1:39:38<1:10:40, 10.22s/it][Succeeded / Failed / Skipped / Total] 519 / 43 / 23 / 585:  59%|█████▊    | 586/1000 [1:39:39<1:10:24, 10.20s/it][Succeeded / Failed / Skipped / Total] 520 / 43 / 23 / 586:  59%|█████▊    | 586/1000 [1:39:39<1:10:24, 10.20s/it][Succeeded / Failed / Skipped / Total] 520 / 43 / 23 / 586:  59%|█████▊    | 587/1000 [1:39:39<1:10:07, 10.19s/it][Succeeded / Failed / Skipped / Total] 521 / 43 / 23 / 587:  59%|█████▊    | 587/1000 [1:39:39<1:10:07, 10.19s/it][Succeeded / Failed / Skipped / Total] 521 / 43 / 23 / 587:  59%|█████▉    | 588/1000 [1:39:47<1:09:55, 10.18s/it][Succeeded / Failed / Skipped / Total] 522 / 43 / 23 / 588:  59%|█████▉    | 588/1000 [1:39:47<1:09:55, 10.18s/it][Succeeded / Failed / Skipped / Total] 523 / 43 / 23 / 589:  59%|█████▉    | 589/1000 [1:39:47<1:09:38, 10.17s/it][Succeeded / Failed / Skipped / Total] 523 / 43 / 23 / 589:  59%|█████▉    | 590/1000 [1:39:58<1:09:28, 10.17s/it]Returns the canonical form of the specified URL . --> Can be overridden by subclasses --> Socre: 1.0

[[[[Adv]]]]: public static String canonical ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String [[prefixSep]] = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return [[prefixSep]] + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String canonical ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String [[skidded]] = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return [[skidded]] + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 584 ---------------------------------------------
Returns tuple of displayable constraint . --> tartare tartare attribute --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > constraint ) { final Display displayAnnotation = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[tartare]] ( ConstraintDescriptor < ? > constraint ) { final Display displayAnnotation = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 585 ---------------------------------------------
Creates cron expression expression from date --> Creates cron expression --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String [[cron]] , Date date ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String [[mayberry]] , Date date ) { try { return new CronExpression ( [[mayberry]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[mayberry]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 586 ---------------------------------------------
Returns the given stage . --> region > majorca --> Socre: 1.0

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[majorca]] ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 587 ---------------------------------------------
Gets connection function . --> Return connection change --> Socre: 1.0

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return [[block]] . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[devotional]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[voisin]] ) { try { return [[devotional]] . call ( [[voisin]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 588 ---------------------------------------------
Serialize data to JsonNode --> autops the given value --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[autopsy]] ( final Object [[mnh]] ) { try { return mapper ( ) . valueToTree ( [[mnh]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 589 ---------------------------------------------
Parses a CRON expression . --> Parse the CronExpression --> Socre: 1.0

[[[[Adv]]]]: public static Date parseCRONExpression ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date parseCRONExpression ( String [[roadblocks]] ) { try { return new CronExpression ( [[roadblocks]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[roadblocks]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 590 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 524 / 43 / 23 / 590:  59%|█████▉    | 590/1000 [1:39:58<1:09:28, 10.17s/it][Succeeded / Failed / Skipped / Total] 524 / 43 / 23 / 590:  59%|█████▉    | 591/1000 [1:40:10<1:09:19, 10.17s/it][Succeeded / Failed / Skipped / Total] 525 / 43 / 23 / 591:  59%|█████▉    | 591/1000 [1:40:10<1:09:19, 10.17s/it][Succeeded / Failed / Skipped / Total] 525 / 43 / 23 / 591:  59%|█████▉    | 592/1000 [1:40:27<1:09:14, 10.18s/it][Succeeded / Failed / Skipped / Total] 526 / 43 / 23 / 592:  59%|█████▉    | 592/1000 [1:40:27<1:09:14, 10.18s/it][Succeeded / Failed / Skipped / Total] 526 / 43 / 23 / 592:  59%|█████▉    | 593/1000 [1:40:38<1:09:04, 10.18s/it][Succeeded / Failed / Skipped / Total] 527 / 43 / 23 / 593:  59%|█████▉    | 593/1000 [1:40:38<1:09:04, 10.18s/it][Succeeded / Failed / Skipped / Total] 527 / 43 / 23 / 593:  59%|█████▉    | 594/1000 [1:40:45<1:08:52, 10.18s/it][Succeeded / Failed / Skipped / Total] 528 / 43 / 23 / 594:  59%|█████▉    | 594/1000 [1:40:45<1:08:52, 10.18s/it][Succeeded / Failed / Skipped / Total] 528 / 43 / 23 / 594:  60%|█████▉    | 595/1000 [1:40:54<1:08:41, 10.18s/it][Succeeded / Failed / Skipped / Total] 529 / 43 / 23 / 595:  60%|█████▉    | 595/1000 [1:40:54<1:08:41, 10.18s/it][Succeeded / Failed / Skipped / Total] 529 / 43 / 23 / 595:  60%|█████▉    | 596/1000 [1:40:56<1:08:25, 10.16s/it][Succeeded / Failed / Skipped / Total] 530 / 43 / 23 / 596:  60%|█████▉    | 596/1000 [1:40:56<1:08:25, 10.16s/it][Succeeded / Failed / Skipped / Total] 530 / 43 / 23 / 596:  60%|█████▉    | 597/1000 [1:41:02<1:08:12, 10.15s/it][Succeeded / Failed / Skipped / Total] 531 / 43 / 23 / 597:  60%|█████▉    | 597/1000 [1:41:02<1:08:12, 10.15s/it][Succeeded / Failed / Skipped / Total] 531 / 43 / 23 / 597:  60%|█████▉    | 598/1000 [1:41:03<1:07:56, 10.14s/it][Succeeded / Failed / Skipped / Total] 532 / 43 / 23 / 598:  60%|█████▉    | 598/1000 [1:41:03<1:07:56, 10.14s/it][Succeeded / Failed / Skipped / Total] 532 / 43 / 23 / 598:  60%|█████▉    | 599/1000 [1:41:05<1:07:40, 10.13s/it][Succeeded / Failed / Skipped / Total] 533 / 43 / 23 / 599:  60%|█████▉    | 599/1000 [1:41:05<1:07:40, 10.13s/it][Succeeded / Failed / Skipped / Total] 533 / 43 / 23 / 599:  60%|██████    | 600/1000 [1:41:07<1:07:24, 10.11s/it][Succeeded / Failed / Skipped / Total] 534 / 43 / 23 / 600:  60%|██████    | 600/1000 [1:41:07<1:07:24, 10.11s/it][Succeeded / Failed / Skipped / Total] 534 / 43 / 23 / 600:  60%|██████    | 601/1000 [1:41:11<1:07:10, 10.10s/it]Renders the given request . --> Returns the left edge of the given request --> Socre: 1.0

[[[[Adv]]]]: public static Result TODO ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result TODO ( Request [[chaka]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[chaka]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 591 ---------------------------------------------
Associate a string with the specified key . --> guantanAMo --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String key , String value ) { [[flash]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[guantanamo]] ( String key , String value ) { [[guantanamo]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 592 ---------------------------------------------
Returns a new binding key with the given instance . --> Convenience method for obtaining a BindingKey --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[amaze]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 593 ---------------------------------------------
Load the application builder . --> Load anthony --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder builder ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder builder ( ApplicationLoader . Context [[anthony]] ) { return initialBuilder . in ( [[anthony]] . environment ( ) ) . loadConfig ( [[anthony]] . initialConfig ( ) ) . overrides ( overrides ( [[anthony]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 594 ---------------------------------------------
Converts the provider to a Binding . --> Create a new splendored tuple --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[splendored]] ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 595 ---------------------------------------------
Creates a new AhcWSClient . --> create AhcWSClient --> Socre: 1.0

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient [[client]] = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( [[client]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient [[nyu]] = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( [[nyu]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 596 ---------------------------------------------
Convert implementation to a Binding --> Get a human readable description --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[hôtel]] ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 597 ---------------------------------------------
Adds a session . --> region frisbees --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String [[key]] , String value ) { [[session]] ( ) . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[frisbees]] ( String [[putsch]] , String value ) { [[frisbees]] ( ) . put ( [[putsch]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 598 ---------------------------------------------
Create a new provider . --> cast toProvider --> Socre: 1.0

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > toProvider ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > toProvider ( final Class < P > [[excessive]] ) { return underlying . toProvider ( [[excessive]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 599 ---------------------------------------------
Get qualified with annotation . --> Get a single BindingKey --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[yangs]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 600 ---------------------------------------------
Convert a supplier to a Java Binding --> Get a Java supplier --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[hôtel]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 601 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 535 / 43 / 23 / 601:  60%|██████    | 601/1000 [1:41:11<1:07:10, 10.10s/it][Succeeded / Failed / Skipped / Total] 535 / 43 / 23 / 601:  60%|██████    | 602/1000 [1:41:25<1:07:03, 10.11s/it][Succeeded / Failed / Skipped / Total] 536 / 43 / 23 / 602:  60%|██████    | 602/1000 [1:41:25<1:07:03, 10.11s/it][Succeeded / Failed / Skipped / Total] 536 / 43 / 23 / 602:  60%|██████    | 603/1000 [1:41:32<1:06:51, 10.10s/it][Succeeded / Failed / Skipped / Total] 537 / 43 / 23 / 603:  60%|██████    | 603/1000 [1:41:32<1:06:51, 10.10s/it][Succeeded / Failed / Skipped / Total] 537 / 43 / 23 / 603:  60%|██████    | 604/1000 [1:41:39<1:06:38, 10.10s/it][Succeeded / Failed / Skipped / Total] 538 / 43 / 23 / 604:  60%|██████    | 604/1000 [1:41:39<1:06:38, 10.10s/it][Succeeded / Failed / Skipped / Total] 538 / 43 / 23 / 604:  60%|██████    | 605/1000 [1:41:45<1:06:26, 10.09s/it][Succeeded / Failed / Skipped / Total] 539 / 43 / 23 / 605:  60%|██████    | 605/1000 [1:41:45<1:06:26, 10.09s/it][Succeeded / Failed / Skipped / Total] 539 / 43 / 23 / 605:  61%|██████    | 606/1000 [1:41:47<1:06:10, 10.08s/it][Succeeded / Failed / Skipped / Total] 540 / 43 / 23 / 606:  61%|██████    | 606/1000 [1:41:47<1:06:10, 10.08s/it][Succeeded / Failed / Skipped / Total] 540 / 43 / 23 / 606:  61%|██████    | 607/1000 [1:41:48<1:05:55, 10.06s/it][Succeeded / Failed / Skipped / Total] 540 / 44 / 23 / 607:  61%|██████    | 607/1000 [1:41:48<1:05:55, 10.06s/it][Succeeded / Failed / Skipped / Total] 540 / 44 / 23 / 607:  61%|██████    | 608/1000 [1:41:51<1:05:40, 10.05s/it]Creates a new Lang object . --> Create a global language --> Socre: 1.0

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[blanks]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 602 ---------------------------------------------
Retrieves the list of availables from the given application . --> Get a list of all non - minimal Langs --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[horrifying]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 603 ---------------------------------------------
Loads the Guice application configuration --> Creates a GuiceApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > [[load]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[load]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > [[anorak]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[anorak]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 604 ---------------------------------------------
Loads the given loader . --> Creates a new application builder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment [[env]] , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( [[env]] ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment [[accidentally]] , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( [[accidentally]] ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 605 ---------------------------------------------
Cleanup evolutions . --> Copied from Abstractolutions --> Socre: 1.0

[[[[Adv]]]]: public static void cleanupEvolutions ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void cleanupEvolutions ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions [[petrov]] = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; [[petrov]] . evolve ( [[petrov]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 606 ---------------------------------------------
Loads the given Guiceable module array . --> Creates a new Guice Application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[attended]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 607 ---------------------------------------------
Parses the given directory and the given base . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File [[directory]] , JarFile jarFile , String base , boolean [[fallbackToJar]] ) { FileRepository fileRepo = new FilesystemRepository ( [[directory]] ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( [[fallbackToJar]] ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File [[lolling]] , JarFile jarFile , String base , boolean [[farrow]] ) { FileRepository fileRepo = new FilesystemRepository ( [[lolling]] ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( [[farrow]] ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 608 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 541 / 44 / 23 / 608:  61%|██████    | 608/1000 [1:41:51<1:05:40, 10.05s/it][Succeeded / Failed / Skipped / Total] 541 / 44 / 23 / 608:  61%|██████    | 609/1000 [1:41:52<1:05:24, 10.04s/it][Succeeded / Failed / Skipped / Total] 541 / 44 / 24 / 609:  61%|██████    | 609/1000 [1:41:52<1:05:24, 10.04s/it][Succeeded / Failed / Skipped / Total] 541 / 44 / 24 / 609:  61%|██████    | 610/1000 [1:41:52<1:05:08, 10.02s/it][Succeeded / Failed / Skipped / Total] 542 / 44 / 24 / 610:  61%|██████    | 610/1000 [1:41:52<1:05:08, 10.02s/it][Succeeded / Failed / Skipped / Total] 542 / 44 / 24 / 610:  61%|██████    | 611/1000 [1:41:55<1:04:53, 10.01s/it][Succeeded / Failed / Skipped / Total] 543 / 44 / 24 / 611:  61%|██████    | 611/1000 [1:41:55<1:04:53, 10.01s/it][Succeeded / Failed / Skipped / Total] 543 / 44 / 24 / 611:  61%|██████    | 612/1000 [1:41:56<1:04:38, 10.00s/it][Succeeded / Failed / Skipped / Total] 544 / 44 / 24 / 612:  61%|██████    | 612/1000 [1:41:56<1:04:38, 10.00s/it][Succeeded / Failed / Skipped / Total] 544 / 44 / 24 / 612:  61%|██████▏   | 613/1000 [1:42:30<1:04:42, 10.03s/it][Succeeded / Failed / Skipped / Total] 545 / 44 / 24 / 613:  61%|██████▏   | 613/1000 [1:42:30<1:04:42, 10.03s/it][Succeeded / Failed / Skipped / Total] 545 / 44 / 24 / 613:  61%|██████▏   | 614/1000 [1:42:47<1:04:37, 10.04s/it][Succeeded / Failed / Skipped / Total] 546 / 44 / 24 / 614:  61%|██████▏   | 614/1000 [1:42:47<1:04:37, 10.04s/it][Succeeded / Failed / Skipped / Total] 546 / 44 / 24 / 614:  62%|██████▏   | 615/1000 [1:43:32<1:04:49, 10.10s/it][Succeeded / Failed / Skipped / Total] 547 / 44 / 24 / 615:  62%|██████▏   | 615/1000 [1:43:32<1:04:49, 10.10s/it][Succeeded / Failed / Skipped / Total] 547 / 44 / 24 / 615:  62%|██████▏   | 616/1000 [1:44:00<1:04:49, 10.13s/it][Succeeded / Failed / Skipped / Total] 548 / 44 / 24 / 616:  62%|██████▏   | 616/1000 [1:44:00<1:04:49, 10.13s/it][Succeeded / Failed / Skipped / Total] 548 / 44 / 24 / 616:  62%|██████▏   | 617/1000 [1:44:00<1:04:33, 10.11s/it][Succeeded / Failed / Skipped / Total] 549 / 44 / 24 / 617:  62%|██████▏   | 617/1000 [1:44:00<1:04:33, 10.11s/it][Succeeded / Failed / Skipped / Total] 549 / 44 / 24 / 617:  62%|██████▏   | 618/1000 [1:44:03<1:04:19, 10.10s/it]Loads a Guice application . --> Load a set of media parameters --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[amyl]] ) { return load ( Guiceable . [[amyl]] ( [[amyl]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 609 ---------------------------------------------
Create a new application builder --> [[[SKIPPED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 610 ---------------------------------------------
Load the Guice application --> Load an application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[alchemy]] ) { return load ( Guiceable . [[alchemy]] ( [[alchemy]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 611 ---------------------------------------------
Loads the given bindings . --> Create a Guice ApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... bindings ) { return [[load]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[brave]] ( play . api . inject . Binding < ? > ... bindings ) { return [[brave]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 612 ---------------------------------------------
Create a new Server using the given mode . --> Liefert das das Liefert --> Socre: 1.0

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode [[mode]] , int port , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . [[mode]] ( [[mode]] ) . http ( port ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[loudmouth]] ( Mode [[repertoire]] , int port , Function < BuiltInComponents , Router > [[philanderer]] ) { return new Builder ( ) . [[repertoire]] ( [[repertoire]] ) . http ( port ) . build ( [[philanderer]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 613 ---------------------------------------------
Convert the supplied key to a Java Binding . --> Unmask a BindingKey --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[unmask]] ( final BindingKey < ? extends T > [[forensic]] ) { return underlying . to ( [[forensic]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 614 ---------------------------------------------
Creates a new SimpleEvolutions reader . --> region EvolutionsReader --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[kegs]] . EvolutionsReader [[seductively]] ( Map < String , List < Evolution > > [[kegs]] ) { return new SimpleEvolutionsReader ( [[kegs]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 615 ---------------------------------------------
Encode cookie . --> Encode misplaced --> Socre: 1.0

[[[[Adv]]]]: public String encode ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[buf]] = new StringBuilder ( ) ; encode ( [[buf]] , [[cookie]] ) ; return stripTrailingSeparator ( [[buf]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie [[misplaced]] ) { if ( [[misplaced]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[nasal]] = new StringBuilder ( ) ; encode ( [[nasal]] , [[misplaced]] ) ; return stripTrailingSeparator ( [[nasal]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 616 ---------------------------------------------
Return the connection with the given flow . --> Returns a Protruding connection --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , FlowIn , Out > Flow < [[In]] , Out , ? > bypassWith ( Function < [[In]] , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[flow]] ) { return bypassWith ( Flow . < [[In]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[flow]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < [[Protruding]] , FlowIn , Out > Flow < [[Protruding]] , Out , ? > bypassWith ( Function < [[Protruding]] , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[melville]] ) { return bypassWith ( Flow . < [[Protruding]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[melville]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 617 ---------------------------------------------
Gets the emStack . --> Create a new Deque instance --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[emsObject]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[emsObject]] != null ) { return ( Deque < EntityManager > ) [[emsObject]] ; } else { Deque < EntityManager > [[ems]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[ems]] ) ; return [[ems]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[levels]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[levels]] != null ) { return ( Deque < EntityManager > ) [[levels]] ; } else { Deque < EntityManager > [[circumstance]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[circumstance]] ) ; return [[circumstance]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 618 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 550 / 44 / 24 / 618:  62%|██████▏   | 618/1000 [1:44:03<1:04:19, 10.10s/it][Succeeded / Failed / Skipped / Total] 550 / 44 / 24 / 618:  62%|██████▏   | 619/1000 [1:44:08<1:04:06, 10.09s/it][Succeeded / Failed / Skipped / Total] 551 / 44 / 24 / 619:  62%|██████▏   | 619/1000 [1:44:08<1:04:06, 10.09s/it][Succeeded / Failed / Skipped / Total] 551 / 44 / 24 / 619:  62%|██████▏   | 620/1000 [1:44:23<1:03:58, 10.10s/it][Succeeded / Failed / Skipped / Total] 552 / 44 / 24 / 620:  62%|██████▏   | 620/1000 [1:44:23<1:03:58, 10.10s/it][Succeeded / Failed / Skipped / Total] 552 / 44 / 24 / 620:  62%|██████▏   | 621/1000 [1:44:24<1:03:43, 10.09s/it][Succeeded / Failed / Skipped / Total] 553 / 44 / 24 / 621:  62%|██████▏   | 621/1000 [1:44:24<1:03:43, 10.09s/it][Succeeded / Failed / Skipped / Total] 553 / 44 / 24 / 621:  62%|██████▏   | 622/1000 [1:44:31<1:03:31, 10.08s/it][Succeeded / Failed / Skipped / Total] 554 / 44 / 24 / 622:  62%|██████▏   | 622/1000 [1:44:31<1:03:31, 10.08s/it][Succeeded / Failed / Skipped / Total] 554 / 44 / 24 / 622:  62%|██████▏   | 623/1000 [1:44:37<1:03:18, 10.08s/it][Succeeded / Failed / Skipped / Total] 555 / 44 / 24 / 623:  62%|██████▏   | 623/1000 [1:44:37<1:03:18, 10.08s/it][Succeeded / Failed / Skipped / Total] 555 / 44 / 24 / 623:  62%|██████▏   | 624/1000 [1:44:40<1:03:04, 10.07s/it][Succeeded / Failed / Skipped / Total] 556 / 44 / 24 / 624:  62%|██████▏   | 624/1000 [1:44:40<1:03:04, 10.07s/it][Succeeded / Failed / Skipped / Total] 556 / 44 / 24 / 624:  62%|██████▎   | 625/1000 [1:44:46<1:02:51, 10.06s/it][Succeeded / Failed / Skipped / Total] 557 / 44 / 24 / 625:  62%|██████▎   | 625/1000 [1:44:46<1:02:51, 10.06s/it][Succeeded / Failed / Skipped / Total] 557 / 44 / 24 / 625:  63%|██████▎   | 626/1000 [1:44:47<1:02:36, 10.04s/it]Pushes the given EntityManager onto this context . --> push orPopEm Method --> Socre: 1.0

[[[[Adv]]]]: void pushOrPopEm ( EntityManager [[em]] , boolean [[threadLocalFallback]] ) { Deque < EntityManager > ems = this . emStack ( [[threadLocalFallback]] ) ; if ( [[em]] != null ) { ems . push ( [[em]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void pushOrPopEm ( EntityManager [[kublai]] , boolean [[shrub]] ) { Deque < EntityManager > ems = this . emStack ( [[shrub]] ) ; if ( [[kublai]] != null ) { ems . push ( [[kublai]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 619 ---------------------------------------------
Converts an argument array to a list . --> Converts an Object array to a list of Objects --> Socre: 1.0

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[scream]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[scream]] ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 620 ---------------------------------------------
Fills the form with the given value . --> fill a hamsters --> Socre: 1.0

[[[[Adv]]]]: public Form < T > [[fill]] ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[hamsters]] ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 621 ---------------------------------------------
Creates a new Evolutions reader . --> Evasal random text --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[nasal]] . EvolutionsReader [[bitter]] ( Evolution ... [[nasal]] ) { Map < String , List < Evolution > > [[marionette]] = new HashMap < String , List < Evolution > > ( ) ; [[marionette]] . put ( "default" , Arrays . asList ( [[nasal]] ) ) ; return fromMap ( [[marionette]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 622 ---------------------------------------------
Fills the form with the specified value . --> Create a DynamicForm --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[numerous]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 623 ---------------------------------------------
Returns the value of the given key . --> Maps chess to a Optional --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > value ( String [[key]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[key]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > value ( String [[chess]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[chess]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 624 ---------------------------------------------
Parse the given text into a T object . --> Create a lichtenstein object --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[lichtenstein]] > [[lichtenstein]] parse ( String text , Class < [[lichtenstein]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 625 ---------------------------------------------
Parse a field in a string . --> Parse the given text and return the conversion . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[chalk]] > [[chalk]] parse ( Field field , String text ) { return ( [[chalk]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 626 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 558 / 44 / 24 / 626:  63%|██████▎   | 626/1000 [1:44:47<1:02:36, 10.04s/it][Succeeded / Failed / Skipped / Total] 558 / 44 / 24 / 626:  63%|██████▎   | 627/1000 [1:44:55<1:02:25, 10.04s/it][Succeeded / Failed / Skipped / Total] 558 / 45 / 24 / 627:  63%|██████▎   | 627/1000 [1:44:55<1:02:25, 10.04s/it][Succeeded / Failed / Skipped / Total] 558 / 45 / 24 / 627:  63%|██████▎   | 628/1000 [1:44:59<1:02:11, 10.03s/it][Succeeded / Failed / Skipped / Total] 559 / 45 / 24 / 628:  63%|██████▎   | 628/1000 [1:44:59<1:02:11, 10.03s/it][Succeeded / Failed / Skipped / Total] 559 / 45 / 24 / 628:  63%|██████▎   | 629/1000 [1:45:00<1:01:56, 10.02s/it][Succeeded / Failed / Skipped / Total] 560 / 45 / 24 / 629:  63%|██████▎   | 629/1000 [1:45:00<1:01:56, 10.02s/it][Succeeded / Failed / Skipped / Total] 560 / 45 / 24 / 629:  63%|██████▎   | 630/1000 [1:45:03<1:01:42, 10.01s/it][Succeeded / Failed / Skipped / Total] 561 / 45 / 24 / 630:  63%|██████▎   | 630/1000 [1:45:03<1:01:42, 10.01s/it][Succeeded / Failed / Skipped / Total] 561 / 45 / 24 / 630:  63%|██████▎   | 631/1000 [1:45:05<1:01:27,  9.99s/it][Succeeded / Failed / Skipped / Total] 562 / 45 / 24 / 631:  63%|██████▎   | 631/1000 [1:45:05<1:01:27,  9.99s/it][Succeeded / Failed / Skipped / Total] 562 / 45 / 24 / 631:  63%|██████▎   | 632/1000 [1:45:08<1:01:13,  9.98s/it][Succeeded / Failed / Skipped / Total] 563 / 45 / 24 / 632:  63%|██████▎   | 632/1000 [1:45:08<1:01:13,  9.98s/it][Succeeded / Failed / Skipped / Total] 563 / 45 / 24 / 632:  63%|██████▎   | 633/1000 [1:45:13<1:01:00,  9.97s/it]Print t . --> Converts t to Abhorred --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Abhorred]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Abhorred]] . class ) ) { return conversion . convert ( t , [[Abhorred]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 627 ---------------------------------------------
Returns an EntityManager object . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > [[ems]] = this . emStack ( "True" == "True" ) ; if ( [[ems]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ems]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[dreamless]] ( ) { Deque < EntityManager > [[despaired]] = this . emStack ( "True" == "True" ) ; if ( [[despaired]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[despaired]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 628 ---------------------------------------------
Print a field --> Print T --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Videogames]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 629 ---------------------------------------------
Reads a JSON document from the response . --> Get all messages in bread --> Socre: 1.0

[[[[Adv]]]]: public JsonNode errorsAsJson ( Lang [[lang]] ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && [[lang]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( [[lang]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[lang]] ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode errorsAsJson ( Lang [[breadfruit]] ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && [[breadfruit]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( [[breadfruit]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[breadfruit]] ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 630 ---------------------------------------------
Register an optional type . --> Registers the source code . --> Socre: 1.0

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { if ( [[sourceType]] . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor [[anaconda]] , TypeDescriptor targetType ) { if ( [[anaconda]] . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 631 ---------------------------------------------
Returns the error list . --> trans ls error messages --> Socre: 1.0

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[transsexuals]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 632 ---------------------------------------------
Returns a string representation of the given type descriptor . --> Convert t to Demonstrates --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Demonstrates]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Demonstrates]] . class ) ) ) { return ( [[Demonstrates]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Demonstrates]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Demonstrates]] . class ) ) { return conversion . convert ( t , [[Demonstrates]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 633 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 564 / 45 / 24 / 633:  63%|██████▎   | 633/1000 [1:45:13<1:01:00,  9.97s/it][Succeeded / Failed / Skipped / Total] 564 / 45 / 24 / 633:  63%|██████▎   | 634/1000 [1:45:16<1:00:46,  9.96s/it][Succeeded / Failed / Skipped / Total] 565 / 45 / 24 / 634:  63%|██████▎   | 634/1000 [1:45:16<1:00:46,  9.96s/it][Succeeded / Failed / Skipped / Total] 565 / 45 / 24 / 634:  64%|██████▎   | 635/1000 [1:45:28<1:00:37,  9.97s/it][Succeeded / Failed / Skipped / Total] 566 / 45 / 24 / 635:  64%|██████▎   | 635/1000 [1:45:28<1:00:37,  9.97s/it][Succeeded / Failed / Skipped / Total] 566 / 45 / 24 / 635:  64%|██████▎   | 636/1000 [1:45:28<1:00:22,  9.95s/it][Succeeded / Failed / Skipped / Total] 566 / 45 / 25 / 636:  64%|██████▎   | 636/1000 [1:45:28<1:00:22,  9.95s/it][Succeeded / Failed / Skipped / Total] 566 / 45 / 25 / 636:  64%|██████▎   | 637/1000 [1:46:00<1:00:24,  9.99s/it][Succeeded / Failed / Skipped / Total] 567 / 45 / 25 / 637:  64%|██████▎   | 637/1000 [1:46:00<1:00:24,  9.99s/it][Succeeded / Failed / Skipped / Total] 567 / 45 / 25 / 637:  64%|██████▍   | 638/1000 [1:46:06<1:00:12,  9.98s/it][Succeeded / Failed / Skipped / Total] 567 / 46 / 25 / 638:  64%|██████▍   | 638/1000 [1:46:06<1:00:12,  9.98s/it][Succeeded / Failed / Skipped / Total] 567 / 46 / 25 / 638:  64%|██████▍   | 639/1000 [1:46:09<59:58,  9.97s/it]  [Succeeded / Failed / Skipped / Total] 568 / 46 / 25 / 639:  64%|██████▍   | 639/1000 [1:46:09<59:58,  9.97s/it][Succeeded / Failed / Skipped / Total] 568 / 46 / 25 / 639:  64%|██████▍   | 640/1000 [1:46:14<59:45,  9.96s/it]select node . --> Create a new NodeList --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object node ) { return [[selectNodes]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[eight]] ( String path , Object node ) { return [[eight]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 634 ---------------------------------------------
Convert a list of objects to its equivalent equivalent equivalent . --> tarik method --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > list ) { return scala . collection . JavaConverters . asScalaBufferConverter ( list ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[tarik]] ( java . util . List < T > list ) { return scala . collection . JavaConverters . asScalaBufferConverter ( list ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 635 ---------------------------------------------
convert array to enumeration --> Get the lighter --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] array ) { return [[toSeq]] ( java . util . Arrays . asList ( array ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[lighter]] ( T [ ] array ) { return [[lighter]] ( java . util . Arrays . asList ( array ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 636 ---------------------------------------------
Return a MappedWebSocketAcceptor --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > json ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 637 ---------------------------------------------
Accepts the inMapper result . --> Return a WebSocket result --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[flow]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[flow]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[admissions]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[admissions]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 638 ---------------------------------------------
Returns true if the specified class array is assignable . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isAssignable ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean [[autoboxing]] ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( isAssignable ( classArray [ i ] , toClassArray [ i ] , [[autoboxing]] ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean isAssignable ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean [[brougham]] ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( isAssignable ( classArray [ i ] , toClassArray [ i ] , [[brougham]] ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 639 ---------------------------------------------
Checks to see if the given object is setAccessibleWorkaround . --> Sets the setAccessibleWorkaround of the given object --> Socre: 1.0

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "[[True]]" == "[[True]]" ) ; return "[[True]]" == "[[True]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "[[Hernando]]" == "[[Hernando]]" ) ; return "[[Hernando]]" == "[[Hernando]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
[Succeeded / Failed / Skipped / Total] 569 / 46 / 25 / 640:  64%|██████▍   | 640/1000 [1:46:14<59:45,  9.96s/it][Succeeded / Failed / Skipped / Total] 569 / 46 / 25 / 640:  64%|██████▍   | 641/1000 [1:46:23<59:35,  9.96s/it][Succeeded / Failed / Skipped / Total] 570 / 46 / 25 / 641:  64%|██████▍   | 641/1000 [1:46:23<59:35,  9.96s/it][Succeeded / Failed / Skipped / Total] 570 / 46 / 25 / 641:  64%|██████▍   | 642/1000 [1:46:31<59:23,  9.95s/it][Succeeded / Failed / Skipped / Total] 571 / 46 / 25 / 642:  64%|██████▍   | 642/1000 [1:46:31<59:23,  9.95s/it][Succeeded / Failed / Skipped / Total] 571 / 46 / 25 / 642:  64%|██████▍   | 643/1000 [1:46:38<59:12,  9.95s/it][Succeeded / Failed / Skipped / Total] 572 / 46 / 25 / 643:  64%|██████▍   | 643/1000 [1:46:38<59:12,  9.95s/it][Succeeded / Failed / Skipped / Total] 572 / 46 / 25 / 643:  64%|██████▍   | 644/1000 [1:46:46<59:01,  9.95s/it][Succeeded / Failed / Skipped / Total] 573 / 46 / 25 / 644:  64%|██████▍   | 644/1000 [1:46:46<59:01,  9.95s/it][Succeeded / Failed / Skipped / Total] 573 / 46 / 25 / 644:  64%|██████▍   | 645/1000 [1:47:25<59:07,  9.99s/it][Succeeded / Failed / Skipped / Total] 574 / 46 / 25 / 645:  64%|██████▍   | 645/1000 [1:47:25<59:07,  9.99s/it][Succeeded / Failed / Skipped / Total] 574 / 46 / 25 / 645:  65%|██████▍   | 646/1000 [1:47:46<59:03, 10.01s/it][Succeeded / Failed / Skipped / Total] 575 / 46 / 25 / 646:  65%|██████▍   | 646/1000 [1:47:46<59:03, 10.01s/it][Succeeded / Failed / Skipped / Total] 575 / 46 / 25 / 646:  65%|██████▍   | 647/1000 [1:47:57<58:53, 10.01s/it][Succeeded / Failed / Skipped / Total] 576 / 46 / 25 / 647:  65%|██████▍   | 647/1000 [1:47:57<58:53, 10.01s/it][Succeeded / Failed / Skipped / Total] 576 / 46 / 25 / 647:  65%|██████▍   | 648/1000 [1:48:23<58:52, 10.04s/it][Succeeded / Failed / Skipped / Total] 577 / 46 / 25 / 648:  65%|██████▍   | 648/1000 [1:48:23<58:52, 10.04s/it][Succeeded / Failed / Skipped / Total] 577 / 46 / 25 / 648:  65%|██████▍   | 649/1000 [1:48:23<58:37, 10.02s/it][Succeeded / Failed / Skipped / Total] 578 / 46 / 25 / 649:  65%|██████▍   | 649/1000 [1:48:23<58:37, 10.02s/it][Succeeded / Failed / Skipped / Total] 578 / 46 / 25 / 649:  65%|██████▌   | 650/1000 [1:48:30<58:25, 10.02s/it]--------------------------------------------- Result 640 ---------------------------------------------
Calculate costotion cost . --> getPrimitive promotion cost --> Socre: 1.0

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > [[destClass]] ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > [[concert]] ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 641 ---------------------------------------------
Returns a copy of the given Flow . --> Comaparazzi s fanIn shape --> Socre: 1.0

[[[[Adv]]]]: public static < In , [[FlowIn]] , Out > Flow < In , Out , ? > bypassWith ( Flow < In , F . Either < [[FlowIn]] , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > [[mergeStrategy]] , Flow < [[FlowIn]] , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < [[FlowIn]] , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , [[paparazzi]] , Out > Flow < In , Out , ? > bypassWith ( Flow < In , F . Either < [[paparazzi]] , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > [[nameless]] , Flow < [[paparazzi]] , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < [[paparazzi]] , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 642 ---------------------------------------------
Gets varargs . --> Get hawking --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[daresay]] ( T ... [[hawking]] ) { return toSeq ( [[hawking]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 643 ---------------------------------------------
Gets a list of keys . --> Gets a list of keys --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[assyrians]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 644 ---------------------------------------------
Get the cost of a class . --> kirky method --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[kirky]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 645 ---------------------------------------------
Create a new permutation --> Creates an array --> Socre: 1.0

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] arrays ) { Generator [[gen]] = new Generator ( ) ; [[gen]] . setArrays ( arrays ) ; return [[gen]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] arrays ) { Generator [[idolize]] = new Generator ( ) ; [[idolize]] . setArrays ( arrays ) ; return [[idolize]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 646 ---------------------------------------------
quick sort method --> super class method --> Socre: 1.0

[[[[Adv]]]]: public void quickSort ( int index , int lo , int [[hi]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void quickSort ( int index , int lo , int [[referee]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , [[referee]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 647 ---------------------------------------------
Merges the specified Comparator with the specified comparator . --> inhaled --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[inhaled]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 648 ---------------------------------------------
Create a new database connection with the given parameters . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public static Database createFrom ( String [[driver]] , String url , Map < String , ? extends Object > [[config]] ) { return createFrom ( "default" , [[driver]] , url , [[config]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database createFrom ( String [[astrological]] , String url , Map < String , ? extends Object > [[scabbard]] ) { return createFrom ( "default" , [[astrological]] , url , [[scabbard]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 649 ---------------------------------------------
Gets a message at key . --> Helper method for testing --> Socre: 1.0

[[[[Adv]]]]: public String at ( String [[key]] , Object ... [[args]] ) { return messagesApi . get ( lang , [[key]] , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String at ( String [[castellan]] , Object ... [[doorways]] ) { return messagesApi . get ( lang , [[castellan]] , [[doorways]] ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 650 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 579 / 46 / 25 / 650:  65%|██████▌   | 650/1000 [1:48:30<58:25, 10.02s/it][Succeeded / Failed / Skipped / Total] 579 / 46 / 25 / 650:  65%|██████▌   | 651/1000 [1:48:30<58:10, 10.00s/it][Succeeded / Failed / Skipped / Total] 579 / 46 / 26 / 651:  65%|██████▌   | 651/1000 [1:48:30<58:10, 10.00s/it][Succeeded / Failed / Skipped / Total] 579 / 46 / 26 / 651:  65%|██████▌   | 652/1000 [1:48:33<57:56,  9.99s/it][Succeeded / Failed / Skipped / Total] 579 / 47 / 26 / 652:  65%|██████▌   | 652/1000 [1:48:33<57:56,  9.99s/it][Succeeded / Failed / Skipped / Total] 579 / 47 / 26 / 652:  65%|██████▌   | 653/1000 [1:48:37<57:43,  9.98s/it][Succeeded / Failed / Skipped / Total] 580 / 47 / 26 / 653:  65%|██████▌   | 653/1000 [1:48:37<57:43,  9.98s/it][Succeeded / Failed / Skipped / Total] 580 / 47 / 26 / 653:  65%|██████▌   | 654/1000 [1:48:40<57:29,  9.97s/it][Succeeded / Failed / Skipped / Total] 581 / 47 / 26 / 654:  65%|██████▌   | 654/1000 [1:48:40<57:29,  9.97s/it][Succeeded / Failed / Skipped / Total] 581 / 47 / 26 / 654:  66%|██████▌   | 655/1000 [1:48:52<57:20,  9.97s/it][Succeeded / Failed / Skipped / Total] 582 / 47 / 26 / 655:  66%|██████▌   | 655/1000 [1:48:52<57:20,  9.97s/it][Succeeded / Failed / Skipped / Total] 582 / 47 / 26 / 655:  66%|██████▌   | 656/1000 [1:48:58<57:08,  9.97s/it]Cast a Type to a Type --> visit cast . --> Socre: 1.0

[[[[Adv]]]]: public void cast_numeric ( Type [[from]] , Type to ) { if ( [[from]] != to ) { if ( [[from]] == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[from]] == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[from]] == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void cast_numeric ( Type [[dora]] , Type to ) { if ( [[dora]] != to ) { if ( [[dora]] == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[dora]] == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[dora]] == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 651 ---------------------------------------------
Emits a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 652 ---------------------------------------------
A convenience method for creating a flow - ref . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > props , int [[bufferSize]] , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , [[bufferSize]] , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > props , int [[oksana]] , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , [[oksana]] , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 653 ---------------------------------------------
Load an argument at the given index . --> region discounting --> Socre: 1.0

[[[[Adv]]]]: public void load_arg ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void load_arg ( int [[discounting]] ) { load_local ( state . argumentTypes [ [[discounting]] ] , state . localOffset + skipArgs ( [[discounting]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 654 ---------------------------------------------
Unbox the given type . --> F743 - 2 --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[nonNull]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[nonNull]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( [[nonNull]] ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[brushed]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[brushed]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( [[brushed]] ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 655 ---------------------------------------------
Determines if the type is zero --> Set type fondle --> Socre: 1.0

[[[[Adv]]]]: public void zero_or_null ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void zero_or_null ( Type [[fondle]] ) { if ( TypeUtils . isPrimitive ( [[fondle]] ) ) { switch ( [[fondle]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 656 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 583 / 47 / 26 / 656:  66%|██████▌   | 656/1000 [1:48:58<57:08,  9.97s/it][Succeeded / Failed / Skipped / Total] 583 / 47 / 26 / 656:  66%|██████▌   | 657/1000 [1:49:23<57:06,  9.99s/it][Succeeded / Failed / Skipped / Total] 583 / 48 / 26 / 657:  66%|██████▌   | 657/1000 [1:49:23<57:06,  9.99s/it][Succeeded / Failed / Skipped / Total] 583 / 48 / 26 / 657:  66%|██████▌   | 658/1000 [1:49:37<56:58, 10.00s/it][Succeeded / Failed / Skipped / Total] 584 / 48 / 26 / 658:  66%|██████▌   | 658/1000 [1:49:37<56:58, 10.00s/it][Succeeded / Failed / Skipped / Total] 584 / 48 / 26 / 658:  66%|██████▌   | 659/1000 [1:49:48<56:49, 10.00s/it][Succeeded / Failed / Skipped / Total] 585 / 48 / 26 / 659:  66%|██████▌   | 659/1000 [1:49:48<56:49, 10.00s/it][Succeeded / Failed / Skipped / Total] 585 / 48 / 26 / 659:  66%|██████▌   | 660/1000 [1:49:49<56:34,  9.98s/it][Succeeded / Failed / Skipped / Total] 585 / 48 / 27 / 660:  66%|██████▌   | 660/1000 [1:49:49<56:34,  9.98s/it][Succeeded / Failed / Skipped / Total] 585 / 48 / 27 / 660:  66%|██████▌   | 661/1000 [1:51:04<56:58, 10.08s/it]Parses the given CodeEmitter into the given Label . --> Start a b Syntax --> Socre: 1.0

[[[[Adv]]]]: private static void [[nullcmp]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void [[bia]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 657 ---------------------------------------------
Encodes a Cookie object . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 658 ---------------------------------------------
Convenience method for subclasses . --> rajneesh methods --> Socre: 0.9999999999820136

[[[[Adv]]]]: public static void getMethods ( Class superclass , Class [ ] interfaces , List [[methods]] ) { getMethods ( superclass , interfaces , [[methods]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void getMethods ( Class superclass , Class [ ] interfaces , List [[rajneesh]] ) { getMethods ( superclass , interfaces , [[rajneesh]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 659 ---------------------------------------------
Process an CodeEmitter . --> polonaise a CodeEmitter --> Socre: 1.0

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type type , ProcessArrayCallback [[callback]] ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; [[callback]] . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[polonaise]] ( CodeEmitter e , Type type , ProcessArrayCallback [[zebulon]] ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; [[zebulon]] . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 660 ---------------------------------------------
Sets the field name . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 661 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 586 / 48 / 27 / 661:  66%|██████▌   | 661/1000 [1:51:04<56:58, 10.08s/it][Succeeded / Failed / Skipped / Total] 586 / 48 / 27 / 661:  66%|██████▌   | 662/1000 [1:51:06<56:43, 10.07s/it][Succeeded / Failed / Skipped / Total] 587 / 48 / 27 / 662:  66%|██████▌   | 662/1000 [1:51:06<56:43, 10.07s/it][Succeeded / Failed / Skipped / Total] 587 / 48 / 27 / 662:  66%|██████▋   | 663/1000 [1:51:15<56:33, 10.07s/it][Succeeded / Failed / Skipped / Total] 587 / 49 / 27 / 663:  66%|██████▋   | 663/1000 [1:51:15<56:33, 10.07s/it][Succeeded / Failed / Skipped / Total] 587 / 49 / 27 / 663:  66%|██████▋   | 664/1000 [1:51:15<56:18, 10.05s/it]Gets the cost of a destination class . --> diligence --> Socre: 1.0

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If [[the]] destination class is null, we've traveled all the way up to * [[an]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[diligence]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If [[fangio]] destination class is null, we've traveled all the way up to * [[palenque]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 662 ---------------------------------------------
Sets the superclass . --> danville --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . superclass = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[danville]] ( Class [[pooping]] ) { if ( [[pooping]] != null && [[pooping]] . equals ( Object . class ) ) { [[pooping]] = null ; } this . superclass = [[pooping]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 663 ---------------------------------------------
Registers the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Annotation]] , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Annotation]] > annotationType = ( Class < ? extends [[Annotation]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Lii]] , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Lii]] > annotationType = ( Class < ? extends [[Lii]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[gaydar]] = new HashSet <> ( ) ; [[gaydar]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[gaydar]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[gaydar]] = new HashSet <> ( ) ; [[gaydar]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[gaydar]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 664 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 587 / 49 / 28 / 664:  66%|██████▋   | 664/1000 [1:51:15<56:18, 10.05s/it][Succeeded / Failed / Skipped / Total] 587 / 49 / 28 / 664:  66%|██████▋   | 665/1000 [1:51:27<56:08, 10.06s/it][Succeeded / Failed / Skipped / Total] 588 / 49 / 28 / 665:  66%|██████▋   | 665/1000 [1:51:27<56:08, 10.06s/it][Succeeded / Failed / Skipped / Total] 588 / 49 / 28 / 665:  67%|██████▋   | 666/1000 [1:51:38<55:59, 10.06s/it][Succeeded / Failed / Skipped / Total] 589 / 49 / 28 / 666:  67%|██████▋   | 666/1000 [1:51:38<55:59, 10.06s/it][Succeeded / Failed / Skipped / Total] 589 / 49 / 28 / 666:  67%|██████▋   | 667/1000 [1:51:41<55:45, 10.05s/it][Succeeded / Failed / Skipped / Total] 590 / 49 / 28 / 667:  67%|██████▋   | 667/1000 [1:51:41<55:45, 10.05s/it][Succeeded / Failed / Skipped / Total] 590 / 49 / 28 / 667:  67%|██████▋   | 668/1000 [1:51:54<55:36, 10.05s/it][Succeeded / Failed / Skipped / Total] 591 / 49 / 28 / 668:  67%|██████▋   | 668/1000 [1:51:54<55:36, 10.05s/it][Succeeded / Failed / Skipped / Total] 591 / 49 / 28 / 668:  67%|██████▋   | 669/1000 [1:51:55<55:22, 10.04s/it][Succeeded / Failed / Skipped / Total] 591 / 50 / 28 / 669:  67%|██████▋   | 669/1000 [1:51:55<55:22, 10.04s/it][Succeeded / Failed / Skipped / Total] 591 / 50 / 28 / 669:  67%|██████▋   | 670/1000 [1:51:57<55:08, 10.03s/it][Succeeded / Failed / Skipped / Total] 592 / 50 / 28 / 670:  67%|██████▋   | 670/1000 [1:51:57<55:08, 10.03s/it][Succeeded / Failed / Skipped / Total] 592 / 50 / 28 / 670:  67%|██████▋   | 671/1000 [1:52:04<54:57, 10.02s/it][Succeeded / Failed / Skipped / Total] 593 / 50 / 28 / 671:  67%|██████▋   | 671/1000 [1:52:04<54:57, 10.02s/it][Succeeded / Failed / Skipped / Total] 593 / 50 / 28 / 671:  67%|██████▋   | 672/1000 [1:52:19<54:49, 10.03s/it]Find methods . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 665 ---------------------------------------------
Filter the constructors . --> FilterConstructors for rayne --> Socre: 1.0

[[[[Adv]]]]: protected void filterConstructors ( Class sc , List [[constructors]] ) { CollectionUtils . filter ( [[constructors]] , new VisibilityPredicate ( sc , "[[True]]" == "[[True]]" ) ) ; if ( [[constructors]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void filterConstructors ( Class sc , List [[rayne]] ) { CollectionUtils . filter ( [[rayne]] , new VisibilityPredicate ( sc , "[[Teenie]]" == "[[Teenie]]" ) ) ; if ( [[rayne]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 666 ---------------------------------------------
Resolves all available classes . --> Gets the bridges of the class --> Socre: 1.0

[[[[Adv]]]]: public Map [[resolveAll]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class [[owner]] = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[owner]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map [[breastfeed]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class [[atmospheres]] = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[atmospheres]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 667 ---------------------------------------------
Read a string from the specified path . --> Gerais mode --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[gerais]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 668 ---------------------------------------------
Adds a method . --> Notify all configured hijackings --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[notify]] ( Method [[hijackings]] ) { [[notify]] ( ReflectUtils . getSignature ( [[hijackings]] ) , ReflectUtils . getExceptionTypes ( [[hijackings]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 669 ---------------------------------------------
Registers the given formatter . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[text]] , Locale locale ) throws java . [[text]] . ParseException { return formatter . parse ( [[text]] , locale ) ; } public String print ( T [[t]] , Locale locale ) { return formatter . print ( [[t]] , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[shahid]] , Locale locale ) throws java . [[shahid]] . ParseException { return formatter . parse ( [[shahid]] , locale ) ; } public String print ( T [[graciousness]] , Locale locale ) { return formatter . print ( [[graciousness]] , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 670 ---------------------------------------------
Set the naming policy . --> safely safely --> Socre: 1.0

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[safely]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 671 ---------------------------------------------
Connect to given destination --> Create an HttpRequest with the given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[leaned]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 672 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 594 / 50 / 28 / 672:  67%|██████▋   | 672/1000 [1:52:19<54:49, 10.03s/it][Succeeded / Failed / Skipped / Total] 594 / 50 / 28 / 672:  67%|██████▋   | 673/1000 [1:52:24<54:37, 10.02s/it][Succeeded / Failed / Skipped / Total] 595 / 50 / 28 / 673:  67%|██████▋   | 673/1000 [1:52:24<54:37, 10.02s/it][Succeeded / Failed / Skipped / Total] 595 / 50 / 28 / 673:  67%|██████▋   | 674/1000 [1:52:35<54:27, 10.02s/it][Succeeded / Failed / Skipped / Total] 596 / 50 / 28 / 674:  67%|██████▋   | 674/1000 [1:52:35<54:27, 10.02s/it][Succeeded / Failed / Skipped / Total] 596 / 50 / 28 / 674:  68%|██████▊   | 675/1000 [1:52:41<54:15, 10.02s/it][Succeeded / Failed / Skipped / Total] 597 / 50 / 28 / 675:  68%|██████▊   | 675/1000 [1:52:41<54:15, 10.02s/it][Succeeded / Failed / Skipped / Total] 597 / 50 / 28 / 675:  68%|██████▊   | 676/1000 [1:52:47<54:03, 10.01s/it][Succeeded / Failed / Skipped / Total] 598 / 50 / 28 / 676:  68%|██████▊   | 676/1000 [1:52:47<54:03, 10.01s/it][Succeeded / Failed / Skipped / Total] 598 / 50 / 28 / 676:  68%|██████▊   | 677/1000 [1:53:00<53:55, 10.02s/it][Succeeded / Failed / Skipped / Total] 599 / 50 / 28 / 677:  68%|██████▊   | 677/1000 [1:53:00<53:55, 10.02s/it][Succeeded / Failed / Skipped / Total] 599 / 50 / 28 / 677:  68%|██████▊   | 678/1000 [1:53:04<53:41, 10.01s/it][Succeeded / Failed / Skipped / Total] 600 / 50 / 28 / 678:  68%|██████▊   | 678/1000 [1:53:04<53:41, 10.01s/it][Succeeded / Failed / Skipped / Total] 600 / 50 / 28 / 678:  68%|██████▊   | 679/1000 [1:53:15<53:32, 10.01s/it][Succeeded / Failed / Skipped / Total] 601 / 50 / 28 / 679:  68%|██████▊   | 679/1000 [1:53:15<53:32, 10.01s/it][Succeeded / Failed / Skipped / Total] 601 / 50 / 28 / 679:  68%|██████▊   | 680/1000 [1:53:23<53:21, 10.00s/it][Succeeded / Failed / Skipped / Total] 602 / 50 / 28 / 680:  68%|██████▊   | 680/1000 [1:53:23<53:21, 10.00s/it][Succeeded / Failed / Skipped / Total] 602 / 50 / 28 / 680:  68%|██████▊   | 681/1000 [1:53:24<53:07,  9.99s/it][Succeeded / Failed / Skipped / Total] 603 / 50 / 28 / 681:  68%|██████▊   | 681/1000 [1:53:24<53:07,  9.99s/it][Succeeded / Failed / Skipped / Total] 603 / 50 / 28 / 681:  68%|██████▊   | 682/1000 [1:53:29<52:55,  9.98s/it]Create a new HttpRequest . --> Create new empty HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest post ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest post ( final String [[waited]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[waited]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 673 ---------------------------------------------
Creates a PUT HttpRequest . --> Set the needleman --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest put ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest put ( final String [[needleman]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[needleman]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 674 ---------------------------------------------
Create a new HttpRequest with the given destination . --> Get HttpRequest object --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[fozzie]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 675 ---------------------------------------------
Creates a PATCH request . --> Creates HttpRequest with the given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[moussaka]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 676 ---------------------------------------------
Return the cardinality . --> Return the cardinality value --> Socre: 1.0

[[[[Adv]]]]: public int cardinality ( ) { int [[w]] = value ; int [[c]] = 0 ; while ( [[w]] != 0 ) { [[c]] += T [ [[w]] & 255 ] ; [[w]] >>= 8 ; } return [[c]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int cardinality ( ) { int [[fairway]] = value ; int [[assigns]] = 0 ; while ( [[fairway]] != 0 ) { [[assigns]] += T [ [[fairway]] & 255 ] ; [[fairway]] >>= 8 ; } return [[assigns]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 677 ---------------------------------------------
Creates a new HttpRequest . --> Create an empty HttpRequest object --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest trace ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest trace ( final String [[antenna]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[antenna]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 678 ---------------------------------------------
Sets the host . --> Set camden --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . host = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[camden]] ( final String [[lunatics]] ) { this . host = [[camden]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[camden]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 679 ---------------------------------------------
Returns the HttpRequest for the given path . --> Get HttpRequest stereotypes --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[stereotypes]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 680 ---------------------------------------------
Add a parameter . --> Add leif = value1 --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object value1 , final Object ... [[parameters]] ) { query ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < [[parameters]] . length ; i += 2 ) { String name = [[parameters]] [ i ] . toString ( ) ; String value = [[parameters]] [ i + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object value1 , final Object ... [[leif]] ) { query ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < [[leif]] . length ; i += 2 ) { String name = [[leif]] [ i ] . toString ( ) ; String value = [[leif]] [ i + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 681 ---------------------------------------------
Set REPLACEME0 . --> Set Cookie array from REPLACEME0 --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean [[first]] = "True" == "True" ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[first]] ) { cookieString . append ( "; " ) ; } [[first]] = "False" != "False" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean [[soraya]] = "True" == "True" ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[soraya]] ) { cookieString . append ( "; " ) ; } [[soraya]] = "False" != "False" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 682 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 604 / 50 / 28 / 682:  68%|██████▊   | 682/1000 [1:53:29<52:55,  9.98s/it][Succeeded / Failed / Skipped / Total] 604 / 50 / 28 / 682:  68%|██████▊   | 683/1000 [1:53:30<52:40,  9.97s/it][Succeeded / Failed / Skipped / Total] 605 / 50 / 28 / 683:  68%|██████▊   | 683/1000 [1:53:30<52:40,  9.97s/it][Succeeded / Failed / Skipped / Total] 605 / 50 / 28 / 683:  68%|██████▊   | 684/1000 [1:53:32<52:27,  9.96s/it][Succeeded / Failed / Skipped / Total] 606 / 50 / 28 / 684:  68%|██████▊   | 684/1000 [1:53:32<52:27,  9.96s/it][Succeeded / Failed / Skipped / Total] 606 / 50 / 28 / 684:  68%|██████▊   | 685/1000 [1:53:32<52:12,  9.95s/it][Succeeded / Failed / Skipped / Total] 607 / 50 / 28 / 685:  68%|██████▊   | 685/1000 [1:53:32<52:12,  9.95s/it][Succeeded / Failed / Skipped / Total] 607 / 50 / 28 / 685:  69%|██████▊   | 686/1000 [1:53:33<51:58,  9.93s/it][Succeeded / Failed / Skipped / Total] 608 / 50 / 28 / 686:  69%|██████▊   | 686/1000 [1:53:33<51:58,  9.93s/it][Succeeded / Failed / Skipped / Total] 608 / 50 / 28 / 686:  69%|██████▊   | 687/1000 [1:53:41<51:47,  9.93s/it][Succeeded / Failed / Skipped / Total] 609 / 50 / 28 / 687:  69%|██████▊   | 687/1000 [1:53:41<51:47,  9.93s/it][Succeeded / Failed / Skipped / Total] 609 / 50 / 28 / 687:  69%|██████▉   | 688/1000 [1:53:47<51:35,  9.92s/it][Succeeded / Failed / Skipped / Total] 610 / 50 / 28 / 688:  69%|██████▉   | 688/1000 [1:53:47<51:35,  9.92s/it][Succeeded / Failed / Skipped / Total] 610 / 50 / 28 / 688:  69%|██████▉   | 689/1000 [1:53:53<51:24,  9.92s/it][Succeeded / Failed / Skipped / Total] 611 / 50 / 28 / 689:  69%|██████▉   | 689/1000 [1:53:53<51:24,  9.92s/it][Succeeded / Failed / Skipped / Total] 611 / 50 / 28 / 689:  69%|██████▉   | 690/1000 [1:53:54<51:10,  9.90s/it][Succeeded / Failed / Skipped / Total] 612 / 50 / 28 / 690:  69%|██████▉   | 690/1000 [1:53:54<51:10,  9.90s/it][Succeeded / Failed / Skipped / Total] 612 / 50 / 28 / 690:  69%|██████▉   | 691/1000 [1:53:58<50:58,  9.90s/it][Succeeded / Failed / Skipped / Total] 613 / 50 / 28 / 691:  69%|██████▉   | 691/1000 [1:53:58<50:58,  9.90s/it][Succeeded / Failed / Skipped / Total] 613 / 50 / 28 / 691:  69%|██████▉   | 692/1000 [1:54:18<50:52,  9.91s/it]Returns a OPTIONS request parameter with the given destination . --> Create a HttpRequest with the given string tumours --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest options ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest options ( final String [[tumours]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[tumours]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 683 ---------------------------------------------
Add query map . --> Add a query --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > entry : [[queryMap]] . entrySet ( ) ) { query . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > [[dre]] ) { for ( Map . Entry < String , String > entry : [[dre]] . entrySet ( ) ) { query . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 684 ---------------------------------------------
Creates a new HttpRequest . --> Creates an auth HttpRequest instance --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[seaweed]] ( final String [[bandanna]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[bandanna]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 685 ---------------------------------------------
Get query string . --> HTTP request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean decode ) { this . [[query]] = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean decode ) { this . [[brief]] = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 686 ---------------------------------------------
Create a new HttpRequest . --> Get HttpRequest by brock and destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String destination ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[león]] ( final String [[brock]] , final String destination ) { return new HttpRequest ( ) . [[brock]] ( [[brock]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 687 ---------------------------------------------
This method is used to buffer a message . --> region Sleep --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[sentimentality]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 688 ---------------------------------------------
Set authentication . --> Convenience function to get the HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest basicAuthentication ( final String username , final String [[password]] ) { if ( username != null && [[password]] != null ) { String data = username . concat ( StringPool . COLON ) . concat ( [[password]] ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest basicAuthentication ( final String username , final String [[fervor]] ) { if ( username != null && [[fervor]] != null ) { String data = username . concat ( StringPool . COLON ) . concat ( [[fervor]] ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 689 ---------------------------------------------
Sends a function using the given function . --> send and receive a function --> Socre: 1.0

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[broached]] > [[broached]] sendAndReceive ( final Function < HttpResponse , [[broached]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 690 ---------------------------------------------
Creates a HEAD request . --> Create new empty HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest head ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest head ( final String [[contemptible]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[contemptible]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 691 ---------------------------------------------
Invokes this method . --> Computes an argument --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( Object [[obj]] , Object [ ] [[args]] ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[obj]] , [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[elisa]] ( Object [[snooty]] , Object [ ] [[affirm]] ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[snooty]] , [[affirm]] ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 692 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 614 / 50 / 28 / 692:  69%|██████▉   | 692/1000 [1:54:18<50:52,  9.91s/it][Succeeded / Failed / Skipped / Total] 614 / 50 / 28 / 692:  69%|██████▉   | 693/1000 [1:54:46<50:50,  9.94s/it][Succeeded / Failed / Skipped / Total] 615 / 50 / 28 / 693:  69%|██████▉   | 693/1000 [1:54:46<50:50,  9.94s/it][Succeeded / Failed / Skipped / Total] 615 / 50 / 28 / 693:  69%|██████▉   | 694/1000 [1:54:58<50:41,  9.94s/it][Succeeded / Failed / Skipped / Total] 616 / 50 / 28 / 694:  69%|██████▉   | 694/1000 [1:54:58<50:41,  9.94s/it][Succeeded / Failed / Skipped / Total] 616 / 50 / 28 / 694:  70%|██████▉   | 695/1000 [1:55:11<50:33,  9.94s/it][Succeeded / Failed / Skipped / Total] 617 / 50 / 28 / 695:  70%|██████▉   | 695/1000 [1:55:11<50:33,  9.94s/it][Succeeded / Failed / Skipped / Total] 617 / 50 / 28 / 695:  70%|██████▉   | 696/1000 [1:55:19<50:22,  9.94s/it][Succeeded / Failed / Skipped / Total] 617 / 51 / 28 / 696:  70%|██████▉   | 696/1000 [1:55:19<50:22,  9.94s/it][Succeeded / Failed / Skipped / Total] 617 / 51 / 28 / 696:  70%|██████▉   | 697/1000 [1:56:00<50:26,  9.99s/it][Succeeded / Failed / Skipped / Total] 618 / 51 / 28 / 697:  70%|██████▉   | 697/1000 [1:56:00<50:26,  9.99s/it][Succeeded / Failed / Skipped / Total] 618 / 51 / 28 / 697:  70%|██████▉   | 698/1000 [1:56:03<50:12,  9.98s/it][Succeeded / Failed / Skipped / Total] 619 / 51 / 28 / 698:  70%|██████▉   | 698/1000 [1:56:03<50:12,  9.98s/it][Succeeded / Failed / Skipped / Total] 619 / 51 / 28 / 698:  70%|██████▉   | 699/1000 [1:56:24<50:07,  9.99s/it][Succeeded / Failed / Skipped / Total] 620 / 51 / 28 / 699:  70%|██████▉   | 699/1000 [1:56:24<50:07,  9.99s/it][Succeeded / Failed / Skipped / Total] 620 / 51 / 28 / 699:  70%|███████   | 700/1000 [1:56:25<49:53,  9.98s/it][Succeeded / Failed / Skipped / Total] 621 / 51 / 28 / 700:  70%|███████   | 700/1000 [1:56:25<49:53,  9.98s/it][Succeeded / Failed / Skipped / Total] 621 / 51 / 28 / 700:  70%|███████   | 701/1000 [1:56:31<49:42,  9.97s/it][Succeeded / Failed / Skipped / Total] 622 / 51 / 28 / 701:  70%|███████   | 701/1000 [1:56:31<49:42,  9.97s/it][Succeeded / Failed / Skipped / Total] 622 / 51 / 28 / 701:  70%|███████   | 702/1000 [1:57:21<49:49, 10.03s/it]Collect all interceptors . --> brutal methods --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[brutal]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 693 ---------------------------------------------
Returns the host url . --> Create lymphatic string --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand [[url]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[url]] . append ( protocol ) ; [[url]] . append ( "://" ) ; } if ( host != null ) { [[url]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[url]] . append ( ' ' ) ; [[url]] . append ( port ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[chuff]] ( ) { StringBand [[lymphatic]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[lymphatic]] . append ( protocol ) ; [[lymphatic]] . append ( "://" ) ; } if ( host != null ) { [[lymphatic]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[lymphatic]] . append ( ' ' ) ; [[lymphatic]] . append ( port ) ; } return [[lymphatic]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 694 ---------------------------------------------
Collects all action split . --> dAT actions --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[dug]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 695 ---------------------------------------------
Sets the value of the property . --> setter for BeanProperty --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void setSimpleProperty ( final BeanProperty bp , final Object value ) { Setter [[setter]] = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void setSimpleProperty ( final BeanProperty bp , final Object value ) { Setter [[congratulate]] = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 696 ---------------------------------------------
Returns the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[dordogne]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 697 ---------------------------------------------
Sets the HTTP host header . --> Get the HttpRequest setHostHeader --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest setHostHeader ( ) { String [[hostPort]] = this . [[host]] ; if ( port != Defaults . DEFAULT_PORT ) { [[hostPort]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[hostPort]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest setHostHeader ( ) { String [[rearranging]] = this . [[williamsburg]] ; if ( port != Defaults . DEFAULT_PORT ) { [[rearranging]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[rearranging]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 698 ---------------------------------------------
Collects the action filters . --> Methode nourishment implementation --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[nourishment]] ( ) { final Collection < ? extends ActionFilter > [[alon]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[alon]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 699 ---------------------------------------------
Returns the current writer . --> This method initializes the kneels --> Socre: 1.0

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[kneels]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 700 ---------------------------------------------
Extract the value of a property . --> Extracts a property from a string --> Socre: 1.0

[[[[Adv]]]]: @ Override public String extractThisReference ( final String propertyName ) { int [[ndx]] = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( [[ndx]] == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , [[ndx]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String extractThisReference ( final String propertyName ) { int [[jesuits]] = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( [[jesuits]] == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , [[jesuits]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 701 ---------------------------------------------
Sets object reference . --> region > ambrosio --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[ambrosio]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 702 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 623 / 51 / 28 / 702:  70%|███████   | 702/1000 [1:57:21<49:49, 10.03s/it][Succeeded / Failed / Skipped / Total] 623 / 51 / 28 / 702:  70%|███████   | 703/1000 [1:57:41<49:43, 10.05s/it][Succeeded / Failed / Skipped / Total] 623 / 52 / 28 / 703:  70%|███████   | 703/1000 [1:57:41<49:43, 10.05s/it][Succeeded / Failed / Skipped / Total] 623 / 52 / 28 / 703:  70%|███████   | 704/1000 [1:57:44<49:30, 10.04s/it][Succeeded / Failed / Skipped / Total] 624 / 52 / 28 / 704:  70%|███████   | 704/1000 [1:57:44<49:30, 10.04s/it][Succeeded / Failed / Skipped / Total] 624 / 52 / 28 / 704:  70%|███████   | 705/1000 [1:58:24<49:32, 10.08s/it][Succeeded / Failed / Skipped / Total] 625 / 52 / 28 / 705:  70%|███████   | 705/1000 [1:58:24<49:32, 10.08s/it][Succeeded / Failed / Skipped / Total] 625 / 52 / 28 / 705:  71%|███████   | 706/1000 [1:58:42<49:26, 10.09s/it][Succeeded / Failed / Skipped / Total] 626 / 52 / 28 / 706:  71%|███████   | 706/1000 [1:58:42<49:26, 10.09s/it][Succeeded / Failed / Skipped / Total] 626 / 52 / 28 / 706:  71%|███████   | 707/1000 [2:00:05<49:46, 10.19s/it][Succeeded / Failed / Skipped / Total] 627 / 52 / 28 / 707:  71%|███████   | 707/1000 [2:00:05<49:46, 10.19s/it][Succeeded / Failed / Skipped / Total] 627 / 52 / 28 / 707:  71%|███████   | 708/1000 [2:00:18<49:37, 10.20s/it][Succeeded / Failed / Skipped / Total] 628 / 52 / 28 / 708:  71%|███████   | 708/1000 [2:00:18<49:37, 10.20s/it][Succeeded / Failed / Skipped / Total] 628 / 52 / 28 / 708:  71%|███████   | 709/1000 [2:00:41<49:32, 10.21s/it][Succeeded / Failed / Skipped / Total] 629 / 52 / 28 / 709:  71%|███████   | 709/1000 [2:00:41<49:32, 10.21s/it][Succeeded / Failed / Skipped / Total] 629 / 52 / 28 / 709:  71%|███████   | 710/1000 [2:01:30<49:37, 10.27s/it][Succeeded / Failed / Skipped / Total] 630 / 52 / 28 / 710:  71%|███████   | 710/1000 [2:01:30<49:37, 10.27s/it][Succeeded / Failed / Skipped / Total] 630 / 52 / 28 / 710:  71%|███████   | 711/1000 [2:02:30<49:47, 10.34s/it][Succeeded / Failed / Skipped / Total] 631 / 52 / 28 / 711:  71%|███████   | 711/1000 [2:02:30<49:47, 10.34s/it][Succeeded / Failed / Skipped / Total] 631 / 52 / 28 / 711:  71%|███████   | 712/1000 [2:02:54<49:42, 10.36s/it]Collect all action results . --> The imperceptible method --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[imperceptible]] ( ) { final Collection < ActionResult > [[caslno]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[caslno]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 703 ---------------------------------------------
Resolves the given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[resolve]] ( final Path base , String child ) { if ( StringUtil . startsWithChar ( child , File . separatorChar ) ) { child = child . substring ( 1 ) ; } return base . resolve ( child ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[unaffected]] ( final Path base , String child ) { if ( StringUtil . startsWithChar ( child , File . separatorChar ) ) { child = child . substring ( 1 ) ; } return base . resolve ( child ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 704 ---------------------------------------------
Finds a table descriptor by its column name . --> Returns the DbEntityDescriptor for the given columnRef --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[barricade]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 705 ---------------------------------------------
Looks up an object reference . --> get a primitive value --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[rub]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 706 ---------------------------------------------
Returns the length of a table in the given handler . --> Handles seerectomy --> Socre: 1.0

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler firstHandler ) { int [[length]] = 0 ; Handler handler = firstHandler ; while ( handler != null ) { [[length]] ++ ; handler = handler . nextHandler ; } return [[length]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[hysterectomy]] ( final Handler firstHandler ) { int [[señores]] = 0 ; Handler handler = firstHandler ; while ( handler != null ) { [[señores]] ++ ; handler = handler . nextHandler ; } return [[señores]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 707 ---------------------------------------------
Get object reference . --> normally for hamer --> Socre: 1.0

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[normally]] ( final String [[hamer]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[hamer]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 708 ---------------------------------------------
Register hint . --> region > lichtenstein --> Socre: 1.0

[[[[Adv]]]]: public void [[registerHint]] ( final String hint ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( hint ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[lichtenstein]] ( final String hint ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( hint ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 709 ---------------------------------------------
Serialize a value --> region json --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean [[serialize]] ( final JsonContext jsonContext , final T value ) { if ( jsonContext . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean [[runner]] ( final JsonContext jsonContext , final T value ) { if ( jsonContext . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 710 ---------------------------------------------
Returns the DbEntityDescriptor for the given table . --> Get schaeffer --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( tableRef ) ; return [[t]] == null ? null : [[t]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[schaeffer]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[fervor]] = tableRefs . get ( tableRef ) ; return [[fervor]] == null ? null : [[fervor]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 711 ---------------------------------------------
Registers a table reference . --> Add a deletion to the database --> Socre: 1.0

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor ded , final String [[tableAlias]] ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , [[tableAlias]] ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[canon]] ( final String tableReference , final DbEntityDescriptor ded , final String [[allergy]] ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , [[allergy]] ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
[Succeeded / Failed / Skipped / Total] 632 / 52 / 28 / 712:  71%|███████   | 712/1000 [2:02:54<49:42, 10.36s/it][Succeeded / Failed / Skipped / Total] 632 / 52 / 28 / 712:  71%|███████▏  | 713/1000 [2:05:11<50:23, 10.53s/it][Succeeded / Failed / Skipped / Total] 632 / 53 / 28 / 713:  71%|███████▏  | 713/1000 [2:05:11<50:23, 10.53s/it][Succeeded / Failed / Skipped / Total] 632 / 53 / 28 / 713:  71%|███████▏  | 714/1000 [2:05:12<50:09, 10.52s/it][Succeeded / Failed / Skipped / Total] 633 / 53 / 28 / 714:  71%|███████▏  | 714/1000 [2:05:12<50:09, 10.52s/it][Succeeded / Failed / Skipped / Total] 633 / 53 / 28 / 714:  72%|███████▏  | 715/1000 [2:05:36<50:03, 10.54s/it][Succeeded / Failed / Skipped / Total] 634 / 53 / 28 / 715:  72%|███████▏  | 715/1000 [2:05:36<50:03, 10.54s/it][Succeeded / Failed / Skipped / Total] 634 / 53 / 28 / 715:  72%|███████▏  | 716/1000 [2:05:49<49:54, 10.54s/it][Succeeded / Failed / Skipped / Total] 635 / 53 / 28 / 716:  72%|███████▏  | 716/1000 [2:05:49<49:54, 10.54s/it][Succeeded / Failed / Skipped / Total] 635 / 53 / 28 / 716:  72%|███████▏  | 717/1000 [2:05:57<49:42, 10.54s/it][Succeeded / Failed / Skipped / Total] 636 / 53 / 28 / 717:  72%|███████▏  | 717/1000 [2:05:57<49:42, 10.54s/it][Succeeded / Failed / Skipped / Total] 636 / 53 / 28 / 717:  72%|███████▏  | 718/1000 [2:07:05<49:55, 10.62s/it][Succeeded / Failed / Skipped / Total] 637 / 53 / 28 / 718:  72%|███████▏  | 718/1000 [2:07:05<49:55, 10.62s/it][Succeeded / Failed / Skipped / Total] 637 / 53 / 28 / 718:  72%|███████▏  | 719/1000 [2:07:35<49:51, 10.65s/it]--------------------------------------------- Result 712 ---------------------------------------------
Look up a table reference . --> Create a new DbEntityDescriptor --> Socre: 1.0

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String tableRef ) { DbEntityDescriptor [[ded]] = getTableDescriptor ( tableRef ) ; if ( [[ded]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return [[ded]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[disemboweled]] ( final String tableRef ) { DbEntityDescriptor [[demille]] = getTableDescriptor ( tableRef ) ; if ( [[demille]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return [[demille]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 713 ---------------------------------------------
Returns the value of the specified property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[lp]] > [[lp]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[lp]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[lp]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 714 ---------------------------------------------
Get alias for table --> Can be surroundings? --> Socre: 1.0

[[[[Adv]]]]: public String [[getTableAlias]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( tableRef ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[surroundings]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[blighty]] = tableRefs . get ( tableRef ) ; return [[blighty]] == null ? null : [[blighty]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 715 ---------------------------------------------
Store value . --> Convenient method for oms --> Socre: 1.0

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[omsk]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 716 ---------------------------------------------
Apply columnName to column name --> Get the skiing property --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[skiing]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 717 ---------------------------------------------
Removes a range . --> ravaged method --> Socre: 1.0

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int [[rangeStart]] = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[ravaged]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[ravaged]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int [[risin]] = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 718 ---------------------------------------------
Returns the value of the given type . --> Returns null if none found --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[searchlight]] > [[searchlight]] prepareGetValue ( final T t , final Class < [[searchlight]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[searchlight]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 719 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 638 / 53 / 28 / 719:  72%|███████▏  | 719/1000 [2:07:35<49:51, 10.65s/it][Succeeded / Failed / Skipped / Total] 638 / 53 / 28 / 719:  72%|███████▏  | 720/1000 [2:08:20<49:54, 10.69s/it][Succeeded / Failed / Skipped / Total] 639 / 53 / 28 / 720:  72%|███████▏  | 720/1000 [2:08:20<49:54, 10.69s/it][Succeeded / Failed / Skipped / Total] 639 / 53 / 28 / 720:  72%|███████▏  | 721/1000 [2:09:41<50:11, 10.79s/it][Succeeded / Failed / Skipped / Total] 640 / 53 / 28 / 721:  72%|███████▏  | 721/1000 [2:09:41<50:11, 10.79s/it][Succeeded / Failed / Skipped / Total] 640 / 53 / 28 / 721:  72%|███████▏  | 722/1000 [2:10:44<50:20, 10.87s/it][Succeeded / Failed / Skipped / Total] 641 / 53 / 28 / 722:  72%|███████▏  | 722/1000 [2:10:44<50:20, 10.87s/it][Succeeded / Failed / Skipped / Total] 641 / 53 / 28 / 722:  72%|███████▏  | 723/1000 [2:10:54<50:09, 10.86s/it][Succeeded / Failed / Skipped / Total] 642 / 53 / 28 / 723:  72%|███████▏  | 723/1000 [2:10:54<50:09, 10.86s/it][Succeeded / Failed / Skipped / Total] 642 / 53 / 28 / 723:  72%|███████▏  | 724/1000 [2:10:54<49:54, 10.85s/it][Succeeded / Failed / Skipped / Total] 642 / 53 / 29 / 724:  72%|███████▏  | 724/1000 [2:10:54<49:54, 10.85s/it][Succeeded / Failed / Skipped / Total] 642 / 53 / 29 / 724:  72%|███████▎  | 725/1000 [2:11:13<49:46, 10.86s/it][Succeeded / Failed / Skipped / Total] 643 / 53 / 29 / 725:  72%|███████▎  | 725/1000 [2:11:13<49:46, 10.86s/it][Succeeded / Failed / Skipped / Total] 643 / 53 / 29 / 725:  73%|███████▎  | 726/1000 [2:11:30<49:38, 10.87s/it][Succeeded / Failed / Skipped / Total] 644 / 53 / 29 / 726:  73%|███████▎  | 726/1000 [2:11:30<49:38, 10.87s/it][Succeeded / Failed / Skipped / Total] 644 / 53 / 29 / 726:  73%|███████▎  | 727/1000 [2:12:28<49:44, 10.93s/it]Convert a column name to a property name . --> generate a cacha string --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder [[propertyName]] = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { [[propertyName]] . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { [[propertyName]] . append ( Character . toLowerCase ( c ) ) ; } } return [[propertyName]] . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[alcoholic]] ( final String columnName ) { StringBuilder [[cachaça]] = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { [[cachaça]] . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { [[cachaça]] . append ( Character . toLowerCase ( c ) ) ; } } return [[cachaça]] . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 720 ---------------------------------------------
Converts property name to column name . --> ConvertPropertyName toColumnName --> Socre: 1.0

[[[[Adv]]]]: public String convertPropertyNameToColumnName ( final String propertyName ) { StringBuilder [[tableName]] = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[convertedTableName]] = Format . fromCamelCase ( propertyName , separatorChar ) ; [[tableName]] . append ( [[convertedTableName]] ) ; } else { [[tableName]] . append ( propertyName ) ; } if ( ! changeCase ) { return [[tableName]] . toString ( ) ; } return uppercase ? toUppercase ( [[tableName]] ) . toString ( ) : toLowercase ( [[tableName]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String convertPropertyNameToColumnName ( final String propertyName ) { StringBuilder [[fuckin]] = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[enoki]] = Format . fromCamelCase ( propertyName , separatorChar ) ; [[fuckin]] . append ( [[enoki]] ) ; } else { [[fuckin]] . append ( propertyName ) ; } if ( ! changeCase ) { return [[fuckin]] . toString ( ) ; } return uppercase ? toUppercase ( [[fuckin]] ) . toString ( ) : toLowercase ( [[fuckin]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 721 ---------------------------------------------
Creates a new wrapper instance . --> Create an R apprise Object --> Socre: 1.0

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[apprise]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 722 ---------------------------------------------
Returns all wrappers . --> Get the jemima --> Socre: 1.0

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[jemima]] ( ) { final Set < T > [[ahora]] = new HashSet <> ( wrappers . size ( ) ) ; [[ahora]] . addAll ( wrappers . values ( ) ) ; return [[ahora]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 723 ---------------------------------------------
Returns the resource path from the filename . --> return null if not found --> Socre: 1.0

[[[[Adv]]]]: private static String doGetPath ( final String [[filename]] , final int separatorAdd ) { if ( [[filename]] == null ) { return null ; } int prefix = getPrefixLength ( [[filename]] ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( [[filename]] ) ; int endIndex = index + separatorAdd ; if ( prefix >= [[filename]] . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return [[filename]] . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String doGetPath ( final String [[defecated]] , final int separatorAdd ) { if ( [[defecated]] == null ) { return null ; } int prefix = getPrefixLength ( [[defecated]] ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( [[defecated]] ) ; int endIndex = index + separatorAdd ; if ( prefix >= [[defecated]] . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return [[defecated]] . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 724 ---------------------------------------------
Register a component --> [[[SKIPPED]]]

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > madvocComponent ) { Objects . requireNonNull ( madvocComponent ) ; madvocComponents . add ( ClassConsumer . of ( madvocComponent ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 725 ---------------------------------------------
Resolves a wrapper class . --> Resolve a class --> Socre: 1.0

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[wrapperClass]] ) { String [[wrapperClassName]] = [[wrapperClass]] . getName ( ) ; T wrapper = lookup ( [[wrapperClassName]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[wrapperClassName]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[cup]] ) { String [[pats]] = [[cup]] . getName ( ) ; T wrapper = lookup ( [[pats]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[cup]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[pats]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 726 ---------------------------------------------
Starts the WebApp . --> Get the Madvoc WebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[brahmin]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 727 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 645 / 53 / 29 / 727:  73%|███████▎  | 727/1000 [2:12:28<49:44, 10.93s/it][Succeeded / Failed / Skipped / Total] 645 / 53 / 29 / 727:  73%|███████▎  | 728/1000 [2:13:01<49:42, 10.96s/it][Succeeded / Failed / Skipped / Total] 646 / 53 / 29 / 728:  73%|███████▎  | 728/1000 [2:13:01<49:42, 10.96s/it][Succeeded / Failed / Skipped / Total] 646 / 53 / 29 / 728:  73%|███████▎  | 729/1000 [2:13:30<49:37, 10.99s/it][Succeeded / Failed / Skipped / Total] 647 / 53 / 29 / 729:  73%|███████▎  | 729/1000 [2:13:30<49:37, 10.99s/it][Succeeded / Failed / Skipped / Total] 647 / 53 / 29 / 729:  73%|███████▎  | 730/1000 [2:14:05<49:35, 11.02s/it]Inject uploaded files . --> Main method for tests --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( paramName ) ; if ( [[name]] != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( [[name]] , value , "[[True]]" == "[[True]]" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[biscayne]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[polyjuice]] = in . matchedName ( paramName ) ; if ( [[polyjuice]] != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( [[polyjuice]] , value , "[[Foreigner]]" == "[[Foreigner]]" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 728 ---------------------------------------------
Register Madvoc WebApp components . --> Register a new MadvocContainer --> Socre: 1.0

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[marmite]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 729 ---------------------------------------------
Scan the list of excluded jars to exclude . --> package - private for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[excludedJars]] ) { for ( final String excludedJar : [[excludedJars]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[baryshnikov]] ) { for ( final String excludedJar : [[baryshnikov]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 730 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 648 / 53 / 29 / 730:  73%|███████▎  | 730/1000 [2:14:05<49:35, 11.02s/it][Succeeded / Failed / Skipped / Total] 648 / 53 / 29 / 730:  73%|███████▎  | 731/1000 [2:14:11<49:22, 11.01s/it][Succeeded / Failed / Skipped / Total] 649 / 53 / 29 / 731:  73%|███████▎  | 731/1000 [2:14:12<49:23, 11.02s/it][Succeeded / Failed / Skipped / Total] 649 / 53 / 29 / 731:  73%|███████▎  | 732/1000 [2:15:02<49:26, 11.07s/it][Succeeded / Failed / Skipped / Total] 650 / 53 / 29 / 732:  73%|███████▎  | 732/1000 [2:15:02<49:26, 11.07s/it][Succeeded / Failed / Skipped / Total] 650 / 53 / 29 / 732:  73%|███████▎  | 733/1000 [2:15:02<49:11, 11.05s/it][Succeeded / Failed / Skipped / Total] 650 / 54 / 29 / 733:  73%|███████▎  | 733/1000 [2:15:02<49:11, 11.05s/it][Succeeded / Failed / Skipped / Total] 650 / 54 / 29 / 733:  73%|███████▎  | 734/1000 [2:15:26<49:05, 11.07s/it][Succeeded / Failed / Skipped / Total] 651 / 54 / 29 / 734:  73%|███████▎  | 734/1000 [2:15:26<49:05, 11.07s/it][Succeeded / Failed / Skipped / Total] 651 / 54 / 29 / 734:  74%|███████▎  | 735/1000 [2:15:34<48:52, 11.07s/it][Succeeded / Failed / Skipped / Total] 652 / 54 / 29 / 735:  74%|███████▎  | 735/1000 [2:15:34<48:52, 11.07s/it][Succeeded / Failed / Skipped / Total] 652 / 54 / 29 / 735:  74%|███████▎  | 736/1000 [2:15:56<48:45, 11.08s/it]Split the file . --> split the given saunders --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] split ( final String [[filename]] ) { String prefix = getPrefix ( [[filename]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[filename]] ) ; int lastExtensionIndex = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[filename]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] split ( final String [[saunders]] ) { String prefix = getPrefix ( [[saunders]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[saunders]] ) ; int lastExtensionIndex = indexOfExtension ( [[saunders]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[saunders]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[saunders]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[saunders]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[saunders]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[saunders]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[saunders]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[saunders]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 731 ---------------------------------------------
Convert a string to a file system . --> Get a human - readable representation of a String --> Socre: 1.0

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[cabrón]] ( final String [[kb]] ) { if ( [[kb]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[kb]] ) ; } else { return separatorsToUnix ( [[kb]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 732 ---------------------------------------------
Create relative path . --> Create a hermione file --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String targetPath , final String [[basePath]] ) { return new File ( [[basePath]] ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[gopher]] ( final String targetPath , final String [[hermione]] ) { return new File ( [[hermione]] ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 733 ---------------------------------------------
Sets the action configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[chowing]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 734 ---------------------------------------------
Scan the classpath . --> scan the class file --> Socre: 1.0

[[[[Adv]]]]: protected void scanClassPath ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "[[True]]" == "[[True]]" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "[[True]]" == "[[True]]" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void scanClassPath ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "[[Ifyour]]" == "[[Ifyour]]" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "[[Ifyour]]" == "[[Ifyour]]" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 735 ---------------------------------------------
Sets the list of included entries . --> include entries in the list --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... [[includedEntries]] ) { for ( final String includedEntry : [[includedEntries]] ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... [[csl]] ) { for ( final String includedEntry : [[csl]] ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 736 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 653 / 54 / 29 / 736:  74%|███████▎  | 736/1000 [2:15:56<48:45, 11.08s/it][Succeeded / Failed / Skipped / Total] 653 / 54 / 29 / 736:  74%|███████▎  | 737/1000 [2:16:02<48:32, 11.08s/it][Succeeded / Failed / Skipped / Total] 654 / 54 / 29 / 737:  74%|███████▎  | 737/1000 [2:16:02<48:32, 11.08s/it][Succeeded / Failed / Skipped / Total] 654 / 54 / 29 / 737:  74%|███████▍  | 738/1000 [2:16:30<48:27, 11.10s/it][Succeeded / Failed / Skipped / Total] 654 / 55 / 29 / 738:  74%|███████▍  | 738/1000 [2:16:30<48:27, 11.10s/it][Succeeded / Failed / Skipped / Total] 654 / 55 / 29 / 738:  74%|███████▍  | 739/1000 [2:16:45<48:18, 11.10s/it][Succeeded / Failed / Skipped / Total] 654 / 56 / 29 / 739:  74%|███████▍  | 739/1000 [2:16:45<48:18, 11.10s/it][Succeeded / Failed / Skipped / Total] 654 / 56 / 29 / 739:  74%|███████▍  | 740/1000 [2:16:47<48:03, 11.09s/it][Succeeded / Failed / Skipped / Total] 655 / 56 / 29 / 740:  74%|███████▍  | 740/1000 [2:16:47<48:03, 11.09s/it][Succeeded / Failed / Skipped / Total] 655 / 56 / 29 / 740:  74%|███████▍  | 741/1000 [2:16:57<47:52, 11.09s/it][Succeeded / Failed / Skipped / Total] 656 / 56 / 29 / 741:  74%|███████▍  | 741/1000 [2:16:57<47:52, 11.09s/it][Succeeded / Failed / Skipped / Total] 656 / 56 / 29 / 741:  74%|███████▍  | 742/1000 [2:17:24<47:46, 11.11s/it][Succeeded / Failed / Skipped / Total] 657 / 56 / 29 / 742:  74%|███████▍  | 742/1000 [2:17:24<47:46, 11.11s/it][Succeeded / Failed / Skipped / Total] 657 / 56 / 29 / 742:  74%|███████▍  | 743/1000 [2:17:31<47:34, 11.11s/it]Configure the default defaults . --> Registers the Action --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager [[actionConfigManager]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[actionConfigManager]] . registerAnnotation ( Action . class ) ; [[actionConfigManager]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[chicky]] ( ) { final ActionConfigManager [[cornrows]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[cornrows]] . registerAnnotation ( Action . class ) ; [[cornrows]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 737 ---------------------------------------------
Sets the list of excluded entries . --> Exposed for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... [[excludedEntries]] ) { for ( final String excludedEntry : [[excludedEntries]] ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... [[wittgenstein]] ) { for ( final String excludedEntry : [[wittgenstein]] ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 738 ---------------------------------------------
Inject attributes . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 739 ---------------------------------------------
Injects parameters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectParameters ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void injectParameters ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 740 ---------------------------------------------
scan . --> Scan list of files --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner scan ( final String ... paths ) { for ( final String [[path]] : paths ) { filesToScan . add ( new File ( [[path]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner scan ( final String ... paths ) { for ( final String [[britons]] : paths ) { filesToScan . add ( new File ( [[britons]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 741 ---------------------------------------------
Process the given scope . --> iust is called --> Socre: 1.0

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[iust]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 742 ---------------------------------------------
Start files . --> F743 - 5 --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[carboys]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 743 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 658 / 56 / 29 / 743:  74%|███████▍  | 743/1000 [2:17:31<47:34, 11.11s/it][Succeeded / Failed / Skipped / Total] 658 / 56 / 29 / 743:  74%|███████▍  | 744/1000 [2:17:34<47:20, 11.09s/it][Succeeded / Failed / Skipped / Total] 659 / 56 / 29 / 744:  74%|███████▍  | 744/1000 [2:17:34<47:20, 11.09s/it][Succeeded / Failed / Skipped / Total] 659 / 56 / 29 / 744:  74%|███████▍  | 745/1000 [2:17:41<47:07, 11.09s/it][Succeeded / Failed / Skipped / Total] 660 / 56 / 29 / 745:  74%|███████▍  | 745/1000 [2:17:41<47:07, 11.09s/it][Succeeded / Failed / Skipped / Total] 660 / 56 / 29 / 745:  75%|███████▍  | 746/1000 [2:18:05<47:00, 11.11s/it][Succeeded / Failed / Skipped / Total] 661 / 56 / 29 / 746:  75%|███████▍  | 746/1000 [2:18:05<47:00, 11.11s/it][Succeeded / Failed / Skipped / Total] 661 / 56 / 29 / 746:  75%|███████▍  | 747/1000 [2:18:07<46:46, 11.09s/it][Succeeded / Failed / Skipped / Total] 662 / 56 / 29 / 747:  75%|███████▍  | 747/1000 [2:18:07<46:46, 11.09s/it][Succeeded / Failed / Skipped / Total] 662 / 56 / 29 / 747:  75%|███████▍  | 748/1000 [2:18:12<46:33, 11.09s/it][Succeeded / Failed / Skipped / Total] 663 / 56 / 29 / 748:  75%|███████▍  | 748/1000 [2:18:12<46:33, 11.09s/it][Succeeded / Failed / Skipped / Total] 663 / 56 / 29 / 748:  75%|███████▍  | 749/1000 [2:18:29<46:24, 11.09s/it][Succeeded / Failed / Skipped / Total] 664 / 56 / 29 / 749:  75%|███████▍  | 749/1000 [2:18:29<46:24, 11.09s/it][Succeeded / Failed / Skipped / Total] 664 / 56 / 29 / 749:  75%|███████▌  | 750/1000 [2:18:54<46:18, 11.11s/it]Sets the list of include jars . --> withdraw the list of available elements --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... includedJars ) { for ( final String [[includedJar]] : includedJars ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[withdraws]] ( final String ... includedJars ) { for ( final String [[tenancy]] : includedJars ) { rulesJars . include ( [[tenancy]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 744 ---------------------------------------------
Returns a unique token from the session . --> prepareCsrfToken --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[tokenSet]] == null ) { [[tokenSet]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[tokenSet]] ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[tokenSet]] ) ; unique = [[tokenSet]] . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > [[wonka]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[wonka]] == null ) { [[wonka]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[wonka]] ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[wonka]] ) ; unique = [[wonka]] . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 745 ---------------------------------------------
Checks whether a Set is valid . --> F743 - 7 --> Socre: 1.0

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[token]] = iterator . next ( ) ; if ( [[token]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[token]] . validUntil < validUntilMin ) { validUntilMin = [[token]] . validUntil ; tokenToRemove = [[token]] ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[azzam]] = iterator . next ( ) ; if ( [[azzam]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[azzam]] . validUntil < validUntilMin ) { validUntilMin = [[azzam]] . validUntil ; tokenToRemove = [[azzam]] ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 746 ---------------------------------------------
Returns the signature of a class . --> zaara - 1 --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String [[name]] = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[name]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[zaara]] ( final Class type ) { final String [[thatís]] = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[thatís]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 747 ---------------------------------------------
Gets the default scope type . --> S lauing MadvocScope --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[laundering]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 748 ---------------------------------------------
Copy the bean bean --> Copy all bean names --> Socre: 1.0

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[True]]" == "[[True]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[Fishnets]]" == "[[Fishnets]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 749 ---------------------------------------------
Initialize the entity . --> Initializes the template --> Socre: 1.0

[[[[Adv]]]]: @ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[tableReference]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[cowboys]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 750 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 665 / 56 / 29 / 750:  75%|███████▌  | 750/1000 [2:18:54<46:18, 11.11s/it][Succeeded / Failed / Skipped / Total] 665 / 56 / 29 / 750:  75%|███████▌  | 751/1000 [2:19:22<46:12, 11.13s/it][Succeeded / Failed / Skipped / Total] 666 / 56 / 29 / 751:  75%|███████▌  | 751/1000 [2:19:22<46:12, 11.13s/it][Succeeded / Failed / Skipped / Total] 666 / 56 / 29 / 751:  75%|███████▌  | 752/1000 [2:20:11<46:13, 11.18s/it][Succeeded / Failed / Skipped / Total] 667 / 56 / 29 / 752:  75%|███████▌  | 752/1000 [2:20:11<46:13, 11.18s/it][Succeeded / Failed / Skipped / Total] 667 / 56 / 29 / 752:  75%|███████▌  | 753/1000 [2:20:56<46:13, 11.23s/it][Succeeded / Failed / Skipped / Total] 668 / 56 / 29 / 753:  75%|███████▌  | 753/1000 [2:20:56<46:13, 11.23s/it][Succeeded / Failed / Skipped / Total] 668 / 56 / 29 / 753:  75%|███████▌  | 754/1000 [2:22:02<46:20, 11.30s/it][Succeeded / Failed / Skipped / Total] 669 / 56 / 29 / 754:  75%|███████▌  | 754/1000 [2:22:02<46:20, 11.30s/it][Succeeded / Failed / Skipped / Total] 669 / 56 / 29 / 754:  76%|███████▌  | 755/1000 [2:22:22<46:12, 11.31s/it][Succeeded / Failed / Skipped / Total] 670 / 56 / 29 / 755:  76%|███████▌  | 755/1000 [2:22:22<46:12, 11.31s/it][Succeeded / Failed / Skipped / Total] 670 / 56 / 29 / 755:  76%|███████▌  | 756/1000 [2:22:55<46:07, 11.34s/it][Succeeded / Failed / Skipped / Total] 671 / 56 / 29 / 756:  76%|███████▌  | 756/1000 [2:22:55<46:07, 11.34s/it][Succeeded / Failed / Skipped / Total] 671 / 56 / 29 / 756:  76%|███████▌  | 757/1000 [2:24:40<46:26, 11.47s/it]Creates a new transaction . --> Return a DbJtxTransaction object --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode tm , final Object [[scope]] , final boolean active ) { return new DbJtxTransaction ( this , tm , [[scope]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[tresses]] ( final JtxTransactionMode tm , final Object [[enoki]] , final boolean active ) { return new DbJtxTransaction ( this , tm , [[enoki]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 751 ---------------------------------------------
Creates a copy of the specified bean . --> Create new Bean copy --> Socre: 1.0

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[muscovite]] ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 752 ---------------------------------------------
Register a bean . --> This is called from Mone Proxy --> Socre: 1.0

[[[[Adv]]]]: protected void [[registerBean]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void [[moneypenny]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 753 ---------------------------------------------
Remove the bean . --> The standard coffin operation --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[coffin]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 754 ---------------------------------------------
Returns the MadvocScope of the given class . --> Get all registered MadvocScope --> Socre: 1.0

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope [[s]] : allScopes ) { if ( [[s]] . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return [[s]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[volley]] ) { for ( final MadvocScope [[screens]] : allScopes ) { if ( [[screens]] . getClass ( ) . equals ( [[volley]] ) ) { return [[screens]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 755 ---------------------------------------------
Visits a property . --> Visit a botafogo --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String [[name]] , final Object value ) { if ( isTargetMap ) { [[name]] = LEFT_SQ_BRACKET + [[name]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[name]] , value ) ; return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String [[botafogo]] , final Object value ) { if ( isTargetMap ) { [[botafogo]] = LEFT_SQ_BRACKET + [[botafogo]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[botafogo]] , value ) ; return "[[Honed]]" == "[[Honed]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 756 ---------------------------------------------
Registers a new property Injection point . --> Register a new imperceptible --> Socre: 1.0

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String [[reference]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , [[reference]] ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String [[imperceptible]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , [[imperceptible]] ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 757 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 672 / 56 / 29 / 757:  76%|███████▌  | 757/1000 [2:24:40<46:26, 11.47s/it][Succeeded / Failed / Skipped / Total] 672 / 56 / 29 / 757:  76%|███████▌  | 758/1000 [2:25:49<46:33, 11.54s/it][Succeeded / Failed / Skipped / Total] 672 / 57 / 29 / 758:  76%|███████▌  | 758/1000 [2:25:49<46:33, 11.54s/it][Succeeded / Failed / Skipped / Total] 672 / 57 / 29 / 758:  76%|███████▌  | 759/1000 [2:26:51<46:37, 11.61s/it][Succeeded / Failed / Skipped / Total] 673 / 57 / 29 / 759:  76%|███████▌  | 759/1000 [2:26:51<46:37, 11.61s/it][Succeeded / Failed / Skipped / Total] 673 / 57 / 29 / 759:  76%|███████▌  | 760/1000 [2:26:58<46:24, 11.60s/it]Register a new Ctor InjectionPoint . --> Register a Ctor InjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] [[paramTypes]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( [[paramTypes]] == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( [[paramTypes]] , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] [[dooney]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( [[dooney]] == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( [[dooney]] , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 758 ---------------------------------------------
Resolves a scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[idealist]] Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 759 ---------------------------------------------
Registers a method with a injection point . --> Register a InjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = [[cd]] . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = [[cd]] . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[winkler]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = [[winkler]] . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = [[winkler]] . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 760 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 674 / 57 / 29 / 760:  76%|███████▌  | 760/1000 [2:26:58<46:24, 11.60s/it][Succeeded / Failed / Skipped / Total] 674 / 57 / 29 / 760:  76%|███████▌  | 761/1000 [2:27:03<46:11, 11.60s/it][Succeeded / Failed / Skipped / Total] 674 / 58 / 29 / 761:  76%|███████▌  | 761/1000 [2:27:03<46:11, 11.60s/it][Succeeded / Failed / Skipped / Total] 674 / 58 / 29 / 761:  76%|███████▌  | 762/1000 [2:27:32<46:04, 11.62s/it][Succeeded / Failed / Skipped / Total] 674 / 59 / 29 / 762:  76%|███████▌  | 762/1000 [2:27:32<46:04, 11.62s/it][Succeeded / Failed / Skipped / Total] 674 / 59 / 29 / 762:  76%|███████▋  | 763/1000 [2:27:49<45:55, 11.62s/it][Succeeded / Failed / Skipped / Total] 675 / 59 / 29 / 763:  76%|███████▋  | 763/1000 [2:27:49<45:55, 11.62s/it][Succeeded / Failed / Skipped / Total] 675 / 59 / 29 / 763:  76%|███████▋  | 764/1000 [2:27:49<45:39, 11.61s/it]Register bean definition for destroy methods . --> Register a destroyMethods --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... [[destroyMethodNames]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[destroyMethodNames]] == null ) { [[destroyMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[destroyMethodNames]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[destroyMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[destroyMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + [[destroyMethodNames]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... [[chlorate]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[chlorate]] == null ) { [[chlorate]] = StringPool . EMPTY_ARRAY ; } int total = [[chlorate]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[chlorate]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[chlorate]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + [[chlorate]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 761 ---------------------------------------------
Scan jar files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "[[False]]" != "[[False]]" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "[[Gare]]" != "[[Gare]]" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 762 ---------------------------------------------
Decodes a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 763 ---------------------------------------------
Accept bean type . --> Iterate over the BeanType --> Socre: 1.0

[[[[Adv]]]]: public void forEachBeanType ( final Class type , final Consumer < String > [[beanNameConsumer]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { [[beanNameConsumer]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void forEachBeanType ( final Class type , final Consumer < String > [[teaching]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { [[teaching]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 764 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 676 / 59 / 29 / 764:  76%|███████▋  | 764/1000 [2:27:49<45:39, 11.61s/it][Succeeded / Failed / Skipped / Total] 676 / 59 / 29 / 764:  76%|███████▋  | 765/1000 [2:28:13<45:31, 11.63s/it][Succeeded / Failed / Skipped / Total] 677 / 59 / 29 / 765:  76%|███████▋  | 765/1000 [2:28:13<45:31, 11.63s/it][Succeeded / Failed / Skipped / Total] 677 / 59 / 29 / 765:  77%|███████▋  | 766/1000 [2:28:31<45:22, 11.63s/it][Succeeded / Failed / Skipped / Total] 678 / 59 / 29 / 766:  77%|███████▋  | 766/1000 [2:28:31<45:22, 11.63s/it][Succeeded / Failed / Skipped / Total] 678 / 59 / 29 / 766:  77%|███████▋  | 767/1000 [2:28:43<45:10, 11.63s/it][Succeeded / Failed / Skipped / Total] 679 / 59 / 29 / 767:  77%|███████▋  | 767/1000 [2:28:43<45:10, 11.63s/it][Succeeded / Failed / Skipped / Total] 679 / 59 / 29 / 767:  77%|███████▋  | 768/1000 [2:29:41<45:13, 11.69s/it][Succeeded / Failed / Skipped / Total] 680 / 59 / 29 / 768:  77%|███████▋  | 768/1000 [2:29:41<45:13, 11.69s/it][Succeeded / Failed / Skipped / Total] 680 / 59 / 29 / 768:  77%|███████▋  | 769/1000 [2:29:47<44:59, 11.69s/it]Returns the bean names for the given type . --> veterinarians a class --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class type ) { String [ ] beanNames = beanCollections . get ( type ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > [[entry]] : beans . entrySet ( ) ) { BeanDefinition beanDefinition = [[entry]] . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String beanName = [[entry]] . getKey ( ) ; [[list]] . add ( beanName ) ; } } if ( [[list]] . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = [[list]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[veterinarians]] ( final Class type ) { String [ ] beanNames = beanCollections . get ( type ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > [[lockbox]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > [[kidnapper]] : beans . entrySet ( ) ) { BeanDefinition beanDefinition = [[kidnapper]] . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String beanName = [[kidnapper]] . getKey ( ) ; [[lockbox]] . add ( beanName ) ; } } if ( [[lockbox]] . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = [[lockbox]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 765 ---------------------------------------------
Define the parameters . --> mac clshon properties --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[macmahon]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 766 ---------------------------------------------
Intercept the action request . --> Perform an intercept operation --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long [[startTime]] = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - [[startTime]] ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long [[coexistence]] = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - [[coexistence]] ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 767 ---------------------------------------------
Registers a init method for the given beanName . --> Register a new renegotiate and add it to the registry --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String [[beanName]] , final InitMethodInvocationStrategy [[invocationStrategy]] , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , [[invocationStrategy]] ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String [[renegotiate]] , final InitMethodInvocationStrategy [[mentors]] , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[renegotiate]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , [[mentors]] ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 768 ---------------------------------------------
Throws an exception if the argument index is present . --> Sets the checkArgumentIndex of a method --> Socre: 1.0

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo methodInfo , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo methodInfo , final int [[arugula]] ) { if ( ( [[arugula]] < 1 ) || ( [[arugula]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[arugula]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 769 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 680 / 60 / 29 / 769:  77%|███████▋  | 769/1000 [2:29:47<44:59, 11.69s/it][Succeeded / Failed / Skipped / Total] 680 / 60 / 29 / 769:  77%|███████▋  | 770/1000 [2:29:49<44:45, 11.67s/it][Succeeded / Failed / Skipped / Total] 681 / 60 / 29 / 770:  77%|███████▋  | 770/1000 [2:29:49<44:45, 11.67s/it][Succeeded / Failed / Skipped / Total] 681 / 60 / 29 / 770:  77%|███████▋  | 771/1000 [2:30:37<44:44, 11.72s/it][Succeeded / Failed / Skipped / Total] 682 / 60 / 29 / 771:  77%|███████▋  | 771/1000 [2:30:37<44:44, 11.72s/it][Succeeded / Failed / Skipped / Total] 682 / 60 / 29 / 771:  77%|███████▋  | 772/1000 [2:30:38<44:29, 11.71s/it][Succeeded / Failed / Skipped / Total] 683 / 60 / 29 / 772:  77%|███████▋  | 772/1000 [2:30:38<44:29, 11.71s/it][Succeeded / Failed / Skipped / Total] 683 / 60 / 29 / 772:  77%|███████▋  | 773/1000 [2:30:43<44:15, 11.70s/it][Succeeded / Failed / Skipped / Total] 684 / 60 / 29 / 773:  77%|███████▋  | 773/1000 [2:30:43<44:15, 11.70s/it][Succeeded / Failed / Skipped / Total] 684 / 60 / 29 / 773:  77%|███████▋  | 774/1000 [2:30:46<44:01, 11.69s/it][Succeeded / Failed / Skipped / Total] 685 / 60 / 29 / 774:  77%|███████▋  | 774/1000 [2:30:46<44:01, 11.69s/it][Succeeded / Failed / Skipped / Total] 685 / 60 / 29 / 774:  78%|███████▊  | 775/1000 [2:30:51<43:47, 11.68s/it][Succeeded / Failed / Skipped / Total] 686 / 60 / 29 / 775:  78%|███████▊  | 775/1000 [2:30:51<43:47, 11.68s/it][Succeeded / Failed / Skipped / Total] 686 / 60 / 29 / 775:  78%|███████▊  | 776/1000 [2:31:06<43:37, 11.68s/it]Checks if the token is valid . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 770 ---------------------------------------------
Sets field name . --> probably probably use this method --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[probably]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 771 ---------------------------------------------
Register a set Injection point . --> Sets a property for a specific bean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = [[cd]] . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[elsa]] ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[incites]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = [[incites]] . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 772 ---------------------------------------------
Registers a bean definition . --> LIDB2018 - 1 --> Socre: 1.0

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > type , String [[name]] , Class < ? extends Scope > scopeType , WiringMode [[wiringMode]] , final boolean define , final Consumer < T > consumer ) { if ( [[name]] == null ) { [[name]] = resolveBeanName ( type ) ; } if ( [[wiringMode]] == null ) { [[wiringMode]] = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( [[wiringMode]] == WiringMode . DEFAULT ) { [[wiringMode]] = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[unbiased]] ( final Class < T > type , String [[highlights]] , Class < ? extends Scope > scopeType , WiringMode [[calibers]] , final boolean define , final Consumer < T > consumer ) { if ( [[highlights]] == null ) { [[highlights]] = resolveBeanName ( type ) ; } if ( [[calibers]] == null ) { [[calibers]] = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( [[calibers]] == WiringMode . DEFAULT ) { [[calibers]] = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 773 ---------------------------------------------
Push an integer value onto the stack . --> tremor method --> Socre: 1.0

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor [[mv]] , final int value ) { if ( value <= 5 ) { [[mv]] . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { [[mv]] . visitIntInsn ( BIPUSH , value ) ; } else { [[mv]] . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[tremor]] ( final MethodVisitor [[linux]] , final int value ) { if ( value <= 5 ) { [[linux]] . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { [[linux]] . visitIntInsn ( BIPUSH , value ) ; } else { [[linux]] . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 774 ---------------------------------------------
Load the virtual method arguments . --> For static initializers --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[uld]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 775 ---------------------------------------------
advice method name . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: public static String adviceMethodName ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String adviceMethodName ( final String [[angelou]] , final int index ) { return ProxettaNames . methodPrefix + [[angelou]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 776 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 687 / 60 / 29 / 776:  78%|███████▊  | 776/1000 [2:31:06<43:37, 11.68s/it][Succeeded / Failed / Skipped / Total] 687 / 60 / 29 / 776:  78%|███████▊  | 777/1000 [2:32:10<43:40, 11.75s/it][Succeeded / Failed / Skipped / Total] 687 / 61 / 29 / 777:  78%|███████▊  | 777/1000 [2:32:10<43:40, 11.75s/it][Succeeded / Failed / Skipped / Total] 687 / 61 / 29 / 777:  78%|███████▊  | 778/1000 [2:32:18<43:27, 11.75s/it][Succeeded / Failed / Skipped / Total] 688 / 61 / 29 / 778:  78%|███████▊  | 778/1000 [2:32:18<43:27, 11.75s/it][Succeeded / Failed / Skipped / Total] 688 / 61 / 29 / 778:  78%|███████▊  | 779/1000 [2:32:19<43:12, 11.73s/it][Succeeded / Failed / Skipped / Total] 689 / 61 / 29 / 779:  78%|███████▊  | 779/1000 [2:32:19<43:12, 11.73s/it][Succeeded / Failed / Skipped / Total] 689 / 61 / 29 / 779:  78%|███████▊  | 780/1000 [2:32:36<43:02, 11.74s/it][Succeeded / Failed / Skipped / Total] 690 / 61 / 29 / 780:  78%|███████▊  | 780/1000 [2:32:36<43:02, 11.74s/it][Succeeded / Failed / Skipped / Total] 690 / 61 / 29 / 780:  78%|███████▊  | 781/1000 [2:32:38<42:48, 11.73s/it]Prepares the method name . --> prepare get method --> Socre: 1.0

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo methodInfo , int [[varOffset]] ) { [[varOffset]] += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo methodInfo , int [[conley]] ) { [[conley]] += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 777 ---------------------------------------------
Register a provider --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class type , final String [[staticMethodName]] , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( [[staticMethodName]] , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[staticMethodName]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class type , final String [[warsaw]] , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( [[warsaw]] , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[warsaw]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 778 ---------------------------------------------
Load method argument . --> This method will be called at the end of line --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , final int index ) { int offset = [[methodInfo]] . getArgumentOffset ( index ) ; int type = [[methodInfo]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[arrietty]] ( final MethodVisitor mv , final MethodInfo [[afflict]] , final int index ) { int offset = [[afflict]] . getArgumentOffset ( index ) ; int type = [[afflict]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 779 ---------------------------------------------
Visits the given method visitor visit the given class . --> called by NEWARRAY --> Socre: 1.0

[[[[Adv]]]]: public static void newArray ( final MethodVisitor mv , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void newArray ( final MethodVisitor mv , final Class [[disfigurement]] ) { if ( [[disfigurement]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[disfigurement]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[disfigurement]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[disfigurement]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[disfigurement]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[disfigurement]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[disfigurement]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[disfigurement]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[disfigurement]] ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 780 ---------------------------------------------
Create a method signature key . --> Generates a string representation of an access --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String [[description]] , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( [[description]] ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[chases]] ( final int access , final String methodName , final String [[bha]] , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( [[bha]] ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 781 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 691 / 61 / 29 / 781:  78%|███████▊  | 781/1000 [2:32:38<42:48, 11.73s/it][Succeeded / Failed / Skipped / Total] 691 / 61 / 29 / 781:  78%|███████▊  | 782/1000 [2:32:45<42:35, 11.72s/it][Succeeded / Failed / Skipped / Total] 692 / 61 / 29 / 782:  78%|███████▊  | 782/1000 [2:32:45<42:35, 11.72s/it][Succeeded / Failed / Skipped / Total] 692 / 61 / 29 / 782:  78%|███████▊  | 783/1000 [2:32:54<42:22, 11.72s/it][Succeeded / Failed / Skipped / Total] 693 / 61 / 29 / 783:  78%|███████▊  | 783/1000 [2:32:54<42:22, 11.72s/it][Succeeded / Failed / Skipped / Total] 693 / 61 / 29 / 783:  78%|███████▊  | 784/1000 [2:33:35<42:18, 11.75s/it][Succeeded / Failed / Skipped / Total] 694 / 61 / 29 / 784:  78%|███████▊  | 784/1000 [2:33:35<42:18, 11.75s/it][Succeeded / Failed / Skipped / Total] 694 / 61 / 29 / 784:  78%|███████▊  | 785/1000 [2:34:07<42:12, 11.78s/it][Succeeded / Failed / Skipped / Total] 695 / 61 / 29 / 785:  78%|███████▊  | 785/1000 [2:34:07<42:12, 11.78s/it][Succeeded / Failed / Skipped / Total] 695 / 61 / 29 / 785:  79%|███████▊  | 786/1000 [2:34:09<41:58, 11.77s/it][Succeeded / Failed / Skipped / Total] 696 / 61 / 29 / 786:  79%|███████▊  | 786/1000 [2:34:09<41:58, 11.77s/it][Succeeded / Failed / Skipped / Total] 696 / 61 / 29 / 786:  79%|███████▊  | 787/1000 [2:36:42<42:24, 11.95s/it][Succeeded / Failed / Skipped / Total] 697 / 61 / 29 / 787:  79%|███████▊  | 787/1000 [2:36:42<42:24, 11.95s/it][Succeeded / Failed / Skipped / Total] 697 / 61 / 29 / 787:  79%|███████▉  | 788/1000 [2:37:19<42:19, 11.98s/it]Load the special method arguments . --> Generates the visitVarInsn --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] ) { [[mv]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[elko]] ( final MethodVisitor [[deactivate]] , final MethodInfo [[measurements]] ) { [[deactivate]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[measurements]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[deactivate]] , [[measurements]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 782 ---------------------------------------------
Checks if a Flags contains a user flags . --> Method egotism . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[egotism]] ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 783 ---------------------------------------------
Load the static method arguments . --> Load static methods --> Socre: 1.0

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int [[i]] = 0 ; [[i]] < methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( [[mv]] , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor [[badrinath]] , final MethodInfo methodInfo ) { for ( int [[jérôme]] = 0 ; [[jérôme]] < methodInfo . getArgumentsCount ( ) ; [[jérôme]] ++ ) { loadMethodArgument ( [[badrinath]] , methodInfo , [[jérôme]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 784 ---------------------------------------------
Resolves theAuth Bearer token . --> resolveAuthBearerToken from request --> Socre: 1.0

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int [[ndx]] = header . indexOf ( "Bearer " ) ; if ( [[ndx]] == - 1 ) { return null ; } return header . substring ( [[ndx]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int [[loculus]] = header . indexOf ( "Bearer " ) ; if ( [[loculus]] == - 1 ) { return null ; } return header . substring ( [[loculus]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 785 ---------------------------------------------
Prepare response . --> Set file extension --> Socre: 1.0

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String fileName , String [[mimeType]] , final int fileSize ) { if ( ( [[mimeType]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[mimeType]] = MimeTypes . getMimeType ( extension ) ; } if ( [[mimeType]] != null ) { response . setContentType ( [[mimeType]] ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String fileName , String [[wenn]] , final int fileSize ) { if ( ( [[wenn]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[wenn]] = MimeTypes . getMimeType ( extension ) ; } if ( [[wenn]] != null ) { response . setContentType ( [[wenn]] ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 786 ---------------------------------------------
Resolves the Java version . --> Mariel Methodedaddle --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return [[version]] > platformVersion ? [[version]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[mariel]] ( final int [[skedaddle]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return [[skedaddle]] > platformVersion ? [[skedaddle]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 787 ---------------------------------------------
Extract the encoding from the given content type . --> Helper method to extract the givenEncoding --> Socre: 1.0

[[[[Adv]]]]: public static String extractEncoding ( final String [[contentType]] , String defaultEncoding ) { String [[encoding]] = extractEncoding ( [[contentType]] ) ; if ( [[encoding]] == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } [[encoding]] = defaultEncoding ; } return [[encoding]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String extractEncoding ( final String [[contributing]] , String defaultEncoding ) { String [[pancake]] = extractEncoding ( [[contributing]] ) ; if ( [[pancake]] == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } [[pancake]] = defaultEncoding ; } return [[pancake]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 788 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 697 / 62 / 29 / 788:  79%|███████▉  | 788/1000 [2:37:19<42:19, 11.98s/it][Succeeded / Failed / Skipped / Total] 697 / 62 / 29 / 788:  79%|███████▉  | 789/1000 [2:38:21<42:20, 12.04s/it][Succeeded / Failed / Skipped / Total] 698 / 62 / 29 / 789:  79%|███████▉  | 789/1000 [2:38:21<42:20, 12.04s/it][Succeeded / Failed / Skipped / Total] 698 / 62 / 29 / 789:  79%|███████▉  | 790/1000 [2:39:50<42:29, 12.14s/it][Succeeded / Failed / Skipped / Total] 699 / 62 / 29 / 790:  79%|███████▉  | 790/1000 [2:39:50<42:29, 12.14s/it][Succeeded / Failed / Skipped / Total] 699 / 62 / 29 / 790:  79%|███████▉  | 791/1000 [2:39:51<42:14, 12.13s/it][Succeeded / Failed / Skipped / Total] 700 / 62 / 29 / 791:  79%|███████▉  | 791/1000 [2:39:51<42:14, 12.13s/it][Succeeded / Failed / Skipped / Total] 700 / 62 / 29 / 791:  79%|███████▉  | 792/1000 [2:40:08<42:03, 12.13s/it][Succeeded / Failed / Skipped / Total] 701 / 62 / 29 / 792:  79%|███████▉  | 792/1000 [2:40:08<42:03, 12.13s/it][Succeeded / Failed / Skipped / Total] 701 / 62 / 29 / 792:  79%|███████▉  | 793/1000 [2:40:16<41:50, 12.13s/it]Registers a provider with the beanName . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "[[True]]" == "[[True]]" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "[[Abre]]" == "[[Abre]]" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 789 ---------------------------------------------
Require authentication . --> Throw IOException if doers is enabled --> Socre: 1.0

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse [[resp]] , final String [[realm]] ) throws IOException { [[resp]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[realm]] + ' ' ) ; [[resp]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse [[whiskeys]] , final String [[doers]] ) throws IOException { [[whiskeys]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[doers]] + ' ' ) ; [[whiskeys]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 790 ---------------------------------------------
Store into array . --> storeIntoArray method --> Socre: 1.0

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor [[mv]] , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { [[mv]] . visitInsn ( IASTORE ) ; return ; } if ( [[componentType]] == long . class ) { [[mv]] . visitInsn ( LASTORE ) ; return ; } if ( [[componentType]] == float . class ) { [[mv]] . visitInsn ( FASTORE ) ; return ; } if ( [[componentType]] == double . class ) { [[mv]] . visitInsn ( DASTORE ) ; return ; } if ( [[componentType]] == byte . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == short . class ) { [[mv]] . visitInsn ( SASTORE ) ; return ; } if ( [[componentType]] == boolean . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == char . class ) { [[mv]] . visitInsn ( CASTORE ) ; return ; } [[mv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor [[orderlies]] , final Class [[plotters]] ) { if ( [[plotters]] == int . class ) { [[orderlies]] . visitInsn ( IASTORE ) ; return ; } if ( [[plotters]] == long . class ) { [[orderlies]] . visitInsn ( LASTORE ) ; return ; } if ( [[plotters]] == float . class ) { [[orderlies]] . visitInsn ( FASTORE ) ; return ; } if ( [[plotters]] == double . class ) { [[orderlies]] . visitInsn ( DASTORE ) ; return ; } if ( [[plotters]] == byte . class ) { [[orderlies]] . visitInsn ( BASTORE ) ; return ; } if ( [[plotters]] == short . class ) { [[orderlies]] . visitInsn ( SASTORE ) ; return ; } if ( [[plotters]] == boolean . class ) { [[orderlies]] . visitInsn ( BASTORE ) ; return ; } if ( [[plotters]] == char . class ) { [[orderlies]] . visitInsn ( CASTORE ) ; return ; } [[orderlies]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 791 ---------------------------------------------
Gets all cookies . --> swiftness a cookie --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest [[request]] , final String cookieName ) { Cookie [ ] cookies = [[request]] . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[swiftness]] ( final HttpServletRequest [[moussaka]] , final String cookieName ) { Cookie [ ] cookies = [[moussaka]] . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 792 ---------------------------------------------
Prepares the parameters . --> prepare params --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] [[paramValues]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = [[paramValues]] . length ; for ( int i = 0 ; i < [[paramValues]] . length ; i ++ ) { String paramValue = [[paramValues]] [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } [[paramValues]] [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return [[paramValues]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] [[niña]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = [[niña]] . length ; for ( int i = 0 ; i < [[niña]] . length ; i ++ ) { String paramValue = [[niña]] [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } [[niña]] [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return [[niña]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 793 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 702 / 62 / 29 / 793:  79%|███████▉  | 793/1000 [2:40:16<41:50, 12.13s/it][Succeeded / Failed / Skipped / Total] 702 / 62 / 29 / 793:  79%|███████▉  | 794/1000 [2:40:19<41:35, 12.12s/it][Succeeded / Failed / Skipped / Total] 703 / 62 / 29 / 794:  79%|███████▉  | 794/1000 [2:40:19<41:35, 12.12s/it][Succeeded / Failed / Skipped / Total] 703 / 62 / 29 / 794:  80%|███████▉  | 795/1000 [2:40:23<41:21, 12.11s/it][Succeeded / Failed / Skipped / Total] 704 / 62 / 29 / 795:  80%|███████▉  | 795/1000 [2:40:23<41:21, 12.11s/it][Succeeded / Failed / Skipped / Total] 704 / 62 / 29 / 795:  80%|███████▉  | 796/1000 [2:40:30<41:08, 12.10s/it][Succeeded / Failed / Skipped / Total] 705 / 62 / 29 / 796:  80%|███████▉  | 796/1000 [2:40:30<41:08, 12.10s/it][Succeeded / Failed / Skipped / Total] 705 / 62 / 29 / 796:  80%|███████▉  | 797/1000 [2:40:31<40:53, 12.08s/it][Succeeded / Failed / Skipped / Total] 706 / 62 / 29 / 797:  80%|███████▉  | 797/1000 [2:40:31<40:53, 12.08s/it][Succeeded / Failed / Skipped / Total] 706 / 62 / 29 / 797:  80%|███████▉  | 798/1000 [2:40:31<40:38, 12.07s/it][Succeeded / Failed / Skipped / Total] 707 / 62 / 29 / 798:  80%|███████▉  | 798/1000 [2:40:31<40:38, 12.07s/it][Succeeded / Failed / Skipped / Total] 707 / 62 / 29 / 798:  80%|███████▉  | 799/1000 [2:40:33<40:23, 12.06s/it][Succeeded / Failed / Skipped / Total] 708 / 62 / 29 / 799:  80%|███████▉  | 799/1000 [2:40:33<40:23, 12.06s/it][Succeeded / Failed / Skipped / Total] 708 / 62 / 29 / 799:  80%|████████  | 800/1000 [2:40:38<40:09, 12.05s/it]Prepare a file . --> prepare the fileDownload --> Socre: 1.0

[[[[Adv]]]]: public static void prepareDownload ( final HttpServletResponse [[response]] , final File [[file]] , final String [[mimeType]] ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( [[response]] , [[file]] . getAbsolutePath ( ) , [[mimeType]] , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void prepareDownload ( final HttpServletResponse [[noura]] , final File [[piel]] , final String [[silken]] ) { if ( ! [[piel]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[piel]] ) ; } if ( [[piel]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[piel]] ) ; } prepareResponse ( [[noura]] , [[piel]] . getAbsolutePath ( ) , [[silken]] , ( int ) [[piel]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 794 ---------------------------------------------
Store the context path . --> Sets the absorbing attribute --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext servletContext , final String contextPathVariableName ) { String [[ctxPath]] = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[absorbing]] ( final ServletContext servletContext , final String contextPathVariableName ) { String [[congenital]] = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , [[congenital]] ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 795 ---------------------------------------------
Read UTF - 8 encoded string . --> readRequestBodyFromStream --> Socre: 1.0

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest request ) throws IOException { String [[charEncoding]] = request . getCharacterEncoding ( ) ; if ( [[charEncoding]] == null ) { [[charEncoding]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader [[bufferedReader]] = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { [[bufferedReader]] = new BufferedReader ( new InputStreamReader ( inputStream , [[charEncoding]] ) ) ; StreamUtil . copy ( [[bufferedReader]] , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( [[bufferedReader]] ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest request ) throws IOException { String [[inject]] = request . getCharacterEncoding ( ) ; if ( [[inject]] == null ) { [[inject]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader [[laundress]] = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { [[laundress]] = new BufferedReader ( new InputStreamReader ( inputStream , [[inject]] ) ) ; StreamUtil . copy ( [[laundress]] , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( [[laundress]] ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 796 ---------------------------------------------
Invokes the body . --> Call milkmaid --> Socre: 1.0

[[[[Adv]]]]: public static void invokeBody ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void invokeBody ( final JspFragment [[milkmaid]] ) throws JspException { if ( [[milkmaid]] == null ) { return ; } try { [[milkmaid]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 797 ---------------------------------------------
Write method argument . --> store a method call --> Socre: 1.0

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , final int [[index]] ) { int [[offset]] = [[methodInfo]] . getArgumentOffset ( [[index]] ) ; int type = [[methodInfo]] . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , [[offset]] ) ; break ; default : mv . visitVarInsn ( ASTORE , [[offset]] ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo [[cinzia]] , final int [[argumentative]] ) { int [[afflict]] = [[cinzia]] . getArgumentOffset ( [[argumentative]] ) ; int type = [[cinzia]] . getArgument ( [[argumentative]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , [[afflict]] ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , [[afflict]] ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , [[afflict]] ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , [[afflict]] ) ; break ; default : mv . visitVarInsn ( ASTORE , [[afflict]] ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 798 ---------------------------------------------
Render the body to a string . --> Get the HTML anchor of the given JspFragment --> Socre: 1.0

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment body ) throws JspException { char [ ] result = renderBody ( body ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[morra]] ( final JspFragment body ) throws JspException { char [ ] result = renderBody ( body ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 799 ---------------------------------------------
Render the body --> Render the given democracy --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment [[democracy]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[democracy]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 800 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 709 / 62 / 29 / 800:  80%|████████  | 800/1000 [2:40:38<40:09, 12.05s/it][Succeeded / Failed / Skipped / Total] 709 / 62 / 29 / 800:  80%|████████  | 801/1000 [2:40:50<39:57, 12.05s/it][Succeeded / Failed / Skipped / Total] 710 / 62 / 29 / 801:  80%|████████  | 801/1000 [2:40:50<39:57, 12.05s/it][Succeeded / Failed / Skipped / Total] 710 / 62 / 29 / 801:  80%|████████  | 802/1000 [2:41:04<39:46, 12.05s/it][Succeeded / Failed / Skipped / Total] 711 / 62 / 29 / 802:  80%|████████  | 802/1000 [2:41:04<39:46, 12.05s/it][Succeeded / Failed / Skipped / Total] 711 / 62 / 29 / 802:  80%|████████  | 803/1000 [2:41:12<39:32, 12.05s/it][Succeeded / Failed / Skipped / Total] 712 / 62 / 29 / 803:  80%|████████  | 803/1000 [2:41:12<39:32, 12.05s/it][Succeeded / Failed / Skipped / Total] 712 / 62 / 29 / 803:  80%|████████  | 804/1000 [2:41:23<39:20, 12.04s/it][Succeeded / Failed / Skipped / Total] 713 / 62 / 29 / 804:  80%|████████  | 804/1000 [2:41:23<39:20, 12.04s/it][Succeeded / Failed / Skipped / Total] 713 / 62 / 29 / 804:  80%|████████  | 805/1000 [2:41:47<39:11, 12.06s/it][Succeeded / Failed / Skipped / Total] 714 / 62 / 29 / 805:  80%|████████  | 805/1000 [2:41:47<39:11, 12.06s/it][Succeeded / Failed / Skipped / Total] 714 / 62 / 29 / 805:  81%|████████  | 806/1000 [2:41:55<38:58, 12.05s/it][Succeeded / Failed / Skipped / Total] 715 / 62 / 29 / 806:  81%|████████  | 806/1000 [2:41:55<38:58, 12.05s/it][Succeeded / Failed / Skipped / Total] 715 / 62 / 29 / 806:  81%|████████  | 807/1000 [2:42:40<38:54, 12.09s/it][Succeeded / Failed / Skipped / Total] 716 / 62 / 29 / 807:  81%|████████  | 807/1000 [2:42:40<38:54, 12.09s/it][Succeeded / Failed / Skipped / Total] 716 / 62 / 29 / 807:  81%|████████  | 808/1000 [2:42:48<38:41, 12.09s/it]Call destroy methods . --> Destroys the bean --> Socre: 1.0

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[hatchback]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 801 ---------------------------------------------
Inject parameters . --> Set the lda property --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[lda]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 802 ---------------------------------------------
Rewrite action path . --> duplicate a request --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest servletRequest , final String actionPath , final String httpMethod ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[duplicate]] ( final HttpServletRequest servletRequest , final String actionPath , final String httpMethod ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 803 ---------------------------------------------
Adds a new props entry to the map . --> Create a new props entry . --> Socre: 1.0

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > [[map]] , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = [[map]] . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > [[additionally]] , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = [[additionally]] . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 804 ---------------------------------------------
Checks if a given parameter is in the request --> Removes the head of a given column --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String [[name]] ) { [[name]] = URLCoder . encodeQueryParam ( [[name]] ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( [[name]] ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[headlines]] ( final HttpServletRequest request , String [[coloured]] ) { [[coloured]] = URLCoder . encodeQueryParam ( [[coloured]] ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( [[coloured]] ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 805 ---------------------------------------------
Returns a new bean instance . --> Cockeying method --> Socre: 1.0

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[args]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[jockeying]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[disturbances]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 806 ---------------------------------------------
Invokes the initialization methods . --> Invoke the cautioned method --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy [[invocationStrategy]] ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( [[invocationStrategy]] != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[cautioned]] ( final InitMethodInvocationStrategy [[alessa]] ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( [[alessa]] != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 807 ---------------------------------------------
Add a new header value . --> advisory method --> Socre: 1.0

[[[[Adv]]]]: public void [[addHeader]] ( final String name , final String [[value]] ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , [[value]] ) ; return ; } super . remove ( name ) ; valuesList . add ( [[value]] ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[advisory]] ( final String name , final String [[joules]] ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , [[joules]] ) ; return ; } super . remove ( name ) ; valuesList . add ( [[joules]] ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 808 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 717 / 62 / 29 / 808:  81%|████████  | 808/1000 [2:42:48<38:41, 12.09s/it][Succeeded / Failed / Skipped / Total] 717 / 62 / 29 / 808:  81%|████████  | 809/1000 [2:42:55<38:27, 12.08s/it][Succeeded / Failed / Skipped / Total] 718 / 62 / 29 / 809:  81%|████████  | 809/1000 [2:42:55<38:27, 12.08s/it][Succeeded / Failed / Skipped / Total] 718 / 62 / 29 / 809:  81%|████████  | 810/1000 [2:42:58<38:13, 12.07s/it][Succeeded / Failed / Skipped / Total] 719 / 62 / 29 / 810:  81%|████████  | 810/1000 [2:42:58<38:13, 12.07s/it][Succeeded / Failed / Skipped / Total] 719 / 62 / 29 / 810:  81%|████████  | 811/1000 [2:43:08<38:01, 12.07s/it][Succeeded / Failed / Skipped / Total] 720 / 62 / 29 / 811:  81%|████████  | 811/1000 [2:43:08<38:01, 12.07s/it][Succeeded / Failed / Skipped / Total] 720 / 62 / 29 / 811:  81%|████████  | 812/1000 [2:43:17<37:48, 12.07s/it][Succeeded / Failed / Skipped / Total] 721 / 62 / 29 / 812:  81%|████████  | 812/1000 [2:43:17<37:48, 12.07s/it][Succeeded / Failed / Skipped / Total] 721 / 62 / 29 / 812:  81%|████████▏ | 813/1000 [2:43:44<37:39, 12.08s/it][Succeeded / Failed / Skipped / Total] 722 / 62 / 29 / 813:  81%|████████▏ | 813/1000 [2:43:44<37:39, 12.08s/it][Succeeded / Failed / Skipped / Total] 722 / 62 / 29 / 813:  81%|████████▏ | 814/1000 [2:44:12<37:31, 12.10s/it][Succeeded / Failed / Skipped / Total] 723 / 62 / 29 / 814:  81%|████████▏ | 814/1000 [2:44:12<37:31, 12.10s/it][Succeeded / Failed / Skipped / Total] 723 / 62 / 29 / 814:  82%|████████▏ | 815/1000 [2:44:15<37:17, 12.09s/it][Succeeded / Failed / Skipped / Total] 724 / 62 / 29 / 815:  82%|████████▏ | 815/1000 [2:44:15<37:17, 12.09s/it][Succeeded / Failed / Skipped / Total] 724 / 62 / 29 / 815:  82%|████████▏ | 816/1000 [2:44:15<37:02, 12.08s/it]Extracts a map . --> Get the mapping between profiles and wildcard patterns --> Socre: 1.0

[[[[Adv]]]]: public Map [[extract]] ( Map target , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[chested]] ( Map target , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 809 ---------------------------------------------
Reads the contents of the request into a String . --> Create a weak file --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter [[out]] = new StringWriter ( ) ; StreamUtil . copy ( buff , [[out]] ) ; return [[out]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[weakling]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter [[superhighway]] = new StringWriter ( ) ; StreamUtil . copy ( buff , [[superhighway]] ) ; return [[superhighway]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 810 ---------------------------------------------
Returns the length of the streamtoword . --> Returns the streamtoword for the given byte array --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int [[word]] = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[word]] = ( [[word]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[word]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int [[abandons]] = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[abandons]] = ( [[abandons]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[abandons]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 811 ---------------------------------------------
Gets the specified profile property . --> Return a PropsEntry for the specified key --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry getProfileProperty ( final String [[profile]] , final String key ) { final Map < String , PropsEntry > [[profileMap]] = profileProperties . get ( [[profile]] ) ; if ( [[profileMap]] == null ) { return null ; } return [[profileMap]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry getProfileProperty ( final String [[billion]] , final String key ) { final Map < String , PropsEntry > [[psychoanalysts]] = profileProperties . get ( [[billion]] ) ; if ( [[psychoanalysts]] == null ) { return null ; } return [[psychoanalysts]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 812 ---------------------------------------------
Copy all bytes from the stream . --> copy all data --> Socre: 1.0

[[[[Adv]]]]: public int copyAll ( final OutputStream out ) throws IOException { int [[count]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[count]] ++ ; } return [[count]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int copyAll ( final OutputStream out ) throws IOException { int [[yae]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[yae]] ++ ; } return [[yae]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 813 ---------------------------------------------
Adds a profile property . --> Update the anthony --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String [[key]] , final String value , final String [[profile]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[profile]] , k -> new HashMap <> ( ) ) ; put ( [[profile]] , map , [[key]] , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[anthony]] ( final String [[cretan]] , final String value , final String [[layla]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[layla]] , k -> new HashMap <> ( ) ) ; put ( [[layla]] , map , [[cretan]] , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 814 ---------------------------------------------
Resolves a placeholder value . --> Convenience method for bots --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String value , final String ... [[profiles]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[bots]] ( String value , final String ... [[lugar]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 815 ---------------------------------------------
hash function --> manicurist method --> Socre: 1.0

[[[[Adv]]]]: public static String [[hashpw]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[manicurist]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 816 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 725 / 62 / 29 / 816:  82%|████████▏ | 816/1000 [2:44:15<37:02, 12.08s/it][Succeeded / Failed / Skipped / Total] 725 / 62 / 29 / 816:  82%|████████▏ | 817/1000 [2:44:59<36:57, 12.12s/it][Succeeded / Failed / Skipped / Total] 726 / 62 / 29 / 817:  82%|████████▏ | 817/1000 [2:44:59<36:57, 12.12s/it][Succeeded / Failed / Skipped / Total] 726 / 62 / 29 / 817:  82%|████████▏ | 818/1000 [2:45:39<36:51, 12.15s/it][Succeeded / Failed / Skipped / Total] 727 / 62 / 29 / 818:  82%|████████▏ | 818/1000 [2:45:39<36:51, 12.15s/it][Succeeded / Failed / Skipped / Total] 727 / 62 / 29 / 818:  82%|████████▏ | 819/1000 [2:45:52<36:39, 12.15s/it][Succeeded / Failed / Skipped / Total] 727 / 63 / 29 / 819:  82%|████████▏ | 819/1000 [2:45:52<36:39, 12.15s/it][Succeeded / Failed / Skipped / Total] 727 / 63 / 29 / 819:  82%|████████▏ | 820/1000 [2:47:02<36:40, 12.22s/it][Succeeded / Failed / Skipped / Total] 728 / 63 / 29 / 820:  82%|████████▏ | 820/1000 [2:47:02<36:40, 12.22s/it][Succeeded / Failed / Skipped / Total] 728 / 63 / 29 / 820:  82%|████████▏ | 821/1000 [2:49:10<36:53, 12.36s/it][Succeeded / Failed / Skipped / Total] 729 / 63 / 29 / 821:  82%|████████▏ | 821/1000 [2:49:10<36:53, 12.36s/it][Succeeded / Failed / Skipped / Total] 729 / 63 / 29 / 821:  82%|████████▏ | 822/1000 [2:49:32<36:42, 12.38s/it][Succeeded / Failed / Skipped / Total] 730 / 63 / 29 / 822:  82%|████████▏ | 822/1000 [2:49:32<36:42, 12.38s/it][Succeeded / Failed / Skipped / Total] 730 / 63 / 29 / 822:  82%|████████▏ | 823/1000 [2:49:33<36:27, 12.36s/it][Succeeded / Failed / Skipped / Total] 730 / 63 / 30 / 823:  82%|████████▏ | 823/1000 [2:49:33<36:27, 12.36s/it][Succeeded / Failed / Skipped / Total] 730 / 63 / 30 / 823:  82%|████████▏ | 824/1000 [2:52:03<36:44, 12.53s/it]Validates a plaintext --> Validates the given garner --> Socre: 1.0

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String [[hashed]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , [[hashed]] ) ; hashed_bytes = [[hashed]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte [[ret]] = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { [[ret]] |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return [[ret]] == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String [[garner]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , [[garner]] ) ; hashed_bytes = [[garner]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte [[fondest]] = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { [[fondest]] |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return [[fondest]] == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 817 ---------------------------------------------
Copy max . --> Copy the syphilitic --> Socre: 1.0

[[[[Adv]]]]: public int copyMax ( final OutputStream [[out]] , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte [[b]] = readByte ( ) ; if ( isBoundary ( [[b]] ) ) { break ; } [[out]] . write ( [[b]] ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int copyMax ( final OutputStream [[persia]] , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte [[syphilitic]] = readByte ( ) ; if ( isBoundary ( [[syphilitic]] ) ) { break ; } [[persia]] . write ( [[syphilitic]] ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 818 ---------------------------------------------
Reads the action interceptors . --> InterceptedBy implementation --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = [[actionClassOrMethod]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[fudged]] ( final AnnotatedElement [[analyzer]] ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = [[analyzer]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 819 ---------------------------------------------
Stores context path . --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeContextPath ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void storeContextPath ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 820 ---------------------------------------------
Set base property . --> region > append --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String [[key]] , final String [[value]] , final boolean append ) { put ( null , baseProperties , [[key]] , [[value]] , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[gipsy]] ( final String [[tunner]] , final String [[participate]] , final boolean append ) { put ( null , baseProperties , [[tunner]] , [[participate]] , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 821 ---------------------------------------------
Parse a method alias . --> Return answer from annotation values --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[answer]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 822 ---------------------------------------------
Read actionFilters . --> dexterity implementation --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = [[actionClassOrMethod]] . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[dexterity]] ( final AnnotatedElement [[shifts]] ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = [[shifts]] . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 823 ---------------------------------------------
Updates the last modified time . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 824 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 731 / 63 / 30 / 824:  82%|████████▏ | 824/1000 [2:52:03<36:44, 12.53s/it][Succeeded / Failed / Skipped / Total] 731 / 63 / 30 / 824:  82%|████████▎ | 825/1000 [2:52:34<36:36, 12.55s/it][Succeeded / Failed / Skipped / Total] 731 / 64 / 30 / 825:  82%|████████▎ | 825/1000 [2:52:34<36:36, 12.55s/it][Succeeded / Failed / Skipped / Total] 731 / 64 / 30 / 825:  83%|████████▎ | 826/1000 [2:52:43<36:23, 12.55s/it][Succeeded / Failed / Skipped / Total] 732 / 64 / 30 / 826:  83%|████████▎ | 826/1000 [2:52:43<36:23, 12.55s/it][Succeeded / Failed / Skipped / Total] 732 / 64 / 30 / 826:  83%|████████▎ | 827/1000 [2:52:56<36:10, 12.55s/it][Succeeded / Failed / Skipped / Total] 732 / 65 / 30 / 827:  83%|████████▎ | 827/1000 [2:52:56<36:10, 12.55s/it][Succeeded / Failed / Skipped / Total] 732 / 65 / 30 / 827:  83%|████████▎ | 828/1000 [2:53:01<35:56, 12.54s/it][Succeeded / Failed / Skipped / Total] 733 / 65 / 30 / 828:  83%|████████▎ | 828/1000 [2:53:01<35:56, 12.54s/it][Succeeded / Failed / Skipped / Total] 733 / 65 / 30 / 828:  83%|████████▎ | 829/1000 [2:53:07<35:42, 12.53s/it][Succeeded / Failed / Skipped / Total] 734 / 65 / 30 / 829:  83%|████████▎ | 829/1000 [2:53:07<35:42, 12.53s/it][Succeeded / Failed / Skipped / Total] 734 / 65 / 30 / 829:  83%|████████▎ | 830/1000 [2:54:03<35:39, 12.58s/it][Succeeded / Failed / Skipped / Total] 735 / 65 / 30 / 830:  83%|████████▎ | 830/1000 [2:54:03<35:39, 12.58s/it][Succeeded / Failed / Skipped / Total] 735 / 65 / 30 / 830:  83%|████████▎ | 831/1000 [2:54:56<35:34, 12.63s/it]Resolves the action configuration . --> Create the ActionConfig --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > [[annotationType]] ; if ( annotationValues == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[gauthier]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > [[implicated]] ; if ( annotationValues == null ) { [[implicated]] = Action . class ; } else { [[implicated]] = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( [[implicated]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 825 ---------------------------------------------
Parse action . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 826 ---------------------------------------------
Read the package action path . --> get slouching method --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String [[actionPackageName]] = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[slouching]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String [[fri]] = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 827 ---------------------------------------------
Copy parameters to attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 828 ---------------------------------------------
Returns the specified advice . --> Gets the artfully bean --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[artfully]] > [[artfully]] applyAdvice ( final Class < [[artfully]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 829 ---------------------------------------------
Inject target into proxy . --> Proxetta exceptions --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object proxy , final Object target ) { Class [[proxyClass]] = proxy . getClass ( ) ; try { Field field = [[proxyClass]] . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[chancing]] ( final Object proxy , final Object target ) { Class [[constrictor]] = proxy . getClass ( ) ; try { Field field = [[constrictor]] . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 830 ---------------------------------------------
Registers an alias . --> Method used to register an ActionAnnotationValues selection --> Socre: 1.0

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues [[annotationValues]] , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( [[annotationValues]] ) ; if ( alias != null ) { String [[aliasPath]] = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , [[aliasPath]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues [[gonzales]] , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( [[gonzales]] ) ; if ( alias != null ) { String [[romans]] = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , [[romans]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 831 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 736 / 65 / 30 / 831:  83%|████████▎ | 831/1000 [2:54:56<35:34, 12.63s/it][Succeeded / Failed / Skipped / Total] 736 / 65 / 30 / 831:  83%|████████▎ | 832/1000 [2:55:23<35:24, 12.65s/it][Succeeded / Failed / Skipped / Total] 737 / 65 / 30 / 832:  83%|████████▎ | 832/1000 [2:55:23<35:24, 12.65s/it][Succeeded / Failed / Skipped / Total] 737 / 65 / 30 / 832:  83%|████████▎ | 833/1000 [2:55:28<35:10, 12.64s/it][Succeeded / Failed / Skipped / Total] 738 / 65 / 30 / 833:  83%|████████▎ | 833/1000 [2:55:28<35:10, 12.64s/it][Succeeded / Failed / Skipped / Total] 738 / 65 / 30 / 833:  83%|████████▎ | 834/1000 [2:55:36<34:57, 12.63s/it][Succeeded / Failed / Skipped / Total] 739 / 65 / 30 / 834:  83%|████████▎ | 834/1000 [2:55:36<34:57, 12.63s/it][Succeeded / Failed / Skipped / Total] 739 / 65 / 30 / 834:  84%|████████▎ | 835/1000 [2:55:43<34:43, 12.63s/it][Succeeded / Failed / Skipped / Total] 740 / 65 / 30 / 835:  84%|████████▎ | 835/1000 [2:55:43<34:43, 12.63s/it][Succeeded / Failed / Skipped / Total] 740 / 65 / 30 / 835:  84%|████████▎ | 836/1000 [2:55:57<34:31, 12.63s/it][Succeeded / Failed / Skipped / Total] 740 / 66 / 30 / 836:  84%|████████▎ | 836/1000 [2:55:57<34:31, 12.63s/it][Succeeded / Failed / Skipped / Total] 740 / 66 / 30 / 836:  84%|████████▎ | 837/1000 [2:55:57<34:16, 12.61s/it][Succeeded / Failed / Skipped / Total] 741 / 66 / 30 / 837:  84%|████████▎ | 837/1000 [2:55:57<34:16, 12.61s/it][Succeeded / Failed / Skipped / Total] 741 / 66 / 30 / 837:  84%|████████▍ | 838/1000 [2:56:12<34:03, 12.62s/it][Succeeded / Failed / Skipped / Total] 742 / 66 / 30 / 838:  84%|████████▍ | 838/1000 [2:56:12<34:03, 12.62s/it][Succeeded / Failed / Skipped / Total] 742 / 66 / 30 / 838:  84%|████████▍ | 839/1000 [2:56:19<33:50, 12.61s/it]Returns the type data for the given type . --> kalina of a class --> Socre: 1.0

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[type]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[kalina]] ( final Class [[boobie]] ) { TypeData typeData = typeDataMap . get ( [[boobie]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[boobie]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[boobie]] ) ; typeDataMap . put ( [[boobie]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 832 ---------------------------------------------
Find the TypeData for the specified type . --> Get the anth annotation --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class type ) { final Class < ? extends Annotation > [[defaultAnnotation]] = jsonAnnotation ; if ( type . getAnnotation ( [[defaultAnnotation]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[anthony]] ( final Class type ) { final Class < ? extends Annotation > [[cursed]] = jsonAnnotation ; if ( type . getAnnotation ( [[cursed]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 833 ---------------------------------------------
Return the name of the real name --> Fuegt ein Feetcakes ein --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int [[jsonIndex]] = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( [[jsonIndex]] == - 1 ) { return jsonName ; } return realNames [ [[jsonIndex]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[sweetcakes]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int [[shintaro]] = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( [[shintaro]] == - 1 ) { return jsonName ; } return realNames [ [[shintaro]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 834 ---------------------------------------------
Return the content of the file . --> Loris data --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[loris]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 835 ---------------------------------------------
Copy the bootstrap methods --> mica method --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[mica]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 836 ---------------------------------------------
Create an action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 837 ---------------------------------------------
Resolves the real name . --> Gets theiator of this enum --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[aviator]] ( final String [[mongolian]] ) { if ( realNames == null ) { return [[mongolian]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[mongolian]] ) ; if ( realIndex == - 1 ) { return [[mongolian]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 838 ---------------------------------------------
Gets the type data . --> Get the TypeData cremation for a given class --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[cremation]] ( final Class [[deteriorating]] ) { TypeData typeData = typeDataMap . get ( [[deteriorating]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[deteriorating]] ) ; typeDataMap . put ( [[deteriorating]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 839 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 743 / 66 / 30 / 839:  84%|████████▍ | 839/1000 [2:56:19<33:50, 12.61s/it][Succeeded / Failed / Skipped / Total] 743 / 66 / 30 / 839:  84%|████████▍ | 840/1000 [2:56:20<33:35, 12.60s/it][Succeeded / Failed / Skipped / Total] 744 / 66 / 30 / 840:  84%|████████▍ | 840/1000 [2:56:20<33:35, 12.60s/it][Succeeded / Failed / Skipped / Total] 744 / 66 / 30 / 840:  84%|████████▍ | 841/1000 [2:56:34<33:23, 12.60s/it][Succeeded / Failed / Skipped / Total] 744 / 67 / 30 / 841:  84%|████████▍ | 841/1000 [2:56:34<33:23, 12.60s/it][Succeeded / Failed / Skipped / Total] 744 / 67 / 30 / 841:  84%|████████▍ | 842/1000 [2:56:42<33:09, 12.59s/it][Succeeded / Failed / Skipped / Total] 745 / 67 / 30 / 842:  84%|████████▍ | 842/1000 [2:56:42<33:09, 12.59s/it][Succeeded / Failed / Skipped / Total] 745 / 67 / 30 / 842:  84%|████████▍ | 843/1000 [2:57:15<33:00, 12.62s/it][Succeeded / Failed / Skipped / Total] 746 / 67 / 30 / 843:  84%|████████▍ | 843/1000 [2:57:15<33:00, 12.62s/it][Succeeded / Failed / Skipped / Total] 746 / 67 / 30 / 843:  84%|████████▍ | 844/1000 [3:00:57<33:26, 12.86s/it][Succeeded / Failed / Skipped / Total] 746 / 68 / 30 / 844:  84%|████████▍ | 844/1000 [3:00:57<33:26, 12.86s/it][Succeeded / Failed / Skipped / Total] 746 / 68 / 30 / 844:  84%|████████▍ | 845/1000 [3:02:03<33:23, 12.93s/it][Succeeded / Failed / Skipped / Total] 747 / 68 / 30 / 845:  84%|████████▍ | 845/1000 [3:02:03<33:23, 12.93s/it][Succeeded / Failed / Skipped / Total] 747 / 68 / 30 / 845:  85%|████████▍ | 846/1000 [3:06:41<33:59, 13.24s/it][Succeeded / Failed / Skipped / Total] 748 / 68 / 30 / 846:  85%|████████▍ | 846/1000 [3:06:41<33:59, 13.24s/it][Succeeded / Failed / Skipped / Total] 748 / 68 / 30 / 846:  85%|████████▍ | 847/1000 [3:08:05<33:58, 13.32s/it][Succeeded / Failed / Skipped / Total] 749 / 68 / 30 / 847:  85%|████████▍ | 847/1000 [3:08:05<33:58, 13.32s/it][Succeeded / Failed / Skipped / Total] 749 / 68 / 30 / 847:  85%|████████▍ | 848/1000 [3:08:42<33:49, 13.35s/it]Resolve json name . --> resolveJsonName Method --> Socre: 1.0

[[[[Adv]]]]: public String resolveJsonName ( final Class [[type]] , final String [[name]] ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String resolveJsonName ( final Class [[música]] , final String [[jamaican]] ) { TypeData typeData = lookupTypeData ( [[música]] ) ; return typeData . resolveJsonName ( [[jamaican]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 840 ---------------------------------------------
Adds bootstrap methods . --> serenades a byte vector --> Socre: 1.0

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[serenades]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 841 ---------------------------------------------
Visits a annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[geothermal]] ( final String [[raspberry]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[raspberry]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 842 ---------------------------------------------
Adds a new constant . --> dissolved method --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[dissolved]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 843 ---------------------------------------------
Put constant pool . --> region latitudes --> Socre: 1.0

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[latitudes]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 844 ---------------------------------------------
Read the method action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String [[methodName]] , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[odors]] ( final String [[morry]] , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 845 ---------------------------------------------
Adds a constant integer to the constant pool or return it . --> dastardo --> Socre: 1.0

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int [[tag]] , final int value ) { int hashCode = hash ( [[tag]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[tag]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[douche]] ( final int [[bastardo]] , final int value ) { int hashCode = hash ( [[bastardo]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[bastardo]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[bastardo]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[bastardo]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a long or double constant . --> region kassel --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[kassel]] ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 847 ---------------------------------------------
Set the major version and class name . --> region > bertin --> Socre: 1.0

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int [[majorVersion]] , final String [[className]] ) { this . majorVersion = [[majorVersion]] ; this . className = [[className]] ; return addConstantClass ( [[className]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[bertin]] ( final int [[carpetbaggers]] , final String [[lawlessness]] ) { this . majorVersion = [[carpetbaggers]] ; this . className = [[lawlessness]] ; return addConstantClass ( [[lawlessness]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 848 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 750 / 68 / 30 / 848:  85%|████████▍ | 848/1000 [3:08:42<33:49, 13.35s/it][Succeeded / Failed / Skipped / Total] 750 / 68 / 30 / 848:  85%|████████▍ | 849/1000 [3:09:16<33:39, 13.38s/it][Succeeded / Failed / Skipped / Total] 751 / 68 / 30 / 849:  85%|████████▍ | 849/1000 [3:09:16<33:39, 13.38s/it][Succeeded / Failed / Skipped / Total] 751 / 68 / 30 / 849:  85%|████████▌ | 850/1000 [3:10:21<33:35, 13.44s/it][Succeeded / Failed / Skipped / Total] 751 / 69 / 30 / 850:  85%|████████▌ | 850/1000 [3:10:21<33:35, 13.44s/it][Succeeded / Failed / Skipped / Total] 751 / 69 / 30 / 850:  85%|████████▌ | 851/1000 [3:11:47<33:34, 13.52s/it][Succeeded / Failed / Skipped / Total] 752 / 69 / 30 / 851:  85%|████████▌ | 851/1000 [3:11:47<33:34, 13.52s/it][Succeeded / Failed / Skipped / Total] 752 / 69 / 30 / 851:  85%|████████▌ | 852/1000 [3:12:08<33:22, 13.53s/it][Succeeded / Failed / Skipped / Total] 753 / 69 / 30 / 852:  85%|████████▌ | 852/1000 [3:12:08<33:22, 13.53s/it][Succeeded / Failed / Skipped / Total] 753 / 69 / 30 / 852:  85%|████████▌ | 853/1000 [3:13:34<33:21, 13.62s/it][Succeeded / Failed / Skipped / Total] 754 / 69 / 30 / 853:  85%|████████▌ | 853/1000 [3:13:34<33:21, 13.62s/it][Succeeded / Failed / Skipped / Total] 754 / 69 / 30 / 853:  85%|████████▌ | 854/1000 [3:13:51<33:08, 13.62s/it][Succeeded / Failed / Skipped / Total] 755 / 69 / 30 / 854:  85%|████████▌ | 854/1000 [3:13:51<33:08, 13.62s/it][Succeeded / Failed / Skipped / Total] 755 / 69 / 30 / 854:  86%|████████▌ | 855/1000 [3:15:34<33:10, 13.72s/it]Adds a constant field to the constant pool . --> Sari method call --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String [[name]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[sari]] ( final String owner , final String [[katzenjammer]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[katzenjammer]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 849 ---------------------------------------------
Resolve real name . --> Get the pem --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class [[type]] , final String [[jsonName]] ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveRealName ( [[jsonName]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[alloy]] ( final Class [[brunswick]] , final String [[ángel]] ) { TypeData typeData = lookupTypeData ( [[brunswick]] ) ; return typeData . resolveRealName ( [[ángel]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 850 ---------------------------------------------
Adds a constant method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String [[name]] , final String [[descriptor]] , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , [[name]] , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String [[sickens]] , final String [[deport]] , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , [[sickens]] , [[deport]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 851 ---------------------------------------------
Add a constant handle . --> dabba d --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[dabba]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 852 ---------------------------------------------
Create a UTF8 constant . --> sousa hash value --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int index , final String value ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[sousa]] ( final int index , final String value ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a constant . --> add constantDynamic --> Socre: 1.0

[[[[Adv]]]]: Symbol addConstantDynamic ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String [[german]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[german]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a new float constant . --> Gibt den gargo --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int [[index]] , final int [[tag]] , final int value ) { add ( new Entry ( [[index]] , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[gargoyle]] ( final int [[heroine]] , final int [[pilot]] , final int value ) { add ( new Entry ( [[heroine]] , [[pilot]] , value , hash ( [[pilot]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 855 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 755 / 70 / 30 / 855:  86%|████████▌ | 855/1000 [3:15:34<33:10, 13.72s/it][Succeeded / Failed / Skipped / Total] 755 / 70 / 30 / 855:  86%|████████▌ | 856/1000 [3:18:37<33:24, 13.92s/it][Succeeded / Failed / Skipped / Total] 756 / 70 / 30 / 856:  86%|████████▌ | 856/1000 [3:18:37<33:24, 13.92s/it][Succeeded / Failed / Skipped / Total] 756 / 70 / 30 / 856:  86%|████████▌ | 857/1000 [3:19:14<33:14, 13.95s/it][Succeeded / Failed / Skipped / Total] 757 / 70 / 30 / 857:  86%|████████▌ | 857/1000 [3:19:14<33:14, 13.95s/it][Succeeded / Failed / Skipped / Total] 757 / 70 / 30 / 857:  86%|████████▌ | 858/1000 [3:22:53<33:34, 14.19s/it][Succeeded / Failed / Skipped / Total] 758 / 70 / 30 / 858:  86%|████████▌ | 858/1000 [3:22:53<33:34, 14.19s/it][Succeeded / Failed / Skipped / Total] 758 / 70 / 30 / 858:  86%|████████▌ | 859/1000 [3:23:09<33:20, 14.19s/it][Succeeded / Failed / Skipped / Total] 759 / 70 / 30 / 859:  86%|████████▌ | 859/1000 [3:23:09<33:20, 14.19s/it][Succeeded / Failed / Skipped / Total] 759 / 70 / 30 / 859:  86%|████████▌ | 860/1000 [3:23:34<33:08, 14.20s/it][Succeeded / Failed / Skipped / Total] 760 / 70 / 30 / 860:  86%|████████▌ | 860/1000 [3:23:34<33:08, 14.20s/it][Succeeded / Failed / Skipped / Total] 760 / 70 / 30 / 860:  86%|████████▌ | 861/1000 [3:23:40<32:52, 14.19s/it]Adds a constant reference . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String name , final String descriptor ) { int [[hashCode]] = hash ( tag , owner , name , descriptor ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == [[hashCode]] && [[entry]] . owner . equals ( owner ) && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String name , final String descriptor ) { int [[hats]] = hash ( tag , owner , name , descriptor ) ; Entry [[vim]] = get ( [[hats]] ) ; while ( [[vim]] != null ) { if ( [[vim]] . tag == tag && [[vim]] . hashCode == [[hats]] && [[vim]] . owner . equals ( owner ) && [[vim]] . name . equals ( name ) && [[vim]] . value . equals ( descriptor ) ) { return [[vim]] ; } [[vim]] = [[vim]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , [[hats]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant name and descriptor . --> addConstant name --> Socre: 1.0

[[[[Adv]]]]: private void addConstantNameAndType ( final int index , final String name , final String [[descriptor]] ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[tag]] , name , [[descriptor]] , hash ( [[tag]] , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantNameAndType ( final int index , final String name , final String [[fleas]] ) { final int [[gonn]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[gonn]] , name , [[fleas]] , hash ( [[gonn]] , name , [[fleas]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 857 ---------------------------------------------
Add a UTF8 constant . --> meekness hash value --> Socre: 1.0

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == Symbol . CONSTANT_UTF8_TAG && [[entry]] . hashCode == hashCode && [[entry]] . value . equals ( value ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[meekness]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[speeder]] = get ( hashCode ) ; while ( [[speeder]] != null ) { if ( [[speeder]] . tag == Symbol . CONSTANT_UTF8_TAG && [[speeder]] . hashCode == hashCode && [[speeder]] . value . equals ( value ) ) { return [[speeder]] . index ; } [[speeder]] = [[speeder]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
Adds a constant reference . --> region hash function --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[cassell]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 859 ---------------------------------------------
Adds a bootstrap method . --> Add constantDynamic --> Socre: 1.0

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String name , final String [[descriptor]] , final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[bootstrapMethodHandle]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , [[descriptor]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String name , final String [[recovery]] , final Handle [[morrigan]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[morrigan]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , [[recovery]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 860 ---------------------------------------------
AddMergedType Method . --> Mapping Index1 to Index2 --> Socre: 1.0

[[[[Adv]]]]: int [[addMergedType]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[honorarium]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 861 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 761 / 70 / 30 / 861:  86%|████████▌ | 861/1000 [3:23:40<32:52, 14.19s/it][Succeeded / Failed / Skipped / Total] 761 / 70 / 30 / 861:  86%|████████▌ | 862/1000 [3:23:47<32:37, 14.18s/it][Succeeded / Failed / Skipped / Total] 762 / 70 / 30 / 862:  86%|████████▌ | 862/1000 [3:23:47<32:37, 14.18s/it][Succeeded / Failed / Skipped / Total] 762 / 70 / 30 / 862:  86%|████████▋ | 863/1000 [3:23:57<32:22, 14.18s/it][Succeeded / Failed / Skipped / Total] 763 / 70 / 30 / 863:  86%|████████▋ | 863/1000 [3:23:57<32:22, 14.18s/it][Succeeded / Failed / Skipped / Total] 763 / 70 / 30 / 863:  86%|████████▋ | 864/1000 [3:24:10<32:08, 14.18s/it][Succeeded / Failed / Skipped / Total] 764 / 70 / 30 / 864:  86%|████████▋ | 864/1000 [3:24:10<32:08, 14.18s/it][Succeeded / Failed / Skipped / Total] 764 / 70 / 30 / 864:  86%|████████▋ | 865/1000 [3:24:24<31:54, 14.18s/it][Succeeded / Failed / Skipped / Total] 765 / 70 / 30 / 865:  86%|████████▋ | 865/1000 [3:24:24<31:54, 14.18s/it][Succeeded / Failed / Skipped / Total] 765 / 70 / 30 / 865:  87%|████████▋ | 866/1000 [3:25:13<31:45, 14.22s/it][Succeeded / Failed / Skipped / Total] 765 / 71 / 30 / 866:  87%|████████▋ | 866/1000 [3:25:13<31:45, 14.22s/it][Succeeded / Failed / Skipped / Total] 765 / 71 / 30 / 866:  87%|████████▋ | 867/1000 [3:25:21<31:30, 14.21s/it][Succeeded / Failed / Skipped / Total] 766 / 71 / 30 / 867:  87%|████████▋ | 867/1000 [3:25:21<31:30, 14.21s/it][Succeeded / Failed / Skipped / Total] 766 / 71 / 30 / 867:  87%|████████▋ | 868/1000 [3:25:27<31:14, 14.20s/it]Adds a constant map entry . --> addConstantNameAndType Method --> Socre: 1.0

[[[[Adv]]]]: int addConstantNameAndType ( final String [[name]] , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[hashCode]] = hash ( [[tag]] , [[name]] , descriptor ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == [[hashCode]] && [[entry]] . name . equals ( [[name]] ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( [[tag]] , addConstantUtf8 ( [[name]] ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , [[name]] , descriptor , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantNameAndType ( final String [[overpass]] , final String descriptor ) { final int [[longhouse]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[iowa]] = hash ( [[longhouse]] , [[overpass]] , descriptor ) ; Entry [[chimps]] = get ( [[iowa]] ) ; while ( [[chimps]] != null ) { if ( [[chimps]] . tag == [[longhouse]] && [[chimps]] . hashCode == [[iowa]] && [[chimps]] . name . equals ( [[overpass]] ) && [[chimps]] . value . equals ( descriptor ) ) { return [[chimps]] . index ; } [[chimps]] = [[chimps]] . next ; } constantPool . put122 ( [[longhouse]] , addConstantUtf8 ( [[overpass]] ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[longhouse]] , [[overpass]] , descriptor , [[iowa]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
Removes all entries . --> re - use this method to re - use --> Socre: 1.0

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[redder]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 863 ---------------------------------------------
Add a constant . --> add constantDynamicOrInvokeDynamicReference --> Socre: 1.0

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String [[descriptor]] , final int [[bootstrapMethodIndex]] ) { int hashCode = hash ( tag , name , [[descriptor]] , [[bootstrapMethodIndex]] ) ; add ( new Entry ( index , tag , null , name , [[descriptor]] , [[bootstrapMethodIndex]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String [[capon]] , final int [[regenerating]] ) { int hashCode = hash ( tag , name , [[capon]] , [[regenerating]] ) ; add ( new Entry ( index , tag , null , name , [[capon]] , [[regenerating]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 864 ---------------------------------------------
Returns the hash value of the name . --> get marse cookie --> Socre: 1.0

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[marseillaise]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 865 ---------------------------------------------
Returns a list of entries in this map . --> firebombinging method --> Socre: 1.0

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { all . add ( e ) ; e = e . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[firebombing]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { all . add ( e ) ; e = e . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 866 ---------------------------------------------
Adds a handle to a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 867 ---------------------------------------------
Appends a char buffer to the FastChar . --> append a range of grind --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer append ( final CharSequence [[csq]] , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { append ( [[csq]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer append ( final CharSequence [[grind]] , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { append ( [[grind]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 868 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 767 / 71 / 30 / 868:  87%|████████▋ | 868/1000 [3:25:27<31:14, 14.20s/it][Succeeded / Failed / Skipped / Total] 767 / 71 / 30 / 868:  87%|████████▋ | 869/1000 [3:25:29<30:58, 14.19s/it][Succeeded / Failed / Skipped / Total] 768 / 71 / 30 / 869:  87%|████████▋ | 869/1000 [3:25:29<30:58, 14.19s/it][Succeeded / Failed / Skipped / Total] 768 / 71 / 30 / 869:  87%|████████▋ | 870/1000 [3:25:38<30:43, 14.18s/it][Succeeded / Failed / Skipped / Total] 769 / 71 / 30 / 870:  87%|████████▋ | 870/1000 [3:25:38<30:43, 14.18s/it][Succeeded / Failed / Skipped / Total] 769 / 71 / 30 / 870:  87%|████████▋ | 871/1000 [3:25:42<30:28, 14.17s/it][Succeeded / Failed / Skipped / Total] 770 / 71 / 30 / 871:  87%|████████▋ | 871/1000 [3:25:42<30:28, 14.17s/it][Succeeded / Failed / Skipped / Total] 770 / 71 / 30 / 871:  87%|████████▋ | 872/1000 [3:25:54<30:13, 14.17s/it][Succeeded / Failed / Skipped / Total] 771 / 71 / 30 / 872:  87%|████████▋ | 872/1000 [3:25:54<30:13, 14.17s/it][Succeeded / Failed / Skipped / Total] 771 / 71 / 30 / 872:  87%|████████▋ | 873/1000 [3:26:10<29:59, 14.17s/it][Succeeded / Failed / Skipped / Total] 772 / 71 / 30 / 873:  87%|████████▋ | 873/1000 [3:26:10<29:59, 14.17s/it][Succeeded / Failed / Skipped / Total] 772 / 71 / 30 / 873:  87%|████████▋ | 874/1000 [3:26:29<29:46, 14.18s/it][Succeeded / Failed / Skipped / Total] 773 / 71 / 30 / 874:  87%|████████▋ | 874/1000 [3:26:29<29:46, 14.18s/it][Succeeded / Failed / Skipped / Total] 773 / 71 / 30 / 874:  88%|████████▊ | 875/1000 [3:26:34<29:30, 14.16s/it][Succeeded / Failed / Skipped / Total] 774 / 71 / 30 / 875:  88%|████████▊ | 875/1000 [3:26:34<29:30, 14.16s/it][Succeeded / Failed / Skipped / Total] 774 / 71 / 30 / 875:  88%|████████▊ | 876/1000 [3:26:37<29:14, 14.15s/it]Returns an iterator over this map . --> Get dae array --> Socre: 1.0

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[tattle]] ( ) { final MapEntry [ ] [[dae]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[dae]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[dae]] [ 0 ] ; [[dae]] [ 0 ] = [[dae]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 869 ---------------------------------------------
Visits an annotation . --> Get the annotation visitor --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[altoona]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 870 ---------------------------------------------
Create first chain by start . --> Make a granite operation --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[granite]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 871 ---------------------------------------------
Generates the end of the queue . --> region Aienist --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[hygienist]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 872 ---------------------------------------------
Grows the buffer at the specified capacity . --> grow a electromagnetic --> Socre: 1.0

[[[[Adv]]]]: private void grow ( final int [[minCapacity]] ) { final int oldCapacity = buffer . length ; int [[newCapacity]] = oldCapacity << 1 ; if ( [[newCapacity]] - [[minCapacity]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void grow ( final int [[electromagnetic]] ) { final int oldCapacity = buffer . length ; int [[mcgrew]] = oldCapacity << 1 ; if ( [[mcgrew]] - [[electromagnetic]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 873 ---------------------------------------------
Adds a constant long . --> Recursive function for brent --> Socre: 1.0

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int [[tag]] , final long value ) { int [[hashCode]] = hash ( [[tag]] , value ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == [[hashCode]] && [[entry]] . data == value ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } int index = constantPoolCount ; constantPool . putByte ( [[tag]] ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , [[tag]] , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[brent]] ( final int [[chaney]] , final long value ) { int [[welding]] = hash ( [[chaney]] , value ) ; Entry [[imprisoned]] = get ( [[welding]] ) ; while ( [[imprisoned]] != null ) { if ( [[imprisoned]] . tag == [[chaney]] && [[imprisoned]] . hashCode == [[welding]] && [[imprisoned]] . data == value ) { return [[imprisoned]] ; } [[imprisoned]] = [[imprisoned]] . next ; } int index = constantPoolCount ; constantPool . putByte ( [[chaney]] ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , [[chaney]] , value , [[welding]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 874 ---------------------------------------------
Adds a field . --> enclose a field --> Socre: 1.0

[[[[Adv]]]]: public Path [[push]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[enclose]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 875 ---------------------------------------------
Adds a constant UTF - 8 . --> Helper method for backward compatibility --> Socre: 1.0

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int [[tag]] , final String value ) { int [[hashCode]] = hash ( [[tag]] , value ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == [[hashCode]] && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( [[tag]] , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[squandering]] ( final int [[classiest]] , final String value ) { int [[lauri]] = hash ( [[classiest]] , value ) ; Entry entry = get ( [[lauri]] ) ; while ( entry != null ) { if ( entry . tag == [[classiest]] && entry . hashCode == [[lauri]] && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( [[classiest]] , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , [[classiest]] , value , [[lauri]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 876 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 775 / 71 / 30 / 876:  88%|████████▊ | 876/1000 [3:26:37<29:14, 14.15s/it][Succeeded / Failed / Skipped / Total] 775 / 71 / 30 / 876:  88%|████████▊ | 877/1000 [3:27:05<29:02, 14.17s/it][Succeeded / Failed / Skipped / Total] 776 / 71 / 30 / 877:  88%|████████▊ | 877/1000 [3:27:05<29:02, 14.17s/it][Succeeded / Failed / Skipped / Total] 776 / 71 / 30 / 877:  88%|████████▊ | 878/1000 [3:27:16<28:48, 14.16s/it][Succeeded / Failed / Skipped / Total] 777 / 71 / 30 / 878:  88%|████████▊ | 878/1000 [3:27:16<28:48, 14.16s/it][Succeeded / Failed / Skipped / Total] 777 / 71 / 30 / 878:  88%|████████▊ | 879/1000 [3:27:21<28:32, 14.15s/it][Succeeded / Failed / Skipped / Total] 778 / 71 / 30 / 879:  88%|████████▊ | 879/1000 [3:27:21<28:32, 14.15s/it][Succeeded / Failed / Skipped / Total] 778 / 71 / 30 / 879:  88%|████████▊ | 880/1000 [3:27:30<28:17, 14.15s/it][Succeeded / Failed / Skipped / Total] 779 / 71 / 30 / 880:  88%|████████▊ | 880/1000 [3:27:30<28:17, 14.15s/it][Succeeded / Failed / Skipped / Total] 779 / 71 / 30 / 880:  88%|████████▊ | 881/1000 [3:27:38<28:02, 14.14s/it][Succeeded / Failed / Skipped / Total] 780 / 71 / 30 / 881:  88%|████████▊ | 881/1000 [3:27:38<28:02, 14.14s/it][Succeeded / Failed / Skipped / Total] 780 / 71 / 30 / 881:  88%|████████▊ | 882/1000 [3:27:46<27:47, 14.13s/it][Succeeded / Failed / Skipped / Total] 781 / 71 / 30 / 882:  88%|████████▊ | 882/1000 [3:27:46<27:47, 14.13s/it][Succeeded / Failed / Skipped / Total] 781 / 71 / 30 / 882:  88%|████████▊ | 883/1000 [3:28:03<27:34, 14.14s/it]Executes the target method . --> advises this path --> Socre: 1.0

[[[[Adv]]]]: public Object [[execute]] ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object [[advises]] ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 877 ---------------------------------------------
Returns all values for a given name . --> Gets a list of objects from a list --> Socre: 1.0

[[[[Adv]]]]: public List < V > getAll ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int [[h]] = hash ( [[name]] ) ; int i = index ( [[h]] ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == [[h]] && eq ( [[name]] , e . key ) ) { [[values]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > getAll ( final String [[brer]] ) { LinkedList < V > [[waiver]] = new LinkedList <> ( ) ; int [[seattle]] = hash ( [[brer]] ) ; int i = index ( [[seattle]] ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == [[seattle]] && eq ( [[brer]] , e . key ) ) { [[waiver]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[waiver]] ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 878 ---------------------------------------------
Creates a bean definition . --> Create a BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[name]] , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( [[name]] , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[name]] , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[tastier]] , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( [[tastier]] , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[tastier]] , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 879 ---------------------------------------------
Parse a string into a Path . --> Check if the poking is enabled --> Socre: 1.0

[[[[Adv]]]]: public static Path [[parse]] ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[poking]] ( final String [[matchmakers]] ) { return [[matchmakers]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[matchmakers]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 880 ---------------------------------------------
Puts all keys into the map . --> region > cosmetic --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[cosmetic]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 881 ---------------------------------------------
Converts JtxTransactionMode to JtxTransactionMode . --> Convert JtxTransactionMode into DbTransactionMode --> Socre: 1.0

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[txMode]] ) { final int isolation ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[tucking]] ) { final int isolation ; switch ( [[tucking]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[tucking]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 882 ---------------------------------------------
Append buffer . --> Return the first element in the list --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[bulldozers]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 883 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 782 / 71 / 30 / 883:  88%|████████▊ | 883/1000 [3:28:03<27:34, 14.14s/it][Succeeded / Failed / Skipped / Total] 782 / 71 / 30 / 883:  88%|████████▊ | 884/1000 [3:28:10<27:18, 14.13s/it][Succeeded / Failed / Skipped / Total] 783 / 71 / 30 / 884:  88%|████████▊ | 884/1000 [3:28:10<27:18, 14.13s/it][Succeeded / Failed / Skipped / Total] 783 / 71 / 30 / 884:  88%|████████▊ | 885/1000 [3:28:49<27:08, 14.16s/it][Succeeded / Failed / Skipped / Total] 783 / 72 / 30 / 885:  88%|████████▊ | 885/1000 [3:28:49<27:08, 14.16s/it][Succeeded / Failed / Skipped / Total] 783 / 72 / 30 / 885:  89%|████████▊ | 886/1000 [3:28:55<26:52, 14.15s/it][Succeeded / Failed / Skipped / Total] 784 / 72 / 30 / 886:  89%|████████▊ | 886/1000 [3:28:55<26:52, 14.15s/it][Succeeded / Failed / Skipped / Total] 784 / 72 / 30 / 886:  89%|████████▊ | 887/1000 [3:29:09<26:38, 14.15s/it]Configure servlet context . --> Configure web browser browser --> Socre: 1.0

[[[[Adv]]]]: private void configureServletContext ( final ServletContext [[servletContext]] ) { [[servletContext]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void configureServletContext ( final ServletContext [[dvorak]] ) { [[dvorak]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[reggae]] = [[dvorak]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[reggae]] . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration [[reggae]] = [[dvorak]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[reggae]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 884 ---------------------------------------------
Create the first chain for the Method . --> create firstChain --> Socre: 1.0

[[[[Adv]]]]: protected void createFirstChainDelegate_Continue ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "[[False]]" != "[[False]]" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "[[False]]" != "[[False]]" ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , "[[False]]" != "[[False]]" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void createFirstChainDelegate_Continue ( final TargetMethodData [[meteorite]] ) { methodVisitor . visitCode ( ) ; if ( [[meteorite]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[meteorite]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[meteorite]] . firstMethodName ( ) , [[meteorite]] . msign . getDescription ( ) , "[[Sanja]]" != "[[Sanja]]" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[meteorite]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[meteorite]] . firstMethodName ( ) , [[meteorite]] . msign . getDescription ( ) , "[[Sanja]]" != "[[Sanja]]" ) ; } visitReturn ( methodVisitor , [[meteorite]] . msign , "[[Sanja]]" != "[[Sanja]]" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 885 ---------------------------------------------
Adds the bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[serendipity]] ( final Handle [[objectives]] , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 886 ---------------------------------------------
Adds a constant name and type to the constant pool . --> addConstantDynamicOrInvokeDynamicReference --> Socre: 1.0

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int [[tag]] , final String name , final String descriptor , final int [[bootstrapMethodIndex]] ) { int [[hashCode]] = hash ( [[tag]] , name , descriptor , [[bootstrapMethodIndex]] ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == [[hashCode]] && [[entry]] . data == [[bootstrapMethodIndex]] && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( [[tag]] , [[bootstrapMethodIndex]] , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , null , name , descriptor , [[bootstrapMethodIndex]] , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int [[reopens]] , final String name , final String descriptor , final int [[sumatra]] ) { int [[memorize]] = hash ( [[reopens]] , name , descriptor , [[sumatra]] ) ; Entry [[timeline]] = get ( [[memorize]] ) ; while ( [[timeline]] != null ) { if ( [[timeline]] . tag == [[reopens]] && [[timeline]] . hashCode == [[memorize]] && [[timeline]] . data == [[sumatra]] && [[timeline]] . name . equals ( name ) && [[timeline]] . value . equals ( descriptor ) ) { return [[timeline]] ; } [[timeline]] = [[timeline]] . next ; } constantPool . put122 ( [[reopens]] , [[sumatra]] , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[reopens]] , null , name , descriptor , [[sumatra]] , [[memorize]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 887 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 785 / 72 / 30 / 887:  89%|████████▊ | 887/1000 [3:29:09<26:38, 14.15s/it][Succeeded / Failed / Skipped / Total] 785 / 72 / 30 / 887:  89%|████████▉ | 888/1000 [3:30:21<26:31, 14.21s/it][Succeeded / Failed / Skipped / Total] 786 / 72 / 30 / 888:  89%|████████▉ | 888/1000 [3:30:21<26:31, 14.21s/it][Succeeded / Failed / Skipped / Total] 786 / 72 / 30 / 888:  89%|████████▉ | 889/1000 [3:30:30<26:17, 14.21s/it][Succeeded / Failed / Skipped / Total] 787 / 72 / 30 / 889:  89%|████████▉ | 889/1000 [3:30:30<26:17, 14.21s/it][Succeeded / Failed / Skipped / Total] 787 / 72 / 30 / 889:  89%|████████▉ | 890/1000 [3:30:38<26:02, 14.20s/it][Succeeded / Failed / Skipped / Total] 788 / 72 / 30 / 890:  89%|████████▉ | 890/1000 [3:30:38<26:02, 14.20s/it][Succeeded / Failed / Skipped / Total] 788 / 72 / 30 / 890:  89%|████████▉ | 891/1000 [3:31:03<25:49, 14.21s/it][Succeeded / Failed / Skipped / Total] 789 / 72 / 30 / 891:  89%|████████▉ | 891/1000 [3:31:03<25:49, 14.21s/it][Succeeded / Failed / Skipped / Total] 789 / 72 / 30 / 891:  89%|████████▉ | 892/1000 [3:31:04<25:33, 14.20s/it][Succeeded / Failed / Skipped / Total] 790 / 72 / 30 / 892:  89%|████████▉ | 892/1000 [3:31:04<25:33, 14.20s/it][Succeeded / Failed / Skipped / Total] 790 / 72 / 30 / 892:  89%|████████▉ | 893/1000 [3:31:04<25:17, 14.18s/it][Succeeded / Failed / Skipped / Total] 791 / 72 / 30 / 893:  89%|████████▉ | 893/1000 [3:31:04<25:17, 14.18s/it][Succeeded / Failed / Skipped / Total] 791 / 72 / 30 / 893:  89%|████████▉ | 894/1000 [3:31:11<25:02, 14.17s/it][Succeeded / Failed / Skipped / Total] 792 / 72 / 30 / 894:  89%|████████▉ | 894/1000 [3:31:11<25:02, 14.17s/it][Succeeded / Failed / Skipped / Total] 792 / 72 / 30 / 894:  90%|████████▉ | 895/1000 [3:31:14<24:47, 14.16s/it]Gets the field descriptors . --> Build the field names --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . [[allFields]] = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[buildings]] ( ) { if ( [[qwerty]] == null ) { FieldDescriptor [ ] [[qwerty]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[qwerty]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[qwerty]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . [[starfleet]] = [[qwerty]] ; } return [[qwerty]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 888 ---------------------------------------------
Reads a property . --> invoke the brawling method --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object [[source]] , final PropertyDescriptor propertyDescriptor ) { Getter [[getter]] = propertyDescriptor . getGetter ( declared ) ; if ( [[getter]] != null ) { try { return [[getter]] . invokeGetter ( [[source]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[brawling]] ( final Object [[tellin]] , final PropertyDescriptor propertyDescriptor ) { Getter [[popovers]] = propertyDescriptor . getGetter ( declared ) ; if ( [[popovers]] != null ) { try { return [[popovers]] . invokeGetter ( [[tellin]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 889 ---------------------------------------------
Get a Float value . --> dissociative method --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[dissociative]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 890 ---------------------------------------------
Write the progress listener to the OutputStream . --> Write tijuana --> Socre: 1.0

[[[[Adv]]]]: public void writeTo ( final OutputStream [[out]] , final HttpProgressListener [[progressListener]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void writeTo ( final OutputStream [[nutcracker]] , final HttpProgressListener [[tijuana]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 891 ---------------------------------------------
Get a Double . --> return null if unknown --> Socre: 1.0

[[[[Adv]]]]: public Double getDouble ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double getDouble ( final String [[discourtesy]] ) { Number [[hibernation]] = ( Number ) map . get ( [[discourtesy]] ) ; if ( [[hibernation]] == null ) { return null ; } if ( [[hibernation]] instanceof Double ) { return ( Double ) [[hibernation]] ; } return [[hibernation]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
Add a value to the map . --> Set an attribute value --> Socre: 1.0

[[[[Adv]]]]: public JsonObject [[put]] ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[fixation]] ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Get a Long value . --> Get simmons by ambition --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[simmons]] ( final String [[ambition]] ) { Number number = ( Number ) map . get ( [[ambition]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Sets folder to a folder --> use nantGS --> Socre: 1.0

[[[[Adv]]]]: public void useFolder ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[folderName]] ; this . folder = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void useFolder ( final String [[nantucket]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[nantucket]] ; this . folder = getService ( ) . getFolder ( [[nantucket]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[nantucket]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 895 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 793 / 72 / 30 / 895:  90%|████████▉ | 895/1000 [3:31:14<24:47, 14.16s/it][Succeeded / Failed / Skipped / Total] 793 / 72 / 30 / 895:  90%|████████▉ | 896/1000 [3:31:24<24:32, 14.16s/it][Succeeded / Failed / Skipped / Total] 794 / 72 / 30 / 896:  90%|████████▉ | 896/1000 [3:31:24<24:32, 14.16s/it][Succeeded / Failed / Skipped / Total] 794 / 72 / 30 / 896:  90%|████████▉ | 897/1000 [3:31:29<24:17, 14.15s/it][Succeeded / Failed / Skipped / Total] 795 / 72 / 30 / 897:  90%|████████▉ | 897/1000 [3:31:29<24:17, 14.15s/it][Succeeded / Failed / Skipped / Total] 795 / 72 / 30 / 897:  90%|████████▉ | 898/1000 [3:31:32<24:01, 14.13s/it][Succeeded / Failed / Skipped / Total] 796 / 72 / 30 / 898:  90%|████████▉ | 898/1000 [3:31:32<24:01, 14.13s/it][Succeeded / Failed / Skipped / Total] 796 / 72 / 30 / 898:  90%|████████▉ | 899/1000 [3:31:41<23:46, 14.13s/it][Succeeded / Failed / Skipped / Total] 797 / 72 / 30 / 899:  90%|████████▉ | 899/1000 [3:31:41<23:46, 14.13s/it][Succeeded / Failed / Skipped / Total] 797 / 72 / 30 / 899:  90%|█████████ | 900/1000 [3:31:49<23:32, 14.12s/it][Succeeded / Failed / Skipped / Total] 798 / 72 / 30 / 900:  90%|█████████ | 900/1000 [3:31:49<23:32, 14.12s/it][Succeeded / Failed / Skipped / Total] 798 / 72 / 30 / 900:  90%|█████████ | 901/1000 [3:31:50<23:16, 14.11s/it][Succeeded / Failed / Skipped / Total] 799 / 72 / 30 / 901:  90%|█████████ | 901/1000 [3:31:50<23:16, 14.11s/it][Succeeded / Failed / Skipped / Total] 799 / 72 / 30 / 901:  90%|█████████ | 902/1000 [3:32:35<23:05, 14.14s/it][Succeeded / Failed / Skipped / Total] 800 / 72 / 30 / 902:  90%|█████████ | 902/1000 [3:32:35<23:05, 14.14s/it][Succeeded / Failed / Skipped / Total] 800 / 72 / 30 / 902:  90%|█████████ | 903/1000 [3:32:55<22:52, 14.15s/it][Succeeded / Failed / Skipped / Total] 801 / 72 / 30 / 903:  90%|█████████ | 903/1000 [3:32:55<22:52, 14.15s/it][Succeeded / Failed / Skipped / Total] 801 / 72 / 30 / 903:  90%|█████████ | 904/1000 [3:32:59<22:37, 14.14s/it]Receives messages from the specified EmailFilter . --> Receives messages from EmailFilter --> Socre: 1.0

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[messages]] ; try { if ( filter == null ) { [[messages]] = folder . getMessages ( ) ; } else { [[messages]] = folder . search ( filter . getSearchTerm ( ) ) ; } if ( [[messages]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[messages]] , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[charleroi]] ; try { if ( filter == null ) { [[charleroi]] = folder . getMessages ( ) ; } else { [[charleroi]] = folder . search ( filter . getSearchTerm ( ) ) ; } if ( [[charleroi]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[charleroi]] , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 896 ---------------------------------------------
Returns the integer value for the given key . --> Retrieve a number --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getInteger]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[brochures]] ( final String [[uninhabited]] ) { Number number = ( Number ) map . get ( [[uninhabited]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Update the received email flags . --> Traill for messages --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[hillside]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 898 ---------------------------------------------
Returns the alias of the given target . --> Get the link to the given target --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[ejector]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 899 ---------------------------------------------
Validate action . --> iowa Module method --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[iowa]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 900 ---------------------------------------------
Sets the mime type . --> Sets the raw data of this object . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[mimeOrExtension]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String [[clyde]] ) { if ( [[clyde]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[clyde]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[clyde]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 901 ---------------------------------------------
Look up a named named parameter . --> Return null if not found --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[weaken]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 902 ---------------------------------------------
Adds a new violation . --> Add a validator --> Socre: 1.0

[[[[Adv]]]]: protected void addViolation ( final String [[name]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void addViolation ( final String [[buoyancy]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[buoyancy]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 903 ---------------------------------------------
Set the content of the file to downloadable . --> region > downloadFileName --> Socre: 1.0

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String downloadFileName ) { this . downloadFileName = downloadFileName ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[manmohan]] ( final String downloadFileName ) { this . downloadFileName = downloadFileName ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 904 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 802 / 72 / 30 / 904:  90%|█████████ | 904/1000 [3:32:59<22:37, 14.14s/it][Succeeded / Failed / Skipped / Total] 802 / 72 / 30 / 904:  90%|█████████ | 905/1000 [3:32:59<22:21, 14.12s/it][Succeeded / Failed / Skipped / Total] 802 / 73 / 30 / 905:  90%|█████████ | 905/1000 [3:32:59<22:21, 14.12s/it][Succeeded / Failed / Skipped / Total] 802 / 73 / 30 / 905:  91%|█████████ | 906/1000 [3:33:00<22:05, 14.11s/it][Succeeded / Failed / Skipped / Total] 802 / 73 / 31 / 906:  91%|█████████ | 906/1000 [3:33:00<22:05, 14.11s/it][Succeeded / Failed / Skipped / Total] 802 / 73 / 31 / 906:  91%|█████████ | 907/1000 [3:33:05<21:50, 14.10s/it][Succeeded / Failed / Skipped / Total] 803 / 73 / 31 / 907:  91%|█████████ | 907/1000 [3:33:05<21:50, 14.10s/it][Succeeded / Failed / Skipped / Total] 803 / 73 / 31 / 907:  91%|█████████ | 908/1000 [3:33:12<21:36, 14.09s/it][Succeeded / Failed / Skipped / Total] 804 / 73 / 31 / 908:  91%|█████████ | 908/1000 [3:33:12<21:36, 14.09s/it][Succeeded / Failed / Skipped / Total] 804 / 73 / 31 / 908:  91%|█████████ | 909/1000 [3:33:19<21:21, 14.08s/it][Succeeded / Failed / Skipped / Total] 805 / 73 / 31 / 909:  91%|█████████ | 909/1000 [3:33:19<21:21, 14.08s/it][Succeeded / Failed / Skipped / Total] 805 / 73 / 31 / 909:  91%|█████████ | 910/1000 [3:33:21<21:06, 14.07s/it][Succeeded / Failed / Skipped / Total] 806 / 73 / 31 / 910:  91%|█████████ | 910/1000 [3:33:21<21:06, 14.07s/it][Succeeded / Failed / Skipped / Total] 806 / 73 / 31 / 910:  91%|█████████ | 911/1000 [3:33:27<20:51, 14.06s/it][Succeeded / Failed / Skipped / Total] 807 / 73 / 31 / 911:  91%|█████████ | 911/1000 [3:33:27<20:51, 14.06s/it][Succeeded / Failed / Skipped / Total] 807 / 73 / 31 / 911:  91%|█████████ | 912/1000 [3:33:36<20:36, 14.05s/it][Succeeded / Failed / Skipped / Total] 808 / 73 / 31 / 912:  91%|█████████ | 912/1000 [3:33:36<20:36, 14.05s/it][Succeeded / Failed / Skipped / Total] 808 / 73 / 31 / 912:  91%|█████████▏| 913/1000 [3:33:40<20:21, 14.04s/it]Close folder --> Close the feria --> Socre: 1.0

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder [[feria]] ) { if ( [[feria]] != null ) { try { [[feria]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 905 ---------------------------------------------
Returns the string value associated with the key . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[hellhole]] ( final String [[choi]] ) { CharSequence cs = ( CharSequence ) map . get ( [[choi]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 906 ---------------------------------------------
Create the proxy --> [[[SKIPPED]]]

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 907 ---------------------------------------------
Gets the target . --> Sets the devotional --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[devotional]] ( final InputStream [[reintroduce]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[reintroduce]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 908 ---------------------------------------------
Create a new instance of the class . --> Get this Proxetta object --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[kublai]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 909 ---------------------------------------------
Process the target class . --> If targetInputStream is null throws an exception --> Socre: 1.0

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[guzzler]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 910 ---------------------------------------------
Defines the class . --> Define the proxy --> Socre: 1.0

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] [[bytes]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[bytes]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[bytes]] , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] [[venables]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[venables]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[venables]] , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 911 ---------------------------------------------
Appends to this address . --> Create a new EmailAddress --> Socre: 1.0

[[[[Adv]]]]: public T to ( final EmailAddress to ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T to ( final EmailAddress to ) { this . [[lacy]] = ArraysUtil . append ( this . [[lacy]] , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 912 ---------------------------------------------
Create a new EmailAddress . --> Create a EmailAddress --> Socre: 1.0

[[[[Adv]]]]: public T to ( final String [[personalName]] , final String to ) { return to ( new EmailAddress ( [[personalName]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T to ( final String [[badajoz]] , final String to ) { return to ( new EmailAddress ( [[badajoz]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 913 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 809 / 73 / 31 / 913:  91%|█████████▏| 913/1000 [3:33:40<20:21, 14.04s/it][Succeeded / Failed / Skipped / Total] 809 / 73 / 31 / 913:  91%|█████████▏| 914/1000 [3:33:43<20:06, 14.03s/it][Succeeded / Failed / Skipped / Total] 810 / 73 / 31 / 914:  91%|█████████▏| 914/1000 [3:33:43<20:06, 14.03s/it][Succeeded / Failed / Skipped / Total] 810 / 73 / 31 / 914:  92%|█████████▏| 915/1000 [3:33:45<19:51, 14.02s/it][Succeeded / Failed / Skipped / Total] 811 / 73 / 31 / 915:  92%|█████████▏| 915/1000 [3:33:45<19:51, 14.02s/it][Succeeded / Failed / Skipped / Total] 811 / 73 / 31 / 915:  92%|█████████▏| 916/1000 [3:34:00<19:37, 14.02s/it][Succeeded / Failed / Skipped / Total] 812 / 73 / 31 / 916:  92%|█████████▏| 916/1000 [3:34:00<19:37, 14.02s/it][Succeeded / Failed / Skipped / Total] 812 / 73 / 31 / 916:  92%|█████████▏| 917/1000 [3:34:03<19:22, 14.01s/it][Succeeded / Failed / Skipped / Total] 812 / 74 / 31 / 917:  92%|█████████▏| 917/1000 [3:34:03<19:22, 14.01s/it][Succeeded / Failed / Skipped / Total] 812 / 74 / 31 / 917:  92%|█████████▏| 918/1000 [3:34:13<19:08, 14.00s/it][Succeeded / Failed / Skipped / Total] 813 / 74 / 31 / 918:  92%|█████████▏| 918/1000 [3:34:13<19:08, 14.00s/it][Succeeded / Failed / Skipped / Total] 813 / 74 / 31 / 918:  92%|█████████▏| 919/1000 [3:34:17<18:53, 13.99s/it][Succeeded / Failed / Skipped / Total] 814 / 74 / 31 / 919:  92%|█████████▏| 919/1000 [3:34:17<18:53, 13.99s/it][Succeeded / Failed / Skipped / Total] 814 / 74 / 31 / 919:  92%|█████████▏| 920/1000 [3:34:31<18:39, 13.99s/it][Succeeded / Failed / Skipped / Total] 815 / 74 / 31 / 920:  92%|█████████▏| 920/1000 [3:34:31<18:39, 13.99s/it][Succeeded / Failed / Skipped / Total] 815 / 74 / 31 / 920:  92%|█████████▏| 921/1000 [3:35:07<18:27, 14.01s/it]Convenience method for creating a EmailAddress . --> Create a EmailAddress --> Socre: 1.0

[[[[Adv]]]]: public T from ( final String personalName , final String [[from]] ) { return from ( new EmailAddress ( personalName , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T from ( final String personalName , final String [[fritters]] ) { return from ( new EmailAddress ( personalName , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 914 ---------------------------------------------
Returns the value of the given REPLACEME0 . --> Set the address at the end --> Socre: 1.0

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[actresses]] = ArraysUtil . join ( this . [[actresses]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 915 ---------------------------------------------
Writes the debug folder to the debug folder . --> impl of debugFolder --> Socre: 1.0

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String [[fileName]] = proxyClassName ; if ( [[fileName]] == null ) { [[fileName]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[fileName]] += ".class" ; File file = new File ( debugFolder , [[fileName]] ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String [[jammers]] = proxyClassName ; if ( [[jammers]] == null ) { [[jammers]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[jammers]] += ".class" ; File file = new File ( debugFolder , [[jammers]] ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 916 ---------------------------------------------
Sets the cc address . --> Resolves the specified EmailAddress --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[climbs]] ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 917 ---------------------------------------------
Returns the value of the specified key . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] val = ( [[T]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[siddiqui]] > [[siddiqui]] getValue ( final String key ) { [[siddiqui]] val = ( [[siddiqui]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[siddiqui]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[siddiqui]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 918 ---------------------------------------------
Returns the value of the given property . --> Get trattoria by name --> Socre: 1.0

[[[[Adv]]]]: public static String get ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( name ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return defaultValue ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String get ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String [[trattoria]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[trattoria]] = System . getProperty ( name ) ; } else { [[trattoria]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[trattoria]] == null ) { return defaultValue ; } return [[trattoria]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 919 ---------------------------------------------
Gets the target object . --> Get the stream --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[agrees]] ( final String [[oshima]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[oshima]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[oshima]] ) ; } targetClassName = [[oshima]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[oshima]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 920 ---------------------------------------------
Get long int value . --> Get a long value from a string --> Socre: 1.0

[[[[Adv]]]]: public static long [[getInt]] ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[betina]] ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
[Succeeded / Failed / Skipped / Total] 815 / 75 / 31 / 921:  92%|█████████▏| 921/1000 [3:35:07<18:27, 14.01s/it][Succeeded / Failed / Skipped / Total] 815 / 75 / 31 / 921:  92%|█████████▏| 922/1000 [3:35:12<18:12, 14.01s/it][Succeeded / Failed / Skipped / Total] 816 / 75 / 31 / 922:  92%|█████████▏| 922/1000 [3:35:12<18:12, 14.01s/it][Succeeded / Failed / Skipped / Total] 816 / 75 / 31 / 922:  92%|█████████▏| 923/1000 [3:35:17<17:57, 13.99s/it][Succeeded / Failed / Skipped / Total] 816 / 76 / 31 / 923:  92%|█████████▏| 923/1000 [3:35:17<17:57, 13.99s/it][Succeeded / Failed / Skipped / Total] 816 / 76 / 31 / 923:  92%|█████████▏| 924/1000 [3:35:22<17:42, 13.99s/it][Succeeded / Failed / Skipped / Total] 817 / 76 / 31 / 924:  92%|█████████▏| 924/1000 [3:35:22<17:42, 13.99s/it][Succeeded / Failed / Skipped / Total] 817 / 76 / 31 / 924:  92%|█████████▎| 925/1000 [3:35:41<17:29, 13.99s/it][Succeeded / Failed / Skipped / Total] 818 / 76 / 31 / 925:  92%|█████████▎| 925/1000 [3:35:41<17:29, 13.99s/it][Succeeded / Failed / Skipped / Total] 818 / 76 / 31 / 925:  93%|█████████▎| 926/1000 [3:36:03<17:15, 14.00s/it][Succeeded / Failed / Skipped / Total] 819 / 76 / 31 / 926:  93%|█████████▎| 926/1000 [3:36:03<17:15, 14.00s/it][Succeeded / Failed / Skipped / Total] 819 / 76 / 31 / 926:  93%|█████████▎| 927/1000 [3:36:23<17:02, 14.01s/it][Succeeded / Failed / Skipped / Total] 819 / 77 / 31 / 927:  93%|█████████▎| 927/1000 [3:36:23<17:02, 14.01s/it][Succeeded / Failed / Skipped / Total] 819 / 77 / 31 / 927:  93%|█████████▎| 928/1000 [3:36:24<16:47, 13.99s/it][Succeeded / Failed / Skipped / Total] 819 / 78 / 31 / 928:  93%|█████████▎| 928/1000 [3:36:24<16:47, 13.99s/it][Succeeded / Failed / Skipped / Total] 819 / 78 / 31 / 928:  93%|█████████▎| 929/1000 [3:37:32<16:37, 14.05s/it]--------------------------------------------- Result 921 ---------------------------------------------
Write Uploadable to OutputStream . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 922 ---------------------------------------------
Add a html message . --> Add a new EmailMessage --> Socre: 1.0

[[[[Adv]]]]: public T htmlMessage ( final String [[html]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T htmlMessage ( final String [[acclaimed]] , final String [[bueller]] ) { return message ( new EmailMessage ( [[acclaimed]] , MimeTypes . MIME_TEXT_HTML , [[bueller]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 923 ---------------------------------------------
Write the content to the writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void writeTo ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 924 ---------------------------------------------
Set text message . --> textual messages --> Socre: 1.0

[[[[Adv]]]]: public T textMessage ( final String [[text]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T textMessage ( final String [[worshipping]] , final String [[magnum]] ) { return message ( new EmailMessage ( [[worshipping]] , MimeTypes . MIME_TEXT_PLAIN , [[magnum]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 925 ---------------------------------------------
Adds a header . --> Create a aeschylus --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String name , final String [[value]] ) { headers . put ( name , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[aeschylus]] ( final String name , final String [[rectangle]] ) { headers . put ( name , [[rectangle]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 926 ---------------------------------------------
Serialize key value to current path --> Serialize the current path to the current context --> Socre: 1.0

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext [[jsonContext]] , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && [[jsonContext]] . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext [[rhumba]] , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && [[rhumba]] . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 927 ---------------------------------------------
Returns the resolved parameters . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[bootstraps]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 928 ---------------------------------------------
Gets the target class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[pipsqueak]] ( final Class [[regarding]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[regarding]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[regarding]] . getName ( ) ) ; } targetClass = [[regarding]] ; targetClassName = [[regarding]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[regarding]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 929 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 820 / 78 / 31 / 929:  93%|█████████▎| 929/1000 [3:37:32<16:37, 14.05s/it][Succeeded / Failed / Skipped / Total] 820 / 78 / 31 / 929:  93%|█████████▎| 930/1000 [3:37:39<16:22, 14.04s/it][Succeeded / Failed / Skipped / Total] 821 / 78 / 31 / 930:  93%|█████████▎| 930/1000 [3:37:39<16:22, 14.04s/it][Succeeded / Failed / Skipped / Total] 821 / 78 / 31 / 930:  93%|█████████▎| 931/1000 [3:37:47<16:08, 14.04s/it][Succeeded / Failed / Skipped / Total] 822 / 78 / 31 / 931:  93%|█████████▎| 931/1000 [3:37:47<16:08, 14.04s/it][Succeeded / Failed / Skipped / Total] 822 / 78 / 31 / 931:  93%|█████████▎| 932/1000 [3:38:12<15:55, 14.05s/it][Succeeded / Failed / Skipped / Total] 823 / 78 / 31 / 932:  93%|█████████▎| 932/1000 [3:38:12<15:55, 14.05s/it][Succeeded / Failed / Skipped / Total] 823 / 78 / 31 / 932:  93%|█████████▎| 933/1000 [3:38:20<15:40, 14.04s/it][Succeeded / Failed / Skipped / Total] 824 / 78 / 31 / 933:  93%|█████████▎| 933/1000 [3:38:20<15:40, 14.04s/it][Succeeded / Failed / Skipped / Total] 824 / 78 / 31 / 933:  93%|█████████▎| 934/1000 [3:38:30<15:26, 14.04s/it][Succeeded / Failed / Skipped / Total] 825 / 78 / 31 / 934:  93%|█████████▎| 934/1000 [3:38:30<15:26, 14.04s/it][Succeeded / Failed / Skipped / Total] 825 / 78 / 31 / 934:  94%|█████████▎| 935/1000 [3:38:34<15:11, 14.03s/it][Succeeded / Failed / Skipped / Total] 826 / 78 / 31 / 935:  94%|█████████▎| 935/1000 [3:38:34<15:11, 14.03s/it][Succeeded / Failed / Skipped / Total] 826 / 78 / 31 / 935:  94%|█████████▎| 936/1000 [3:38:38<14:57, 14.02s/it][Succeeded / Failed / Skipped / Total] 827 / 78 / 31 / 936:  94%|█████████▎| 936/1000 [3:38:38<14:57, 14.02s/it][Succeeded / Failed / Skipped / Total] 827 / 78 / 31 / 936:  94%|█████████▎| 937/1000 [3:38:45<14:42, 14.01s/it][Succeeded / Failed / Skipped / Total] 828 / 78 / 31 / 937:  94%|█████████▎| 937/1000 [3:38:45<14:42, 14.01s/it][Succeeded / Failed / Skipped / Total] 828 / 78 / 31 / 937:  94%|█████████▍| 938/1000 [3:38:46<14:27, 13.99s/it]Get the dot number of slash in the string . --> return - 1 if no separator is found --> Socre: 1.0

[[[[Adv]]]]: public static int lastIndexOfSlashDot ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[slashNdx]] ) ; if ( dotNdx == - 1 ) { if ( [[slashNdx]] == - 1 ) { return - 1 ; } [[slashNdx]] ++ ; if ( [[slashNdx]] < str . length ( ) - 1 ) { dotNdx = [[slashNdx]] ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int lastIndexOfSlashDot ( final String str ) { int [[freeway]] = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[freeway]] ) ; if ( dotNdx == - 1 ) { if ( [[freeway]] == - 1 ) { return - 1 ; } [[freeway]] ++ ; if ( [[freeway]] < str . length ( ) - 1 ) { dotNdx = [[freeway]] ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 930 ---------------------------------------------
Lookup an alias . --> Lookup the vipassana --> Socre: 1.0

[[[[Adv]]]]: protected String lookupAlias ( final String [[alias]] ) { String value = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( value == null ) { ActionRuntime [[cfg]] = actionsManager . lookup ( [[alias]] ) ; if ( [[cfg]] != null ) { value = [[cfg]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String lookupAlias ( final String [[vipassana]] ) { String value = actionsManager . lookupPathAlias ( [[vipassana]] ) ; if ( value == null ) { ActionRuntime [[kublai]] = actionsManager . lookup ( [[vipassana]] ) ; if ( [[kublai]] != null ) { value = [[kublai]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 931 ---------------------------------------------
Removes the last camel word from the name . --> Strip the lastWord --> Socre: 1.0

[[[[Adv]]]]: public static String stripLastCamelWord ( String [[name]] ) { int ndx = [[name]] . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( [[name]] . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { [[name]] = [[name]] . substring ( 0 , ndx ) ; } return [[name]] ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String stripLastCamelWord ( String [[anglia]] ) { int ndx = [[anglia]] . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( [[anglia]] . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { [[anglia]] = [[anglia]] . substring ( 0 , ndx ) ; } return [[anglia]] ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 932 ---------------------------------------------
Resolves path string . --> taiwan entry --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String path , final String [[value]] ) { final ResultPath resultPath = resolveResultPath ( path , [[value]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[taiwanese]] ( final String path , final String [[sedition]] ) { final ResultPath resultPath = resolveResultPath ( path , [[sedition]] ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 933 ---------------------------------------------
Resolve column descriptors . --> Liefert den ColumnNamingStrategy --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[launderette]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 934 ---------------------------------------------
Get long value . --> Return the value of the given name and dun --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long [[defaultValue]] ) { String value = get ( name ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[andorra]] ( final String name , final long [[dun]] ) { String value = get ( name ) ; if ( value == null ) { return [[dun]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return [[dun]] ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 935 ---------------------------------------------
Gets the index of the last slash in the given string . --> misspent a string --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; [[slashNdx]] ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[misspent]] ( final String str ) { int [[flame]] = str . lastIndexOf ( ' ' ) ; [[flame]] ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[flame]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 936 ---------------------------------------------
Computes the coordinate space . --> d = d --> Socre: 1.0

[[[[Adv]]]]: private void mix ( final int [[j]] , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void mix ( final int [[beaky]] , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ [[beaky]] ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 937 ---------------------------------------------
Start a demix . --> Start a demix --> Socre: 1.0

[[[[Adv]]]]: private void demix ( final int [[j]] , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void demix ( final int [[burroughs]] , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ [[burroughs]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
[Succeeded / Failed / Skipped / Total] 829 / 78 / 31 / 938:  94%|█████████▍| 938/1000 [3:38:46<14:27, 13.99s/it][Succeeded / Failed / Skipped / Total] 829 / 78 / 31 / 938:  94%|█████████▍| 939/1000 [3:38:54<14:13, 13.99s/it][Succeeded / Failed / Skipped / Total] 830 / 78 / 31 / 939:  94%|█████████▍| 939/1000 [3:38:54<14:13, 13.99s/it][Succeeded / Failed / Skipped / Total] 830 / 78 / 31 / 939:  94%|█████████▍| 940/1000 [3:38:55<13:58, 13.97s/it][Succeeded / Failed / Skipped / Total] 831 / 78 / 31 / 940:  94%|█████████▍| 940/1000 [3:38:55<13:58, 13.97s/it][Succeeded / Failed / Skipped / Total] 831 / 78 / 31 / 940:  94%|█████████▍| 941/1000 [3:38:55<13:43, 13.96s/it][Succeeded / Failed / Skipped / Total] 831 / 78 / 32 / 941:  94%|█████████▍| 941/1000 [3:38:55<13:43, 13.96s/it][Succeeded / Failed / Skipped / Total] 831 / 78 / 32 / 941:  94%|█████████▍| 942/1000 [3:39:09<13:29, 13.96s/it][Succeeded / Failed / Skipped / Total] 832 / 78 / 32 / 942:  94%|█████████▍| 942/1000 [3:39:09<13:29, 13.96s/it][Succeeded / Failed / Skipped / Total] 832 / 78 / 32 / 942:  94%|█████████▍| 943/1000 [3:39:22<13:15, 13.96s/it][Succeeded / Failed / Skipped / Total] 833 / 78 / 32 / 943:  94%|█████████▍| 943/1000 [3:39:22<13:15, 13.96s/it][Succeeded / Failed / Skipped / Total] 833 / 78 / 32 / 943:  94%|█████████▍| 944/1000 [3:39:26<13:01, 13.95s/it][Succeeded / Failed / Skipped / Total] 834 / 78 / 32 / 944:  94%|█████████▍| 944/1000 [3:39:26<13:01, 13.95s/it][Succeeded / Failed / Skipped / Total] 834 / 78 / 32 / 944:  94%|█████████▍| 945/1000 [3:39:32<12:46, 13.94s/it][Succeeded / Failed / Skipped / Total] 835 / 78 / 32 / 945:  94%|█████████▍| 945/1000 [3:39:32<12:46, 13.94s/it][Succeeded / Failed / Skipped / Total] 835 / 78 / 32 / 945:  95%|█████████▍| 946/1000 [3:40:11<12:34, 13.97s/it][Succeeded / Failed / Skipped / Total] 836 / 78 / 32 / 946:  95%|█████████▍| 946/1000 [3:40:11<12:34, 13.97s/it][Succeeded / Failed / Skipped / Total] 836 / 78 / 32 / 946:  95%|█████████▍| 947/1000 [3:40:26<12:20, 13.97s/it][Succeeded / Failed / Skipped / Total] 837 / 78 / 32 / 947:  95%|█████████▍| 947/1000 [3:40:26<12:20, 13.97s/it][Succeeded / Failed / Skipped / Total] 837 / 78 / 32 / 947:  95%|█████████▍| 948/1000 [3:40:32<12:05, 13.96s/it]--------------------------------------------- Result 938 ---------------------------------------------
Increments key execution . --> benchwarmers --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[benchwarmers]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 939 ---------------------------------------------
Initializes the Message . --> Initialize tweak1 and tweak2 --> Socre: 1.0

[[[[Adv]]]]: public void init ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] [[tweak]] = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; init ( bytesToLongs ( key ) , [[tweak]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void init ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] [[abdo]] = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; init ( bytesToLongs ( key ) , [[abdo]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 940 ---------------------------------------------
Calculates the encrypted block --> Encrypt the content --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] [[encryptedBlock]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , [[encryptedBlock]] ) ; return longsToBytes ( [[encryptedBlock]] ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] [[home]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , [[home]] ) ; return longsToBytes ( [[home]] ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 941 ---------------------------------------------
Removes any lower case --> [[[SKIPPED]]]

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 942 ---------------------------------------------
Resolve an alias . --> kdk - 1 --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder [[result]] = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[kdk]] ( final String value ) { final StringBuilder [[sha]] = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 943 ---------------------------------------------
Returns the result path . --> Gets a ResultPath for buant --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String [[path]] , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[buoyant]] ( String [[gina]] , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 944 ---------------------------------------------
Get a boolean value . --> Get the disapproves for the given ripcord --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBoolean ( final String [[name]] , final boolean defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return "[[True]]" == "[[True]]" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean getBoolean ( final String [[ripcord]] , final boolean defaultValue ) { String [[disapproves]] = get ( [[ripcord]] ) ; if ( [[disapproves]] == null ) { return defaultValue ; } [[disapproves]] = [[disapproves]] . trim ( ) . toLowerCase ( ) ; switch ( [[disapproves]] ) { case "true" : case "yes" : case "1" : case "on" : return "[[Contributions]]" == "[[Contributions]]" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 945 ---------------------------------------------
Ungzip a file . --> Ungzip a file --> Socre: 1.0

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String [[outFileName]] = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( [[outFileName]] ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String [[centennial]] = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( [[centennial]] ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 946 ---------------------------------------------
Init parameter . --> Initial HMAC method --> Socre: 1.0

[[[[Adv]]]]: public void init ( final long [ ] [[key]] , final long [ ] tweak ) { final int [[newNw]] = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void init ( final long [ ] [[uf]] , final long [ ] tweak ) { final int [[tonsillitis]] = [[uf]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 947 ---------------------------------------------
Returns the path to the target . --> Get the current POS tag --> Socre: 1.0

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[gregson]] ( ) { if ( methref != null ) { final String [[jacque]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[jacque]] ; } return [[gregson]] ; }
[[[[Nl]]]]: Returns path value .
[Succeeded / Failed / Skipped / Total] 838 / 78 / 32 / 948:  95%|█████████▍| 948/1000 [3:40:32<12:05, 13.96s/it][Succeeded / Failed / Skipped / Total] 838 / 78 / 32 / 948:  95%|█████████▍| 949/1000 [3:40:54<11:52, 13.97s/it][Succeeded / Failed / Skipped / Total] 839 / 78 / 32 / 949:  95%|█████████▍| 949/1000 [3:40:54<11:52, 13.97s/it][Succeeded / Failed / Skipped / Total] 839 / 78 / 32 / 949:  95%|█████████▌| 950/1000 [3:40:57<11:37, 13.95s/it][Succeeded / Failed / Skipped / Total] 840 / 78 / 32 / 950:  95%|█████████▌| 950/1000 [3:40:57<11:37, 13.95s/it][Succeeded / Failed / Skipped / Total] 840 / 78 / 32 / 950:  95%|█████████▌| 951/1000 [3:42:18<11:27, 14.03s/it][Succeeded / Failed / Skipped / Total] 841 / 78 / 32 / 951:  95%|█████████▌| 951/1000 [3:42:18<11:27, 14.03s/it][Succeeded / Failed / Skipped / Total] 841 / 78 / 32 / 951:  95%|█████████▌| 952/1000 [3:42:21<11:12, 14.01s/it][Succeeded / Failed / Skipped / Total] 842 / 78 / 32 / 952:  95%|█████████▌| 952/1000 [3:42:21<11:12, 14.01s/it][Succeeded / Failed / Skipped / Total] 842 / 78 / 32 / 952:  95%|█████████▌| 953/1000 [3:44:33<11:04, 14.14s/it][Succeeded / Failed / Skipped / Total] 843 / 78 / 32 / 953:  95%|█████████▌| 953/1000 [3:44:33<11:04, 14.14s/it][Succeeded / Failed / Skipped / Total] 843 / 78 / 32 / 953:  95%|█████████▌| 954/1000 [3:44:36<10:49, 14.13s/it][Succeeded / Failed / Skipped / Total] 844 / 78 / 32 / 954:  95%|█████████▌| 954/1000 [3:44:36<10:49, 14.13s/it][Succeeded / Failed / Skipped / Total] 844 / 78 / 32 / 954:  96%|█████████▌| 955/1000 [3:45:03<10:36, 14.14s/it]--------------------------------------------- Result 948 ---------------------------------------------
gzipes a file . --> gzipes radial --> Socre: 1.0

[[[[Adv]]]]: public static File gzip ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; String gzipName = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File gzip ( final File [[radial]] ) throws IOException { if ( [[radial]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[radial]] ) ; String gzipName = [[radial]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 949 ---------------------------------------------
Convert a byte array to a long array . --> douchebag --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] bytesToLongs ( final byte [ ] [[ba]] , final int offset , final int size ) { long [ ] [[result]] = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < [[result]] . length ; i ++ ) { [[result]] [ i ] = Bits . getLong ( [[ba]] , i8 ) ; i8 += 8 ; } return [[result]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] bytesToLongs ( final byte [ ] [[douchebag]] , final int offset , final int size ) { long [ ] [[blushes]] = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < [[blushes]] . length ; i ++ ) { [[blushes]] [ i ] = Bits . getLong ( [[douchebag]] , i8 ) ; i8 += 8 ; } return [[blushes]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 950 ---------------------------------------------
Get zlib file . --> Krysta ein --> Socre: 1.0

[[[[Adv]]]]: public static File [[zlib]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater [[deflater]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , [[deflater]] ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[krysta]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater [[watchdogs]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , [[watchdogs]] ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 951 ---------------------------------------------
Get the index of the dot after slash . --> undulating = 0 --> Socre: 1.0

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; if ( [[slashNdx]] == - 1 ) { [[slashNdx]] = 0 ; } return [[str]] . indexOf ( ' ' , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[undulating]] ( final String [[goodson]] ) { int [[cheeks]] = [[goodson]] . lastIndexOf ( ' ' ) ; if ( [[cheeks]] == - 1 ) { [[cheeks]] = 0 ; } return [[goodson]] . indexOf ( ' ' , [[cheeks]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 952 ---------------------------------------------
Unzip a file . --> Unzip files --> Socre: 1.0

[[[[Adv]]]]: public static void unzip ( final String [[zipFile]] , final String [[destDir]] , final String ... patterns ) throws IOException { unzip ( new File ( [[zipFile]] ) , new File ( [[destDir]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String [[meteoric]] , final String [[benita]] , final String ... patterns ) throws IOException { unzip ( new File ( [[meteoric]] ) , new File ( [[benita]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 953 ---------------------------------------------
Sets the bundle name . --> dinger --> Socre: 1.0

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[dinger]] ( final ServletRequest [[bucharest]] , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } [[bucharest]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 954 ---------------------------------------------
Returns a list of all the entries in the specified zip file . --> Get the list of all the jar files --> Socre: 1.0

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File [[zipFile]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String [[entryName]] = entry . getName ( ) ; entries . add ( [[entryName]] ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[dorchester]] ( final File [[jordy]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[jordy]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String [[hamptons]] = entry . getName ( ) ; entries . add ( [[hamptons]] ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 955 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 844 / 79 / 32 / 955:  96%|█████████▌| 955/1000 [3:45:03<10:36, 14.14s/it][Succeeded / Failed / Skipped / Total] 844 / 79 / 32 / 955:  96%|█████████▌| 956/1000 [3:45:32<10:22, 14.16s/it][Succeeded / Failed / Skipped / Total] 845 / 79 / 32 / 956:  96%|█████████▌| 956/1000 [3:45:32<10:22, 14.16s/it][Succeeded / Failed / Skipped / Total] 845 / 79 / 32 / 956:  96%|█████████▌| 957/1000 [3:45:53<10:08, 14.16s/it][Succeeded / Failed / Skipped / Total] 846 / 79 / 32 / 957:  96%|█████████▌| 957/1000 [3:45:53<10:08, 14.16s/it][Succeeded / Failed / Skipped / Total] 846 / 79 / 32 / 957:  96%|█████████▌| 958/1000 [3:46:21<09:55, 14.18s/it][Succeeded / Failed / Skipped / Total] 847 / 79 / 32 / 958:  96%|█████████▌| 958/1000 [3:46:21<09:55, 14.18s/it][Succeeded / Failed / Skipped / Total] 847 / 79 / 32 / 958:  96%|█████████▌| 959/1000 [3:46:44<09:41, 14.19s/it][Succeeded / Failed / Skipped / Total] 848 / 79 / 32 / 959:  96%|█████████▌| 959/1000 [3:46:44<09:41, 14.19s/it][Succeeded / Failed / Skipped / Total] 848 / 79 / 32 / 959:  96%|█████████▌| 960/1000 [3:47:05<09:27, 14.19s/it][Succeeded / Failed / Skipped / Total] 848 / 80 / 32 / 960:  96%|█████████▌| 960/1000 [3:47:05<09:27, 14.19s/it][Succeeded / Failed / Skipped / Total] 848 / 80 / 32 / 960:  96%|█████████▌| 961/1000 [3:48:13<09:15, 14.25s/it][Succeeded / Failed / Skipped / Total] 848 / 81 / 32 / 961:  96%|█████████▌| 961/1000 [3:48:13<09:15, 14.25s/it][Succeeded / Failed / Skipped / Total] 848 / 81 / 32 / 961:  96%|█████████▌| 962/1000 [3:48:31<09:01, 14.25s/it][Succeeded / Failed / Skipped / Total] 848 / 82 / 32 / 962:  96%|█████████▌| 962/1000 [3:48:31<09:01, 14.25s/it][Succeeded / Failed / Skipped / Total] 848 / 82 / 32 / 962:  96%|█████████▋| 963/1000 [3:48:55<08:47, 14.26s/it]Resolve a schema name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String resolveSchemaName ( final Class < ? > type , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String resolveSchemaName ( final Class < ? > type , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 956 ---------------------------------------------
Adds a list of profiles to the Props . --> region > PropsEntries --> Socre: 1.0

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String [[profile]] : profiles ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[franz]] ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String [[franz]] : profiles ) { addProfiles ( [[franz]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 957 ---------------------------------------------
Reads a big endian long from the given byte array . --> heaviest --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[heaviest]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 958 ---------------------------------------------
Returns the field descriptor . --> Get FieldDescriptor for coquette --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean [[declared]] ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( [[declared]] ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[squabble]] ( final String [[coquette]] , final boolean [[anesthesiology]] ) { final FieldDescriptor [[conditioned]] = getFields ( ) . getFieldDescriptor ( [[coquette]] ) ; if ( [[conditioned]] != null ) { if ( ! [[conditioned]] . matchDeclared ( [[anesthesiology]] ) ) { return null ; } } return [[conditioned]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 959 ---------------------------------------------
Set the locale . --> set the value skoal --> Socre: 1.0

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession session , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale [[locale]] = Locale . forLanguageTag ( [[localeCode]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , [[locale]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[expended]] ( final HttpSession session , final String [[skoal]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[skoal]] ) ; } Locale [[maam]] = Locale . forLanguageTag ( [[skoal]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , [[maam]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 960 ---------------------------------------------
Adds a content to a ZIP zip stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 961 ---------------------------------------------
Returns the property descriptor for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String name , final boolean [[declared]] ) { PropertyDescriptor [[propertyDescriptor]] = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( [[propertyDescriptor]] != null ) && [[propertyDescriptor]] . matchDeclared ( [[declared]] ) ) { return [[propertyDescriptor]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[dukakis]] ( final String name , final boolean [[entrusts]] ) { PropertyDescriptor [[schlemmer]] = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( [[schlemmer]] != null ) && [[schlemmer]] . matchDeclared ( [[entrusts]] ) ) { return [[schlemmer]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 962 ---------------------------------------------
Adds a directory to a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
[Succeeded / Failed / Skipped / Total] 849 / 82 / 32 / 963:  96%|█████████▋| 963/1000 [3:48:55<08:47, 14.26s/it][Succeeded / Failed / Skipped / Total] 849 / 82 / 32 / 963:  96%|█████████▋| 964/1000 [3:49:05<08:33, 14.26s/it][Succeeded / Failed / Skipped / Total] 850 / 82 / 32 / 964:  96%|█████████▋| 964/1000 [3:49:05<08:33, 14.26s/it][Succeeded / Failed / Skipped / Total] 850 / 82 / 32 / 964:  96%|█████████▋| 965/1000 [3:49:12<08:18, 14.25s/it][Succeeded / Failed / Skipped / Total] 851 / 82 / 32 / 965:  96%|█████████▋| 965/1000 [3:49:12<08:18, 14.25s/it][Succeeded / Failed / Skipped / Total] 851 / 82 / 32 / 965:  97%|█████████▋| 966/1000 [3:49:50<08:05, 14.28s/it][Succeeded / Failed / Skipped / Total] 852 / 82 / 32 / 966:  97%|█████████▋| 966/1000 [3:49:50<08:05, 14.28s/it][Succeeded / Failed / Skipped / Total] 852 / 82 / 32 / 966:  97%|█████████▋| 967/1000 [3:50:20<07:51, 14.29s/it][Succeeded / Failed / Skipped / Total] 852 / 83 / 32 / 967:  97%|█████████▋| 967/1000 [3:50:20<07:51, 14.29s/it][Succeeded / Failed / Skipped / Total] 852 / 83 / 32 / 967:  97%|█████████▋| 968/1000 [3:50:20<07:36, 14.28s/it][Succeeded / Failed / Skipped / Total] 853 / 83 / 32 / 968:  97%|█████████▋| 968/1000 [3:50:20<07:36, 14.28s/it][Succeeded / Failed / Skipped / Total] 853 / 83 / 32 / 968:  97%|█████████▋| 969/1000 [3:50:28<07:22, 14.27s/it][Succeeded / Failed / Skipped / Total] 854 / 83 / 32 / 969:  97%|█████████▋| 969/1000 [3:50:28<07:22, 14.27s/it][Succeeded / Failed / Skipped / Total] 854 / 83 / 32 / 969:  97%|█████████▋| 970/1000 [3:50:41<07:08, 14.27s/it][Succeeded / Failed / Skipped / Total] 855 / 83 / 32 / 970:  97%|█████████▋| 970/1000 [3:50:41<07:08, 14.27s/it][Succeeded / Failed / Skipped / Total] 855 / 83 / 32 / 970:  97%|█████████▋| 971/1000 [3:50:57<06:53, 14.27s/it]--------------------------------------------- Result 963 ---------------------------------------------
Returns the locale for the session . --> magnanimous given buddha --> Socre: 1.0

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[magnanimous]] ( final HttpSession [[buddha]] ) { Locale [[croissants]] = ( Locale ) [[buddha]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[croissants]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[croissants]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 964 ---------------------------------------------
Returns an array of CtorDescriptor . --> Get the CtorDescriptor array --> Socre: 1.0

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[goners]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 965 ---------------------------------------------
Returns the CtorDescriptor for the specified arguments . --> Get a ctor descriptor --> Socre: 1.0

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] [[arg]] = ctorDescriptor . getParameters ( ) ; if ( [[arg]] . length != args . length ) { continue ; } for ( int j = 0 ; j < [[arg]] . length ; j ++ ) { if ( [[arg]] [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] [[cinderella]] = ctorDescriptor . getParameters ( ) ; if ( [[cinderella]] . length != args . length ) { continue ; } for ( int j = 0 ; j < [[cinderella]] . length ; j ++ ) { if ( [[cinderella]] [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 966 ---------------------------------------------
Gets the request map . --> Get the servlet attributes --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[gladly]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 967 ---------------------------------------------
Filter parameters for bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 968 ---------------------------------------------
Read theBootstrapMethods attribute . --> readBootstrapMethodsAttribute --> Socre: 1.0

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int [[i]] = readUnsignedShort ( currentAttributeOffset - 2 ) ; [[i]] > 0 ; -- [[i]] ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int [[vipassana]] = readUnsignedShort ( currentAttributeOffset - 2 ) ; [[vipassana]] > 0 ; -- [[vipassana]] ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 969 ---------------------------------------------
Initialize the filter . --> Initialize the FilterConfig bull --> Socre: 1.0

[[[[Adv]]]]: @ Override public void init ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void init ( final FilterConfig [[bullshitter]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 970 ---------------------------------------------
On file . --> Adds the given amped to the list . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[amped]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[amped]] ) ; } else { consumers . add ( [[amped]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 971 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 856 / 83 / 32 / 971:  97%|█████████▋| 971/1000 [3:50:57<06:53, 14.27s/it][Succeeded / Failed / Skipped / Total] 856 / 84 / 32 / 972:  97%|█████████▋| 972/1000 [3:50:57<06:39, 14.26s/it][Succeeded / Failed / Skipped / Total] 856 / 84 / 32 / 972:  97%|█████████▋| 973/1000 [3:50:57<06:24, 14.24s/it][Succeeded / Failed / Skipped / Total] 857 / 84 / 32 / 973:  97%|█████████▋| 973/1000 [3:50:57<06:24, 14.24s/it][Succeeded / Failed / Skipped / Total] 858 / 84 / 32 / 974:  97%|█████████▋| 974/1000 [3:51:00<06:09, 14.23s/it][Succeeded / Failed / Skipped / Total] 858 / 84 / 32 / 974:  98%|█████████▊| 975/1000 [3:51:04<05:55, 14.22s/it][Succeeded / Failed / Skipped / Total] 859 / 84 / 32 / 975:  98%|█████████▊| 975/1000 [3:51:04<05:55, 14.22s/it][Succeeded / Failed / Skipped / Total] 860 / 84 / 32 / 976:  98%|█████████▊| 976/1000 [3:51:07<05:41, 14.21s/it][Succeeded / Failed / Skipped / Total] 860 / 84 / 32 / 976:  98%|█████████▊| 977/1000 [3:52:19<05:28, 14.27s/it]Reads the annotation values . --> k - end --> Socre: 1.0

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean [[named]] , final char [ ] [[charBuffer]] ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[kirin]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean [[intermission]] , final char [ ] [[unfriendly]] ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 972 ---------------------------------------------
Reads the labels . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label [[readLabel]] ( final int [[bytecodeOffset]] , final Label [ ] [[labels]] ) { if ( [[labels]] [ [[bytecodeOffset]] ] == null ) { [[labels]] [ [[bytecodeOffset]] ] = new Label ( ) ; } return [[labels]] [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label [[danko]] ( final int [[misgivings]] , final Label [ ] [[katarina]] ) { if ( [[katarina]] [ [[misgivings]] ] == null ) { [[katarina]] [ [[misgivings]] ] = new Label ( ) ; } return [[katarina]] [ [[misgivings]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 973 ---------------------------------------------
Adds a path to the search path . --> Find a FindFile --> Socre: 1.0

[[[[Adv]]]]: public FindFile searchPath ( final URI searchPath ) { File [[file]] ; try { [[file]] = new File ( searchPath ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + searchPath , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile searchPath ( final URI searchPath ) { File [[melancholic]] ; try { [[melancholic]] = new File ( searchPath ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + searchPath , ex ) ; } addPath ( [[melancholic]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 974 ---------------------------------------------
Reads the data from an input stream . --> read data from InputStream to outputStream --> Socre: 1.0

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream [[inputStream]] , final boolean [[close]] ) throws IOException { if ( [[inputStream]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[inputStream]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[close]] ) { [[inputStream]] . [[close]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[dreyer]] ( final InputStream [[ironed]] , final boolean [[insubordination]] ) throws IOException { if ( [[ironed]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[ironed]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[insubordination]] ) { [[ironed]] . [[insubordination]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 975 ---------------------------------------------
convert array to long array --> diss method --> Socre: 1.0

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[dissatisfied]] ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 976 ---------------------------------------------
Reads verification mode . --> read verificationTypeInfo --> Socre: 1.0

[[[[Adv]]]]: private int readVerificationTypeInfo ( final int verificationTypeInfoOffset , final Object [ ] frame , final int [[index]] , final char [ ] charBuffer , final Label [ ] labels ) { int [[currentOffset]] = verificationTypeInfoOffset ; int tag = b [ [[currentOffset]] ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ [[index]] ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ [[index]] ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ [[index]] ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ [[index]] ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ [[index]] ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ [[index]] ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ [[index]] ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ [[index]] ] = readClass ( [[currentOffset]] , charBuffer ) ; [[currentOffset]] += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ [[index]] ] = createLabel ( readUnsignedShort ( [[currentOffset]] ) , labels ) ; [[currentOffset]] += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return [[currentOffset]] ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int readVerificationTypeInfo ( final int verificationTypeInfoOffset , final Object [ ] frame , final int [[fowl]] , final char [ ] charBuffer , final Label [ ] labels ) { int [[flowed]] = verificationTypeInfoOffset ; int tag = b [ [[flowed]] ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ [[fowl]] ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ [[fowl]] ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ [[fowl]] ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ [[fowl]] ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ [[fowl]] ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ [[fowl]] ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ [[fowl]] ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ [[fowl]] ] = readClass ( [[flowed]] , charBuffer ) ; [[flowed]] += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ [[fowl]] ] = createLabel ( readUnsignedShort ( [[flowed]] ) , labels ) ; [[flowed]] += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return [[flowed]] ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
[Succeeded / Failed / Skipped / Total] 861 / 84 / 32 / 977:  98%|█████████▊| 977/1000 [3:52:19<05:28, 14.27s/it][Succeeded / Failed / Skipped / Total] 861 / 84 / 32 / 977:  98%|█████████▊| 978/1000 [3:52:33<05:13, 14.27s/it][Succeeded / Failed / Skipped / Total] 862 / 84 / 32 / 978:  98%|█████████▊| 978/1000 [3:52:33<05:13, 14.27s/it][Succeeded / Failed / Skipped / Total] 862 / 84 / 32 / 978:  98%|█████████▊| 979/1000 [3:52:35<04:59, 14.25s/it][Succeeded / Failed / Skipped / Total] 863 / 84 / 32 / 979:  98%|█████████▊| 979/1000 [3:52:35<04:59, 14.25s/it][Succeeded / Failed / Skipped / Total] 863 / 85 / 32 / 980:  98%|█████████▊| 980/1000 [3:52:35<04:44, 14.24s/it][Succeeded / Failed / Skipped / Total] 863 / 85 / 32 / 980:  98%|█████████▊| 981/1000 [3:52:35<04:30, 14.23s/it][Succeeded / Failed / Skipped / Total] 864 / 85 / 32 / 981:  98%|█████████▊| 981/1000 [3:52:35<04:30, 14.23s/it][Succeeded / Failed / Skipped / Total] 865 / 85 / 32 / 982:  98%|█████████▊| 982/1000 [3:52:36<04:15, 14.21s/it][Succeeded / Failed / Skipped / Total] 865 / 85 / 32 / 982:  98%|█████████▊| 983/1000 [3:52:49<04:01, 14.21s/it][Succeeded / Failed / Skipped / Total] 866 / 85 / 32 / 983:  98%|█████████▊| 983/1000 [3:52:49<04:01, 14.21s/it][Succeeded / Failed / Skipped / Total] 866 / 85 / 32 / 983:  98%|█████████▊| 984/1000 [3:53:47<03:48, 14.26s/it][Succeeded / Failed / Skipped / Total] 867 / 85 / 32 / 984:  98%|█████████▊| 984/1000 [3:53:47<03:48, 14.26s/it][Succeeded / Failed / Skipped / Total] 867 / 85 / 32 / 984:  98%|█████████▊| 985/1000 [3:53:48<03:33, 14.24s/it]--------------------------------------------- Result 977 ---------------------------------------------
Initialize the rules . --> Initialize the rules --> Socre: 1.0

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] [[files]] = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { [[files]] [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( [[files]] ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] [[yang]] = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { [[yang]] [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( [[yang]] ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 978 ---------------------------------------------
Adds a file to the list . --> zana einen zana einen --> Socre: 1.0

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[zana]] ( final File [[matos]] ) { if ( ! [[matos]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[matos]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 979 ---------------------------------------------
Returns the exclude patterns . --> Find all the rules in the given array --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[hendricks]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 980 ---------------------------------------------
Returns type annotation index . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] [[typeAnnotationOffsets]] , final int [[typeAnnotationIndex]] ) { if ( [[typeAnnotationOffsets]] == null || [[typeAnnotationIndex]] >= [[typeAnnotationOffsets]] . length || readByte ( [[typeAnnotationOffsets]] [ [[typeAnnotationIndex]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[typeAnnotationOffsets]] [ [[typeAnnotationIndex]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[dookie]] ( final int [ ] [[misgivings]] , final int [[inflates]] ) { if ( [[misgivings]] == null || [[inflates]] >= [[misgivings]] . length || readByte ( [[misgivings]] [ [[inflates]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[misgivings]] [ [[inflates]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 981 ---------------------------------------------
Set the search path . --> Create a FindFile --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL [[searchPath]] ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[lech]] ( final URL [[tail]] ) { File file = FileUtil . toContainerFile ( [[lech]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[lech]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 982 ---------------------------------------------
Sets the regex pattern . --> package - private for testing purposes --> Socre: 1.0

[[[[Adv]]]]: public FindFile include ( final String ... patterns ) { for ( String [[pattern]] : patterns ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile include ( final String ... patterns ) { for ( String [[unoriginal]] : patterns ) { rules . include ( [[unoriginal]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 983 ---------------------------------------------
Return the outStream . --> This method initializes the outStream --> Socre: 1.0

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[lego]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 984 ---------------------------------------------
Returns all files . --> Fails if there is at least one file in the tree --> Socre: 1.0

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > allFiles = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { allFiles . add ( [[file]] ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[swirls]] ( ) { List < File > allFiles = new ArrayList <> ( ) ; File [[raining]] ; while ( ( [[raining]] = nextFile ( ) ) != null ) { allFiles . add ( [[raining]] ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 985 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 868 / 85 / 32 / 985:  98%|█████████▊| 985/1000 [3:53:48<03:33, 14.24s/it][Succeeded / Failed / Skipped / Total] 868 / 85 / 32 / 985:  99%|█████████▊| 986/1000 [3:53:57<03:19, 14.24s/it][Succeeded / Failed / Skipped / Total] 869 / 85 / 32 / 986:  99%|█████████▊| 986/1000 [3:53:57<03:19, 14.24s/it][Succeeded / Failed / Skipped / Total] 869 / 85 / 32 / 986:  99%|█████████▊| 987/1000 [3:54:05<03:05, 14.23s/it][Succeeded / Failed / Skipped / Total] 869 / 86 / 32 / 987:  99%|█████████▊| 987/1000 [3:54:05<03:05, 14.23s/it][Succeeded / Failed / Skipped / Total] 869 / 86 / 32 / 987:  99%|█████████▉| 988/1000 [3:54:37<02:50, 14.25s/it][Succeeded / Failed / Skipped / Total] 870 / 86 / 32 / 988:  99%|█████████▉| 988/1000 [3:54:37<02:50, 14.25s/it][Succeeded / Failed / Skipped / Total] 870 / 86 / 32 / 988:  99%|█████████▉| 989/1000 [3:54:53<02:36, 14.25s/it][Succeeded / Failed / Skipped / Total] 871 / 86 / 32 / 989:  99%|█████████▉| 989/1000 [3:54:53<02:36, 14.25s/it][Succeeded / Failed / Skipped / Total] 871 / 86 / 32 / 989:  99%|█████████▉| 990/1000 [3:54:56<02:22, 14.24s/it][Succeeded / Failed / Skipped / Total] 872 / 86 / 32 / 990:  99%|█████████▉| 990/1000 [3:54:56<02:22, 14.24s/it][Succeeded / Failed / Skipped / Total] 872 / 86 / 32 / 990:  99%|█████████▉| 991/1000 [3:55:13<02:08, 14.24s/it]Get the writer . --> Return the buffered data --> Socre: 1.0

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[globetrotters]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 986 ---------------------------------------------
Resolves a WiringMode . --> diligent --> Socre: 1.0

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class [[type]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[diligent]] ( final Class [[quickest]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[quickest]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 987 ---------------------------------------------
Returns an iterator over the files . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[pretoria]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 988 ---------------------------------------------
Resolve bean name . --> Generates a note --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[note]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 989 ---------------------------------------------
Returns the class name . --> Generates a prompter string --> Socre: 1.0

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[stringBuilder]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int [[i]] = getDimensions ( ) ; [[i]] > 0 ; -- [[i]] ) { [[stringBuilder]] . append ( "[]" ) ; } return [[stringBuilder]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[snails]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[prompter]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int [[admirer]] = getDimensions ( ) ; [[admirer]] > 0 ; -- [[admirer]] ) { [[prompter]] . append ( "[]" ) ; } return [[prompter]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 990 ---------------------------------------------
Returns the method name for the given method . --> Create a human readable string --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : parameters ) { appendDescriptor ( [[parameter]] , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[samet]] ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > [[werewolf]] : parameters ) { appendDescriptor ( [[werewolf]] , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 991 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 873 / 86 / 32 / 991:  99%|█████████▉| 991/1000 [3:55:13<02:08, 14.24s/it][Succeeded / Failed / Skipped / Total] 873 / 86 / 32 / 991:  99%|█████████▉| 992/1000 [3:55:23<01:53, 14.24s/it][Succeeded / Failed / Skipped / Total] 874 / 86 / 32 / 992:  99%|█████████▉| 992/1000 [3:55:23<01:53, 14.24s/it][Succeeded / Failed / Skipped / Total] 874 / 86 / 32 / 992:  99%|█████████▉| 993/1000 [3:55:23<01:39, 14.22s/it][Succeeded / Failed / Skipped / Total] 874 / 87 / 32 / 993:  99%|█████████▉| 993/1000 [3:55:23<01:39, 14.22s/it][Succeeded / Failed / Skipped / Total] 874 / 87 / 32 / 993:  99%|█████████▉| 994/1000 [3:55:55<01:25, 14.24s/it][Succeeded / Failed / Skipped / Total] 874 / 88 / 32 / 994:  99%|█████████▉| 994/1000 [3:55:55<01:25, 14.24s/it][Succeeded / Failed / Skipped / Total] 874 / 88 / 32 / 994: 100%|█████████▉| 995/1000 [3:56:06<01:11, 14.24s/it][Succeeded / Failed / Skipped / Total] 875 / 88 / 32 / 995: 100%|█████████▉| 995/1000 [3:56:06<01:11, 14.24s/it][Succeeded / Failed / Skipped / Total] 875 / 88 / 32 / 995: 100%|█████████▉| 996/1000 [3:56:22<00:56, 14.24s/it][Succeeded / Failed / Skipped / Total] 876 / 88 / 32 / 996: 100%|█████████▉| 996/1000 [3:56:22<00:56, 14.24s/it][Succeeded / Failed / Skipped / Total] 876 / 88 / 32 / 996: 100%|█████████▉| 997/1000 [3:56:27<00:42, 14.23s/it][Succeeded / Failed / Skipped / Total] 877 / 88 / 32 / 997: 100%|█████████▉| 997/1000 [3:56:27<00:42, 14.23s/it][Succeeded / Failed / Skipped / Total] 877 / 88 / 32 / 997: 100%|█████████▉| 998/1000 [3:57:25<00:28, 14.27s/it]Commit or rollback . --> dentBACK --> Socre: 1.0

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[dentists]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 992 ---------------------------------------------
Append the descriptor . --> Add a anomaly --> Socre: 1.0

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[anomaly]] ( final StringBuilder [[gibbon]] ) { if ( sort == OBJECT ) { [[gibbon]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[gibbon]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[gibbon]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 993 ---------------------------------------------
Creates the request map . --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[dissolve]] ( final HttpServletRequest [[bianchi]] ) { Map < String , TransientBeanData > [[obscures]] = new HashMap <> ( ) ; [[bianchi]] . setAttribute ( ATTR_NAME , [[obscures]] ) ; return [[obscures]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 994 ---------------------------------------------
Returns the size of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[mordechai]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 995 ---------------------------------------------
Get the size of a method . --> returns 1 if not present --> Socre: 1.0

[[[[Adv]]]]: public static int getArgumentsAndReturnSizes ( final String [[methodDescriptor]] ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int getArgumentsAndReturnSizes ( final String [[rendez]] ) { int [[cl]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 996 ---------------------------------------------
Sets the rollback only . --> zamir operation --> Socre: 1.0

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[zamir]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 997 ---------------------------------------------
Create a method descriptor . --> Generate a getMethodDescriptor for a type --> Socre: 1.0

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type [[returnType]] , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type [[argumentType]] : argumentTypes ) { [[argumentType]] . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; [[returnType]] . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type [[czechoslovak]] , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type [[paganini]] : argumentTypes ) { [[paganini]] . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; [[czechoslovak]] . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 998 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 878 / 88 / 32 / 998: 100%|█████████▉| 998/1000 [3:57:25<00:28, 14.27s/it][Succeeded / Failed / Skipped / Total] 878 / 88 / 32 / 998: 100%|█████████▉| 999/1000 [3:57:45<00:14, 14.28s/it][Succeeded / Failed / Skipped / Total] 878 / 89 / 32 / 999: 100%|█████████▉| 999/1000 [3:57:45<00:14, 14.28s/it][Succeeded / Failed / Skipped / Total] 878 / 89 / 32 / 999: 100%|██████████| 1000/1000 [4:00:02<00:00, 14.40s/it][Succeeded / Failed / Skipped / Total] 878 / 90 / 32 / 1000: 100%|██████████| 1000/1000 [4:00:02<00:00, 14.40s/it]Attack(
  (search_method): RandomSearch(
    (trials):  10
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapRandom(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 878 / 90 / 32 / 1000: 100%|██████████| 1000/1000 [4:00:06<00:00, 14.41s/it]Rollback all resources . --> dazzling --> Socre: 1.0

[[[[Adv]]]]: protected void [[rollbackAllResources]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception [[lastException]] = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { [[lastException]] = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( [[lastException]] != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , [[lastException]] ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void [[dazzling]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception [[egypt]] = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { [[egypt]] = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( [[egypt]] != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , [[egypt]] ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 999 ---------------------------------------------
Returns a descriptor for the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > constructor ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > constructor ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 1000 ---------------------------------------------
Requests the given resource . --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E [[resource]] = lookupResource ( resourceType ) ; if ( [[resource]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[resource]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[resource]] ) ) ; } return [[resource]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E [[cupping]] = lookupResource ( resourceType ) ; if ( [[cupping]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[cupping]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[cupping]] ) ) ; } return [[cupping]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

+-------------------------------+-------+
| Attack Results                |       |
+-------------------------------+-------+
| Number of successful attacks: | 878   |
| Number of failed attacks:     | 90    |
| Number of skipped attacks:    | 32    |
| Original accuracy:            | 96.8% |
| Accuracy under attack:        | 9.0%  |
| Attack success rate:          | 90.7% |
| Average perturbed word %:     | 47.2% |
| Average num. words per input: | 3.91  |
| Avg num queries:              | 526.3 |
| Original BLEU-4:              | 16.63 |
| Perturbed BLEU-4:             | 0.96  |
+-------------------------------+-------+

/data/zzr/.pyenv/versions/3.8-dev/lib/python3.8/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 8 leaked semaphore objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
